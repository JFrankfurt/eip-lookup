{
  "EIP-1": "<article><h1>EIP-1: EIP Purpose and Guidelines</h1>\n\n<p>EIP-1, authored by Martin Becze and Hudson Jameson in 2015, is a foundational meta-proposal that establishes the framework for Ethereum Improvement Proposals (EIPs). This living document outlines the purpose, rationale, and types of EIPs, serving as a guide for developers and community members to propose and discuss changes to the Ethereum protocol.</p>\n\n<p>The proposal defines three types of EIPs: Standards Track, Meta, and Informational. Standards Track EIPs are further categorized into Core, Networking, Interface, and ERC (Ethereum Request for Comments) subtypes. This classification system has been instrumental in organizing and managing the evolution of Ethereum, from core protocol changes to token standards like ERC-20 and ERC-721.</p>\n\n<p>EIP-1 remains a crucial document in the Ethereum ecosystem, continuously updated to reflect best practices in proposal submission and review processes. Its ongoing relevance underscores the importance of structured, community-driven development in blockchain technology. The proposal's living status ensures that the EIP process can adapt to the changing needs of the Ethereum community while maintaining a consistent framework for proposing and implementing improvements.</p></article>",
  "EIP-100": "<article><h1>EIP-100: Adjusting Difficulty to Target Mean Block Time Including Uncles</h1>\n\n<p>EIP-100, proposed by Vitalik Buterin in April 2016, aimed to modify Ethereum's difficulty adjustment algorithm to account for uncle blocks. The proposal's primary goal was to ensure a more predictable issuance rate that couldn't be manipulated by altering the uncle rate.</p>\n\n<p>The proposal introduced a slight change to the difficulty calculation formula, specifically adjusting the <code>adj_factor</code> calculation to consider the presence of uncle blocks. This modification was designed to target a constant average rate of block production, including uncles, thus maintaining a stable and predictable issuance rate.</p>\n\n<p>EIP-100 was implemented as part of the Byzantium hard fork in October 2017, marking its transition to \"Final\" status. The change has since been an integral part of Ethereum's consensus mechanism, contributing to the network's stability and predictability in terms of block time and issuance rate.</p></article>",
  "EIP-101": "<article><h1>EIP-101: Serenity Currency and Crypto Abstraction</h1>\n\n<p>EIP-101, proposed by Vitalik Buterin in November 2015, aimed to fundamentally reshape Ethereum's account and transaction structure. The proposal sought to abstract away Ether as the native currency and simplify account management. It suggested removing Ether balances from accounts, instead storing them in a premine contract at address 0. This change would have allowed for greater flexibility in implementing different currencies and cryptographic schemes within Ethereum.</p>\n\n<p>The proposal introduced significant changes to transaction structure, removing the nonce and signature fields, and adding a \"code\" field. This would have allowed for more diverse transaction types and signature schemes. Additionally, it proposed changes to opcodes, including the removal of <code>msg.value</code> and the addition of <code>tx.gas</code>. These modifications were intended to support Ethereum's transition to the Serenity (Ethereum 2.0) phase.</p>\n\n<p>Despite its ambitious goals, EIP-101 never gained widespread adoption and is currently marked as \"Stagnant\" in the EIP repository. The ideas presented in this proposal were largely superseded by other improvements and the evolving Ethereum 2.0 roadmap. While some concepts from EIP-101 have influenced later developments,",
  "EIP-1010": "<article><h1>EIP-1010: A Brief Technical Summary</h1>\n\n<p>EIP-1010, titled \"Uniformity Between 0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B and 0x15E55EF43efA8348dDaeAa455F16C43B64917e3c\", was proposed by Anderson Wesley in April 2018. This proposal aimed to address a perceived imbalance in Ether distribution between two specific Ethereum addresses by suggesting a transfer of 100,000 ETH from the wealthier address to the less wealthy one.</p>\n\n<p>The proposal was likely intended as a satirical commentary on wealth distribution in cryptocurrencies, rather than a serious suggestion for implementation. It highlights the immutability of blockchain transactions and the impossibility of forcibly redistributing funds without consensus. The EIP drew attention to discussions around centralization of wealth in crypto ecosystems.</p>\n\n<p>Currently, EIP-1010 is marked as \"Stagnant\", meaning it has not seen recent activity or updates. It was never seriously considered for implementation, as it goes against core principles of blockchain technology such as immutability and decentralized consensus. The proposal serves more as an interesting historical artifact in Ethereum's development process, demonstrating the open nature of the EIP",
  "EIP-1011": "<article><h1>EIP-1011: Hybrid Casper FFG</h1>\n\n<p>EIP-1011, titled \"Hybrid Casper FFG,\" was a significant proposal in Ethereum's transition from Proof of Work (PoW) to Proof of Stake (PoS). Authored by Danny Ryan and Chih-Cheng Liang, this proposal aimed to introduce a hybrid PoW/PoS consensus model as an intermediate step towards full PoS. The core idea was to implement Casper the Friendly Finality Gadget (FFG) as a smart contract on top of the existing PoW system.</p>\n\n<p>The proposal introduced key concepts like epochs, finality, and validator deposits. It aimed to enhance network security by shifting focus from PoW to PoS, while reducing PoW block rewards. This hybrid approach was designed to allow for a smoother transition and testing of PoS mechanics without immediately abandoning the established PoW system.</p>\n\n<p>Despite its initial promise, EIP-1011 is currently marked as \"Stagnant.\" The Ethereum community has since moved towards a different approach for the PoS transition, focusing on the development of the Beacon Chain and the eventual \"Merge.\" While EIP-1011 is no longer actively pursued, it played a crucial role in shaping",
  "EIP-1013": "<article><h1>EIP-1013: Constantinople Hardfork</h1>\n\n<p>EIP-1013, titled \"Hardfork Meta: Constantinople,\" was a critical Ethereum Improvement Proposal that outlined the changes for the Constantinople hard fork. This proposal was authored by Nick Savers and reached Final status, indicating its successful implementation. Constantinople was a significant upgrade to the Ethereum network, introducing several improvements to the Ethereum Virtual Machine (EVM) and adjusting the blockchain's economics.</p>\n\n<p>The Constantinople hard fork included five key EIPs: EIP-145 (bitwise shifting instructions), EIP-1014 (Skinny CREATE2), EIP-1052 (EXTCODEHASH opcode), EIP-1234 (difficulty bomb delay and block reward adjustment), and EIP-1283 (net gas metering for SSTORE). These changes aimed to optimize gas costs, improve smart contract functionality, and adjust the network's economics. The upgrade was activated at specific block numbers on various Ethereum networks, including Mainnet, Ropsten, Kovan, and Rinkeby.</p>\n\n<p>While Constantinople was a crucial upgrade, it faced some challenges during its implementation. Initially scheduled for January 2019, it was postponed due to a critical vulnerability discovered in EIP-1283. This led to a two-part activation, with Constantinople an",
  "EIP-1014": "<article><h1>EIP-1014: Skinny CREATE2</h1>\n\n<p>EIP-1014, titled \"Skinny CREATE2\", was proposed by Vitalik Buterin in April 2018. This proposal introduced a new opcode CREATE2 (0xf5) to allow for deterministic contract creation addresses. The key innovation was enabling contract deployment to a predetermined address, regardless of the deployer's nonce.</p>\n\n<p>The primary motivation behind CREATE2 was to support state channel use cases involving counterfactual interactions with contracts not yet deployed on-chain. This opcode allows parties to rely on addresses that will eventually contain specific code, even if those contracts don't exist yet. CREATE2 quickly gained traction in the Ethereum community, particularly among developers working on layer-2 scaling solutions.</p>\n\n<p>EIP-1014 reached \"Final\" status and was implemented in the Constantinople hard fork in February 2019. Since then, CREATE2 has become an essential tool for various Ethereum projects, especially those focused on account abstraction and meta-transactions. While some security considerations were raised initially, the benefits of CREATE2 have generally outweighed the concerns, cementing its place as a crucial part of the Ethereum toolkit.</p>\n</article>",
  "EIP-1015": "<article><h1>EIP-1015: Configurable On Chain Issuance</h1>\n\n<p>EIP-1015, proposed by Alex Van de Sande in April 2018, aimed to make Ethereum's block rewards configurable on-chain rather than hardcoded. The proposal suggested directing block rewards to an address determined by a smart contract, with restrictions to prevent sudden increases in issuance. The goal was to provide a mechanism for adjusting issuance without contentious hard forks.</p>\n\n<p>The EIP was motivated by the idea that many controversial issues in Ethereum (like Proof of Stake transition and miner rewards) ultimately came down to resource allocation. By making issuance configurable, the community could potentially resolve these conflicts through on-chain governance rather than contentious forks.</p>\n\n<p>However, EIP-1015 did not gain significant traction and is currently in a \"Stagnant\" status. The Ethereum community has generally been cautious about implementing on-chain governance mechanisms for core protocol parameters. Instead, subsequent proposals and implementations have focused on more conservative approaches to managing issuance, such as EIP-1559's fee burning mechanism introduced in 2021.</p></article>",
  "EIP-1046": "<article><h1>EIP-1046: ERC-20 Metadata Extension</h1>\n\n<p>EIP-1046, proposed by Tommy Nicholas, Matt Russo, and John Zettler in May 2018, aimed to standardize metadata for ERC-20 tokens. The proposal sought to add optional metadata fields such as name, symbol, and decimals directly to the token contract, enhancing interoperability and user experience across various platforms and wallets.</p>\n\n<p>While EIP-1046 gained some traction in the Ethereum community, it was eventually superseded by EIP-1523, which offered a more comprehensive approach to token metadata. EIP-1523 introduced a separate metadata registry contract, allowing for more flexible and extensible metadata management without modifying existing ERC-20 contracts.</p>\n\n<p>Currently, EIP-1046 has been moved to the Ethereum ERCs repository, indicating that it is no longer actively pursued as an Ethereum Improvement Proposal. Instead, developers and projects have largely adopted other metadata standards or implemented custom solutions for token information retrieval.</p>\n</article>",
  "EIP-1051": "<article><h1>EIP-1051: Overflow Checking for the EVM</h1>\n\n<p>EIP-1051, proposed by Nick Johnson in May 2018, aimed to add overflow checking capabilities to the Ethereum Virtual Machine (EVM). The proposal introduced two new flags to the EVM state - overflow (ovf) and signed overflow (sovf) - as well as two new opcodes to check and clear these flags. The motivation was to improve contract security by providing built-in overflow detection, rather than requiring manual checks after each arithmetic operation.</p>\n\n<p>The proposal specified when the overflow flags would be set for ADD, SUB, and MUL operations. It also introduced OVFL and CLROVFL opcodes to check and clear the flags respectively. This would allow more efficient overflow detection by checking periodically rather than after every operation. However, despite initial discussion, the proposal has remained in \"Stagnant\" status without further development or implementation.</p>\n\n<p>While overflow detection remains an important consideration for smart contract security, EIP-1051 has not seen widespread adoption. More recent approaches like the Solidity SafeMath library provide overflow protection at the language level. Given its stagnant status and lack of recent activity, EIP-1051 is unlikely to be implemented as originally proposed, though the concepts may inform future EVM improvements around arithmetic safety.</p></article>",
  "EIP-1052": "<article><h1>EIP-1052: EXTCODEHASH opcode</h1>\n\n<p>EIP-1052, proposed by Nick Johnson and Paweł Bylica in May 2018, introduced the EXTCODEHASH opcode to Ethereum. This opcode allows contracts to efficiently retrieve the keccak256 hash of another contract's bytecode, addressing the need for bytecode verification without the high gas costs of EXTCODECOPY.</p>\n\n<p>The motivation behind EXTCODEHASH was to enable more efficient contract bytecode checks, which are common in security-focused patterns like proxy contracts or whitelisting. By providing just the hash instead of full bytecode, gas costs are significantly reduced for large contracts. The proposal quickly gained traction and was included in the Constantinople hard fork in February 2019.</p>\n\n<p>EXTCODEHASH remains an important opcode in Ethereum's instruction set, widely used in smart contract development for bytecode verification and related security checks. Its efficient implementation has made it a standard tool for contract developers looking to perform bytecode-related operations without incurring excessive gas costs. The proposal's rapid adoption and continued relevance demonstrate its success in addressing a key need in Ethereum's smart contract ecosystem.</p>\n</article>",
  "EIP-1056": "<article><h1>EIP-1056: Lightweight Identity</h1>\n\n<p>EIP-1056, also known as the Lightweight Identity proposal, was introduced to address the need for a simple and efficient identity management system on Ethereum. Developed by Pelle Braendgaard, Joel Torstensson, and Markus Sabadello, this proposal aimed to create a minimalistic identity solution that could be easily implemented and integrated into various applications.</p>\n\n<p>The core idea behind EIP-1056 was to use Ethereum addresses as identifiers and provide a way to manage these identities through a simple smart contract. This approach allowed for key management, delegation, and attribute management without the need for complex on-chain data structures. The proposal gained traction in the Ethereum community due to its simplicity and potential for wide adoption in decentralized applications (dApps) requiring identity verification.</p>\n\n<p>Currently, EIP-1056 has been moved to the Ethereum Request for Comments (ERC) repository, indicating its progression towards becoming a standard. While it has not been fully implemented as a core Ethereum feature, the concepts introduced in EIP-1056 have influenced subsequent identity-related proposals and continue to be relevant in discussions about decentralized identity solutions on Ethereum.</p></article>",
  "EIP-1057": "<article><h1>EIP-1057: ProgPoW</h1>\n\n<p>EIP-1057 proposed ProgPoW (Programmatic Proof-of-Work), a new mining algorithm designed to be more ASIC-resistant than Ethash. It was authored in 2018 by a group including Greg Colvin and Andrea Lanfranchi, with the goal of utilizing more parts of GPUs to close the efficiency gap with specialized ASICs. The motivation was to maintain Ethereum's vision of decentralized mining on commodity hardware.</p>\n\n<p>ProgPoW generated significant controversy and debate within the Ethereum community. Proponents argued it would help prevent mining centralization, while critics raised concerns about the development process and potential for GPU manufacturer influence. Despite going through multiple audits and iterations, ProgPoW was never implemented on Ethereum mainnet due to lack of consensus.</p>\n\n<p>The proposal is currently listed as \"Stagnant\" in the EIPs repository. With Ethereum's transition to proof-of-stake via the Merge in 2022, ProgPoW and other PoW algorithm proposals have been effectively superseded. However, the debates around ProgPoW highlighted important governance challenges within the Ethereum ecosystem.</p>\n</article>",
  "EIP-1062": "<article><h1>EIP-1062: ERC-20 Inflation</h1>\n\n<p>EIP-1062, proposed as an ERC (Ethereum Request for Comment), aimed to introduce a standardized method for implementing inflation in ERC-20 tokens. The proposal was originally authored by Julio Faura and Patrick Gallagher in May 2018. Its primary goal was to establish a consistent approach for token contracts to include built-in inflation mechanisms, allowing for a more predictable and controlled expansion of token supply over time.</p>\n\n<p>The proposal suggested adding new functions to the ERC-20 standard, such as <code>inflationRate()</code> and <code>inflationPeriod()</code>, to define and manage the inflation parameters. This would enable token contracts to automatically mint new tokens at specified intervals, distributing them according to predefined rules. While the idea gained some attention in the Ethereum community, it didn't see widespread adoption or implementation in major projects.</p>\n\n<p>Currently, EIP-1062 has been moved from its original location to the Ethereum ERCs repository. This relocation suggests that while the proposal may still be of interest, it is not actively being pursued as a core Ethereum Improvement Proposal. Given the evolving landscape of tokenomics and the emergence of more complex DeFi protocols, the specific approach outlined in EIP-1062",
  "EIP-1066": "<article><h1>EIP-1066: Status Codes</h1>\n\n<p>EIP-1066, proposed by Brooklyn Zelenka, Tom Carchrae, and Hartej Sawhney in May 2018, aimed to standardize status codes for Ethereum smart contracts. The proposal sought to create a common language for communicating function outcomes, similar to HTTP status codes, to improve interoperability and readability in smart contract interactions.</p>\n\n<p>The proposal gained traction within the Ethereum community due to its potential to streamline error handling and enhance contract-to-contract communication. It suggested a system of 4-digit status codes, categorized into ranges for different types of outcomes (e.g., 10xx for generic success, 20xx for permission and control flow). However, despite initial interest, EIP-1066 did not achieve widespread adoption in its original form.</p>\n\n<p>Currently, EIP-1066 has been moved to the Ethereum ERCs repository, indicating a shift in its categorization from a core protocol improvement to a more application-specific standard. While the concept of standardized status codes remains relevant, the Ethereum ecosystem has evolved to use alternative methods for error handling, such as custom error types introduced in Solidity 0.8.4. As such, while EIP-1066 provided valuable insights, it has been largely superseded by other practices in",
  "EIP-107": "<article><h1>EIP-107: Safe \"eth_sendTransaction\" Authorization via HTML Popup</h1>\n\n<p>EIP-107, proposed by Ronan Sandford in June 2016, aimed to improve the security and user experience of interacting with decentralized applications (dApps) in web browsers. The proposal suggested a method for Ethereum nodes to authorize transactions through an HTML popup, eliminating the need for Cross-Origin Resource Sharing (CORS) and enhancing security.</p>\n\n<p>The core idea was to redirect read-only RPC calls to an invisible iframe from the node's domain, while presenting users with an HTML popup for transaction confirmations. This approach would allow dApps to connect to the node's RPC API without being granted broad privileges, enabling safer interactions with unlocked accounts. The proposal also included provisions for users to enter passwords to unlock accounts for specific transactions if needed.</p>\n\n<p>Despite its potential benefits, EIP-107 has not been widely adopted or implemented. Its current status is \"Stagnant,\" indicating that development and discussion have slowed or stopped. While the proposal addressed important security concerns, the Ethereum ecosystem has since evolved with alternative solutions like MetaMask and Web3 providers becoming more prevalent for managing web-based interactions with Ethereum nodes.</p></article>",
  "EIP-1077": "<article><h1>EIP-1077: Executable Signed Messages</h1>\n\n<p>EIP-1077, also known as \"Executable Signed Messages,\" was proposed by Alex Van de Sande and Francisco Giordano in June 2018. The proposal aimed to standardize a way for users to sign messages that could be executed on their behalf, essentially creating a system for meta-transactions in Ethereum. This would allow users to interact with smart contracts without directly holding ETH for gas fees, potentially improving user experience and onboarding.</p>\n\n<p>The proposal gained significant attention in the Ethereum community, particularly among those working on identity and account abstraction solutions. It was seen as a stepping stone towards more user-friendly blockchain interactions. However, as the Ethereum ecosystem evolved, other proposals and implementations began to address similar concerns, sometimes in more comprehensive ways.</p>\n\n<p>Currently, EIP-1077 has been moved to the Ethereum ERCs repository, indicating that it's no longer being actively pursued as an Ethereum Improvement Proposal. While its core ideas remain relevant, newer proposals like EIP-4337 (Account Abstraction) have gained more traction in addressing similar issues in a more holistic manner. As such, while EIP-1077 provided valuable insights, it has been largely superseded by more recent developments in the Ethereum ecosystem.</p>\n</article>",
  "EIP-1078": "<article><h1>EIP-1078: Universal Login / Counterfactual Wallet Creation</h1>\n\n<p>EIP-1078, proposed by Alex Van de Sande, aimed to create a standardized method for universal login and counterfactual wallet creation in Ethereum. The proposal sought to simplify the onboarding process for new users by allowing them to interact with dApps using familiar email/password combinations, while behind the scenes creating Ethereum accounts without immediate on-chain transactions.</p>\n\n<p>The concept gained traction in the Ethereum community as a potential solution to improve user experience and reduce barriers to entry. However, the proposal was eventually moved to the Ethereum Request for Comments (ERC) repository, indicating a shift in its status and development path. The current status of ERC-1078 is \"Moved,\" and it can now be found in the ERCs repository.</p>\n\n<p>While the original EIP-1078 is no longer active in its initial form, its ideas have influenced subsequent developments in the space of account abstraction and user onboarding. Similar concepts have been explored in other proposals and implementations, such as EIP-4337 (Account Abstraction) and various smart contract wallet solutions. The core idea of simplifying user onboarding remains relevant in the ongoing efforts to improve Ethereum's accessibility.</p>\n</article>",
  "EIP-1080": "<article><h1>EIP-1080: Recoverable Token</h1>\n\n<p>EIP-1080, also known as the Recoverable Token proposal, was an Ethereum Improvement Proposal aimed at addressing the issue of lost or inaccessible tokens. It was originally authored by Len Tan in May 2018. The proposal sought to introduce a mechanism for token recovery in cases where users lost access to their private keys or sent tokens to incorrect addresses.</p>\n\n<p>The core idea of EIP-1080 was to implement a time-locked recovery process for ERC-20 tokens. This would allow token issuers or designated recovery agents to reclaim tokens after a specified period, provided certain conditions were met. While the proposal gained some attention for its potential to mitigate the financial impact of user errors, it also raised concerns about centralization and potential abuse.</p>\n\n<p>As of now, EIP-1080 has been moved to the Ethereum ERCs repository, indicating a shift in its status. While the concept of recoverable tokens remains relevant, the cryptocurrency community has generally favored solutions that maintain decentralization and user sovereignty. Alternative approaches, such as social recovery wallets and improved user interfaces, have gained more traction in addressing the issue of lost crypto assets.</p></article>",
  "EIP-1081": "<article><h1>EIP-1081: Standard Bounties</h1>\n\n<p>EIP-1081, known as \"Standard Bounties,\" was proposed to create a standardized smart contract interface for managing bounties on the Ethereum blockchain. The proposal aimed to establish a common framework for creating, funding, and fulfilling bounties, which could be used for various purposes such as bug bounties, content creation, or task completion. This ERC was designed to improve interoperability between different bounty platforms and make it easier for developers to integrate bounty functionality into their applications.</p>\n\n<p>The proposal was authored by Mark Beylin, Kevin Owocki, and Matt Lockyer, who were involved in the Bounties Network project. It was first introduced in May 2018 and gained traction within the Ethereum community due to its potential to streamline the bounty process across different platforms. The ERC aimed to address issues such as inconsistent implementations, lack of standardization, and difficulty in tracking bounty status across multiple systems.</p>\n\n<p>As of now, EIP-1081 has been moved to the Ethereum ERCs repository, indicating that it is no longer actively pursued as an Ethereum Improvement Proposal. The current status suggests that while the idea of standardizing bounties remains relevant, the specific implementation proposed in EIP-1081 may have been superseded by other approaches or integrated into",
  "EIP-1087": "<article><h1>EIP-1087: Net Gas Metering for SSTORE Operations</h1>\n\n<p>EIP-1087, proposed by Nick Johnson in May 2018, aimed to optimize gas costs for Ethereum's SSTORE operations. The proposal sought to reduce excessive gas fees for multiple storage updates within a single transaction, addressing inefficiencies in the existing gas model.</p>\n\n<p>The motivation behind EIP-1087 was to make storage operations more cost-effective for smart contracts that perform multiple updates to the same storage slot. It proposed a \"net metering\" approach, where gas costs would be calculated based on the net effect of all SSTORE operations in a transaction, rather than charging for each operation individually.</p>\n\n<p>While EIP-1087 gained attention for its potential to improve gas efficiency, it was ultimately superseded by EIP-2200, which implemented a more comprehensive solution for SSTORE gas metering. As of now, EIP-1087 is in \"Stagnant\" status, indicating that it is no longer actively pursued. The concepts introduced in this proposal, however, contributed to the ongoing discussion about optimizing gas costs in Ethereum.</p></article>",
  "EIP-1102": "<article><h1>EIP-1102: Opt-in Account Exposure</h1>\n\n<p>EIP-1102, proposed by Paul Bouchon in May 2018, addresses a critical security concern in Ethereum-enabled web environments. Prior to this proposal, Ethereum providers would automatically inject account information into web pages, potentially exposing users to malicious websites that could access sensitive data or initiate unauthorized transactions.</p>\n\n<p>The core of EIP-1102 is the introduction of a new RPC method called <code>eth_requestAccounts</code>. This method allows dapps to explicitly request access to user accounts, giving users the opportunity to approve or deny access. This opt-in approach significantly enhances user privacy and security by preventing automatic exposure of account information.</p>\n\n<p>While EIP-1102 made important strides in improving user security, its status is currently \"Stagnant\". This suggests that while the proposal addressed a critical issue, it may have been superseded or incorporated into broader standards. Modern Ethereum wallets and browsers have largely adopted similar opt-in approaches, reflecting the importance of user consent in account exposure. Developers should consult current best practices and more recent EIPs when implementing account access in Ethereum dapps.</p></article>",
  "EIP-1108": "<article><h1>EIP-1108: Reduce alt_bn128 precompile gas costs</h1>\n\n<p>EIP-1108 proposed reducing the gas costs for elliptic curve arithmetic precompiles on the alt_bn128 curve. It was authored by Antonio Salazar Cardozo and Zachary Williamson in May 2018. The motivation was that performance improvements in Ethereum clients had made the existing gas costs too high relative to the actual computational cost.</p>\n\n<p>Specifically, the Go Ethereum client had switched to using Cloudflare's bn256 library, which provided significant speedups for the ECADD, ECMUL and pairing check precompiles. The Parity client had also optimized its field operations and pairing algorithm. EIP-1108 aimed to reflect these efficiency gains by lowering the associated gas costs.</p>\n\n<p>This EIP was accepted and implemented in the Istanbul hard fork in December 2019. It reduced gas costs substantially - for example, ECADD went from 500 to 150 gas. This change benefited privacy and scaling solutions on Ethereum that make heavy use of elliptic curve operations. The reduced costs have enabled more efficient implementations of technologies like zk-SNARKs on Ethereum.</p>\n</article>",
  "EIP-1109": "<article><h1>EIP-1109: PRECOMPILEDCALL opcode</h1>\n\n<p>EIP-1109, proposed by Jordi Baylina in May 2018, aimed to introduce a new opcode called PRECOMPILEDCALL for more efficient interaction with precompiled contracts on Ethereum. The proposal sought to eliminate the unnecessary gas costs associated with using the standard CALL opcode when invoking precompiled contracts, which have predefined execution costs.</p>\n\n<p>The motivation behind this EIP was to enable the creation of precompiled contracts with effective costs lower than 700 gas, which was impossible due to the CALL opcode's inherent gas consumption. This limitation affected operations like SHA256 and ECADD, where the CALL opcode's cost significantly outweighed the actual computation cost of the precompiled contract.</p>\n\n<p>Despite its potential benefits, EIP-1109 has not been implemented and is currently in a \"Stagnant\" status. The Ethereum community has since explored alternative solutions to address gas efficiency, such as EIP-1108 which proposed reducing costs for specific precompiled contracts. As of now, no direct replacement or implementation of EIP-1109 has been adopted in the Ethereum protocol.</p>\n</article>",
  "EIP-1123": "<article><h1>EIP-1123: Revised Ethereum Light Client Protocol</h1>\n\n<p>EIP-1123, proposed by Zsolt Felföldi in 2018, aimed to improve Ethereum's light client protocol. Light clients are crucial for enabling resource-constrained devices to interact with the Ethereum network without maintaining a full node. This proposal sought to enhance efficiency and security in light client synchronization.</p>\n\n<p>The proposal introduced modifications to the existing light client protocol, focusing on optimizing block header verification and reducing bandwidth usage. It proposed changes to the way light clients request and verify block headers, aiming to make the process more robust against potential attacks while maintaining performance.</p>\n\n<p>As of now, EIP-1123 has been moved to the Ethereum ERCs repository, indicating ongoing development and discussion within the Ethereum community. While not fully implemented in its original form, aspects of this proposal have likely influenced subsequent improvements to Ethereum's light client capabilities, contributing to the broader goal of making Ethereum more accessible on resource-limited devices.</p>\n</article>",
  "EIP-1129": "<article><h1>EIP-1129: Standardized dApp UI Labels</h1>\n\n<p>EIP-1129 was proposed to address the need for standardized user interface (UI) labels in decentralized applications (dApps) on the Ethereum network. The proposal aimed to improve user experience and reduce confusion by establishing a common vocabulary for key elements in dApp interfaces. It was originally authored by Piper Merriam and moved to the Ethereum Request for Comments (ERC) repository for further discussion and development.</p>\n\n<p>The proposal suggested a set of standardized labels for common actions and elements in dApps, such as \"Send\", \"Receive\", \"Sign\", and \"Connect Wallet\". By adopting these labels, developers could create more consistent and intuitive interfaces across different dApps, potentially lowering the barrier to entry for new users in the Ethereum ecosystem. However, the proposal did not gain significant traction or widespread adoption in its original form.</p>\n\n<p>Currently, EIP-1129 has been moved to the Ethereum ERCs repository, indicating that it is no longer actively considered as an Ethereum Improvement Proposal. While the idea of standardized UI labels remains relevant, the crypto community has largely addressed this issue through organic adoption of common practices and design patterns, rather than through formal standardization. As such, while the spirit of EIP-1129 lives on in",
  "EIP-1132": "<article><h1>EIP-1132: Extending ERC-20 with Token Locking Capability</h1>\n\n<p>EIP-1132, proposed by Nitika Goel in June 2018, aimed to extend the functionality of the popular ERC-20 token standard by introducing a token locking mechanism. This proposal addressed the need for time-based restrictions on token transfers, which is particularly useful for vesting schedules, gaming rewards, and token release strategies in Initial Coin Offerings (ICOs).</p>\n\n<p>The proposal defined four key functions: <code>lock</code>, <code>unlock</code>, <code>transferWithLock</code>, and <code>lockOf</code>. These functions allowed token holders to lock a specified amount of tokens for a defined period, unlock tokens after the lock period, transfer tokens with a lock, and check the number of tokens locked for an address. While EIP-1132 gained some attention in the Ethereum community, it did not achieve widespread adoption or implementation.</p>\n\n<p>Currently, EIP-1132 has been moved to the Ethereum ERCs repository, indicating that it is no longer actively pursued as an Ethereum Improvement Proposal. Instead, other token standards like ERC-1155 and ERC-721 have gained more traction for implementing advanced token functionalities. While the concept of token locking",
  "EIP-1153": "<article><h1>EIP-1153: Transient Storage Opcodes</h1>\n\n<p>EIP-1153 proposes adding two new opcodes, TLOAD and TSTORE, to enable \"transient storage\" in Ethereum. This transient storage behaves similarly to regular storage, but is discarded after each transaction. The proposal was authored by Alexey Akhunov and Moody Salem in 2018.</p>\n\n<p>The key motivation was to provide a more efficient way for contracts to communicate across nested execution frames within a single transaction. Transient storage avoids the gas costs and disk I/O associated with regular storage, making it cheaper for temporary data that only needs to persist for the duration of a transaction.</p>\n\n<p>EIP-1153 reached Final status in 2022 after extensive discussion and refinement. It builds on concepts from earlier proposals like EIP-1087 and EIP-1153. While not yet implemented in major Ethereum clients as of 2023, transient storage remains an active area of interest for optimizing contract execution efficiency.</p>\n</article>",
  "EIP-1154": "<article><h1>EIP-1154: Oracle Interface</h1>\n\n<p>EIP-1154, also known as the Oracle Interface, was a proposal aimed at standardizing the way smart contracts interact with oracles on the Ethereum network. Oracles are crucial components in blockchain ecosystems, providing external data to smart contracts. This proposal was initially created to address the lack of a unified interface for oracles, which made it challenging for developers to switch between different oracle providers or implement multi-oracle solutions.</p>\n\n<p>The proposal was authored by Alan Lu and introduced in June 2018. It suggested a standard set of functions that oracle contracts should implement, including methods for querying data and verifying the authenticity of responses. While EIP-1154 gained some attention in the Ethereum community, it did not achieve widespread adoption or implementation.</p>\n\n<p>As of now, EIP-1154 has been moved to the Ethereum ERCs repository, indicating that it is no longer considered an active Ethereum Improvement Proposal. The current status suggests that while the idea of standardizing oracle interfaces remains relevant, this particular proposal may have been superseded by other solutions or approaches in the rapidly evolving DeFi and oracle landscape.</p>\n</article>",
  "EIP-1155": "<article><h1>EIP-1155: Multi Token Standard</h1>\n\n<p>EIP-1155, also known as the Multi Token Standard, was proposed by Witek Radomski, Andrew Cooke, Philippe Castonguay, James Therien, Eric Binet, and Ronan Sandford in June 2018. This proposal aimed to create a new standard for smart contracts that could manage multiple token types within a single contract, addressing inefficiencies in earlier token standards like ERC-20 and ERC-721.</p>\n\n<p>The EIP-1155 standard introduced several key improvements, including reduced gas costs for token transfers, the ability to transfer multiple token types in a single transaction, and support for both fungible and non-fungible tokens within the same contract. This versatility made it particularly attractive for gaming and digital collectible applications. The proposal gained significant traction in the Ethereum community and was eventually adopted by major projects, including Enjin and The Sandbox.</p>\n\n<p>Currently, EIP-1155 has been moved to the Ethereum Request for Comments (ERC) repository, indicating its acceptance and implementation as a standard. Its status as \"Moved\" in the EIP repository reflects this transition. The Multi Token Standard continues to be widely used and has become an essential part of the Ethereum ecosystem, particularly in the realm of NFTs and blockchain gaming",
  "EIP-1167": "<article><h1>EIP-1167: Minimal Proxy Contract</h1>\n\n<p>EIP-1167, proposed by Peter Murray, Nate Welch, and Joe Messerman in 2018, introduced the concept of a minimal proxy contract. This proposal aimed to significantly reduce gas costs for deploying multiple instances of the same contract, addressing a common issue in Ethereum development where deploying many similar contracts was prohibitively expensive.</p>\n\n<p>The EIP gained traction quickly due to its efficiency and simplicity. It works by creating a minimal bytecode contract that delegates all calls to a known, fixed address. This approach allows developers to deploy many proxy contracts at a fraction of the cost of deploying full contracts, while still maintaining the same functionality. The proposal was well-received in the Ethereum community and has been widely adopted in various projects and platforms.</p>\n\n<p>As of now, EIP-1167 has been moved to the Ethereum Request for Comments (ERC) repository, indicating its acceptance and standardization. It remains a valuable tool in the Ethereum ecosystem, especially for projects requiring multiple instances of similar contracts. While other proxy patterns have emerged since its introduction, EIP-1167 continues to be relevant due to its gas efficiency and straightforward implementation.</p>\n</article>",
  "EIP-1175": "<article><h1>EIP-1175: Wallet Interface</h1>\n\n<p>EIP-1175, originally proposed as an Ethereum Request for Comment (ERC), aimed to standardize a wallet interface for Ethereum-based applications. The proposal was intended to improve interoperability between different wallet implementations and dApps, potentially enhancing user experience and reducing development complexity.</p>\n\n<p>While the initial proposal gained some traction within the Ethereum community, it has since been moved from the main EIPs repository to the ERCs repository. This relocation suggests that the proposal may have evolved or been superseded by other standards. The current status of EIP-1175 is \"Moved,\" indicating that it is no longer actively considered in its original form within the main EIPs process.</p>\n\n<p>For the most up-to-date information on this proposal and its current state, interested parties should refer to the new location at https://github.com/ethereum/ercs/blob/master/ERCS/erc-1175.md. This move reflects the dynamic nature of Ethereum's standardization process, where proposals may be refined, combined, or replaced as the ecosystem evolves.</p>\n</article>",
  "EIP-1178": "<article><h1>EIP-1178: Multi-Class Token Standard</h1>\n\n<p>EIP-1178, proposed by Albert Chon, aimed to introduce a multi-class token standard for Ethereum. The proposal sought to extend the functionality of existing token standards like ERC-20 and ERC-721 by allowing a single smart contract to manage multiple classes of tokens. This would enable more complex tokenization scenarios, such as representing different tiers of membership or various asset types within a single contract.</p>\n\n<p>The proposal gained attention in the Ethereum community for its potential to simplify token management and reduce gas costs associated with deploying multiple contracts. However, it faced challenges in achieving widespread adoption, partly due to the complexity of implementation and potential security considerations. As the ecosystem evolved, other proposals and standards emerged that addressed similar use cases, potentially superseding EIP-1178.</p>\n\n<p>Currently, EIP-1178 has been moved to the Ethereum ERCs repository, indicating a shift in its status. While the proposal offered innovative ideas, it's generally not considered for implementation in its original form today. Developers looking for multi-class token functionality might explore more recent standards or combine existing ones to achieve similar results.</p></article>",
  "EIP-1185": "<article><h1>EIP-1185: Storage of DNS Records in ENS</h1>\n\n<p>EIP-1185, proposed by Jim McDonald in July 2018, aimed to standardize the storage of DNS records in the Ethereum Name Service (ENS). This proposal sought to bridge the gap between traditional DNS and blockchain-based naming systems, allowing ENS to serve as a more comprehensive naming solution for both on-chain and off-chain resources.</p>\n\n<p>The proposal defined a system for encoding DNS record data on the Ethereum blockchain, enabling ENS to act as an authoritative DNS server. This would allow for seamless integration between ENS and existing DNS infrastructure, potentially reducing reliance on centralized DNS systems. While the proposal generated interest within the Ethereum community, its implementation faced challenges due to the complexities of fully replicating DNS functionality on-chain.</p>\n\n<p>As of now, EIP-1185 has been moved to the Ethereum ERCs repository, indicating a shift in its categorization from a core protocol improvement to a token standard proposal. This change suggests that while the idea remains relevant, its implementation may be more suitable as an application-level standard rather than a core protocol feature. The current status and potential for implementation would require further investigation into recent ENS developments and community discussions.</p>\n</article>",
  "EIP-1186": "<article><h1>EIP-1186: RPC-Method to get Merkle Proofs - eth_getProof</h1>\n\n<p>EIP-1186 was proposed in 2018 by Simon and Christoph Jentzsch to add a new RPC method called eth_getProof for retrieving Merkle proofs of Ethereum account and storage data. This allows external verification of state data without needing to run a full Ethereum node.</p>\n\n<p>The motivation was to enable lightweight clients and IoT devices to securely verify account balances and storage values by obtaining Merkle proofs from untrusted sources, using only a trusted block hash. This is particularly useful for Layer 2 scaling solutions that need to prove Ethereum state data.</p>\n\n<p>While the EIP provided a useful capability for state verification, its status is currently \"Stagnant\", suggesting limited adoption or development. However, the core idea of enabling external state verification remains relevant for scaling and security in the Ethereum ecosystem. Similar functionality may have been implemented through other means or proposals since this EIP was introduced.</p>\n</article>",
  "EIP-1191": "<article><h1>EIP-1191: Ethereum Address Checksum for Mixed-Case Address Encoding</h1>\n\n<p>EIP-1191, proposed by Alexey Akhunov and Ethereum Foundation researcher Nick Johnson in 2018, aimed to extend EIP-55's mixed-case checksum encoding for Ethereum addresses to support chain-specific checksums. This proposal was designed to prevent users from accidentally sending funds to the wrong chain when multiple chains share the same address format.</p>\n\n<p>The proposal introduced a simple modification to the existing checksum algorithm, incorporating a chain ID into the calculation. This change would allow addresses to have different checksums on different chains, reducing the risk of cross-chain transaction errors. EIP-1191 gained traction within the Ethereum community, particularly among developers working on cross-chain applications and wallets.</p>\n\n<p>As of now, EIP-1191 has been moved to the Ethereum ERCs repository, indicating its transition from a proposal to a recognized standard. While it has not been fully implemented across all Ethereum clients and wallets, the proposal remains relevant in the context of increasing cross-chain interoperability and user safety. Its principles continue to influence discussions around address formatting and cross-chain transaction security in the broader blockchain ecosystem.</p>\n</article>",
  "EIP-1193": "<article><h1>EIP-1193: Ethereum Provider JavaScript API</h1>\n\n<p>EIP-1193 was proposed in 2018 to standardize the JavaScript API for Ethereum providers, addressing inconsistencies between different wallet implementations. The proposal aimed to create a minimal, event-driven API that was agnostic of transport and RPC protocols, allowing for easy extensibility.</p>\n\n<p>Led by Fabian Vogelsteller, Ryan Ghods, and others, EIP-1193 defined a common interface for wallets to expose their functionality to web applications. It formalized methods like <code>request</code> for making RPC calls and standardized events like <code>connect</code>, <code>disconnect</code>, and <code>chainChanged</code>. This allowed dapp developers to interact with wallets in a consistent manner across different implementations.</p>\n\n<p>EIP-1193 reached Final status and has seen widespread adoption across the Ethereum ecosystem. Most major wallets now implement this standard interface, improving interoperability between dapps and wallets. While originally focused on browser environments, the principles have also been applied to other JavaScript contexts. The proposal continues to evolve, with ongoing discussions about potential extensions and refinements to further improve the developer experience.</p>\n</article>",
  "EIP-1202": "<article><h1>EIP-1202: Voting Standard</h1>\n\n<p>EIP-1202, also known as the Voting Standard, was proposed by Zainan Victor Zhou in June 2018. This proposal aimed to standardize the interface for voting systems in Ethereum smart contracts. The goal was to create a consistent and interoperable framework for implementing various voting mechanisms, making it easier for developers to create and users to interact with voting-based applications on the Ethereum blockchain.</p>\n\n<p>The proposal gained attention in the Ethereum community due to its potential to streamline governance processes and decision-making in decentralized autonomous organizations (DAOs). It defined core functions such as vote casting, vote counting, and result querying. However, as blockchain governance evolved, more sophisticated voting mechanisms emerged, leading to ongoing discussions and refinements of the original proposal.</p>\n\n<p>Currently, EIP-1202 has been moved to the Ethereum ERCs repository, indicating its transition from a draft proposal to a more mature standard. While it laid important groundwork for voting systems, the rapidly evolving nature of blockchain governance has led to the development of more advanced voting protocols. Today, implementations often incorporate additional features like quadratic voting or multi-layered governance structures, building upon the foundations established by EIP-1202.</p>\n</article>",
  "EIP-1203": "<article><h1>EIP-1203: ERC-1203 Multi-Class Token Standard</h1>\n<p>EIP-1203, also known as the Multi-Class Token Standard, was proposed to address the limitations of existing token standards like ERC-20 and ERC-721. The proposal aimed to create a more flexible token standard that could represent multiple classes of tokens within a single smart contract. This would allow for more complex tokenization scenarios, such as representing different share classes in a company or various tiers of membership in an organization.</p>\n<p>The proposal was originally authored by Jeff Huang and introduced in July 2018. It gained some attention in the Ethereum community for its potential to simplify the management of diverse token types. However, the proposal's development and adoption were limited, and it did not achieve widespread implementation.</p>\n<p>As of now, EIP-1203 has been moved to the Ethereum ERCs repository, indicating that it is no longer actively pursued as an Ethereum Improvement Proposal. The current status suggests that while the idea had merit, other token standards or approaches may have addressed similar needs more effectively. Developers looking for multi-class token functionality might consider alternatives like ERC-1155 or more recent proposals that have gained greater traction in the Ethereum ecosystem.</p>\n</article>",
  "EIP-1207": "<article><h1>EIP-1207: DAuth - Decentralized Authentication</h1>\n\n<p>EIP-1207, also known as DAuth (Decentralized Authentication), was proposed as an Ethereum Improvement Proposal (EIP) to establish a standard for decentralized authentication on the Ethereum network. The proposal aimed to create a secure and privacy-preserving method for users to authenticate themselves without relying on centralized authorities or revealing unnecessary personal information.</p>\n\n<p>The proposal was initially drafted by Xiayan Fan and submitted in July 2018. It sought to leverage Ethereum's blockchain technology to create a trustless authentication system, potentially replacing traditional username/password combinations and centralized identity providers. However, the proposal did not gain significant traction within the Ethereum community and has since been moved to the Ethereum ERCs repository.</p>\n\n<p>As of now, EIP-1207 is considered \"Moved\" and is no longer actively pursued as an Ethereum Improvement Proposal. The concept of decentralized authentication has evolved, with other proposals and projects addressing similar concerns. While the specific implementation outlined in EIP-1207 may not have been adopted, the underlying idea of blockchain-based authentication continues to be explored in various forms within the broader blockchain and Web3 ecosystem.</p>\n</article>",
  "EIP-1227": "<article><h1>EIP-1227: Defuse Difficulty Bomb and Reset Block Reward</h1>\n\n<p>EIP-1227 was proposed in July 2018 by SmeargleUsedFly to permanently disable Ethereum's difficulty bomb and reset block rewards to pre-Byzantium levels. The difficulty bomb was originally introduced in EIP-2 to encourage regular network upgrades, but EIP-1227 argued it made it too difficult for users to remain on an unforked chain after controversial hard forks.</p>\n\n<p>Technically, the proposal would remove the exponential difficulty increase component and reset base block rewards to 5 ETH, with uncle/nephew rewards adjusted accordingly. This was meant to allow dissenting users to more easily continue an original chain after contentious forks.</p>\n\n<p>However, EIP-1227 never gained significant traction and is currently marked as \"Stagnant\". The Ethereum community has generally favored keeping the difficulty bomb as a forcing function for upgrades. More recent EIPs have instead proposed delaying the difficulty bomb periodically rather than removing it entirely.</p>\n\n</article>",
  "EIP-1234": "<article><h1>EIP-1234: Constantinople Difficulty Bomb Delay and Block Reward Adjustment</h1>\n\n<p>EIP-1234 was a crucial proposal for Ethereum's Constantinople hard fork in 2019. Authored by Afri Schoedon, it addressed two key issues: delaying the difficulty bomb and adjusting block rewards. The difficulty bomb, designed to gradually increase mining difficulty and incentivize a transition to proof-of-stake, was postponed by approximately 12 months to maintain consistent block times. Simultaneously, the proposal reduced the block reward from 3 ETH to 2 ETH to balance the economics of delayed proof-of-stake transition.</p>\n\n<p>This proposal was part of a series of EIPs aimed at managing Ethereum's transition from proof-of-work to proof-of-stake. It followed earlier adjustments like EIP-649 in the Byzantium fork. EIP-1234 was implemented in the Constantinople fork, which occurred in early 2019 after an initial delay due to a critical vulnerability discovery. The proposal helped maintain network stability and economic balance during a critical phase of Ethereum's development.</p>\n\n<p>EIP-1234 is now considered final and has been fully implemented. Its effects were temporary, as Ethereum has since transitioned to proof-of-stake with the Merge in September 2022.",
  "EIP-1240": "<article><h1>EIP-1240: Remove Difficulty Bomb</h1>\n\n<p>EIP-1240, proposed by Micah Zoltu in July 2018, aimed to remove Ethereum's difficulty bomb mechanism. The difficulty bomb, also known as the \"ice age,\" was designed to gradually increase block times, encouraging network upgrades. However, EIP-1240 argued that this assumption was flawed, as miners ultimately follow economic incentives rather than dictating them.</p>\n\n<p>The proposal suggested replacing the difficulty bomb with a fixed difficulty targeting 15-second block times. This would have removed the need for periodic hard forks to delay the difficulty bomb, simplifying the upgrade process. However, EIP-1240 faced significant debate within the Ethereum community, as the difficulty bomb was seen by many as an important motivator for network upgrades.</p>\n\n<p>Ultimately, EIP-1240 was withdrawn and not implemented. Instead, the Ethereum community has continued to use hard forks to delay the difficulty bomb, most recently with the Gray Glacier upgrade in June 2022. The debate around the difficulty bomb's necessity continues, with some arguing for its removal and others viewing it as a crucial part of Ethereum's upgrade mechanism.</p>\n</article>",
  "EIP-1261": "<article><h1>EIP-1261: Membership Verification Token (MVT) Standard</h1>\n\n<p>EIP-1261, proposed by Chaitanya Potti, Partha Bhattacharya, and Pranay Sanghavi in 2018, aimed to establish a standard for Membership Verification Tokens (MVTs) on the Ethereum blockchain. The primary purpose was to create a framework for organizations to manage memberships and verify individuals' affiliations using smart contracts. This proposal addressed the need for a standardized approach to digital membership management, which could be applied to various scenarios such as exclusive clubs, educational institutions, or corporate entities.</p>\n\n<p>The EIP defined interfaces for minting, transferring, and burning MVTs, as well as methods for querying membership status and retrieving member information. It also included provisions for attribute management, allowing organizations to associate additional data with each membership token. While EIP-1261 gained some attention in the Ethereum community, it did not achieve widespread adoption or implementation.</p>\n\n<p>As of now, EIP-1261 has been moved to the Ethereum ERCs repository, indicating that it is no longer actively pursued as an Ethereum Improvement Proposal. The current status suggests that while the concept of membership verification on the blockchain remains relevant, the specific implementation proposed in EIP-1261 may have been superseded by other standards",
  "EIP-1271": "<article><h1>EIP-1271: Standard Signature Validation Method for Contracts</h1>\n\n<p>EIP-1271, proposed by Francisco Giordano, Martín Abbatemarco, and others in 2018, aimed to standardize a way for smart contracts to verify signatures. This proposal addressed the growing need for contracts to act as signers, particularly in multi-signature wallets and decentralized organizations.</p>\n\n<p>The proposal introduced a standard method <code>isValidSignature</code> that contracts could implement to validate signatures. This allowed for more complex signature schemes and opened up new possibilities for contract-based authentication. EIP-1271 gained traction in the Ethereum community, with projects like Gnosis Safe implementing it to enhance their multi-signature functionality.</p>\n\n<p>Currently, EIP-1271 has been moved to the Ethereum ERCs repository, indicating its transition from a proposal to an accepted standard. Its widespread adoption in various projects demonstrates its significance in the Ethereum ecosystem, particularly for advanced wallet implementations and decentralized applications requiring flexible signature validation.</p>\n</article>",
  "EIP-1276": "<article><h1>EIP-1276: Eliminating the Difficulty Bomb and Adjusting Block Rewards</h1>\n\n<p>EIP-1276, proposed by the EOS Classic team in July 2018, aimed to address the increasing block times caused by Ethereum's difficulty bomb. The proposal suggested permanently removing the difficulty bomb and reducing block rewards to 2 ETH during the Constantinople hard fork.</p>\n\n<p>The difficulty bomb was originally implemented to encourage the transition to Proof-of-Stake, but delays in Casper's development necessitated adjustments. This EIP was part of ongoing efforts to manage Ethereum's economics and block time stability. It followed previous proposals like EIP-649, which delayed the difficulty bomb and reduced block rewards in the Byzantium fork.</p>\n\n<p>Despite initial discussions, EIP-1276 did not gain widespread adoption. The Ethereum community ultimately implemented EIP-1234 in the Constantinople fork, which delayed the difficulty bomb and reduced block rewards to 2 ETH, but did not eliminate the bomb entirely. EIP-1276's status remains \"Stagnant,\" indicating it is no longer actively considered for implementation.</p></article>",
  "EIP-1283": "<article><h1>EIP-1283: Net Gas Metering for SSTORE</h1>\n\n<p>EIP-1283 was proposed in 2018 by Wei Tang to improve gas metering for the SSTORE opcode in Ethereum. It aimed to reduce excessive gas costs for storage operations and enable new use cases, while being implementation-friendly. The key idea was to use net gas metering based on a storage slot's original and current values.</p>\n\n<p>This proposal was designed as an alternative to EIP-1087 and EIP-1153, requiring minimal changes to existing implementations. It would benefit use cases like reentry locks, same-contract multi-sends, and passing information between call frames. The EIP reached \"Final\" status and was initially included in the Constantinople hard fork.</p>\n\n<p>However, EIP-1283 was removed from Constantinople at the last minute due to potential security issues identified. It was later revised and reimplemented as EIP-2200 in the Istanbul hard fork in 2019. The core ideas of net gas metering for storage were retained, but with some refinements to address the security concerns. Today, Ethereum uses the updated version from EIP-2200 rather than the original EIP-1283 specification.</p>\n\n</article>",
  "EIP-1285": "<article><h1>EIP-1285: Increase Gcallstipend gas in the CALL opcode</h1>\n\n<p>EIP-1285, proposed by Ben Kaufman and Adam Levi in August 2018, aimed to increase the gas stipend provided during CALL operations from 2,300 to 3,500 gas units. This change was intended to allow for more complex fallback functions, particularly to support the emerging \"Proxy\" contract pattern in Ethereum.</p>\n\n<p>The proposal addressed limitations in the existing gas stipend, which was intentionally kept low to prevent potential attacks like re-entrancy. However, this restriction made it challenging to implement more sophisticated fallback functions, especially for proxy contracts that use DELEGATECALL to forward calls to implementation contracts.</p>\n\n<p>Currently, EIP-1285 is in a \"Stagnant\" status, indicating that it has not progressed in the standardization process. While the proposal highlighted an important issue in Ethereum's design, it appears that alternative solutions or more comprehensive upgrades may have superseded this specific change. Developers have since found workarounds or adopted different patterns to handle complex proxy implementations within the existing gas constraints.</p>\n</article>",
  "EIP-1295": "<article><h1>EIP-1295: Modify Ethereum PoW Incentive Structure and Delay Difficulty Bomb</h1>\n\n<p>EIP-1295, proposed by Brian Venturo in August 2018, aimed to adjust Ethereum's Proof of Work (PoW) incentive structure and delay the difficulty bomb. The proposal suggested reducing uncle rewards, removing nephew rewards, and postponing the difficulty bomb by approximately 6 million blocks.</p>\n\n<p>The motivation behind this proposal was to address network security and scalability concerns while maintaining the existing 3 ETH block reward. By adjusting ancillary rewards, the EIP aimed to reduce excess ETH issuance while still incentivizing PoW participation. Delaying the difficulty bomb was seen as a way to ensure continued network operation without artificially limiting throughput.</p>\n\n<p>Currently, EIP-1295 is in a \"Stagnant\" status, indicating it has not seen significant activity or progress. While some of its ideas may have influenced later proposals, Ethereum has since transitioned to Proof of Stake with the Merge in 2022, rendering many aspects of this EIP obsolete. The difficulty bomb delay has been addressed through other means in subsequent network upgrades.</p></article>",
  "EIP-1319": "<article><h1>EIP-1319: Smart Contract Package Registry Interface</h1>\n\n<p>EIP-1319, proposed by Piper Merriam, Nick Gheorghita, and Danny Ryan in August 2018, aimed to standardize an interface for smart contract package registries on Ethereum. The proposal sought to create a common way for developers to publish and discover reusable smart contract packages, similar to package managers in traditional software development.</p>\n\n<p>The proposal defined a set of functions that a smart contract package registry should implement, including methods for releasing new package versions, fetching package information, and managing package ownership. This standardization would allow different tools and platforms to interact with various package registries consistently, fostering a more robust ecosystem for smart contract development and reuse.</p>\n\n<p>As of now, EIP-1319 has been moved to the Ethereum ERCs repository, indicating ongoing development and discussion within the community. While not yet finalized, the proposal has influenced the development of smart contract package management tools and continues to be relevant in discussions about improving smart contract development workflows on Ethereum.</p>\n</article>",
  "EIP-1328": "<article><h1>EIP-1328: WalletConnect Standard</h1>\n\n<p>EIP-1328, also known as the WalletConnect Standard, was proposed to establish a protocol for connecting decentralized applications (dApps) to mobile wallets. It aimed to improve user experience by allowing seamless interaction between dApps and wallets across different platforms. The proposal was initially drafted by Pedro Gomes of the WalletConnect team in 2018.</p>\n\n<p>While EIP-1328 gained traction in the Ethereum community, it was eventually moved from the main Ethereum Improvement Proposals repository to the Ethereum Request for Comments (ERCs) repository. This move reflects its status as a community standard rather than a core protocol change. The WalletConnect protocol has since become widely adopted, with many popular wallets and dApps implementing it to facilitate cross-platform connectivity.</p>\n\n<p>Today, WalletConnect exists as a standalone project and continues to evolve beyond its initial proposal. Its current implementation (WalletConnect v2.0) incorporates additional features and improvements, making it a crucial component of the Web3 ecosystem. While EIP-1328 itself is no longer actively pursued as an Ethereum standard, its core ideas have been realized and expanded upon in the broader blockchain space.</p></article>",
  "EIP-1337": "<article><h1>EIP-1337: Recurring Subscription Standard</h1>\n\n<p>EIP-1337, proposed by Kevin Owocki and others in 2018, aimed to establish a standard for recurring subscription payments on the Ethereum blockchain. This proposal addressed the need for a decentralized, trustless system to handle periodic transactions, which are common in subscription-based business models but were challenging to implement in the existing blockchain infrastructure.</p>\n\n<p>The proposal outlined a smart contract architecture that would allow users to authorize recurring payments to service providers without requiring repeated manual transactions. It involved the use of a \"subscription contract\" to manage the terms of the subscription and a \"execute subscription\" function that could be called periodically to process payments. While EIP-1337 garnered interest from the community, it didn't achieve widespread adoption in its original form.</p>\n\n<p>Currently, EIP-1337 has been moved to the Ethereum Request for Comments (ERC) repository, indicating a shift in its categorization. The proposal's concepts have influenced subsequent developments in blockchain-based subscription models, but alternative approaches and newer standards have emerged to address similar needs. As of now, EIP-1337 is not considered an active standard, and developers looking to implement subscription systems on Ethereum may explore more recent solutions or adaptations of the original concept.</p>\n</article>",
  "EIP-1344": "<article><h1>EIP-1344: ChainID Opcode</h1>\n\n<p>EIP-1344 introduced the CHAINID opcode to Ethereum in 2019, allowing smart contracts to access the current chain's unique identifier. This proposal was authored by Richard Meissner and Bryant Eisenbach to enable better replay protection for signed messages within contracts, especially for Layer 2 solutions using EIP-712.</p>\n\n<p>The CHAINID opcode (0x46) pushes the 256-bit chain ID onto the stack, costing only the base gas fee to execute. This allows contracts to dynamically determine the current chain, improving upon EIP-712's previous approach of specifying chain IDs at compile time. The opcode helps prevent issues after hard forks and reduces human error in manually specifying chain IDs.</p>\n\n<p>EIP-1344 was implemented in the Istanbul hard fork in December 2019 and is now widely used. It builds upon EIP-155's chain ID concept for transaction replay protection, extending that functionality to the smart contract level. The proposal's Final status indicates it has been fully implemented and adopted by the Ethereum network.</p></article>",
  "EIP-1352": "<article><h1>EIP-1352: Restricted Address Range for Precompiles and System Contracts</h1>\n\n<p>EIP-1352, proposed by Alex Beregszaszi in July 2018, aimed to reserve a specific address range for precompiles and system contracts in Ethereum. The proposal suggested restricting the range from 0x0000000000000000000000000000000000000000 to 0x000000000000000000000000000000000000ffff, preventing regular accounts and contracts from obtaining these addresses.</p>\n\n<p>The motivation behind this EIP was to simplify future features and avoid the need for multiple exceptions. It was designed to be backwards compatible, as no contracts on the main Ethereum network had been created at these addresses at the time of proposal. The EIP suggested that due to the low probability of conflicts, no explicit checks were necessary for transaction signing or the CREATE instruction.</p>\n\n<p>Currently, EIP-1352 is in a \"Stagnant\" status, indicating that it has not progressed in the standardization process. While the idea was sound, it appears that the Ethereum community has not prioritized its implementation. As of now, there are no known superseding proposals, but the concept of reserved address ranges for system use remains relevant in blockchain architecture discussions.</p>\n</article>",
  "EIP-1355": "<article><h1>EIP-1355: Ethash 1a</h1>\n\n<p>EIP-1355, titled \"Ethash 1a,\" was proposed in August 2018 by Paweł Bylica and Jean M. Cyr. The primary motivation behind this proposal was to introduce minimal changes to the Ethash algorithm to hinder and delay the adoption of ASIC-based mining on the Ethereum network. The proposal aimed to enhance decentralization and network security by making it more difficult for specialized mining hardware to dominate the network.</p>\n\n<p>The core of the proposal involved modifying the hash function used in Ethash from the standard FNV (Fowler-Noll-Vo) hash to a variant called FNV1a. This seemingly small change would alter the order of operations in the mining algorithm, potentially rendering existing ASICs ineffective. The authors designed the modification to be minimally disruptive, facilitating rapid development and lowering analysis and testing requirements.</p>\n\n<p>Despite its intentions, EIP-1355 was ultimately withdrawn. The Ethereum community has since moved towards other approaches to address ASIC resistance and mining centralization, including the transition to Proof of Stake with Ethereum 2.0. This proposal serves as an interesting historical artifact, showcasing the ongoing debates and proposed solutions surrounding mining decentralization in the",
  "EIP-1363": "<article><h1>EIP-1363: Payable Token Standard</h1>\n\n<p>EIP-1363, also known as the Payable Token Standard, was proposed by Vittorio Minacori in 2018. This improvement proposal aimed to extend the functionality of ERC-20 tokens by allowing them to be used for payments directly, without the need for a separate approve-and-transfer process. The proposal introduced a standard interface for ERC-20 tokens that could be paid to a recipient, with the receiving contract being notified of the transaction.</p>\n\n<p>The main purpose of EIP-1363 was to streamline token-based payments and reduce the number of transactions required for common token transfer scenarios. It gained some traction in the Ethereum community, with several projects implementing the standard. However, it did not achieve widespread adoption, partly due to the complexity of implementing additional functions on top of the ERC-20 standard.</p>\n\n<p>As of now, EIP-1363 has been moved to the Ethereum ERCs repository, indicating that it is no longer actively considered for core Ethereum improvements. While the proposal offered interesting possibilities for token-based payments, other standards and layer-2 solutions have since emerged to address similar concerns. Developers looking to implement token payment systems today might consider more recent proposals or alternative approaches that have gained broader acceptance in the ecosystem.</p>\n</article>",
  "EIP-137": "<article><h1>EIP-137: Ethereum Domain Name Service (ENS)</h1>\n\n<p>EIP-137, proposed by Nick Johnson and Alex Van de Sande in 2016, introduced the Ethereum Name Service (ENS). ENS aimed to provide a decentralized and extensible naming system for the Ethereum ecosystem, allowing human-readable names to be mapped to Ethereum addresses, content hashes, and metadata.</p>\n\n<p>The proposal addressed the need for a more user-friendly way to interact with Ethereum addresses, similar to how domain names work for IP addresses on the internet. ENS has since become a cornerstone of Ethereum's infrastructure, widely adopted by wallets, dApps, and other services. It has evolved through several iterations and improvements, including reverse resolution (EIP-181) and multicoin support (EIP-2304).</p>\n\n<p>Currently, EIP-137 is marked as \"Moved\" in the EIPs repository, with its content transferred to the ERCs repository. This reflects its maturity and widespread implementation. ENS continues to be actively developed and maintained, with ongoing discussions about further enhancements and integrations within the Ethereum ecosystem.</p></article>",
  "EIP-1380": "<article><h1>EIP-1380: Reduced Gas Cost for Call to Self</h1>\n\n<p>EIP-1380, proposed by Alex Beregszaszi and Jacques Wagener in August 2018, aimed to reduce the gas cost for call instructions when executing a new instance of the currently loaded contract. The motivation behind this proposal was to optimize gas usage for internal function calls in smart contract languages like Solidity and Vyper.</p>\n\n<p>The proposal suggested that the standard gas cost of 700 for all call types (CALL, DELEGATECALL, CALLCODE, and STATICCALL) was unnecessarily high for self-calls, as the contract code was already loaded into memory. By reducing this cost, languages could more efficiently utilize CALL opcodes instead of JUMP opcodes for internal function calls, simplifying compiler implementations and enabling better support for pure functions.</p>\n\n<p>Despite its potential benefits, EIP-1380 is currently in a \"Stagnant\" status. This indicates that the proposal has not seen significant development or discussion in recent times. While the idea remains relevant, it appears that other optimization strategies or competing proposals may have taken precedence in the Ethereum development community.</p></article>",
  "EIP-1386": "<article><h1>EIP-1386: Attestation Proxy Contract for Digital Identity</h1>\n\n<p>EIP-1386, proposed by Pelle Braendgaard, aimed to establish a standard for attestation proxy contracts in digital identity systems on Ethereum. The proposal sought to create a lightweight and flexible way for identity owners to manage attestations about their identity without directly interacting with complex attestation contracts.</p>\n\n<p>The core idea was to introduce a proxy contract that would act as an intermediary between identity owners and attestation contracts. This proxy would allow identity owners to easily add, revoke, and manage attestations from various sources while maintaining control over their identity data. The proposal was designed to work in conjunction with other identity standards like ERC-725 and ERC-735.</p>\n\n<p>Currently, EIP-1386 has been moved to the Ethereum ERCs repository, indicating that it is no longer being actively developed as an EIP. While the concept of attestation proxies remains relevant in the evolving landscape of decentralized identity, other standards and approaches may have superseded or incorporated elements of this proposal. Developers working on identity solutions should consider more recent standards and best practices in the field.</p>\n</article>",
  "EIP-1387": "<article><h1>EIP-1387: Non-Fungible Tokens Metadata JSON Schema</h1>\n\n<p>EIP-1387 was proposed to standardize the metadata JSON schema for non-fungible tokens (NFTs) on the Ethereum blockchain. The proposal aimed to create a consistent format for storing and retrieving metadata associated with NFTs, which would improve interoperability between different NFT platforms and marketplaces. This EIP was originally authored by Brian Schuster and introduced in September 2018.</p>\n\n<p>The proposal suggested a structured JSON format that included fields such as name, description, and image URL for NFTs. It also allowed for additional custom properties to be included, providing flexibility for different use cases. While EIP-1387 gained some traction in the NFT community, it was eventually superseded by other metadata standards, particularly EIP-721's metadata extension.</p>\n\n<p>As of now, EIP-1387 has been moved to the Ethereum ERCs repository, indicating that it is no longer actively pursued as an Ethereum Improvement Proposal. The current standard for NFT metadata is generally considered to be the one outlined in EIP-721, which has become widely adopted in the NFT ecosystem. Developers and platforms today are recommended to follow the EIP-721 metadata standard for better compatibility and interoperability.</p>\n</article>",
  "EIP-1388": "<article><h1>EIP-1388: ERC-1388 Attestation</h1>\n\n<p>EIP-1388, also known as ERC-1388, was a proposal for an attestation standard in the Ethereum ecosystem. It aimed to create a standardized way for issuing, managing, and verifying attestations on the Ethereum blockchain. The proposal was originally authored by Weiwu Zhang, Sergey Ukustov, and Yin Xu in September 2018.</p>\n\n<p>The core idea behind ERC-1388 was to provide a framework for creating verifiable claims or statements about entities, which could be used in various applications such as identity verification, credential issuance, and reputation systems. However, the proposal did not gain significant traction in the Ethereum community and was eventually moved from the main EIPs repository to the ERCs repository.</p>\n\n<p>As of now, ERC-1388 has been superseded by more recent attestation standards, such as EIP-712 (Typed structured data hashing and signing) and EIP-4361 (Sign-In with Ethereum). These newer proposals have gained wider adoption and offer more robust solutions for handling attestations and signatures in the Ethereum ecosystem. The current status of ERC-1388 is \"Moved,\" indicating that it is no longer actively considered for implementation in its original form",
  "EIP-140": "<article><h1>EIP-140: REVERT Instruction</h1>\n\n<p>EIP-140, proposed by Alex Beregszaszi and Nikolai Mushegian in February 2017, introduced the REVERT instruction to Ethereum's EVM. This instruction allows smart contracts to halt execution, revert state changes, and return an error message without consuming all remaining gas. The proposal addressed a significant limitation in Ethereum's error handling capabilities.</p>\n\n<p>Prior to EIP-140, contracts could only revert by running out of gas or executing an invalid instruction, both of which consumed all remaining gas. The REVERT instruction provided a more efficient and informative way to handle errors, allowing developers to include custom error messages. This improvement enhanced debugging capabilities and user experience in decentralized applications.</p>\n\n<p>EIP-140 was implemented as part of the Byzantium hard fork in October 2017 and has since become a standard feature of Ethereum. Its introduction has led to more sophisticated error handling in smart contracts and inspired further proposals for improving contract-level error management. The REVERT instruction remains an essential tool for Ethereum developers, demonstrating the ongoing evolution of the platform's capabilities.</p></article>",
  "EIP-141": "<article><h1>EIP-141: Designated Invalid EVM Instruction</h1>\n\n<p>EIP-141, proposed by Alex Beregszaszi in 2017, introduced a designated invalid instruction (opcode 0xfe) to the Ethereum Virtual Machine (EVM). This proposal aimed to provide a distinct method for aborting execution within smart contracts, enhancing error handling and control flow capabilities.</p>\n\n<p>The motivation behind EIP-141 was to offer developers a clear and intentional way to terminate contract execution, differentiating it from other forms of errors or halts. By designating a specific opcode as invalid, it allowed for more precise error signaling and debugging. This proposal was quickly accepted and implemented, becoming a standard part of the EVM instruction set.</p>\n\n<p>Currently, EIP-141 remains in \"Final\" status, indicating its successful integration into the Ethereum protocol. Its implementation has proven valuable for smart contract developers, providing a reliable mechanism for controlled execution termination. The proposal's simplicity and lack of backward compatibility issues contributed to its swift adoption and enduring relevance in Ethereum's development ecosystem.</p></article>",
  "EIP-1417": "<article><h1>EIP-1417: Poll Standard</h1>\n\n<p>EIP-1417, also known as the Poll Standard, was proposed to establish a standardized interface for creating and managing polls on the Ethereum blockchain. The proposal aimed to provide a consistent way for smart contracts to interact with polling mechanisms, enhancing interoperability and enabling the development of more sophisticated voting systems and decentralized governance tools.</p>\n\n<p>The proposal was originally authored by Chaitanya Potti and Jordan Denison in September 2018. It emerged during a period of growing interest in on-chain governance and decentralized decision-making processes within the Ethereum ecosystem. While the initial proposal gained some attention, it did not achieve widespread adoption or implementation.</p>\n\n<p>Currently, EIP-1417 has been moved to the Ethereum ERCs repository, indicating that it is no longer being actively considered as an Ethereum Improvement Proposal. The relocation suggests that while the concept may still have merit, it is not currently on track for implementation as a core Ethereum standard. Developers interested in polling mechanisms may need to explore alternative solutions or more recent proposals that address similar functionality.</p>\n</article>",
  "EIP-1418": "<article><h1>EIP-1418: Blockchain Storage Rent Payment</h1>\n\n<p>EIP-1418, titled \"Blockchain Storage Rent Payment,\" was proposed by William Entriken in September 2018. The proposal aimed to address the issue of underpriced long-term storage costs on the Ethereum network by introducing a \"rent\" system for account storage.</p>\n\n<p>The core idea of EIP-1418 was to deduct a small amount of value from each account on the network at every block, based on the amount of storage used by that account. This would create an ongoing cost for maintaining data on the blockchain, incentivizing users to clean up unnecessary data and potentially improving the network's long-term sustainability.</p>\n\n<p>Despite its potential benefits, EIP-1418 has not been implemented and is currently in a \"Stagnant\" status. The proposal faced challenges in terms of complexity and potential impact on existing contracts and users. While the concept of storage rent remains relevant, other approaches to addressing blockchain bloat and storage costs have been explored, such as state rent proposals and Ethereum's move towards statelessness in Ethereum 2.0.</p>\n</article>",
  "EIP-1438": "<article><h1>EIP-1438: dApp Components (Avatar) and Universal Wallet</h1>\n\n<p>EIP-1438, proposed by Jet Lim in August 2018, aimed to standardize dApp components, specifically focusing on user avatars, and introduce a universal wallet concept. The proposal sought to enhance user experience across different dApps by providing a consistent way to represent user identities and manage digital assets.</p>\n\n<p>The proposal's primary goal was to create a seamless interface between dApps and wallets, allowing users to maintain a single avatar across multiple applications. This would simplify user identification and improve overall usability in the Ethereum ecosystem. However, the proposal did not gain significant traction in its original form.</p>\n\n<p>As of now, EIP-1438 has been moved to the Ethereum ERCs repository, indicating a shift in its classification. While the core idea of standardizing user representation across dApps remains relevant, other proposals and standards have emerged to address similar concerns, such as EIP-3668 (CCIP-Read) and various decentralized identity solutions. The current status suggests that while the proposal's intent was valuable, it may have been superseded by more comprehensive or widely adopted standards in the evolving Ethereum landscape.</p>\n</article>",
  "EIP-1444": "<article><h1>EIP-1444: Localized Messaging with Signal-to-Text Hash (STH)</h1>\n\n<p>EIP-1444, proposed by Vu Tran, aimed to standardize a method for creating localized messages in Ethereum applications using a Signal-to-Text Hash (STH) system. The proposal sought to address the challenge of providing multi-language support in decentralized applications (dApps) without the need for storing extensive text data on-chain.</p>\n\n<p>The core idea of EIP-1444 was to use a hash function to map signals (unique identifiers) to corresponding text messages. This approach would allow developers to store only the hashes on-chain, while keeping the actual text content off-chain. The proposal also included mechanisms for version control and language-specific implementations, making it easier for dApps to offer localized user experiences.</p>\n\n<p>As of now, EIP-1444 has been moved from its original location to the Ethereum ERCs repository. This relocation suggests that while the proposal garnered interest, it may not have achieved widespread adoption or implementation in its original form. Developers interested in localization solutions for Ethereum applications should review the current state of the proposal and consider alternative approaches that may have emerged since its initial submission.</p></article>",
  "EIP-145": "<article><h1>EIP-145: Bitwise Shifting Instructions in EVM</h1>\n\n<p>EIP-145, proposed by Alex Beregszaszi and Paweł Bylica in February 2017, introduced native bitwise shifting instructions to the Ethereum Virtual Machine (EVM). The proposal aimed to provide more efficient and cost-effective bitwise shifting operations compared to existing arithmetic-based implementations.</p>\n\n<p>The EIP introduced two new opcodes: SHL (0x1b) for left shifting and SHR (0x1c) for logical right shifting. These instructions operate on two stack arguments and push the result back onto the stack. The key benefit was reducing the gas cost from 35 (using arithmetic operations) to just 3 for each shift operation, significantly improving efficiency for contracts utilizing bitwise operations.</p>\n\n<p>EIP-145 was implemented as part of the Constantinople hard fork in February 2019 and is now a standard feature of the Ethereum protocol. Its inclusion has enabled more gas-efficient smart contracts, particularly those involving complex bit manipulation. The proposal's \"Final\" status indicates it has been fully adopted and integrated into the Ethereum mainnet.</p>\n</article>",
  "EIP-1450": "<article><h1>EIP-1450: ERC-1450</h1>\n\n<p>EIP-1450, originally proposed as an Ethereum Request for Comment (ERC), aimed to establish a standard for security tokens on the Ethereum blockchain. The proposal was designed to address the regulatory requirements and compliance needs of tokenized securities, providing a framework for representing ownership of regulated financial instruments on-chain.</p>\n\n<p>The proposal was initially drafted by John Shiple, Adam Dossa, and Pablo Ruiz, drawing from their experience in both traditional finance and blockchain technology. EIP-1450 sought to bridge the gap between traditional securities and blockchain-based tokens, incorporating features such as transfer restrictions, investor qualifications, and regulatory reporting capabilities.</p>\n\n<p>As of now, EIP-1450 has been moved to the Ethereum ERCs repository, indicating a shift in its categorization and potentially its development process. The current status and further details can be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-1450.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-1450.md</a>. This move suggests ongoing interest in the proposal, though its exact status and potential for implementation would require further investigation in its new location.</p>\n</article>",
  "EIP-1459": "<article><h1>EIP-1459: Node Discovery via DNS</h1>\n\n<p>EIP-1459 proposes a scheme for authenticated, updateable Ethereum node lists retrievable via DNS. It was authored by Felix Lange and Péter Szilágyi in 2018 to address limitations with hard-coded bootstrap node lists in Ethereum clients. The proposal aimed to enable larger, regularly updated node lists without requiring client software updates.</p>\n\n<p>The specification defines a format for signed node lists containing EIP-778 node records that can be retrieved via DNS. This allows clients to obtain hundreds of potential network entry points, improving resilience and flexibility compared to small hard-coded lists. It also enables peering providers to offer custom node lists to their customers.</p> \n\n<p>While EIP-1459 offered clear benefits, its current status is listed as \"Stagnant\". This suggests that development and adoption have slowed, though the core ideas may still be relevant. More recent node discovery mechanisms like discv5 have likely superseded aspects of this proposal in practice. However, the concept of authenticated DNS-based node lists remains valuable for bootstrapping and fallback scenarios in Ethereum networking.</p>\n</article>",
  "EIP-1462": "<article><h1>EIP-1462: Base Security Token</h1>\n\n<p>EIP-1462, titled \"Base Security Token,\" was proposed to establish a standard interface for security tokens on the Ethereum blockchain. Security tokens represent ownership in real-world assets and are subject to securities regulations. This proposal aimed to create a common set of functions that all security tokens should implement, facilitating easier integration with exchanges and other platforms.</p>\n\n<p>The proposal was originally authored by Maxime Levesque, Stéphane Gosselin, and Jérôme Simonoff in 2018. It gained attention due to the growing interest in tokenized securities at the time. However, the proposal did not gain widespread adoption and was eventually moved to the Ethereum ERCs repository, indicating a shift in its development process and community focus.</p>\n\n<p>Currently, EIP-1462 is not considered an active Ethereum Improvement Proposal. Its status is \"Moved,\" and the content has been transferred to the Ethereum ERCs repository. This suggests that while the concept of standardizing security tokens remains relevant, the approach or specific implementation proposed in EIP-1462 may have been superseded by other standards or industry practices in the evolving landscape of blockchain-based securities.</p>\n</article>",
  "EIP-1470": "<article><h1>EIP-1470: Smart Contract Weakness Classification (SWC)</h1>\n\n<p>EIP-1470, proposed by Gerhard Wagner in September 2018, aimed to establish a standardized classification system for security weaknesses in Ethereum smart contracts. This proposal was designed to align with the Common Weakness Enumeration (CWE) scheme while addressing smart contract-specific vulnerabilities.</p>\n\n<p>The motivation behind EIP-1470 was to create a common language and framework for describing, identifying, and classifying weaknesses in smart contract systems. This standardization would benefit developers, security practitioners, and tool vendors by improving communication, enhancing security analysis tools, and providing a structured approach to understanding and addressing vulnerabilities.</p>\n\n<p>While EIP-1470 gained initial traction and led to the creation of the Smart Contract Weakness Registry (SWC Registry), its current status is \"Stagnant.\" This indicates that the proposal has not seen significant activity or updates recently. However, the concepts introduced in EIP-1470 have been influential in the broader smart contract security landscape, with the SWC Registry continuing to serve as a valuable resource for the Ethereum development community.</p></article>",
  "EIP-1474": "<article><h1>EIP-1474: Remote Procedure Call Specification</h1>\n\n<p>EIP-1474, proposed by Paul Bouchon and Erik Marks in October 2018, aimed to standardize the remote procedure call (RPC) methods that Ethereum nodes should implement. This proposal addressed the inconsistency and incompatibility issues in RPC methods exposed by different Ethereum clients due to the lack of a formal specification.</p>\n\n<p>The EIP defined a standard set of RPC methods to provide developers with a predictable Ethereum RPC interface across various node implementations. It specified the use of JSON-RPC for communication with Ethereum nodes and outlined requirements for method calls and responses. The proposal also included detailed specifications for numerous RPC methods covering areas like network status, account management, and transaction handling.</p>\n\n<p>Currently, EIP-1474 is in a \"Stagnant\" status, indicating that it has not seen recent activity or updates. While it represented an important effort to standardize Ethereum's RPC interface, the rapid evolution of the Ethereum ecosystem may have led to alternative approaches or newer proposals addressing similar concerns. Developers and node implementers should consult more recent documentation and specifications for current best practices in Ethereum RPC implementations.</p></article>",
  "EIP-1482": "<article><h1>EIP-1482: Define a maximum block timestamp drift</h1>\n\n<p>EIP-1482 was proposed in 2018 by Maurelian to clarify the acceptable timestamp drift for Ethereum blocks. It aimed to explicitly define in the protocol specification that block timestamps must be no more than 15 seconds ahead of the system time.</p>\n\n<p>The motivation was to address confusion around the accuracy of block timestamps and provide clear guidance for smart contract developers using the TIMESTAMP opcode. Both major Ethereum clients (Geth and Parity) were already implementing this 15 second limit, but it was not formally specified.</p> \n\n<p>While the proposal received some discussion, it ultimately stagnated and was not implemented. The Ethereum specification still lacks an explicit definition of maximum timestamp drift. However, the 15 second limit remains a de facto standard in client implementations. Smart contract developers are generally advised to treat block timestamps as approximations rather than precise time measurements.</p>\n</article>",
  "EIP-1484": "<article><h1>EIP-1484: Digital Identity Aggregator</h1>\n\n<p>EIP-1484, proposed by Anurag Angara, Alec Berns, Andrey Petrovskiy, and Nick Reynolds in September 2018, aimed to establish a universal identity system for Ethereum. The proposal introduced the concept of an \"Identity Registry\" to aggregate multiple digital identities associated with a single entity, addressing the fragmentation of identity solutions in the ecosystem.</p>\n\n<p>The proposal garnered significant attention due to its potential to streamline identity management across various Ethereum applications. It laid the groundwork for more interoperable identity systems, influencing subsequent identity-related proposals. However, as the Ethereum ecosystem evolved, other identity solutions emerged, leading to ongoing discussions about the best approach to digital identity on the blockchain.</p>\n\n<p>Currently, EIP-1484 has been moved to the Ethereum ERCs repository, indicating a shift in its status. While the proposal's core ideas remain relevant, the rapidly evolving nature of blockchain identity solutions means that newer, more comprehensive approaches may have superseded some aspects of EIP-1484. Developers and researchers continue to build upon its concepts in the pursuit of robust, decentralized identity systems for Ethereum and beyond.</p></article>",
  "EIP-1485": "<article><h1>EIP-1485: TEthashV1</h1>\n\n<p>EIP-1485 proposed modifying Ethereum's Ethash proof-of-work algorithm to break ASIC miners specialized for Ethash. It was authored by trustfarm in November 2018 as a response to concerns about ASIC mining centralization.</p>\n\n<p>The proposal aimed to make minimal changes to Ethash by updating the FNV hash algorithm used in parts of the mining process. Specifically, it would have replaced the deprecated FNV-0 algorithm with a more secure variant. This was intended to obsolete existing ASIC miners while maintaining compatibility for GPU miners.</p>\n\n<p>EIP-1485 did not gain significant traction and is currently listed as \"Stagnant\". Ethereum has since transitioned to proof-of-stake consensus, making ASIC-resistance less relevant. However, the proposal exemplifies ongoing debates around decentralization and specialized mining hardware in proof-of-work cryptocurrencies.</p>\n</article>",
  "EIP-1491": "<article><h1>EIP-1491: Human Cost Accounting Standard</h1>\n\n<p>EIP-1491, originally proposed by Simon de la Rouviere in 2018, aimed to establish a standard for human cost accounting in Ethereum-based projects. The proposal sought to create a framework for tracking and valuing human contributions to decentralized projects, addressing the challenge of fairly compensating contributors in the absence of traditional employment structures.</p>\n\n<p>While the proposal generated interest within the Ethereum community, it did not gain significant traction for implementation. The concept of quantifying human effort and contributions in blockchain projects remains a complex and debated topic. As of now, EIP-1491 has been moved to the Ethereum ERCs repository, indicating that it is no longer actively pursued as an Ethereum Improvement Proposal.</p>\n\n<p>The current status of EIP-1491 is \"Moved,\" and it can now be found in the Ethereum ERCs repository. This move suggests that while the idea of standardizing human cost accounting in blockchain projects is still relevant, it may require further refinement or alternative approaches to address the challenges of fair compensation in decentralized ecosystems.</p>\n</article>",
  "EIP-150": "<article><h1>EIP-150: Gas Cost Changes for IO-Heavy Operations</h1>\n\n<p>EIP-150, authored by Ethereum co-founder Vitalik Buterin, was a critical proposal implemented in the Tangerine Whistle hard fork on October 18, 2016. The proposal aimed to address the vulnerability exploited in the DOS attacks on Ethereum in September and October 2016 by increasing the gas costs for IO-heavy operations.</p>\n\n<p>The proposal significantly increased gas costs for operations like EXTCODESIZE, EXTCODECOPY, BALANCE, SLOAD, CALL, DELEGATECALL, CALLCODE, and SELFDESTRUCT. These changes were designed to make certain types of attacks economically unfeasible while maintaining the network's functionality. Additionally, EIP-150 introduced a new rule for gas allocation in nested calls, implementing a version of EIP-90 to prevent out-of-gas errors in specific scenarios.</p>\n\n<p>EIP-150 was successfully implemented and remains an essential part of Ethereum's gas mechanics. Its implementation helped secure the network against DOS attacks and improved overall system efficiency. While subsequent proposals have further refined Ethereum's gas model, EIP-150 remains a significant milestone in the platform's evolution and security enhancements.</p>\n</article>",
  "EIP-1504": "<article><h1>EIP-1504: ERC-1504 Upgradable Smart Contract</h1>\n\n<p>EIP-1504, proposed by Augusto Lemble in 2018, aimed to standardize a method for creating upgradable smart contracts on the Ethereum blockchain. The proposal addressed the need for contract mutability in a traditionally immutable environment, allowing developers to fix bugs, add features, or adapt to changing requirements without deploying entirely new contracts.</p>\n\n<p>The core idea of EIP-1504 was to separate the contract's logic from its storage, using a proxy pattern. This approach allowed the logic to be upgraded while maintaining the contract's state and address. However, the proposal did not gain widespread adoption, likely due to the emergence of alternative upgradeability patterns and concerns about potential security risks associated with mutable contracts.</p>\n\n<p>As of now, EIP-1504 has been moved to the Ethereum ERCs repository, indicating that it is no longer actively considered for implementation as an Ethereum Improvement Proposal. While the concept of upgradable contracts remains relevant, the community has largely gravitated towards other solutions, such as the OpenZeppelin Upgrades library, which offers a more comprehensive and battle-tested approach to contract upgradeability.</p>\n</article>",
  "EIP-152": "<article><h1>EIP-152: Add BLAKE2 compression function F precompile</h1>\n\n<p>EIP-152 was proposed in 2016 to add a precompiled contract for the BLAKE2 compression function to Ethereum. The main motivation was to enable efficient verification of Zcash's Equihash proof-of-work on Ethereum, allowing for interoperability between the two networks. It was authored by Tjaden Hess, Matt Luongo, Piotr Dyraga, and James Hancock.</p>\n\n<p>The EIP adds a new precompile that implements the core compression function used in the BLAKE2 hash algorithm. This allows BLAKE2b and other BLAKE2 variants to run much more efficiently on the EVM compared to a Solidity implementation. Besides Zcash interoperability, it provides a useful cryptographic primitive for other use cases on Ethereum.</p>\n\n<p>EIP-152 was finalized and included in the Istanbul hard fork in December 2019. It is now available as a precompile on Ethereum mainnet and most EVM-compatible chains. The addition of this precompile has enabled projects like BTCRelay-style SPV clients for Zcash on Ethereum and cross-chain atomic swaps between the two networks.</p>\n</article>",
  "EIP-1523": "<article><h1>EIP-1523: Standard for Insurance Policies as ERC-721 Non Fungible Tokens</h1>\n\n<p>EIP-1523, proposed by Christoph Mussenbrock in 2018, aimed to establish a standard for representing insurance policies as ERC-721 non-fungible tokens (NFTs) on the Ethereum blockchain. The proposal sought to leverage the unique properties of NFTs to create a more efficient and transparent insurance ecosystem, allowing for easier transfer, management, and verification of insurance policies.</p>\n\n<p>The proposal outlined a structure for insurance policy tokens that included essential details such as the insurer, policyholder, coverage amount, and expiration date. It also proposed methods for policy issuance, cancellation, and claims processing. While EIP-1523 generated interest in the potential applications of blockchain technology in the insurance industry, it did not gain widespread adoption or implementation.</p>\n\n<p>As of now, EIP-1523 has been moved to the Ethereum ERCs repository, indicating a change in its status. While the concept of tokenized insurance policies remains relevant, the specific implementation proposed in EIP-1523 may have been superseded by more recent developments or alternative approaches in the rapidly evolving blockchain and insurtech landscape.</p>\n</article>",
  "EIP-1538": "<article><h1>EIP-1538: Transparent Contract Standard</h1>\n\n<p>EIP-1538, proposed by Nick Mudge in 2018, aimed to create a standard for transparent and upgradeable smart contracts. The proposal introduced a mechanism for contracts to declare their functions externally, allowing for dynamic updates without changing the contract's address. This approach sought to enhance contract flexibility and maintainability in the Ethereum ecosystem.</p>\n\n<p>The proposal gained attention for its potential to solve common issues in contract upgrades and interoperability. It allowed contracts to add, update, or remove functions seamlessly, making it easier for developers to fix bugs or introduce new features. However, despite its innovative approach, EIP-1538 did not achieve widespread adoption in its original form.</p>\n\n<p>Currently, EIP-1538 has been moved to the Ethereum ERCs repository, indicating a shift in its status. While the proposal itself may not be actively pursued in its original form, its concepts have influenced discussions and developments in contract upgradeability. Today, other standards and patterns, such as proxy patterns and diamond standards, address similar concerns in more widely adopted ways.</p>\n</article>",
  "EIP-155": "<article><h1>EIP-155: Simple Replay Attack Protection</h1>\n\n<p>EIP-155, proposed by Ethereum co-founder Vitalik Buterin in October 2016, introduced a simple mechanism to prevent replay attacks between the Ethereum and Ethereum Classic networks following their split. The proposal was implemented as part of the Spurious Dragon hard fork at block 2,675,000 on the Ethereum mainnet.</p>\n\n<p>The core of EIP-155 is the introduction of a chain ID in transaction signing. By including the chain ID in the transaction hash, transactions become specific to a particular network, preventing them from being valid on other chains. This change was crucial in the wake of the DAO hack and subsequent network split, as it prevented transactions on one chain from being replayed on the other.</p>\n\n<p>EIP-155 has been widely adopted and remains an essential part of Ethereum's transaction format. It laid the groundwork for future improvements in cross-chain interoperability and security. The proposal's status is Final, indicating its successful implementation and continued relevance in the Ethereum ecosystem.</p></article>",
  "EIP-1559": "<article><h1>EIP-1559: Fee Market Change for Ethereum</h1>\n\n<p>EIP-1559, proposed by Vitalik Buterin and others in April 2019, introduced a major change to Ethereum's fee structure. It aimed to make transaction fees more predictable and reduce overpayment during congestion. The proposal introduced a base fee that adjusts based on network demand, with the base fee being burned rather than paid to miners.</p>\n\n<p>The proposal faced significant debate and went through multiple iterations before being implemented in the London hard fork in August 2021. It has since become a cornerstone of Ethereum's economic model, reducing ether issuance and potentially making ETH deflationary. While controversial among miners due to reduced fees, it has been generally well-received by users and developers.</p>\n\n<p>EIP-1559 remains active and crucial to Ethereum's operation today. Its success has inspired similar fee models in other blockchain projects. While some have proposed further refinements, there are currently no major proposals to replace or significantly alter EIP-1559's core mechanisms.</p>\n</article>",
  "EIP-1571": "<article><h1>EIP-1571: EthereumStratum/2.0.0</h1>\n\n<p>EIP-1571 proposed a new standard for the Stratum protocol used by Ethereum miners to communicate with mining pool servers. It was authored by Andrea Lanfranchi, Pawel Bylica, and Marius Van Der Wijden in November 2018. The proposal aimed to address the lack of an official Stratum implementation for Ethereum, which had previously relied on less efficient methods like getWork for miners to obtain work from pools.</p>\n\n<p>The proposal defined guidelines for a more efficient push-based mechanism for pools to distribute work to miners, similar to what was implemented in go-ethereum. It aimed to standardize communication between miners and pools, potentially improving efficiency and reducing network traffic compared to polling-based approaches. The proposal included definitions of terminology and used RFC 2119 keywords to specify requirements.</p>\n\n<p>Currently, EIP-1571 is listed with a status of \"Stagnant\", indicating it has not seen recent activity or progress towards implementation. While it addressed an important need, the Ethereum mining landscape has changed significantly since 2018, particularly with the transition to proof-of-stake. As such, this specific proposal is unlikely to be implemented in its original form, though some of its concepts may have influenced other mining protocol developments.</p>\n\n</",
  "EIP-1577": "<article><h1>EIP-1577: Short Technical Summary</h1>\n\n<p>EIP-1577, originally proposed by Dean Tribble and Nick Johnson, aimed to introduce a standard for content-addressable Ethereum Name Service (ENS) records. The proposal's primary purpose was to enable the storage and retrieval of content-addressable data within the ENS system, allowing for more flexible and efficient content management on the Ethereum network.</p>\n\n<p>This EIP was designed to complement the existing ENS infrastructure by introducing a new resolver interface that would support content-addressable data. It proposed a method to store and retrieve content hashes, which could represent various types of data, including IPFS hashes, Swarm hashes, and other distributed storage system identifiers. This approach would have enabled more seamless integration between ENS and decentralized storage solutions.</p>\n\n<p>Currently, EIP-1577 has been moved to the Ethereum ERCs repository, indicating a shift in its categorization and management. While the proposal offered valuable improvements to ENS functionality, its current status suggests that it may have been superseded by newer proposals or integrated into broader ENS enhancement efforts. For the most up-to-date information on its implementation status and relevance, it's recommended to refer to the official ERCs repository and current ENS documentation.</p>\n</article>",
  "EIP-158": "<article><h1>EIP-158: State Clearing</h1>\n\n<p>EIP-158, authored by Ethereum co-founder Vitalik Buterin, addressed the issue of state bloat in the Ethereum network. Proposed in October 2016, this improvement aimed to clear empty accounts from the state, reducing the overall size of the Ethereum state and improving network efficiency.</p>\n\n<p>The proposal introduced the concept of \"touching\" accounts, where any interaction that would normally create an account if it didn't exist would instead delete the account if it was empty. This included zero-value transactions, contract creations, and other interactions. The EIP also changed how the EVM treated empty accounts, considering them equivalent to non-existent accounts during execution.</p>\n\n<p>EIP-158 was implemented as part of the Spurious Dragon hard fork in November 2016, along with other improvements like EIP-160 and EIP-161. Its implementation has helped manage state growth, although more comprehensive state management solutions like state rent and stateless clients have since been proposed. The proposal's status is Final, indicating its successful integration into the Ethereum protocol.</p></article>",
  "EIP-1581": "<article><h1>EIP-1581: Non-wallet usage of keys derived from BIP-32 trees</h1>\n\n<p>EIP-1581, proposed by Michele Balistreri in 2018, aimed to standardize a method for deriving non-wallet keys from BIP-32 hierarchical deterministic wallets. The proposal sought to address the need for generating keys for purposes other than cryptocurrency transactions, such as encryption or signing, while maintaining compatibility with existing HD wallet structures.</p>\n\n<p>The proposal suggested using a specific derivation path (m/43'/60'/1581') to create a subtree dedicated to non-wallet keys. This approach would allow users to generate and manage keys for various applications without interfering with their wallet's primary functions. While the proposal gained some attention within the Ethereum community, it did not achieve widespread adoption or implementation.</p>\n\n<p>As of now, EIP-1581 has been moved to the Ethereum ERCs repository, indicating a shift in its categorization. The current status suggests that while the proposal may still be relevant, it has not been formally accepted as an Ethereum standard. Developers interested in non-wallet key derivation may still find value in the concepts presented in ERC-1581, but should be aware that other solutions or best practices may have emerged since its initial proposal.</p>\n</article>",
  "EIP-1588": "<article><h1>EIP-1588: Ethereum ProgPoW Hardfork</h1>\n\n<p>EIP-1588, proposed by Ikmyeong Na, aimed to introduce a new Proof-of-Work (PoW) algorithm called ProgPoW (Programmatic Proof-of-Work) to Ethereum. The primary goal was to make Ethereum mining more ASIC-resistant, leveling the playing field between GPUs and specialized mining hardware. This proposal was part of a broader effort to maintain decentralization in Ethereum's mining ecosystem.</p>\n\n<p>The proposal gained significant attention and sparked heated debates within the Ethereum community. Supporters argued that ProgPoW would promote fairness and decentralization, while critics raised concerns about its effectiveness and potential to cause a contentious hard fork. Despite initial momentum, including tentative approval from Ethereum core developers, the proposal ultimately stagnated due to ongoing controversies and the shift in focus towards Ethereum's transition to Proof-of-Stake (PoS).</p>\n\n<p>As of now, EIP-1588 remains in a \"Stagnant\" status. With Ethereum's successful transition to PoS via The Merge in September 2022, the need for ProgPoW has become obsolete. The proposal serves as a historical artifact, highlighting the complex discussions and trade-offs",
  "EIP-1592": "<article><h1>EIP-1592: Address Metadata JSON Schema</h1>\n\n<p>EIP-1592, proposed by Piper Merriam, Nick Gheorghita, and Nick Johnson in 2018, aimed to standardize a JSON schema for Ethereum address metadata. The proposal sought to create a consistent way to represent additional information about Ethereum addresses, such as human-readable names, avatars, and social media links.</p>\n\n<p>The proposal was motivated by the need for a standardized format to store and share metadata associated with Ethereum addresses across various applications and services. This would enable better interoperability and user experience in wallets, block explorers, and other Ethereum-related tools. However, EIP-1592 did not gain widespread adoption and was eventually moved to the Ethereum Request for Comments (ERC) repository.</p>\n\n<p>Currently, EIP-1592 has been superseded by other initiatives and standards focusing on similar goals, such as ENS (Ethereum Name Service) for human-readable names and various decentralized identity solutions. The proposal's status is listed as \"Moved,\" indicating that it is no longer actively considered for implementation in its original form within the Ethereum Improvement Proposal process.</p>\n</article>",
  "EIP-160": "<article><h1>EIP-160: EXP Cost Increase</h1>\n\n<p>EIP-160, proposed by Ethereum co-founder Vitalik Buterin, aimed to address the underpricing of the EXP (exponentiation) operation in Ethereum's gas cost model. This proposal was implemented as part of the Spurious Dragon hard fork in 2016, increasing the gas cost of EXP from 10 + 10 per byte in the exponent to 10 + 50 per byte.</p>\n\n<p>The rationale behind this change was based on benchmarks suggesting that EXP was underpriced by a factor of 4-8. By increasing the cost, the proposal aimed to better align the computational cost of the operation with its gas price, preventing potential abuse and improving overall network efficiency. The change was activated at block 2,675,000 on the Ethereum mainnet.</p>\n\n<p>EIP-160 was part of a series of improvements aimed at optimizing Ethereum's gas pricing model and preventing denial-of-service attacks. It remains in effect today and has successfully contributed to a more balanced gas cost structure in Ethereum. The proposal's implementation helped pave the way for future gas cost adjustments and optimizations in subsequent network upgrades.</p></article>",
  "EIP-161": "<article><h1>EIP-161: State Trie Clearing</h1>\n\n<p>EIP-161, authored by Ethereum co-founder Gavin Wood, was proposed to address the issue of state bloat in the Ethereum network. The proposal aimed to clear empty accounts from the state trie, reducing the overall size of the Ethereum state and improving network efficiency. It was implemented as part of the Spurious Dragon hard fork at block 2,675,000 on the Ethereum mainnet.</p>\n\n<p>The proposal introduced several key changes to account handling and gas costs. It prevented the creation of empty accounts, increased the nonce for newly created accounts, and modified gas costs for certain operations involving non-existent accounts. Additionally, it introduced a mechanism to delete \"touched\" accounts that become empty after a transaction, effectively clearing them from the state trie.</p>\n\n<p>EIP-161 was successfully implemented and remains an important part of Ethereum's state management. It has helped to mitigate state bloat issues and improve the network's overall efficiency. The proposal's principles continue to influence discussions around state management in Ethereum and other blockchain networks.</p>\n</article>",
  "EIP-1613": "<article><h1>EIP-1613: Gas Stations Network</h1>\n\n<p>EIP-1613, also known as the Gas Stations Network (GSN), was proposed to address the user onboarding challenge in Ethereum by allowing new users to interact with dApps without holding ETH for gas. The proposal was authored by Yoav Weiss, Dror Tirosh, and Alex Forshtat in 2018, with significant contributions from the Ethereum community.</p>\n\n<p>The GSN introduces a network of relay servers that forward transactions on behalf of users, with gas costs covered by the recipient contract or a separate funding entity. This approach enables meta-transactions, where users sign messages that are later wrapped into full Ethereum transactions by relayers. While the proposal gained traction and saw early implementations, it faced challenges in widespread adoption due to complexity and potential centralization concerns.</p>\n\n<p>As of 2023, EIP-1613 has been moved to the Ethereum ERCs repository, indicating a shift in its categorization. While the core concept remains relevant, alternative meta-transaction solutions and Layer 2 scaling options have emerged, potentially superseding some aspects of the original GSN proposal. Developers interested in gasless transactions now have a variety of options to consider, including EIP-2771 (Secure Protocol for Native Meta Transactions) and account abstraction proposals like EIP",
  "EIP-1616": "<article><h1>EIP-1616: Attribute Registry Standard</h1>\n<p>EIP-1616, originally proposed by Tyler Yasaka in 2018, aimed to establish a standard for attribute registries on the Ethereum blockchain. The proposal sought to create a unified way to store and retrieve arbitrary attributes associated with Ethereum addresses, enhancing the functionality and interoperability of various applications.</p>\n<p>The proposal's primary goal was to provide a flexible framework for managing metadata about Ethereum addresses, which could be useful for identity verification, reputation systems, and other decentralized applications. However, EIP-1616 did not gain significant traction in its original form and has since been moved to the Ethereum ERCs repository.</p>\n<p>As of now, EIP-1616 is no longer active in its original location. It has been relocated to the Ethereum ERCs repository, indicating a shift in its status and possibly its development process. While the core idea of attribute registries remains relevant, other proposals and standards have emerged to address similar needs in the Ethereum ecosystem.</p>\n</article>",
  "EIP-162": "<article><h1>EIP-162: Initial ENS Registrar</h1>\n\n<p>EIP-162, also known as the Initial ENS Registrar, was a crucial proposal in the development of the Ethereum Name Service (ENS). Proposed by Nick Johnson, a core developer of Ethereum and the primary architect of ENS, this EIP laid the groundwork for a decentralized domain name system on the Ethereum blockchain. The proposal aimed to establish a temporary registrar for .eth domains during the initial phase of ENS deployment.</p>\n\n<p>The Initial ENS Registrar introduced a simple first-come, first-served registration process for .eth domains, with a fixed registration fee and a temporary deed-based ownership model. This approach allowed for rapid adoption and testing of the ENS system while mitigating some of the risks associated with permanent name allocation. The proposal was implemented and used successfully during the early stages of ENS, paving the way for more sophisticated registration mechanisms.</p>\n\n<p>Currently, EIP-162 has been superseded by more advanced ENS registration systems, such as the Permanent Registrar (EIP-1959) and subsequent improvements. The proposal's status is now listed as \"Moved,\" with the specifications relocated to the Ethereum ERCs repository. While no longer actively used, EIP-162 played a crucial role in bootstrapping the ENS ecosystem and demonstrating",
  "EIP-1620": "<article><h1>EIP-1620: Money Streaming</h1>\n\n<p>EIP-1620, also known as the \"Money Streaming\" proposal, was introduced to address the need for continuous, real-time payments on the Ethereum blockchain. The proposal was authored by Paul Berg, a prominent figure in the Ethereum community, and aimed to create a standard for streaming money between addresses at a constant flow rate. This concept was particularly useful for scenarios like subscriptions, salaries, and other recurring payments.</p>\n\n<p>The proposal gained significant attention due to its potential to revolutionize payment systems in the blockchain space. It was initially implemented by Sablier, a protocol for real-time finance, which demonstrated its practical applications. However, as the Ethereum ecosystem evolved, other related proposals and implementations emerged, addressing similar use cases with different approaches.</p>\n\n<p>Currently, EIP-1620 has been moved to the Ethereum ERCs repository, indicating a shift in its status. While the core concept of money streaming remains relevant, the specific implementation proposed in EIP-1620 may have been superseded by more recent developments or alternative solutions. Developers and projects interested in implementing continuous payment systems should review the latest standards and protocols in the Ethereum ecosystem to determine the most suitable approach for their specific use case.</p>\n</article>",
  "EIP-1633": "<article><h1>EIP-1633: Re-Fungible Token Standard</h1>\n\n<p>EIP-1633, known as the Re-Fungible Token Standard, was proposed to create a new type of token that combines properties of both fungible (ERC-20) and non-fungible (ERC-721) tokens. The proposal aimed to allow fractional ownership of unique assets while maintaining their indivisible nature. This concept was particularly relevant for tokenizing high-value assets like real estate or artwork.</p>\n\n<p>The proposal was authored by Dieter Shirley, Witek Radomski, Andrew Cooke, James Therien, Eric Binet, and Ronan Sandford in 2018. It was designed to build upon the existing ERC-721 standard, adding functionality to enable partial ownership and transfer of non-fungible tokens. This would have allowed for more complex ownership structures and increased liquidity for traditionally illiquid assets.</p>\n\n<p>Currently, EIP-1633 has been moved to the Ethereum ERCs repository, indicating that it is no longer actively pursued as an Ethereum Improvement Proposal. The concept of fractionalized NFTs has since been explored through other means, such as EIP-1155 (Multi Token Standard) and various application-specific implementations. While EIP-1633 itself is not implemented, its core",
  "EIP-165": "<article><h1>EIP-165: Standard Interface Detection</h1>\n\n<p>EIP-165, proposed by Christian Reitwiessner, Fabian Vogelsteller, and Nick Johnson in 2018, introduced a standard method for detecting which interfaces a smart contract implements. This proposal aimed to solve the problem of determining contract capabilities without relying on source code or ABI definitions.</p>\n\n<p>The EIP defined a simple interface with a single function, <code>supportsInterface(bytes4 interfaceID)</code>, which returns a boolean indicating whether the contract supports a given interface. This standardization allowed for more efficient and reliable interaction between contracts and external systems, enhancing interoperability within the Ethereum ecosystem.</p>\n\n<p>EIP-165 has been widely adopted and is considered a fundamental standard in Ethereum development. It's particularly useful for implementing and detecting support for other standards like ERC-721 and ERC-1155. The proposal's status is currently \"Final,\" indicating its acceptance and implementation. It remains relevant and recommended for use in smart contract development today, serving as a cornerstone for interface detection in the Ethereum ecosystem.</p>\n</article>",
  "EIP-1679": "<article><h1>EIP-1679: Istanbul Hardfork Meta</h1>\n\n<p>EIP-1679 is a Meta Ethereum Improvement Proposal that specifies the changes included in the Ethereum hardfork named Istanbul. Authored by Alex Beregszaszi and Afri Schoedon, this proposal was finalized in 2019 and reached \"Final\" status.</p>\n\n<p>The Istanbul hardfork was a significant upgrade to the Ethereum network, activating on block 9,069,000 on the Ethereum mainnet in December 2019. It included six other EIPs, covering improvements such as reduced gas costs for certain operations, the addition of a ChainID opcode, and rebalancing of storage costs. These changes aimed to optimize network performance and introduce new functionalities.</p>\n\n<p>EIP-1679 serves as a reference point for the Istanbul hardfork, detailing the included proposals and activation block numbers for various Ethereum networks. Its implementation marked an important step in Ethereum's ongoing development, though subsequent hardforks have since introduced further improvements to the network.</p>\n</article>",
  "EIP-1681": "<article><h1>EIP-1681: Temporal Replay Protection</h1>\n\n<p>EIP-1681 was proposed in January 2019 by Martin Holst Swende to add a \"temporal\" replay protection to Ethereum transactions in the form of a <code>valid-until</code> timestamp. The key motivation was to prevent transaction replay attacks and allow users more control over transaction expiration.</p>\n\n<p>This proposal was similar to an earlier EIP by Nick Johnson and Konrad Feldmeier, but used wall clock time instead of block numbers. It aimed to address issues like dust account clearing, ICO transaction queues, and node implementation challenges. The <code>valid-until</code> field would allow transactions to expire if not mined by a certain time.</p>\n\n<p>As of 2023, EIP-1681 remains in \"Stagnant\" status and has not been implemented. Other proposals like EIP-1559 have since addressed some of the original motivations around transaction queues and gas pricing. However, the core concept of time-based transaction expiration remains relevant for certain use cases in Ethereum.</p>\n</article>",
  "EIP-1682": "<article><h1>EIP-1682: Storage Rent</h1>\n\n<p>EIP-1682, titled \"Storage Rent,\" was proposed by Felix Lange and Martin Holst Swende in November 2018. The proposal aimed to address the challenge of Ethereum's ever-growing state size by introducing a mechanism to charge for data storage and archive unused data. This was meant to create an upper bound on the size of Ethereum's state, making it more sustainable for nodes to participate in consensus.</p>\n\n<p>The core idea was to implement a \"storage rent\" system where contract owners would pay to keep their data active in the state. Data that wasn't paid for would be \"archived\" and could be resurrected if needed. This approach was designed to incentivize efficient use of storage and potentially reduce the overall state size over time.</p>\n\n<p>However, EIP-1682 was ultimately withdrawn. The proposal faced significant challenges, including the complexity of implementation and potential disruption to existing contracts and dApps. While the issue of state growth remains a concern, other approaches like state expiry and statelessness are being explored as alternatives. As of now, no direct successor to EIP-1682 has been implemented, but the concept continues to influence discussions around Ethereum's long-term scalability and sustainability.</p>\n</article>",
  "EIP-170": "<article><h1>EIP-170: Contract Code Size Limit</h1>\n\n<p>EIP-170, proposed by Vitalik Buterin in November 2016, introduced a hard cap on the size of smart contract code that can be deployed to the Ethereum blockchain. The proposal aimed to address a potential quadratic vulnerability in Ethereum related to contract execution costs.</p>\n\n<p>The EIP specified a maximum contract code size of 24,576 bytes (0x6000 in hexadecimal). This limit was implemented in the Spurious Dragon hard fork at block 2,675,000 on the Ethereum mainnet. The rationale behind this limit was to prevent potential denial-of-service attacks and optimize performance for light clients verifying proofs of validity or invalidity.</p>\n\n<p>EIP-170 has been in effect since its implementation and remains an important safeguard in Ethereum's architecture. While there have been discussions about potentially increasing this limit in the future, no concrete proposals have gained significant traction. The current status of EIP-170 is \"Final,\" indicating its successful implementation and continued relevance in the Ethereum protocol.</p></article>",
  "EIP-1702": "<article><h1>EIP-1702: Generalized Account Versioning Scheme</h1>\n\n<p>EIP-1702, proposed by Wei Tang in December 2017, aimed to introduce account versioning for smart contracts to facilitate easier upgrades to the Ethereum Virtual Machine (EVM) and allow multiple VM versions to coexist. The proposal sought to maintain backward compatibility while enabling future improvements to the Ethereum protocol.</p>\n\n<p>The key idea was to add a \"version\" field to account states, allowing different VM implementations to be used for contracts created at different times. This would enable breaking changes to be introduced without affecting existing contracts. The proposal also aimed to support future account state structures, particularly in preparation for the potential introduction of a WebAssembly VM on Ethereum.</p>\n\n<p>Despite initial interest, EIP-1702 has not been implemented and is currently in a \"Stagnant\" status. While the concept of account versioning remains relevant, other approaches to protocol upgrades and backward compatibility have been pursued in Ethereum's development. The ideas presented in EIP-1702 may still inform future discussions on managing protocol evolution in Ethereum and other blockchain platforms.</p>\n</article>",
  "EIP-1706": "<article><h1>EIP-1706: Disable SSTORE with gasleft lower than call stipend</h1>\n\n<p>EIP-1706 was proposed in January 2019 by Alex Forshtat and Yoav Weiss as a security measure to prevent potential reentrancy attacks enabled by EIP-1283's gas cost reductions for storage writes. It aimed to disallow SSTORE operations when less than 2300 gas remained (the default stipend for simple transfers), maintaining existing security assumptions for many contracts.</p>\n\n<p>The proposal was a direct response to vulnerabilities identified in EIP-1283 shortly before the planned Constantinople hard fork. It offered a simple mitigation that would preserve backwards compatibility while addressing the security concerns. However, EIP-1706 was ultimately withdrawn in favor of the more comprehensive EIP-2200, which revised the gas costs and mechanics of SSTORE more broadly.</p>\n\n<p>While EIP-1706 is no longer active, it played an important role in highlighting critical security implications of gas cost changes and influenced the development of more robust solutions. The quick community response demonstrated the importance of thorough security analysis for all protocol upgrades.</p></article>",
  "EIP-1710": "<article><h1>EIP-1710: A Brief Technical Summary</h1>\n\n<p>EIP-1710 was originally proposed as an Ethereum Request for Comment (ERC) standard. However, it has since been moved to the Ethereum ERCs repository, specifically to https://github.com/ethereum/ercs/blob/master/ERCS/erc-1710.md. This move suggests that the proposal has been recognized as potentially valuable but may require further discussion or refinement before being considered for implementation in the main Ethereum codebase.</p>\n\n<p>The relocation of this EIP to the ERCs repository indicates that it is likely related to a specific use case or application within the Ethereum ecosystem, rather than a core protocol change. Unfortunately, without access to the current content of the ERC, it's challenging to provide specific details about its purpose, authors, or current status. The move could also signify that the proposal is being considered alongside other related ERCs for potential standardization.</p>\n\n<p>For the most up-to-date and accurate information about ERC-1710, interested parties should refer to the provided link in the Ethereum ERCs repository. This will contain the latest version of the proposal, including any revisions, discussions, or decisions made regarding its potential implementation or further development.</p></article>",
  "EIP-1716": "<article><h1>EIP-1716: Petersburg Hardfork</h1>\n\n<p>EIP-1716, titled \"Hardfork Meta: Petersburg,\" was a critical proposal that addressed a security vulnerability discovered in the Constantinople hard fork. Authored by Afri Schoedon and Marius van der Wijden, this meta-EIP specified changes to remove EIP-1283 from the Constantinople upgrade due to a potential reentrancy attack vector.</p>\n\n<p>The Petersburg hardfork was quickly implemented as a fix to the Constantinople upgrade. It was activated at specific block numbers across various Ethereum networks, including Mainnet, Ropsten, Kovan, Rinkeby, and Görli. The key change was the removal of EIP-1283, which had introduced net gas metering for SSTORE operations without dirty maps.</p>\n\n<p>This proposal achieved Final status and was successfully implemented. It demonstrated the Ethereum community's ability to rapidly respond to security concerns and maintain network integrity. The quick action taken with EIP-1716 highlights the importance of thorough testing and the community's commitment to security in the Ethereum ecosystem.</p></article>",
  "EIP-173": "<article><h1>EIP-173: Contract Ownership Standard</h1>\n\n<p>EIP-173, proposed by Nick Mudge in 2018, introduced a standard interface for ownership of Ethereum contracts. This proposal aimed to create a consistent way for contracts to define and transfer ownership, addressing the need for a unified approach in managing contract control.</p>\n\n<p>The proposal defined simple functions like <code>owner()</code> and <code>transferOwnership()</code>, allowing for easy identification of a contract's owner and seamless transfer of ownership. This standardization improved interoperability and simplified the development of tools and interfaces that interact with contract ownership. EIP-173 gained significant adoption in the Ethereum ecosystem, becoming a fundamental part of many smart contract implementations.</p>\n\n<p>Currently, EIP-173 has been moved to the Ethereum ERCs repository, indicating its acceptance and integration into the broader Ethereum standards. While it remains relevant, newer proposals like EIP-2535 (Diamond Standard) have expanded on its concepts, offering more complex ownership and upgradeability patterns. Nonetheless, EIP-173 continues to be widely used for its simplicity and effectiveness in basic ownership management scenarios.</p>\n</article>",
  "EIP-1753": "<article><h1>EIP-1753: Smart Contract Interface for Licences</h1>\n\n<p>EIP-1753, proposed by Ethereum developer Lucas Cullen in 2019, aimed to establish a standard interface for license management on the Ethereum blockchain. The proposal sought to create a unified way for smart contracts to handle license issuance, verification, and revocation, potentially streamlining digital rights management across various applications.</p>\n\n<p>While the proposal generated some interest within the Ethereum community, it did not gain widespread adoption or implementation. The EIP's development seemed to stall, and it was eventually moved from the main Ethereum Improvement Proposals repository to the Ethereum Request for Comments (ERCs) repository. This move suggests that while the idea had merit, it didn't progress to become a formal standard within the Ethereum ecosystem.</p>\n\n<p>As of now, EIP-1753 is considered \"Moved\" rather than active or implemented. The current location of the proposal is in the ERCs repository, indicating that it remains a concept open for discussion and potential future development, but is not actively pursued as an Ethereum standard. For developers interested in license management on Ethereum, exploring more recent proposals or established practices in the field would be advisable.</p></article>",
  "EIP-1761": "<article><h1>EIP-1761: Scoped Approval Interface</h1>\n\n<p>EIP-1761, proposed by Witek Radomski, Corey Petty, and Andrew Cooke in February 2019, aimed to introduce a scoped approval interface for ERC-721 tokens. This proposal sought to enhance the existing token approval system by allowing owners to grant limited permissions to third-party addresses, improving security and flexibility in token management.</p>\n\n<p>The proposal addressed limitations in the standard ERC-721 approval mechanism, which only allowed for full transfer rights. EIP-1761 proposed a more granular approach, enabling token owners to specify exact permissions for approved addresses, such as the ability to transfer only specific tokens or operate within certain time frames. This improvement was particularly relevant for gaming and marketplace applications, where more nuanced control over digital assets was desirable.</p>\n\n<p>As of now, EIP-1761 has been moved to the Ethereum ERCs repository, indicating ongoing discussion and development. While not formally implemented in the Ethereum mainnet, the concepts introduced in this proposal have influenced subsequent token standards and approval mechanisms. The current status suggests that while the original proposal may not be directly implemented, its ideas continue to shape the evolution of token management in the Ethereum ecosystem.</p>\n</article>",
  "EIP-1767": "<article><h1>EIP-1767: GraphQL Interface to Ethereum Node Data</h1>\n\n<p>EIP-1767, proposed in February 2019 by Nick Johnson, Raúl Kripalani, and Kris Shinn, aimed to introduce a GraphQL schema for accessing data stored on Ethereum nodes. The proposal was designed to replace the read-only functionality of the existing JSON-RPC interface, offering improvements in usability, consistency, efficiency, and future-proofing.</p>\n\n<p>The motivation behind this EIP stemmed from several shortcomings in the JSON-RPC interface, including informal and incomplete specifications leading to incompatibilities, and inefficient data retrieval processes. For example, the JSON-RPC interface often fetched unnecessary data, such as the <code>totalDifficulty</code> field for every block request, even when not needed by the caller.</p>\n\n<p>Despite its potential benefits, EIP-1767 is currently in a \"Stagnant\" status. This suggests that while the proposal generated initial interest, it has not seen significant development or adoption. The Ethereum community may have focused on other priorities or alternative solutions to address the limitations of the JSON-RPC interface.</p></article>",
  "EIP-1775": "<article><h1>EIP-1775: App Keys for NFTs</h1>\n\n<p>EIP-1775, proposed by James Sangalli in May 2019, aimed to introduce a standard for creating and managing application-specific keys for Non-Fungible Tokens (NFTs). The proposal's primary purpose was to enhance the functionality and interoperability of NFTs by allowing them to interact with various applications without compromising the security of the main NFT.</p>\n\n<p>The proposal suggested a method for generating deterministic keys from an NFT's token ID and contract address, which could then be used for specific applications or services. This approach would enable NFTs to have unique identities across different platforms without revealing their main private key. However, EIP-1775 did not gain significant traction in the Ethereum community and was eventually moved to the ERCs repository.</p>\n\n<p>Currently, EIP-1775 is considered \"Moved\" and can be found in the Ethereum ERCs repository. While the proposal offered an interesting solution for NFT interoperability, other standards and approaches have since emerged to address similar concerns. As such, EIP-1775 is not actively pursued for implementation in its original form, but its concepts may have influenced subsequent developments in the NFT space.</p></article>",
  "EIP-1803": "<article><h1>EIP-1803: Rename Opcodes for Clarity</h1>\n\n<p>EIP-1803, proposed by Alex Beregszaszi in July 2017, aimed to improve the clarity of several Ethereum opcodes by renaming them to more accurately reflect their functions. The proposal suggests renaming opcodes such as BALANCE to EXTBALANCE, SHA3 to KECCAK256, and GAS to GASLEFT, among others. These changes were intended to enhance code readability and reduce confusion among developers.</p>\n\n<p>The proposal builds upon previous efforts to improve opcode naming, such as EIP-6 which renamed SUICIDE to SELFDESTRUCT, and EIP-59 which proposed renaming SHA3. While EIP-1803 does not affect existing code functionality, it aims to influence the mnemonics used by assemblers, potentially improving the developer experience.</p>\n\n<p>Currently, EIP-1803 is in a \"Stagnant\" status, indicating that it has not seen significant activity or progress recently. Despite its potential benefits for code clarity, the proposal has not been implemented, possibly due to the challenges of changing established terminology in a widely-used platform. The Ethereum community continues to discuss and evaluate proposals like this one to improve the platform's usability and developer experience.</p>\n</article>",
  "EIP-181": "<article><h1>EIP-181: ENS Support for Reverse Resolution of Ethereum Addresses</h1>\n\n<p>EIP-181, proposed by Nick Johnson in 2016, introduced a standardized way to perform reverse resolution of Ethereum addresses to human-readable names in the Ethereum Name Service (ENS). This improvement enables the association of metadata, such as human-readable names, with Ethereum addresses, enhancing usability and user experience in decentralized applications.</p>\n\n<p>The proposal outlined a method to create a reverse resolution mechanism using a special-purpose top-level domain \".addr.reverse\" in ENS. This allowed for a consistent and decentralized approach to reverse address lookups, which has become an essential feature in many Ethereum wallets and dApps. EIP-181 was widely adopted and implemented, forming a crucial part of the ENS ecosystem.</p>\n\n<p>Currently, EIP-181 has been moved to the Ethereum ERCs repository, indicating its acceptance and integration into the Ethereum standards. While the core concept remains relevant, ongoing developments in ENS and related standards may have expanded upon or refined the original proposal. For the most up-to-date information and implementation details, developers should refer to the current ENS documentation and related ERCs.</p></article>",
  "EIP-1812": "<article><h1>EIP-1812: Ethereum Verifiable Claims</h1>\n\n<p>EIP-1812, proposed by Pelle Braendgaard, aimed to introduce a standard for Verifiable Claims on the Ethereum blockchain. This proposal sought to provide a way to issue and verify claims about identities, credentials, or other attributes in a decentralized manner. The concept was inspired by the W3C Verifiable Claims Working Group's work and aimed to adapt it for use within the Ethereum ecosystem.</p>\n\n<p>The proposal gained attention for its potential to enhance identity management and trust in decentralized applications. However, its development and discussion moved from the main Ethereum Improvement Proposals (EIPs) repository to the Ethereum Request for Comments (ERCs) repository. This shift indicates that while the concept was valuable, it required further refinement and community consensus before potentially becoming a finalized standard.</p>\n\n<p>As of now, EIP-1812 has been moved to the ERCs repository, specifically to <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-1812.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-1812.md</a>. This move suggests that the proposal is still under consideration and development within the Ethereum community, but has",
  "EIP-1820": "<article><h1>EIP-1820: Pseudo-introspection Registry Contract</h1>\n\n<p>EIP-1820, proposed by Jordi Baylina, Jacques Dafflon, and Thomas Shababi in January 2019, aimed to create a universal registry smart contract for interface detection. This proposal addressed the limitations of EIP-165 by allowing contracts and regular addresses to register which interfaces they support and for other contracts to query this information.</p>\n\n<p>The proposal gained significant traction in the Ethereum community due to its potential to standardize interface detection across different contract types. It was particularly useful for implementing support for proxy contracts and other advanced patterns. The EIP went through several iterations and discussions before being finalized.</p>\n\n<p>As of now, EIP-1820 has been moved to the Ethereum ERCs repository, indicating its transition from a proposal to an accepted standard. It is now maintained at https://github.com/ethereum/ercs/blob/master/ERCS/erc-1820.md. This move suggests that the proposal has been widely adopted and is considered a stable part of the Ethereum ecosystem.</p></article>",
  "EIP-1822": "<article><h1>EIP-1822: Universal Upgradeable Proxy Standard (UUPS)</h1>\n\n<p>EIP-1822, proposed by Gabriel Barros and Patrick Gallagher in January 2019, introduced the Universal Upgradeable Proxy Standard (UUPS). This standard aimed to improve upon existing proxy patterns by allowing for upgradeable contracts without the need for a separate proxy contract. The UUPS pattern stores the implementation address within the implementation contract itself, rather than in the proxy, reducing gas costs and simplifying the upgrade process.</p>\n\n<p>The UUPS pattern gained traction in the Ethereum community due to its efficiency and flexibility. It addressed some of the limitations of previous proxy patterns, such as the Diamond Standard (EIP-2535) and the Transparent Proxy Pattern. OpenZeppelin, a leading smart contract security company, adopted UUPS in their library, further popularizing its use among developers.</p>\n\n<p>Currently, EIP-1822 has been moved to the Ethereum ERCs repository, indicating its transition from a proposal to a recognized standard. While UUPS remains a viable option for upgradeable contracts, developers should consider newer alternatives like EIP-1967 (Standard Proxy Storage Slots) when implementing upgradeable patterns. The choice between UUPS and other proxy patterns often depends on specific project requirements and gas optimization needs.</p></",
  "EIP-1829": "<article><h1>EIP-1829: Precompile for Elliptic Curve Linear Combinations</h1>\n\n<p>EIP-1829, proposed by Remco Bloemen in March 2019, aimed to add a precompile for computing linear combinations of elliptic curve points on arbitrary curves. This would have significantly expanded the EVM's elliptic curve capabilities beyond the existing limited support for secp256k1 and altbn128.</p>\n\n<p>The proposal specified a precompile that would take curve parameters and compute a linear combination (also known as inner product or multi-exponentiation) of curve points. This would have enabled support for many more elliptic curves useful for integration with existing systems or newly developed curves for zero-knowledge proofs.</p>\n\n<p>However, the proposal has remained in \"Stagnant\" status and has not been implemented. While it offered increased flexibility, the added complexity and potential security considerations likely contributed to its lack of adoption. More targeted proposals for specific curves have generally been preferred over this generalized approach.</p></article>",
  "EIP-1844": "<article><h1>EIP-1844: ENS Interface Discovery</h1>\n\n<p>EIP-1844, originally proposed by Nick Johnson in April 2019, aimed to standardize a method for discovering what interfaces a contract registered in the Ethereum Name Service (ENS) supports. This proposal was designed to enhance the functionality and interoperability of ENS by providing a consistent way for applications to determine the capabilities of ENS-registered contracts.</p>\n\n<p>The proposal suggested using EIP-165's interface detection mechanism in conjunction with ENS, allowing contracts to advertise their supported interfaces through ENS records. This would enable more efficient and flexible interactions between applications and ENS-registered contracts, potentially streamlining development processes and improving user experiences in the Ethereum ecosystem.</p>\n\n<p>As of now, EIP-1844 has been moved to the Ethereum ERCs repository, indicating its transition from a draft proposal to a more formalized standard. The current status and any recent developments can be found in the ERCs repository, where it continues to be part of the ongoing efforts to improve and standardize Ethereum-based technologies.</p>\n</article>",
  "EIP-1872": "<article><h1>EIP-1872: Ethereum Network Upgrade Windows</h1>\n\n<p>EIP-1872, proposed by Danno Ferrin in March 2018, aimed to establish a structured schedule for Ethereum network upgrades (hard forks). The proposal suggested four annual time windows for regular upgrades, with specific guidelines for scheduling and announcing these changes. This was intended to provide predictability for service providers and node operators, allowing them to plan around upgrade periods.</p>\n\n<p>The proposal defined three categories of upgrades: roadmap upgrades (scheduled within the four annual windows), priority upgrades (discouraged but possible in the third week of any month), and critical upgrades (scheduled as needed). Regular upgrades were to be announced early in the process, with block numbers chosen 4-6 weeks prior to the upgrade window.</p>\n\n<p>While EIP-1872 offered a logical approach to managing Ethereum's upgrade cycle, it has not been formally adopted. The proposal's status is currently listed as \"Stagnant,\" indicating that it hasn't gained significant traction within the Ethereum community. Despite this, the idea of structured upgrade windows has influenced discussions around Ethereum's development process, even if not strictly adhered to in the proposed format.</p></article>",
  "EIP-1884": "<article><h1>EIP-1884: Repricing for trie-size-dependent opcodes</h1>\n\n<p>EIP-1884, proposed by Martin Holst Swende in March 2019, aimed to address the growing imbalance between gas costs and actual resource consumption for certain Ethereum opcodes. As the Ethereum state grew, operations like SLOAD, BALANCE, and EXTCODEHASH became more resource-intensive, leading to potential attack vectors and inconsistent block processing times.</p>\n\n<p>The proposal suggested increasing the gas costs for these opcodes to better reflect their true computational cost. Specifically, it raised SLOAD from 200 to 800 gas, BALANCE and EXTCODEHASH from 400 to 700 gas each. Additionally, it introduced a new SELFBALANCE opcode (0x47) as a cheaper alternative to BALANCE for accessing an account's own balance.</p>\n\n<p>EIP-1884 was implemented in the Istanbul hard fork in December 2019, despite some controversy due to its potential to break existing smart contracts. While it achieved its goal of better aligning gas costs with resource usage, it also highlighted the challenges of making backward-incompatible changes to the Ethereum protocol. Subsequent proposals like EIP-2929 have built upon this work to further refine Ethereum's gas mechanics.</p>\n</article",
  "EIP-1890": "<article><h1>EIP-1890: Commitment to Sustainable Ecosystem Funding</h1>\n\n<p>EIP-1890, proposed by Gregory Markou, Kevin Owocki, and Lane Rettig in March 2019, aimed to introduce a mechanism for capturing a portion of Ethereum block rewards for ecosystem funding. The proposal was designed as a credible commitment to future funding without actually implementing any reward capture. It suggested adding two parameters to the protocol: a beneficiary address and a per-block reward amount, both initially set to zero.</p>\n\n<p>The motivation behind EIP-1890 was to address the need for fair compensation for researchers and developers working on Ethereum's core infrastructure. The authors recognized that while the technical implementation was straightforward, the real challenge lay in the social aspects of fairly capturing, governing, and distributing block rewards for ecosystem funding.</p>\n\n<p>Ultimately, EIP-1890 was withdrawn and did not progress to implementation. The proposal sparked discussions about sustainable funding models for blockchain ecosystems, but the Ethereum community has since explored other funding mechanisms, such as Ethereum Foundation grants and decentralized funding platforms like Gitcoin. The core idea of allocating block rewards for ecosystem development remains a topic of ongoing debate in the cryptocurrency space.</p></article>",
  "EIP-1895": "<article><h1>EIP-1895: Support for an Elliptic Curve Cycle</h1>\n\n<p>EIP-1895, proposed by Alexandre Belling in March 2018, aimed to add support for MNT4 and MNT6 elliptic curve operations to Ethereum's EVM. These curve classes enable recursive SNARKs, allowing for more scalable zero-knowledge proofs and potentially addressing Ethereum's scalability challenges.</p>\n\n<p>The proposal suggested adding precompiles for ecadd, ecmul, and ecpairing operations on the MNT4 curve. This would complement the existing alt-bn128 curve operations, enabling more efficient verification of SNARKs within SNARKs. The primary motivation was to drastically reduce the gas cost of verifying multiple SNARKs, which was prohibitively expensive at the time.</p>\n\n<p>Despite its potential benefits, EIP-1895 has remained in \"Stagnant\" status. While recursive SNARKs continue to be an area of interest in the crypto community, this specific proposal has not gained traction for implementation. More recent developments in zero-knowledge proofs and Layer 2 scaling solutions may have superseded the need for this particular EIP in its original form.</p></article>",
  "EIP-1898": "<article><h1>EIP-1898: Add `blockHash` to defaultBlock methods</h1>\n\n<p>EIP-1898, proposed by Charles Cooper in April 2019, aimed to extend the functionality of several Ethereum JSON-RPC methods by allowing a block hash to be specified as an alternative to the existing defaultBlock parameter. This proposal was designed to enable more precise querying of blockchain state, especially in scenarios involving chain reorganizations.</p>\n\n<p>The proposal builds upon EIP-234, which introduced a similar concept for the eth_getBlockByHash method. EIP-1898 would apply this capability to methods like eth_getBalance, eth_getStorageAt, and eth_call, among others. By allowing clients to specify exact blocks by their hash, the proposal aimed to provide a more robust way of maintaining a consistent view of the blockchain state, even when the canonical chain changes.</p>\n\n<p>Currently, the proposal's status is listed as \"Stagnant,\" indicating that it has not seen recent activity or progress towards implementation. While the idea has merit in improving the precision of blockchain queries, it appears that the Ethereum community has not prioritized its adoption. As of now, clients must rely on existing methods to handle potential inconsistencies caused by chain reorganizations.</p></article>",
  "EIP-190": "<article><h1>EIP-190: Smart Contract Package Standard</h1>\n\n<p>EIP-190, proposed by Piper Merriam in 2016, aimed to establish a standard format for packaging smart contracts and their associated metadata. The proposal sought to create a consistent way to distribute and manage Ethereum smart contracts, addressing the need for better tooling and interoperability in the ecosystem.</p>\n\n<p>The proposal suggested using a JSON format to describe contract packages, including information such as contract source code, ABI, deployment bytecode, and compiler settings. This standardization would have facilitated easier contract verification, deployment, and integration across different development environments and tools. However, EIP-190 did not gain significant traction in its original form.</p>\n\n<p>While EIP-190 is no longer actively pursued in its initial state, its core ideas have influenced subsequent standards and tools in the Ethereum ecosystem. The proposal has been moved to the Ethereum ERCs repository, indicating a shift in its categorization. Today, similar functionalities are addressed by more comprehensive standards like ERC-2535 (Diamond Standard) for contract management and various tools in the Ethereum development ecosystem that handle contract packaging and metadata.</p>\n</article>",
  "EIP-1900": "<article><h1>EIP-1900: Consensus-By-Bet Casper FFG</h1>\n\n<p>EIP-1900, originally proposed by Vitalik Buterin in 2018, aimed to introduce a Consensus-By-Bet mechanism for Casper Friendly Finality Gadget (FFG). This proposal was part of Ethereum's efforts to transition from Proof-of-Work to Proof-of-Stake. The core idea was to allow validators to place bets on which blocks they believe will be finalized, creating an economic incentive for consensus.</p>\n\n<p>The proposal garnered significant attention in the Ethereum community due to its potential to improve network security and efficiency. However, as Ethereum's roadmap evolved, the focus shifted towards other scaling solutions and consensus mechanisms. As a result, EIP-1900 was eventually moved to the Ethereum Research repository, indicating a change in its status and priority.</p>\n\n<p>Currently, EIP-1900 is not being actively pursued for implementation. The Ethereum community has since focused on other proposals and implementations for achieving consensus in a Proof-of-Stake system, such as the Beacon Chain and Eth2 upgrades. While the concepts introduced in EIP-1900 contributed to the broader discussion on consensus mechanisms, they have been superseded by more recent developments in Ethereum's scaling",
  "EIP-1901": "<article><h1>EIP-1901: OpenRPC Service Discovery for JSON-RPC</h1>\n\n<p>EIP-1901, proposed in February 2019 by Shane Jonas and Zachary Belford, aimed to add OpenRPC support to Ethereum JSON-RPC services. The key idea was to implement a standardized <code>rpc.discover</code> method that would return a machine-readable specification of the JSON-RPC API. This would enable better tooling, automation, and interoperability across Ethereum clients.</p>\n\n<p>The proposal was motivated by the lack of a standardized, machine-readable JSON-RPC specification for Ethereum, despite earlier efforts like EIP-1474. By adopting OpenRPC, Ethereum services could provide self-documenting APIs, making it easier for developers to integrate and build tools around them. The proposal also aimed to make API specifications versionable and both human and machine-readable.</p>\n\n<p>While EIP-1901 showed promise for improving Ethereum's developer experience, its current status is \"Stagnant\". This suggests that despite initial interest, the proposal has not gained significant traction or been actively pursued within the Ethereum community. However, the core idea of standardized API discovery remains relevant and could potentially be revisited or incorporated into future Ethereum improvement efforts.</p>\n</article>",
  "EIP-191": "<article><h1>EIP-191: Signed Data Standard</h1>\n<p>EIP-191, proposed by Martin Holst Swende and Nick Johnson in January 2017, aimed to standardize how Ethereum-based systems handle signed data. The proposal addressed the need for a consistent method to sign and verify arbitrary messages, which is crucial for various applications, including off-chain message passing and authentication.</p>\n<p>The proposal gained traction in the Ethereum community due to its potential to enhance security and interoperability across different platforms and wallets. It introduced a versioning scheme for signed messages, allowing for future extensions and improvements. EIP-191 laid the groundwork for more specific message signing standards, such as EIP-712, which builds upon its principles.</p>\n<p>As of now, EIP-191 has been moved to the Ethereum Request for Comments (ERC) repository, indicating its transition from a proposal to a recognized standard. Its current status as \"Moved\" reflects its importance in the Ethereum ecosystem. While EIP-191 remains relevant, developers should refer to the latest version in the ERC repository for the most up-to-date implementation details and best practices.</p>\n</article>",
  "EIP-1921": "<article><h1>EIP-1921: Proposal for Ethereum Contract Decentralized Registry</h1>\n\n<p>EIP-1921, originally proposed by Micah Zoltu, aimed to establish a decentralized registry for Ethereum contracts. The proposal's primary goal was to create a standardized way for contracts to register themselves, allowing for easier discovery and interaction within the Ethereum ecosystem. This registry would have provided a more efficient method for users and developers to find and verify contract addresses, potentially enhancing the overall user experience and security of decentralized applications.</p>\n\n<p>The proposal was initially discussed in late 2019 but didn't gain significant traction in its original form. As the Ethereum ecosystem evolved, alternative solutions and approaches to contract discovery and verification emerged, which may have contributed to the proposal's status change. The current status of EIP-1921 is \"Moved,\" indicating that it has been relocated to the Ethereum ERCs repository for further consideration or potential integration with other standards.</p>\n\n<p>While EIP-1921 is not actively pursued in its original form, the concept of decentralized contract registries remains relevant in the broader context of blockchain interoperability and user-friendly dApp ecosystems. The proposal's core ideas may continue to influence future developments in Ethereum and other blockchain platforms, as the need for efficient contract discovery and verification mechanisms persists in the rapidly evolving world of",
  "EIP-1922": "<article><h1>EIP-1922: zk-SNARK Verifier Standard</h1>\n\n<p>EIP-1922, proposed by Barry WhiteHat, Jordi Baylina, and Alex Vlasov in 2019, aimed to standardize the interface for zk-SNARK verifiers on the Ethereum blockchain. The proposal sought to create a common framework for implementing and interacting with zero-knowledge proof systems, which are crucial for enhancing privacy and scalability in blockchain applications.</p>\n\n<p>The proposal defined a standard interface for zk-SNARK verifiers, including functions for verifying proofs and managing verification keys. This standardization would have allowed for easier integration of zk-SNARK technology across different Ethereum projects and improved interoperability between various zero-knowledge proof implementations.</p>\n\n<p>However, EIP-1922 has been moved to the Ethereum ERCs repository, indicating a shift in its categorization. The current status suggests that while the proposal remains relevant, it may have been superseded by more recent developments in the field of zero-knowledge proofs on Ethereum, such as advancements in zk-rollups and other scaling solutions. For the most up-to-date information on this proposal, interested parties should refer to the ERC-1922 document in the Ethereum ERCs repository.</p>\n</article>",
  "EIP-1923": "<article><h1>EIP-1923: Zinc VM</h1>\n<p>EIP-1923, also known as the Zinc VM proposal, was an initiative to introduce a new virtual machine for the Ethereum blockchain. The proposal aimed to create a more efficient and secure environment for executing smart contracts. Zinc VM was designed to be a register-based virtual machine, as opposed to the stack-based architecture of the Ethereum Virtual Machine (EVM).</p>\n<p>The proposal was authored by Alex Beregszaszi and Pawel Bylica, both prominent figures in the Ethereum development community. It was first introduced in 2019 as part of ongoing efforts to improve Ethereum's scalability and performance. The Zinc VM was intended to coexist with the EVM, allowing developers to choose between the two execution environments based on their specific needs.</p>\n<p>However, EIP-1923 has since been moved to the Ethereum ERCs repository, indicating a shift in its status and development path. The current location of the proposal is https://github.com/ethereum/ercs/blob/master/ERCS/erc-1923.md. This move suggests that while the concept of Zinc VM remains relevant, it may no longer be pursued as an immediate core protocol change for Ethereum. Instead, it might be explored further as a potential standard or future enhancement.</p></article>",
  "EIP-1930": "<article><h1>EIP-1930: CALLs with strict gas semantic</h1>\n\n<p>EIP-1930 was proposed by Ronan Sandford in April 2019 to add the ability for smart contracts to execute calls with a specific amount of gas, reverting if that exact amount is not available. This addresses issues with the existing CALL, DELEGATE_CALL, and STATIC_CALL opcodes, which treat the gas value as a maximum rather than an exact amount.</p>\n\n<p>The proposal aims to solve problems for applications like meta-transactions, where contracts need to ensure calls are executed exactly as intended by signing users. It would also enable more reliable on-chain interface checks using standards like EIP-165. The EIP suggests either adding new opcode variants with stricter gas semantics or designating a specific unused gas value range to have this strict behavior.</p>\n\n<p>As of 2023, EIP-1930 remains in \"Stagnant\" status, indicating a lack of recent progress or discussion. While the problem it addresses is valid, the Ethereum community has not reached consensus on implementing this specific solution. Other proposals and Layer 2 solutions have emerged to address similar concerns around gas management and predictable execution.</p></article>",
  "EIP-1948": "<article><h1>EIP-1948: Non-fungible Data Token</h1>\n\n<p>EIP-1948, proposed by Alexandre Belling in May 2019, aimed to introduce a standard for non-fungible tokens (NFTs) with mutable data fields. This proposal sought to extend the functionality of ERC-721 by allowing token data to be updated without changing the token's identity, addressing limitations in existing NFT standards.</p>\n\n<p>The proposal gained attention for its potential applications in gaming, digital collectibles, and other use cases requiring mutable metadata. However, it did not achieve widespread adoption or implementation. As of now, EIP-1948 has been moved to the Ethereum Request for Comments (ERCs) repository, indicating a shift in its status and development process.</p>\n\n<p>While EIP-1948 offered an interesting approach to NFT data mutability, other proposals and standards have since emerged to address similar concerns. For example, ERC-1155 provides multi-token support and metadata updates. Given its current status and the evolution of NFT standards, EIP-1948 is not widely recommended for implementation today, though its concepts may have influenced subsequent developments in the NFT space.</p></article>",
  "EIP-1959": "<article><h1>EIP-1959: New Opcode to Check Valid ChainIDs</h1>\n\n<p>EIP-1959, proposed by Ronan Sandford in April 2019, aimed to introduce a new opcode to check if a given chainID has been part of the valid history of chainIDs for a particular Ethereum chain. This proposal was designed to protect off-chain messages from being reused across different chains, especially important for Layer 2 signature schemes using EIP-712.</p>\n\n<p>The motivation behind EIP-1959 was to provide a simpler, cheaper, and safer alternative to EIP-1344, which gave smart contracts access to the current chainID. EIP-1959 proposed an opcode that would return whether a specific number had been a valid chainID in the history of the chain, including the current chainID. This approach would allow smart contracts to verify signatures across chain history without relying on potentially risky contract-based solutions.</p>\n\n<p>Currently, EIP-1959 is in a \"Stagnant\" status, indicating that development and discussions around it have slowed or stopped. While the proposal addressed an important issue in cross-chain signature verification, it appears that other solutions or approaches may have taken precedence in addressing this concern within the Ethereum ecosystem.</p>\n</article>",
  "EIP-196": "<article><h1>EIP-196: Precompiled Contracts for Elliptic Curve Operations</h1>\n\n<p>EIP-196, authored by Christian Reitwiessner in 2017, introduced precompiled contracts for addition and scalar multiplication on the alt_bn128 elliptic curve. This proposal was crucial for enabling efficient zkSNARK verification within Ethereum's block gas limit, paving the way for increased privacy and potential scalability improvements.</p>\n\n<p>The motivation behind EIP-196 was to address the transparency issues in Ethereum smart contracts, which made them unsuitable for use cases involving private information. By implementing these precompiled contracts, the proposal significantly reduced the gas costs associated with zkSNARK operations, making them viable within the Ethereum ecosystem. This EIP works in conjunction with EIP-197, which focuses on pairing operations on the same curve.</p>\n\n<p>EIP-196 has been implemented and is currently in \"Final\" status. It has been widely adopted and serves as a fundamental building block for privacy-preserving applications on Ethereum. The proposal's importance has grown with the increasing demand for privacy solutions in blockchain technology, and it continues to be relevant in the ongoing development of zkSNARK-based applications on Ethereum.</p></article>",
  "EIP-1962": "<article><h1>EIP-1962: EC arithmetic and pairings with runtime definitions</h1>\n\n<p>EIP-1962 was proposed in April 2019 by Alex Vlasov as an extension of EIP-1829 to add support for elliptic curve operations and pairings with runtime-defined parameters. The motivation was to enable cryptographic functionality needed for privacy and scaling solutions on Ethereum.</p>\n\n<p>The proposal specifies a new precompile that would support operations like point addition, scalar multiplication, and multiexponentiation on Weierstrass curves, as well as pairing operations on BLS12, BN, and MNT4/6 curves. Importantly, curve parameters like the base field and coefficients would be specified at runtime rather than hardcoded. This flexibility would allow supporting a wider range of curves and cryptographic schemes.</p>\n\n<p>While EIP-1962 provided a comprehensive specification for generalizing elliptic curve operations on Ethereum, it has not been implemented. The proposal is currently marked as \"Stagnant\" and seems to have been superseded by more targeted EIPs for specific curve operations. However, the ideas in EIP-1962 remain relevant for expanding Ethereum's cryptographic capabilities in a flexible way.</p>\n</article>",
  "EIP-1965": "<article><h1>EIP-1965: Method to check if a chainID is valid at a specific block number</h1>\n\n<p>EIP-1965, proposed by Ronan Sandford in April 2019, aimed to introduce a precompile that would allow checking the validity of a chainID at a specific block number. This proposal was designed to enhance protection against transaction replay attacks between different Ethereum chains and improve Layer 2 signature schemes.</p>\n\n<p>The motivation behind EIP-1965 was to address limitations in existing solutions like EIP-1344, which only provided access to the current chainID. EIP-1965 aimed to offer a simpler, cheaper, and safer method for smart contracts to verify chainIDs across different block numbers, particularly useful for off-chain message signatures and Layer 2 solutions using EIP-712.</p>\n\n<p>Despite its potential benefits, EIP-1965 has not gained significant traction and is currently in a \"Stagnant\" status. While it offered improvements over EIP-1344, the Ethereum community has since explored other approaches to address chain identification and replay protection. As such, EIP-1965 is not likely to be implemented in its current form, though its concepts may have influenced subsequent proposals or solutions in the Ethereum ecosystem.</p>\n</article>",
  "EIP-1967": "<article><h1>EIP-1967: Standard Proxy Storage Slots</h1>\n\n<p>EIP-1967, proposed by Santiago Palladino in 2019, aimed to standardize storage slots for proxy contracts in Ethereum. The proposal addressed the issue of storage collisions in upgradeable contracts, which could lead to security vulnerabilities and inconsistencies. By defining specific storage slots for proxy-related data, EIP-1967 sought to improve interoperability and reduce the risk of accidental overwriting of critical information.</p>\n\n<p>The proposal gained traction in the Ethereum development community, with several implementations and frameworks adopting its recommendations. OpenZeppelin, a popular smart contract library, incorporated EIP-1967 into its upgradeable contracts, further promoting its adoption. The standardization efforts helped create a more robust ecosystem for upgradeable contracts, enabling easier auditing and reducing potential points of failure.</p>\n\n<p>As of now, EIP-1967 has been moved to the Ethereum ERCs repository, indicating its acceptance and ongoing relevance in the Ethereum ecosystem. While it has been superseded by more comprehensive standards like EIP-1822 (Universal Upgradeable Proxy Standard), EIP-1967 remains an important milestone in the evolution of proxy contract patterns and continues to influence best practices in smart contract development.</p></article>",
  "EIP-197": "<article><h1>EIP-197: Precompiled Contracts for Optimal Ate Pairing Check</h1>\n\n<p>EIP-197, authored by Vitalik Buterin and Christian Reitwiessner in February 2017, introduced precompiled contracts for elliptic curve pairing operations on the alt_bn128 curve. This proposal was crucial for enabling efficient zkSNARK verification within Ethereum's block gas limit, paving the way for increased privacy and potential scalability improvements.</p>\n\n<p>The EIP's primary motivation was to address the transparency issues in smart contract executions, which limited use cases involving private information. By implementing precompiled contracts for pairing functions, EIP-197 significantly reduced the computational cost of zkSNARK verification, making it feasible within Ethereum's constraints. This improvement built upon EIP-196, which introduced other elliptic curve operations.</p>\n\n<p>EIP-197 has been implemented and is currently in \"Final\" status. It has become a fundamental component of Ethereum's privacy-enhancing capabilities, enabling projects to implement zero-knowledge proofs more efficiently. While newer elliptic curves and zero-knowledge technologies have emerged since its inception, EIP-197 remains a critical part of Ethereum's core functionality for privacy-preserving applications.</p></article>",
  "EIP-1973": "<article><h1>EIP-1973: Scalable Rewards</h1>\n\n<p>EIP-1973, titled \"Scalable Rewards,\" was a proposal aimed at addressing the scalability issues in reward distribution for decentralized applications (dApps) on the Ethereum network. The proposal was initially created to provide a more efficient method for distributing rewards to large numbers of users, which is a common requirement in many blockchain-based applications, especially in the realm of decentralized finance (DeFi) and gaming.</p>\n\n<p>The proposal was authored by Ronan Sandford, a prominent figure in the Ethereum development community. It aimed to introduce a new standard for implementing reward systems that could handle a high volume of recipients without incurring prohibitive gas costs. This was particularly important for applications dealing with frequent, small-value transactions or distributions to many users.</p>\n\n<p>As of now, EIP-1973 has been moved to the Ethereum ERCs (Ethereum Request for Comments) repository. This relocation suggests that while the proposal garnered interest, it may have been superseded by other solutions or integrated into broader discussions about scalability in the Ethereum ecosystem. Its current status is \"Moved,\" indicating that development and discussion have shifted to a different forum or have been incorporated into other initiatives addressing similar concerns in the evolving Ethereum landscape.</p>\n</article>",
  "EIP-198": "<article><h1>EIP-198: Big Integer Modular Exponentiation</h1>\n\n<p>EIP-198, proposed by Ethereum co-founder Vitalik Buterin in January 2017, introduces a precompile for big integer modular exponentiation. This operation is crucial for various cryptographic applications, including RSA encryption and certain zero-knowledge proof systems. The proposal aimed to make these operations more gas-efficient on the Ethereum network.</p>\n\n<p>The EIP specifies a precompile at address 0x00......05 that performs modular exponentiation (BASE**EXPONENT) % MODULUS. It defines a specific input format and gas cost calculation based on the complexity of the operation. The proposal was designed to balance the need for this functionality with concerns about potential denial-of-service attacks through computationally intensive operations.</p>\n\n<p>EIP-198 has been implemented and is currently in \"Final\" status, meaning it has been adopted into the Ethereum protocol. It laid the groundwork for more complex cryptographic operations on Ethereum and has been utilized in various projects requiring efficient modular exponentiation. While still relevant, newer proposals have built upon this foundation to further optimize and expand cryptographic capabilities on the Ethereum network.</p></article>",
  "EIP-1985": "<article><h1>EIP-1985: Sane Limits for Certain EVM Parameters</h1>\n\n<p>EIP-1985, proposed by Alex Beregszaszi and Paweł Bylica in August 2018, aimed to introduce explicit value ranges for certain Ethereum Virtual Machine (EVM) parameters. The proposal sought to establish limits for gas, block number, block timestamp, and other EVM-related values to improve client compatibility, potentially offer minor performance improvements, and simplify consensus-critical testing.</p>\n\n<p>The proposal specified ranges for gas-related values (0 to 2^63 - 1), block number and timestamp (0 to 2^63 - 1), and account addresses (20 bytes). These limits would affect instructions like GASLIMIT, GAS, TIMESTAMP, and NUMBER. The motivation behind this EIP was to eliminate unrealistic edge cases and create a more standardized environment for EVM implementations.</p>\n\n<p>Currently, EIP-1985 is in a \"Stagnant\" status, indicating that it has not seen significant activity or updates recently. While the proposal offered potential benefits for EVM standardization, it appears that it has not gained enough traction for implementation. Developers working on EVM-compatible chains or Layer 2 solutions might still find the proposed limits useful as reference points, even if they haven't been",
  "EIP-1996": "<article><h1>EIP-1996: Holdable Token</h1>\n<p>EIP-1996, also known as the Holdable Token proposal, was an Ethereum Improvement Proposal that aimed to introduce a new token standard. The proposal was initially created to address the need for tokens that could be temporarily locked or \"held\" for a specified period. This functionality was particularly useful for various decentralized finance (DeFi) applications, including staking, vesting, and time-locked transactions.</p>\n<p>The proposal was authored by Yoonsung Na, Sangbong Kim, and Junghoon Seo in 2019. It extended the popular ERC-20 token standard by adding new functions to enable token holding mechanisms. However, the proposal did not gain significant traction in the Ethereum community and was eventually moved from the main EIPs repository to the ERCs repository.</p>\n<p>As of now, EIP-1996 has been superseded by more comprehensive and widely adopted standards such as ERC-2222 (Funds Distribution) and ERC-1155 (Multi Token Standard), which offer similar functionalities with broader use cases. The current status of the proposal is \"Moved,\" indicating that it is no longer actively considered for implementation in its original form.</p></article>",
  "EIP-2": "<article><h1>EIP-2: Homestead Hard-fork Changes</h1>\n\n<p>EIP-2, proposed by Ethereum co-founder Vitalik Buterin, outlined critical changes for the Ethereum network's transition from the \"Frontier\" phase to \"Homestead\". This proposal, which became effective at block 1,150,000 on the mainnet in March 2016, introduced several key modifications to improve security and functionality.</p>\n\n<p>The proposal increased the gas cost for contract creation via transactions from 21,000 to 53,000, invalidated transaction signatures with high s-values, and modified the behavior of contract creation failures. It also adjusted the difficulty calculation algorithm. These changes were aimed at enhancing network stability and security while paving the way for future improvements.</p>\n\n<p>EIP-2 was successfully implemented and has been an integral part of Ethereum's core protocol since the Homestead hard fork. It laid the groundwork for subsequent upgrades and improvements to the Ethereum network, including later proposals that further refined gas costs and cryptographic security measures. The proposal's status remains \"Final\", indicating its continued relevance and implementation in the Ethereum protocol.</p></article>",
  "EIP-20": "<article><h1>EIP-20: Token Standard</h1>\n\n<p>EIP-20, also known as the ERC-20 Token Standard, was proposed by Fabian Vogelsteller and Vitalik Buterin in November 2015. This standard defines a common set of rules for Ethereum tokens, enabling seamless interoperability between various token implementations. It quickly became the de facto standard for fungible tokens on the Ethereum network, providing a foundation for the explosive growth of ICOs and DeFi applications.</p>\n\n<p>The ERC-20 standard specifies six mandatory functions (totalSupply, balanceOf, transfer, transferFrom, approve, allowance) and two optional ones (name, symbol). These functions allow for basic token operations like transfers and balance checks, as well as more complex interactions like delegated transfers. The widespread adoption of ERC-20 led to the development of supporting infrastructure, including wallets, exchanges, and smart contract templates, significantly lowering the barrier to entry for token creation and management on Ethereum.</p>\n\n<p>While ERC-20 remains widely used, newer standards like ERC-777 and ERC-1155 have been proposed to address some of its limitations. However, due to its simplicity and established ecosystem, ERC-20 continues to be the primary choice for many token implementations. The proposal's current status is \"Final",
  "EIP-2003": "<article><h1>EIP-2003: EVMC Modules for Precompiled Contracts</h1>\n\n<p>EIP-2003, proposed by Paweł Bylica and Alex Beregszaszi in May 2019, aimed to standardize the implementation of Ethereum precompiled contracts using the EVMC (Ethereum Virtual Machine Connector) API. This proposal sought to enhance interoperability and modularity in Ethereum client implementations.</p>\n\n<p>The EIP specified how EVMC modules should advertise their capability to handle precompiled contracts and detailed the execution process for such contracts. It built upon EIP-1352, which defined the address range for precompiled contracts. The proposal outlined specific requirements for validating execution requests and handling precompiled contract calls within the EVMC framework.</p>\n\n<p>As of now, EIP-2003 is in a \"Stagnant\" status, indicating that development has slowed or stopped. While the proposal provided a valuable approach to standardizing precompiled contract implementations, its adoption and further development appear to have been limited. The current Ethereum ecosystem may have evolved to address these needs through other means or subsequent proposals.</p>\n</article>",
  "EIP-2009": "<article><h1>EIP-2009: Compliance Extension for Token Standards</h1>\n\n<p>EIP-2009, originally proposed by Adam Dossa, Gabriel Shapiro, and David Sacks, aimed to create a compliance extension for existing token standards like ERC-20 and ERC-721. The proposal's primary purpose was to provide a standardized way for token contracts to enforce transfer restrictions and comply with various regulatory requirements.</p>\n\n<p>The proposal introduced interfaces and methods to check transfer validity, manage compliance data, and handle token migrations. It was designed to be flexible enough to accommodate different compliance needs across jurisdictions while maintaining interoperability with existing token standards. However, EIP-2009 faced challenges in achieving consensus within the Ethereum community, partly due to concerns about potential centralization and the complexity of implementing compliance rules on-chain.</p>\n\n<p>As of now, EIP-2009 has been moved to the Ethereum ERCs repository, indicating that it is no longer actively considered for implementation as an Ethereum Improvement Proposal. While the idea of standardized compliance extensions remains relevant, especially in the context of security tokens and regulatory compliance, the crypto community continues to explore alternative approaches to address these challenges.</p></article>",
  "EIP-2014": "<article><h1>EIP-2014: Extended State Oracle</h1>\n\n<p>EIP-2014, proposed by Alex Beregszaszi in May 2019, aimed to introduce a new system contract called the Extended State Oracle (ESO) to provide access to extended data sets like chain identifiers and block hashes. The proposal sought to address the need for additional data access in Ethereum smart contracts without consuming scarce opcode space or requiring complex precompile interfaces.</p>\n\n<p>The ESO was designed to be implemented as a precompile at address 0x0000000000000000000000000000000000000009, accessible via CALL or STATICCALL opcodes. It would use the Contract ABI Encoding for inputs and outputs, allowing Ethereum contract languages to interact with it like a regular contract without needing specific language support. This approach aimed to provide a flexible and extensible solution for accessing various types of blockchain data.</p>\n\n<p>Despite its potential benefits, EIP-2014 has not gained significant traction and is currently in a \"Stagnant\" status. While the proposal offered an interesting approach to extend the EVM's capabilities, other solutions like EIP-1344 for chainId access have been implemented instead. As of now, there are no immediate plans to implement the Extended State Oracle as originally proposed in EIP-2014.</p></article>",
  "EIP-2015": "<article><h1>EIP-2015: wallet_updateEthereumChain RPC Method</h1>\n\n<p>EIP-2015, proposed in May 2019 by Pedro Gomes, Erik Marks, and Pandapip1, aimed to introduce a standardized RPC method for switching between EVM-compatible chains in cryptocurrency wallets. The proposal, titled \"wallet_updateEthereumChain RPC Method,\" sought to provide a consistent interface for applications to request chain switches and register new networks with wallets.</p>\n\n<p>The proposed method, <code>wallet_updateEthereumChain</code>, would accept parameters including <code>chainId</code>, <code>chainName</code>, <code>rpcUrl</code>, <code>nativeCurrency</code>, and <code>blockExplorerUrl</code>. This would allow dApps to programmatically request users to switch networks or add new networks to their wallet, improving user experience and reducing friction when interacting with multi-chain applications.</p>\n\n<p>As of now, EIP-2015 is marked as \"Stagnant,\" indicating that it has not seen recent activity or updates. While the proposal addressed a real need in the ecosystem, similar functionality has since been implemented through other means, such as EIP-3085 (wallet_addEthereumCh",
  "EIP-2018": "<article><h1>EIP-2018: Clearable Token Standard</h1>\n\n<p>EIP-2018, proposed by Weiwu Zhang, introduced the Clearable Token Standard. This ERC aimed to extend ERC-20 tokens with a \"clear\" function, allowing token issuers to forcibly remove tokens from specific addresses. The proposal was motivated by the need for regulatory compliance in certain jurisdictions, particularly for security tokens.</p>\n\n<p>The proposal generated significant discussion within the Ethereum community. Proponents argued it would enable broader adoption of tokenized securities, while critics raised concerns about centralization and potential abuse. Despite initial interest, EIP-2018 did not gain widespread acceptance due to its controversial nature and potential conflict with Ethereum's principles of decentralization.</p>\n\n<p>Currently, EIP-2018 has been moved to the Ethereum ERCs repository, indicating it is no longer actively pursued as an Ethereum Improvement Proposal. The crypto community has generally favored more decentralized approaches to regulatory compliance, such as on-chain governance mechanisms or layer-2 solutions, rather than implementing forceful token removal at the protocol level.</p></article>",
  "EIP-2019": "<article><h1>EIP-2019: A Brief Technical Summary</h1>\n\n<p>EIP-2019 was an Ethereum Improvement Proposal that has since been moved to the Ethereum Request for Comments (ERC) repository. The proposal's specific details are now maintained at https://github.com/ethereum/ercs/blob/master/ERCS/erc-2019.md. This move indicates that the proposal was likely related to a token standard or interface specification, as ERCs typically focus on application-level standards and conventions.</p>\n\n<p>The relocation of EIP-2019 to the ERC repository suggests that it may have been deemed more appropriate as a community standard rather than a core protocol change. Without access to the original content, it's challenging to provide specific details about its purpose, authorship, or current implementation status. However, the move to the ERC repository implies that the proposal is still considered relevant and potentially useful for Ethereum developers and projects.</p>\n\n<p>For the most up-to-date information on EIP-2019, including its current status, purpose, and any related developments, interested parties should refer to the linked ERC document in the Ethereum GitHub repository.</p></article>",
  "EIP-2020": "<article><h1>EIP-2020: NFT Royalty Standard</h1>\n\n<p>EIP-2020, proposed by William Entriken, Zach Burks, and James Morgan in 2019, aimed to establish a standardized way for Non-Fungible Tokens (NFTs) to include royalty information. This proposal sought to enable creators to receive ongoing compensation for their work through secondary sales, a feature not natively supported in the original ERC-721 standard.</p>\n\n<p>The proposal gained significant attention in the NFT community but faced challenges in implementation due to complexities in enforcing royalties on-chain. While EIP-2020 helped spark important discussions about creator rights in the digital space, it was eventually superseded by more comprehensive proposals like EIP-2981 (NFT Royalty Standard) which was finalized in 2021.</p>\n\n<p>Currently, EIP-2020 has been moved to the Ethereum ERCs repository, indicating its historical significance but also that it's no longer actively considered for implementation in its original form. The concepts introduced in EIP-2020 continue to influence ongoing discussions about fair compensation for digital creators in the evolving NFT ecosystem.</p></article>",
  "EIP-2021": "<article><h1>EIP-2021: Token Standard for Atomic Swaps</h1>\n\n<p>EIP-2021, originally proposed by Dominic Steil in 2019, aimed to establish a standard for atomic swaps between ERC-20 tokens. Atomic swaps allow for trustless, peer-to-peer exchanges of cryptocurrencies without intermediaries. This proposal sought to create a consistent interface for implementing atomic swaps, potentially increasing interoperability and reducing complexity in decentralized exchanges.</p>\n\n<p>The proposal gained initial traction due to the growing interest in decentralized finance (DeFi) and the need for more efficient token exchange mechanisms. However, as the DeFi ecosystem evolved rapidly, alternative solutions and protocols emerged, addressing similar concerns in different ways. This led to a shift in focus away from EIP-2021.</p>\n\n<p>Currently, EIP-2021 has been moved to the Ethereum ERCs repository, indicating that it is no longer actively pursued as an Ethereum Improvement Proposal. While the concept of atomic swaps remains relevant, the specific implementation proposed in EIP-2021 has been superseded by more comprehensive and widely adopted protocols in the DeFi space, such as automated market makers (AMMs) and cross-chain bridges.</p></article>",
  "EIP-2025": "<article><h1>EIP-2025: Block Rewards Proposal for funding Eth1.x</h1>\n\n<p>EIP-2025 was a controversial proposal authored by James Hancock in 2019 to temporarily increase the Ethereum block reward by 0.0055 ETH for 18 months to fund Ethereum 1.x development initiatives. The proposal aimed to raise approximately 17,050 ETH to support working groups focused on state rent, better sync, finality gadget, fee market, and testing infrastructure improvements.</p>\n\n<p>The proposal built upon the mechanism established in EIP-1890 for capturing a portion of block rewards for network development funding. However, EIP-2025 faced significant pushback from the Ethereum community due to concerns about changing the monetary policy and setting a precedent for using block rewards to fund development. Critics argued it went against Ethereum's principles of minimizing inflation and avoiding centralized control of funding.</p>\n\n<p>Ultimately, EIP-2025 was withdrawn after extensive debate. The episode highlighted the challenges of sustainably funding protocol development and the community's strong views on Ethereum's monetary policy. While the specific proposal was not implemented, it sparked important discussions about funding models and led to exploration of alternative approaches for supporting critical Ethereum infrastructure development.</p>\n\n</article>",
  "EIP-2026": "<article><h1>EIP-2026: State Rent H - Fixed Prepayment for Accounts</h1>\n\n<p>EIP-2026, authored by Alexey Akhunov, proposed a fixed one-off rent prepayment for the creation of new accounts and first modification of existing accounts in Ethereum. This proposal was part of the broader State Rent initiative, aiming to address state growth concerns by introducing economic incentives for efficient state usage.</p>\n\n<p>The proposal introduced a new account field called <code>rentbalance</code>, which would store the prepayment amount. This approach aimed to put a theoretical bound on the total number of accounts in the Ethereum state, as the prepayment couldn't be recycled through mining. It also sought to prevent miners from circumventing the penalty, addressing shortcomings of simply raising gas costs for account creation.</p>\n\n<p>Currently, EIP-2026 is in a \"Stagnant\" status, indicating that it hasn't seen recent activity or updates. While the State Rent concept generated significant discussion in the Ethereum community, alternative approaches to managing state growth have since gained more traction, such as EIP-1559's fee market change and ongoing research into stateless clients and state expiry mechanisms.</p>\n</article>",
  "EIP-2027": "<article><h1>EIP-2027: State Rent C - Net Contract Size Accounting</h1>\n\n<p>EIP-2027, authored by Alexey Akhunov, was proposed in May 2019 as part of the State Rent roadmap. Its primary purpose was to introduce net accounting of contract storage slots in Ethereum. This proposal aimed to pave the way for more comprehensive contract size tracking, which would be beneficial for future gas cost calculations and snapshot synchronization protocols.</p>\n\n<p>The proposal suggested tracking the net change in the number of storage slots filled and emptied in contracts, without accounting for pre-existing slots. This was intended as a stepping stone towards a more comprehensive \"Gross contract size accounting\" system. EIP-2027 was designed to address scalability concerns by enabling more accurate gas cost calculations for operations like SLOAD and SSTORE, as well as improving the efficiency of various synchronization protocols.</p>\n\n<p>Currently, EIP-2027 is in a \"Stagnant\" status, indicating that it has not seen significant development or discussion recently. While the proposal offered potential benefits for Ethereum's scalability and efficiency, it appears that the community has not reached a consensus on its implementation. As the Ethereum ecosystem continues to evolve, other proposals or solutions may have superseded or incorporated aspects of EIP-2027's objectives.</p></article>",
  "EIP-2028": "<article><h1>EIP-2028: Transaction Data Gas Cost Reduction</h1>\n\n<p>EIP-2028, proposed in May 2019, aimed to reduce the gas cost of Calldata from 68 gas per byte to 16 gas per byte. The proposal was authored by a team including Alexey Akhunov and researchers from StarkWare, with the goal of improving Ethereum's scalability both on-chain and for layer 2 solutions.</p>\n\n<p>The motivation behind EIP-2028 was twofold: to increase on-chain transaction throughput by allowing more data to fit in a single block, and to make layer 2 scaling solutions more efficient by reducing the cost of transmitting data between layers. The proposal was particularly beneficial for zero-knowledge proof systems like STARKs and SNARKs, which rely on sending proofs in Calldata.</p>\n\n<p>EIP-2028 was implemented in the Istanbul hard fork in December 2019, marking a significant step in Ethereum's scalability efforts. Its implementation has enabled more efficient rollups and other layer 2 solutions, contributing to Ethereum's ability to handle increased transaction volume. The proposal's success demonstrates the ongoing evolution of Ethereum's gas mechanics to support network growth and efficiency.</p>\n</article>",
  "EIP-2029": "<article><h1>EIP-2029: State Counters Contract</h1>\n\n<p>EIP-2029 was proposed by Alexey Akhunov in May 2019 as part of the State Rent roadmap for Ethereum. Its purpose was to introduce a special contract at a predetermined address to store various state counters, most importantly the total number of transactions. This would enable replay protection for accounts that were evicted and later brought back by receiving ether.</p>\n\n<p>The proposal specified deploying a simple contract that could read from specified storage slots. Ethereum nodes would then write state counters into this contract's storage. This provided a dedicated place in the Ethereum state to track important metrics like transaction count and number of accounts.</p>\n\n<p>As of 2023, EIP-2029 is listed as \"Stagnant\" and has not been implemented. The broader State Rent initiative it was part of has largely been superseded by other scalability approaches like sharding and layer 2 solutions. While the concept of state counters remains relevant, alternative implementations have likely been explored outside of this specific EIP.</p>\n</article>",
  "EIP-2031": "<article><h1>EIP-2031: State Rent B - Net Transaction Counter</h1>\n\n<p>EIP-2031, authored by Alexey Akhunov, proposes adding a global transaction counter to Ethereum's state. This counter would be incremented with each transaction and stored in a special \"State counter contract\". The primary purpose is to enable replay protection for accounts that have been evicted and later restored, which is part of the broader State Rent proposal.</p>\n\n<p>The proposal was created in May 2019 as part of a series of State Rent improvements. It builds upon EIP-2029, which introduces the State counter contract. The motivation behind this change is to provide a reliable way to assign nonces to newly created or restored non-contract accounts, ensuring transaction replay protection in a system where accounts can be evicted from state.</p>\n\n<p>As of now, EIP-2031 is marked as \"Stagnant\", indicating that it hasn't seen recent activity or updates. While the concept of State Rent remains relevant to Ethereum's scalability challenges, this specific proposal hasn't been implemented. More recent scaling solutions, such as rollups and sharding, have taken precedence in addressing Ethereum's state growth concerns.</p></article>",
  "EIP-2035": "<article><h1>EIP-2035: Stateless Clients - Repricing SLOAD and SSTORE</h1>\n\n<p>EIP-2035, proposed by Alexey Akhunov in May 2019, aimed to increase the gas cost of SLOAD and SSTORE opcodes to accommodate the extra bandwidth required for block proofs. This proposal was part of the broader State Rent roadmap, which sought to address Ethereum's state growth challenges.</p>\n\n<p>The primary goal of EIP-2035 was to prepare Ethereum for the introduction of block proofs, enabling nodes to process transactions without accessing the entire Ethereum state. This would potentially speed up block processing and reduce memory footprint for most nodes. However, it would increase the workload for miners, necessitating additional charges to compensate for the extra effort in constructing and transmitting block proofs.</p>\n\n<p>Despite its potential benefits, EIP-2035 has not been implemented and is currently in a \"Stagnant\" status. The proposal has been superseded by more comprehensive approaches to stateless Ethereum, such as the ongoing research into verkle trees and other state management solutions. While the core idea of enabling stateless clients remains relevant, the specific implementation proposed in EIP-2035 is no longer actively pursued.</p></article>",
  "EIP-2045": "<article><h1>EIP-2045: Particle Gas Costs for EVM Opcodes</h1>\n\n<p>EIP-2045, proposed by Casey Detrio and Alex Beregszaszi in May 2019, aimed to introduce fractional \"particle\" gas costs for Ethereum Virtual Machine (EVM) opcodes. The motivation was to allow more granular pricing of computational opcodes, which benchmarks showed were overpriced relative to storage operations.</p>\n\n<p>The proposal would have enabled gas costs below the current minimum of 1, potentially increasing transaction throughput without raising block gas limits and accelerating state growth. This could have improved efficiency while maintaining economic balance. However, it faced challenges around backwards compatibility and implementation complexity.</p>\n\n<p>As of 2023, EIP-2045 remains in \"Stagnant\" status, having not progressed to implementation. More recent gas cost optimization efforts like EIP-1559 and EIP-4844 have taken different approaches to scaling Ethereum. While the core insight about opcode pricing remains relevant, particle gas costs have not been adopted in Ethereum's roadmap.</p>\n\n</article>",
  "EIP-2046": "<article><h1>EIP-2046: Reduced Gas Cost for Static Calls to Precompiles</h1>\n\n<p>EIP-2046, authored by Alex Beregszaszi, proposes reducing the gas cost for static calls made to precompiled contracts in Ethereum. The proposal aims to address the increased cost of calls implemented by the Spurious Dragon hard fork, which made certain precompiles impractical to use.</p>\n\n<p>The EIP suggests lowering the base gas cost of calling precompiles using STATICCALL from 700 to 40. This change would allow for more efficient use of precompiles and enable the implementation of precompiles with a total cost below 700. The proposal only affects the STATICCALL instruction to minimize the impact of the change, as precompiles currently do not have state and cannot modify it.</p>\n\n<p>As of now, EIP-2046 is in a \"Stagnant\" status, indicating that it has not seen significant activity or updates recently. The proposal requires EIP-214 (New opcode STATICCALL) and EIP-1352 (Specify restricted address range for precompiles/system contracts) to be implemented. While the motivation for this change is clear, further discussion and development may be needed to move it forward in the Ethereum improvement process.</p>\n</article>",
  "EIP-205": "<article><h1>EIP-205: ENS Support for Contract ABIs</h1>\n\n<p>EIP-205, proposed by Nick Johnson in 2017, aimed to enhance the Ethereum Name Service (ENS) by adding support for storing and retrieving Application Binary Interfaces (ABIs) for smart contracts. This proposal sought to standardize a way to associate ABIs with Ethereum addresses, making it easier for developers and users to interact with smart contracts through ENS.</p>\n\n<p>The proposal suggested using ENS to store ABI information, allowing for more efficient and user-friendly contract interactions. It proposed a new ENS resolver interface that would enable the storage and retrieval of ABIs, either in full or as a reference to an external source. This improvement would have simplified the process of obtaining contract ABIs, potentially reducing errors and improving the overall developer experience.</p>\n\n<p>However, EIP-205 has since been moved to the Ethereum ERCs repository, indicating a shift in its categorization and possibly its status. The current state and implementation of this proposal are not widely known, and it may have been superseded by other ENS improvements or alternative solutions for managing contract ABIs. Developers interested in the latest ENS standards should refer to more recent proposals and the official ENS documentation for up-to-date information on ABI support and related functionalities.</p>\n</article>",
  "EIP-2069": "<article><h1>EIP-2069: Recommendation for using YAML ABI in ERCs/EIPs</h1>\n\n<p>EIP-2069 was proposed in 2017 by Alex Beregszaszi as an informational EIP to recommend using YAML instead of Solidity code for describing contract ABIs in Ethereum Improvement Proposals (EIPs) and Ethereum Request for Comments (ERCs). The motivation was to avoid locking specifications to a particular version of Solidity and to be more language-agnostic.</p>\n\n<p>The proposal suggests using YAML as it is compatible with the standard JSON ABI format but allows comments for improved readability. This would enable easier conversion between human-readable YAML and machine-readable JSON ABIs. The EIP provides examples of how to represent functions, events, and errors using the YAML format.</p>\n\n<p>While EIP-2069 offered a sensible improvement to ABI representation in specifications, its current status is \"Stagnant\". This indicates it has not seen much activity or adoption since being proposed. However, the idea of using a more neutral format for ABIs in EIPs/ERCs remains relevant for promoting language-agnostic standards in Ethereum development.</p></article>",
  "EIP-2070": "<article><h1>EIP-2070: Berlin Hardfork Meta-Proposal</h1>\n\n<p>EIP-2070, proposed by Alex Beregszaszi in May 2019, was a meta-proposal for the Ethereum Berlin hardfork. Its purpose was to serve as a coordination point for the various improvements and changes planned for this network upgrade. The proposal aimed to consolidate discussions and track the progress of individual EIPs that would be included in the Berlin hardfork.</p>\n\n<p>The Berlin hardfork was a significant milestone in Ethereum's development, following the Istanbul hardfork and preceding the London hardfork. It introduced several important upgrades to the Ethereum network, including gas price optimizations and new types of transactions. However, the specific EIPs included in Berlin evolved over time, and the final set differed from what might have been initially proposed in EIP-2070.</p>\n\n<p>As of now, EIP-2070 is in \"Withdrawn\" status. This is likely because the actual coordination and finalization of the Berlin hardfork specifications occurred through other channels, primarily the eth1.0-specs repository on GitHub. The Berlin hardfork was successfully implemented on the Ethereum mainnet in April 2021, marking another step in Ethereum's ongoing development and improvement process.</p></article>",
  "EIP-2098": "<article><h1>EIP-2098: Compact Signature Representation</h1>\n\n<p>EIP-2098, proposed by Richard Moore and Nick Johnson, aimed to introduce a more compact signature representation for Ethereum transactions. The primary goal was to reduce gas costs and improve efficiency in signature verification processes. This proposal suggested compressing the standard 65-byte ECDSA signature into a more compact 64-byte format by eliminating redundant information.</p>\n\n<p>The proposal gained traction due to its potential to optimize gas usage, particularly beneficial for applications dealing with numerous signatures. It was especially relevant for Layer 2 solutions and other scenarios where minimizing data footprint is crucial. However, despite its merits, EIP-2098 faced challenges in widespread adoption, partly due to concerns about backward compatibility and implementation complexities.</p>\n\n<p>Currently, EIP-2098 has been moved to the Ethereum Request for Comments (ERC) repository, indicating a shift in its categorization. While the proposal offered valuable insights into signature optimization, its implementation status remains uncertain. Developers and researchers continue to explore alternative approaches to signature compression, building upon the foundations laid by EIP-2098.</p>\n</article>",
  "EIP-210": "<article><h1>EIP-210: Blockhash Refactoring</h1>\n\n<p>EIP-210, proposed by Ethereum co-founder Vitalik Buterin in February 2017, aimed to simplify the Ethereum protocol by storing blockhashes in the state. This improvement would reduce the complexity of client implementations when processing the BLOCKHASH opcode and extend the range of historical block hash lookups.</p>\n\n<p>The proposal suggested implementing a smart contract at a predetermined address to store and manage blockhashes. This approach would allow for more efficient light client syncing by creating direct links between blocks with distant block numbers. The EIP also introduced a \"super user\" address to handle the updating of blockhashes without requiring gas payments.</p>\n\n<p>Despite its potential benefits, EIP-210 has not been implemented and is currently in a \"Stagnant\" status. The Ethereum community has since explored alternative solutions for improving blockhash accessibility and efficiency, such as EIP-1559 and EIP-2929, which address related aspects of the Ethereum protocol. While EIP-210 is not actively pursued, its concepts have influenced ongoing discussions about Ethereum's scalability and efficiency improvements.</p>\n</article>",
  "EIP-211": "<article><h1>EIP-211: RETURNDATASIZE and RETURNDATACOPY Opcodes</h1>\n\n<p>EIP-211, proposed by Christian Reitwiessner in February 2017, introduced two new opcodes to the Ethereum Virtual Machine (EVM): RETURNDATASIZE and RETURNDATACOPY. These opcodes addressed a long-standing need for handling arbitrary-length return data in smart contracts, particularly useful for proxy contracts and general-purpose libraries.</p>\n\n<p>Prior to EIP-211, contracts had limited ability to work with dynamic return data, often requiring complex workarounds. The new opcodes allowed contracts to efficiently access the size and content of data returned from external calls, similar to how calldata is handled. This solution was elegant in its simplicity and backwards compatibility, requiring minimal changes to existing call opcodes while solving gas charging challenges that had plagued earlier proposals.</p>\n\n<p>EIP-211 was quickly recognized for its utility and was implemented in the Byzantium hard fork (EIP-609) in October 2017. It has since become a fundamental part of the EVM, enabling more flexible and gas-efficient contract interactions. The proposal's success led to widespread adoption in smart contract development, particularly in proxy patterns and generalized forwarders, significantly enhancing the capabilities of the Ethereum ecosystem.</p></article>",
  "EIP-2124": "<article><h1>EIP-2124: Fork Identifier for Chain Compatibility Checks</h1>\n\n<p>EIP-2124, proposed by Péter Szilágyi and Felix Lange in May 2019, introduces a \"fork identifier\" mechanism to improve network efficiency in Ethereum. The proposal aims to solve the issue of nodes wasting resources by connecting to incompatible peers across different Ethereum networks (mainnet, testnets, private networks).</p>\n\n<p>The core idea is to create a compact summary of a node's chain configuration, allowing for quick compatibility checks before establishing full connections. This fork identifier includes information about the genesis block and subsequent hard forks, enabling nodes to quickly determine if a potential peer is on the same network and has applied the same protocol upgrades.</p>\n\n<p>EIP-2124 has been implemented in major Ethereum clients and is now in \"Final\" status. It has significantly improved network efficiency, especially for smaller Ethereum networks. The proposal has been integrated into other networking improvements, such as the Ethereum Node Records (ENR) system defined in EIP-778, further enhancing peer discovery and connection processes in the Ethereum ecosystem.</p>\n</article>",
  "EIP-2135": "<article><h1>EIP-2135: Consumable Interface</h1>\n\n<p>EIP-2135, known as the Consumable Interface, was proposed to standardize a way for tokens to be \"consumed\" or permanently removed from circulation. This proposal aimed to create a consistent method for burning tokens, particularly useful for gaming, loyalty programs, and other applications where tokens might need to be redeemed or used up.</p>\n\n<p>The proposal was authored by Zainan Victor Zhou and introduced in July 2019. It defined a set of functions that would allow tokens to be consumed either by the token holder or by an approved operator. This interface was designed to work alongside existing token standards like ERC-20 and ERC-721, providing additional functionality without replacing these widely-adopted standards.</p>\n\n<p>As of now, EIP-2135 has been moved to the Ethereum ERCs repository, indicating a shift in its classification. While the proposal offered a useful concept, it hasn't seen widespread adoption in its original form. The cryptocurrency ecosystem has continued to evolve, with other proposals and implementations addressing similar needs in various ways. Developers interested in token burning mechanisms may find more recent or widely-adopted standards more suitable for current projects.</p>\n</article>",
  "EIP-214": "<article><h1>EIP-214: STATICCALL Opcode</h1>\n\n<p>EIP-214, proposed by Vitalik Buterin and Christian Reitwiessner in February 2017, introduced the STATICCALL opcode to Ethereum. This opcode allows contracts to make calls to other contracts while ensuring that no state modifications occur during the call or its subcalls. The primary motivation was to enhance smart contract security by providing a way to safely interact with untrusted contracts without risking unexpected state changes.</p>\n\n<p>The STATICCALL opcode functions similarly to the existing CALL opcode but with the crucial difference that any attempt to modify state during its execution results in an exception rather than a state change. This feature is particularly useful for implementing \"view\" functions that are guaranteed not to modify state, allowing developers to create more predictable and secure smart contracts.</p>\n\n<p>EIP-214 was implemented in the Byzantium hard fork (October 2017) and has since become a standard feature of the Ethereum Virtual Machine (EVM). Its introduction has significantly improved the ability of smart contract developers to reason about the behavior of their contracts and has become an essential tool for building secure decentralized applications on Ethereum. The proposal's status is final, indicating its successful implementation and widespread adoption in the Ethereum ecosystem.</p>\n</article>",
  "EIP-2157": "<article><h1>EIP-2157: dType - Decentralized Type System for EVM</h1>\n\n<p>EIP-2157, originally proposed by Loredana Cirstea and Christian Tzurcanu, aimed to introduce a decentralized type system for the Ethereum Virtual Machine (EVM). The proposal sought to create a standardized way to define and manage complex data types on the Ethereum blockchain, potentially enhancing smart contract interoperability and reducing development complexity.</p>\n\n<p>The proposal was moved from the main Ethereum Improvement Proposals (EIPs) repository to the Ethereum Request for Comments (ERCs) repository, indicating a shift in its categorization. This move suggests that while the concept was deemed valuable, it may have been considered more appropriate as a community standard rather than a core protocol change.</p>\n\n<p>As of now, ERC-2157 remains in a draft state within the ERCs repository. While the idea of a decentralized type system for Ethereum continues to be relevant, especially in the context of growing DeFi and Web3 ecosystems, its implementation challenges and the rapid evolution of Ethereum's infrastructure have likely contributed to its current status. Developers and researchers interested in type systems for blockchain environments may still find value in studying this proposal and potentially building upon its concepts.</p>\n</article>",
  "EIP-2159": "<article><h1>EIP-2159: Common Prometheus Metrics Names for Clients</h1>\n\n<p>EIP-2159, proposed by Adrian Sutton in July 2019, aimed to standardize metric names for Ethereum clients when reporting to Prometheus, a popular monitoring and alerting solution. The proposal sought to improve interoperability and ease of monitoring for node operators managing diverse client implementations.</p>\n\n<p>The motivation behind this EIP was to enable operators to monitor heterogeneous client clusters using a single dashboard or alerting configuration. Prior to this proposal, each client developer invented their own metric names, making it challenging to monitor diverse client implementations effectively.</p>\n\n<p>EIP-2159 reached \"Final\" status, indicating its acceptance and implementation by the Ethereum community. It has since been widely adopted by major Ethereum clients, significantly improving the standardization of monitoring practices across the Ethereum ecosystem.</p>\n</article>",
  "EIP-2193": "<article><h1>EIP-2193: Encrypted Content Standard</h1>\n\n<p>EIP-2193, originally proposed by David Tam in 2019, aimed to establish a standard for encrypted content on the Ethereum blockchain. The proposal sought to define a method for storing and retrieving encrypted data within smart contracts, addressing the need for privacy and confidentiality in blockchain applications.</p>\n\n<p>The proposal gained attention for its potential to enable secure data sharing and storage on Ethereum, with possible applications in areas such as medical records, financial data, and personal information. However, as indicated by its current status of \"Moved,\" the proposal has been relocated to the Ethereum ERCs repository, suggesting ongoing development or potential integration with other standards.</p>\n\n<p>While the specifics of its current implementation status are not immediately clear, the concepts introduced in EIP-2193 remain relevant in the broader context of blockchain privacy and data protection. Developers and researchers continue to explore similar approaches to encrypted content on Ethereum and other blockchain platforms, highlighting the ongoing importance of this proposal's core ideas.</p>\n</article>",
  "EIP-2200": "<article><h1>EIP-2200: Structured Definitions for Net Gas Metering</h1>\n\n<p>EIP-2200 was proposed in 2019 by Wei Tang as a way to implement net gas metering for the SSTORE opcode in Ethereum. It combined elements from two previous proposals, EIP-1283 and EIP-1706, to create a more structured definition for gas costs when modifying contract storage.</p>\n\n<p>The main goal was to reduce excessive gas costs for storage operations that don't match how most implementations actually work. This enables new use cases for contract storage, like reentry locks and passing information between call frames. It uses information readily available to most implementations - the storage slot's original and current values, and the refund counter.</p>\n\n<p>EIP-2200 was designed to be interoperable with other gas-related changes like EIP-1884. It has been implemented in major Ethereum clients and is considered final. The proposal helped optimize gas costs for common storage patterns while maintaining security, making Ethereum smart contracts more efficient.</p></article>",
  "EIP-2228": "<article><h1>EIP-2228: Canonicalizing the Name of Ethereum's Main Network</h1>\n\n<p>EIP-2228, authored by William Entriken, aimed to standardize the naming convention for Ethereum's primary network (with network ID 1 and chain ID 1) as \"Ethereum Mainnet\" or simply \"Mainnet\" when the context is clear. This proposal was motivated by the inconsistent naming practices observed across various Ethereum documentation and implementations.</p>\n\n<p>The EIP, which reached Final status, specified that \"Ethereum Mainnet\" should be treated as a proper noun. It provided examples of correct usage to guide the Ethereum community in adopting this standardized terminology. The proposal's simplicity and clear rationale led to its quick acceptance and implementation across the Ethereum ecosystem.</p>\n\n<p>Today, \"Ethereum Mainnet\" is widely used in official documentation, client implementations, and community discussions, demonstrating the success and importance of this seemingly minor but impactful standardization effort. This EIP exemplifies how clear communication standards can enhance consistency and reduce confusion within a complex technical ecosystem.</p></article>",
  "EIP-223": "<article><h1>EIP-223: Token Standard</h1>\n\n<p>EIP-223 was proposed by Dexaran in 2017 as an improvement to the ERC-20 token standard. Its primary purpose was to address the issue of tokens being lost when sent to contract addresses that weren't designed to handle them. The proposal aimed to introduce a new function, <code>tokenFallback</code>, which would allow contracts to react to incoming token transfers.</p>\n\n<p>While EIP-223 gained some attention in the Ethereum community, it didn't achieve widespread adoption. The proposal faced criticism for potential compatibility issues with existing ERC-20 implementations and concerns about increased gas costs. As a result, alternative solutions like EIP-777 were developed to address similar issues while maintaining better backwards compatibility.</p>\n\n<p>Currently, EIP-223 has been moved to the Ethereum ERCs repository and is not considered for implementation in its original form. The Ethereum community has largely focused on other token standards and improvements, such as ERC-721 for non-fungible tokens and ERC-1155 for multi-token contracts. While the issues EIP-223 sought to address remain relevant, they are typically handled through other means in modern Ethereum development practices.</p>\n</article>",
  "EIP-2242": "<article><h1>EIP-2242: Transaction Postdata</h1>\n\n<p>EIP-2242, proposed by John Adler in August 2019, aimed to introduce an optional \"postdata\" field in Ethereum transactions. This field would allow data to be posted on-chain without being accessible to the Ethereum Virtual Machine (EVM). The proposal was motivated by the emerging paradigm of blockchains serving as data availability and arbitration layers, as seen in Ethereum 2.0's Execution Environments and stateless clients.</p>\n\n<p>The proposal was designed to complement EIP-2028, which reduced the gas cost of calldata. While EIP-2028 encouraged the use of historical data over state, EIP-2242 went a step further by proposing a way to post data on-chain without it being usable within the EVM. This approach aligned with the principle of \"don't pay for what you don't use\" and was intended to support trust-minimized side chains on Ethereum 1.x.</p>\n\n<p>Despite its potential benefits, EIP-2242 has not gained significant traction and is currently in a \"Stagnant\" status. The proposal has been superseded by more comprehensive approaches to scaling and data availability, such as rollups and data availability sampling in Ethereum 2.0. While the core idea of separating data availability from",
  "EIP-225": "<article><h1>EIP-225: Clique Proof-of-Authority Consensus Protocol</h1>\n\n<p>EIP-225, authored by Péter Szilágyi in March 2017, introduced the Clique proof-of-authority (PoA) consensus protocol. This proposal aimed to address the vulnerabilities of proof-of-work (PoW) testnets, which were susceptible to attacks due to low mining difficulty. Clique was designed as a more secure alternative for Ethereum testnets, mimicking the mainnet's structure for easy implementation.</p>\n\n<p>The motivation behind Clique stemmed from issues with previous Ethereum testnets. Morden, the first official testnet, was retired in late 2016 due to accumulated junk and consensus problems. Its successor, Ropsten, faced severe attacks in early 2017, including gas limit inflation and long reorgs, which highlighted the inherent weaknesses of PoW in low-security environments.</p>\n\n<p>Clique has been successfully implemented in several Ethereum testnets, most notably Rinkeby and Görli. It remains a viable option for PoA networks, although newer alternatives like Aura have emerged. The proposal's status is final, indicating its successful adoption and continued relevance in the Ethereum ecosystem.</p></article>",
  "EIP-2255": "<article><h1>EIP-2255: Wallet Permissions System</h1>\n\n<p>EIP-2255 proposes a standardized permissions system for Ethereum wallets, introducing two new RPC methods: <code>wallet_getPermissions</code> and <code>wallet_requestPermissions</code>. This proposal aims to improve user experience by allowing dapps to request a set of permissions upfront, rather than prompting users for each action individually.</p>\n\n<p>The proposal was authored by Dan Finlay, Erik Marks, and Gavin John in August 2019. It was motivated by the need to reduce friction in wallet interactions while maintaining security. The permissions model is inspired by common web practices like OAuth2, making it familiar to users and developers.</p>\n\n<p>EIP-2255 reached Final status, indicating it has been accepted and implemented. It builds on EIP-1193 (Ethereum Provider JavaScript API) and is now part of the standard wallet interface. Major wallets like MetaMask have implemented this permissions system, allowing for more streamlined dapp interactions and improved user experience in the Ethereum ecosystem.</p>\n\n</article>",
  "EIP-2256": "<article><h1>EIP-2256: wallet_getOwnedAssets JSON-RPC Method</h1>\n\n<p>EIP-2256, proposed by Loredana Cirstea in August 2019, aimed to standardize a new JSON-RPC method for retrieving a user's owned assets from their Ethereum wallet. The proposal sought to address the lack of a standardized way for dApps to request asset information, which led to duplicated efforts and suboptimal user experiences.</p>\n\n<p>The motivation behind this proposal was to simplify asset retrieval for financial dApps that required user asset information for purposes such as tax calculations or customized payment options. By allowing wallets to provide this information directly, it would eliminate the need for dApps to maintain their own asset lists and repeatedly query the blockchain for each asset.</p>\n\n<p>Unfortunately, EIP-2256 has not gained significant traction and is currently in a \"Stagnant\" status. While the idea has merit, it appears that the Ethereum community has not reached a consensus on implementing this method. As of now, dApps still largely rely on their own asset discovery methods or third-party services to retrieve user asset information.</p>\n</article>",
  "EIP-2266": "<article><h1>EIP-2266: Atomic Swap-based American Call Option Contract Standard</h1>\n\n<p>EIP-2266, proposed by Dominik Harz, Gudgeon Lewis, Gervais Arthur, and Knottenbelt William, aimed to standardize atomic swap-based American call option contracts on the Ethereum blockchain. This proposal sought to create a framework for decentralized options trading, allowing users to create, exercise, and trade options without relying on centralized intermediaries.</p>\n\n<p>The proposal introduced a set of functions and events that would enable the creation and management of American call options, which give the holder the right to buy an asset at a predetermined price before or on a specific expiration date. By leveraging atomic swaps, EIP-2266 aimed to ensure secure and trustless execution of options contracts, reducing counterparty risk and enhancing the overall efficiency of decentralized finance (DeFi) markets.</p>\n\n<p>Currently, EIP-2266 has been moved to the Ethereum ERCs repository, indicating ongoing development and discussion within the community. While the proposal has not been formally adopted as an Ethereum standard, its concepts have influenced subsequent developments in DeFi options protocols. As the DeFi ecosystem continues to evolve, the principles outlined in EIP-2266 may be incorporated into more comprehensive standards or implemented in various decentralized options",
  "EIP-2294": "<article><h1>EIP-2294: Explicit Bound to Chain ID Size</h1>\n\n<p>EIP-2294, proposed by Zainan Victor Zhou and Alex Beregszaszi in September 2019, aimed to address a potential issue with the Chain ID parameter introduced in EIP-155. The proposal suggested limiting the maximum size of the Chain ID to prevent encoding problems that could arise from using excessively large values.</p>\n\n<p>The motivation behind this proposal was to standardize the Chain ID usage across different Ethereum-based projects. By setting a reasonable upper bound (floor(MAX_UINT64 / 2) - 36), the authors sought to ensure that RLP encoding of transactions wouldn't require >256-bit arithmetic for calculating the v field, which could lead to implementation complexities and potential vulnerabilities.</p>\n\n<p>Currently, EIP-2294 is in a \"Stagnant\" status, indicating that it hasn't seen significant development or discussion recently. While the proposal addressed a valid concern, it's possible that the Ethereum community hasn't deemed it a high priority. As of now, there's no enforced limit on Chain ID size in the Ethereum protocol, and projects continue to use various Chain ID values without a standardized upper bound.</p>\n</article>",
  "EIP-2304": "<article><h1>EIP-2304: Multichain Address Resolution for ENS</h1>\n\n<p>EIP-2304, proposed by Nick Johnson in 2019, aimed to extend the Ethereum Name Service (ENS) to support resolution of addresses for multiple blockchains. This proposal was designed to allow ENS names to map to addresses on non-Ethereum chains, enhancing ENS's utility in a multi-chain ecosystem.</p>\n\n<p>The proposal suggested a standardized way to encode and decode chain identifiers, enabling ENS resolvers to return addresses for specific blockchains when queried. This would have allowed users to associate a single ENS name with addresses across various networks, simplifying cross-chain interactions and improving user experience in multi-chain applications.</p>\n\n<p>As of now, EIP-2304 has been moved to the Ethereum ERCs repository, indicating a shift in its categorization. While the proposal offered a valuable solution for multi-chain address resolution, its current status suggests that it may have been superseded by other standards or approaches in the rapidly evolving blockchain ecosystem. For the most up-to-date information on this proposal, interested parties should refer to the official ERC repository.</p>\n</article>",
  "EIP-2309": "<article><h1>EIP-2309: ERC-721 Consecutive Transfer Extension</h1>\n\n<p>EIP-2309, proposed by Sean Papanikolas in February 2020, aimed to extend the ERC-721 standard for non-fungible tokens (NFTs) by introducing a new event for consecutive token transfers. This proposal was designed to optimize gas costs and improve efficiency when minting or transferring large batches of NFTs, which had become increasingly common in blockchain gaming and digital collectibles.</p>\n\n<p>The proposal introduced a new event called \"ConsecutiveTransfer\" that could represent the transfer of a range of tokens in a single transaction, significantly reducing gas costs and blockchain bloat. This was particularly useful for projects involving large-scale NFT minting or transfers, such as blockchain games with numerous in-game items or large collections of digital art.</p>\n\n<p>While EIP-2309 garnered interest from the Ethereum community, particularly among NFT developers, it has since been moved to the Ethereum ERCs repository. This move suggests that while the proposal is still considered valuable, it may require further refinement or community consensus before potential implementation. Developers working on NFT projects should be aware of this proposal, as it could influence future optimizations in NFT transfer mechanisms.</p>\n</article>",
  "EIP-2315": "<article><h1>EIP-2315: Simple Subroutines for the EVM</h1>\n\n<p>EIP-2315, titled \"Simple Subroutines for the EVM,\" was proposed in 2019 by Greg Colvin, Martin Holst Swende, Brooklyn Zelenka, and John Max Skaller. The proposal aimed to introduce two new opcodes, RJUMPSUB and RETURNSUB, to enable efficient and safe subroutine calls in the Ethereum Virtual Machine (EVM). These opcodes were designed to work alongside the relative jump opcodes proposed in EIP-4200, offering a complete control-flow facility for the EVM.</p>\n\n<p>The proposal was motivated by the need for more efficient and secure smart contract execution, as well as the desire to enable near-linear compilation of EVM bytecode. By introducing these subroutine-specific opcodes, EIP-2315 aimed to deprecate the existing JUMP and JUMPI opcodes, which were less efficient and more prone to errors. This change would have allowed for better static analysis of smart contracts and improved overall security.</p>\n\n<p>Despite its potential benefits, EIP-2315 was ultimately withdrawn. The proposal has been superseded by the EOF (EVM Object Format) proposals, which offer a more comprehensive approach to improving the EVM's architecture. While E",
  "EIP-2327": "<article><h1>EIP-2327: BEGINDATA Opcode</h1>\n\n<p>EIP-2327, proposed by Martin Lundfall in October 2019, introduces a new opcode called BEGINDATA (0xb6) to distinguish data from executable code in Ethereum smart contracts. This opcode would mark the remaining bytes of a contract as non-executable data, improving efficiency and security in bytecode analysis.</p>\n\n<p>The proposal addresses a common practice of storing data (like constructor arguments or constant variables) directly in contract bytecode. Currently, this data is indistinguishable from executable code, causing unnecessary JUMPDEST analysis by EVM interpreters. BEGINDATA would allow tools to easily identify and skip over data sections, potentially improving gas costs and simplifying static analysis.</p>\n\n<p>While the idea has merit, EIP-2327 is currently in a \"Stagnant\" state, indicating lack of progress or adoption. It's likely that the complexity of implementing such a change to the EVM outweighed its benefits. More recent proposals like EIP-3540 (EVM Object Format) have taken a more comprehensive approach to separating code and data, potentially superseding the need for BEGINDATA as a standalone opcode.</p></article>",
  "EIP-233": "<article><h1>EIP-233: Formal Process of Hard Forks</h1>\n\n<p>EIP-233, proposed by Alex Beregszaszi in March 2017, aimed to establish a formal process for preparing and activating Ethereum hard forks. The proposal sought to bring structure and transparency to the often ad-hoc discussions surrounding hard forks by creating a standardized approach.</p>\n\n<p>The EIP suggested creating a Meta EIP for each planned hard fork, which would include key information such as the fork's codename, activation block number, timeline, and list of included EIPs. This Meta EIP would serve as a central reference point for all stakeholders involved in the hard fork process, from developers to node operators.</p>\n\n<p>While EIP-233 provided a valuable framework for organizing hard forks, its current status is \"Stagnant.\" This suggests that while the proposal offered useful insights, it may not have been fully adopted or implemented in its original form. The Ethereum community has since developed other processes for managing network upgrades, such as the All Core Developers meetings and the Ethereum Cat Herders group, which help coordinate and communicate about upcoming changes to the network.</p>\n</article>",
  "EIP-2330": "<article><h1>EIP-2330: EXTSLOAD Opcode</h1>\n\n<p>EIP-2330, proposed in 2019 by Dominic Letz and Santiago Palladino, introduces a new EVM opcode called EXTSLOAD. This opcode is designed to allow smart contracts to directly read external contract storage data, potentially reducing gas costs for certain operations. The proposal aimed to improve efficiency when reading from registry-style contracts like ERC-20 tokens, ENS, and other data contracts.</p>\n\n<p>The EXTSLOAD opcode would pop two items from the stack (account address and storage key) and push the corresponding storage value. Its gas cost would be calculated based on the sum of account access cost and storage read, following the rules set by EIP-2929 for Access Lists. This approach could significantly reduce gas costs compared to the traditional method of using contract calls, ABI encoding/decoding, and multiple SLOAD operations.</p>\n\n<p>As of now, EIP-2330 is in a \"Stagnant\" status, indicating that it has not seen significant activity or updates recently. While the proposal offers potential benefits in terms of gas optimization and simplified external storage access, it has not been implemented in Ethereum's main protocol. The Ethereum community continues to explore various ways to improve gas efficiency and cross-contract interactions, but this specific proposal has not",
  "EIP-2333": "<article><h1>EIP-2333: BLS12-381 Key Generation</h1>\n\n<p>EIP-2333, originally proposed by Carl Beekhuizen, aimed to standardize the key generation process for BLS (Boneh-Lynn-Shacham) signatures using the BLS12-381 curve. This proposal was crucial for Ethereum's transition to Proof-of-Stake, as BLS signatures allow for efficient aggregation of multiple signatures, which is essential for scalability in a PoS system.</p>\n\n<p>The proposal defined a method for deriving BLS private keys from a seed, ensuring consistency across different implementations. It was part of a suite of BLS-related EIPs, including EIP-2334 (for deriving multiple keys from a single mnemonic) and EIP-2335 (for key serialization). These proposals were shepherded by the Ethereum Foundation's research team and gained significant traction in the Ethereum 2.0 (now known as the Beacon Chain) development process.</p>\n\n<p>As of now, EIP-2333 has been moved to the Ethereum Request for Comments (ERC) repository, indicating its continued relevance and implementation in Ethereum's ecosystem. The proposal has been widely adopted and implemented in various Ethereum 2.0 clients, playing a crucial role in the network's transition to",
  "EIP-2334": "<article><h1>EIP-2334: NFT Metadata JSON Schema</h1>\n\n<p>EIP-2334, proposed in 2019, aimed to standardize the metadata JSON schema for Non-Fungible Tokens (NFTs) on the Ethereum blockchain. This proposal was designed to improve interoperability between NFT platforms and marketplaces by providing a consistent format for storing and retrieving NFT metadata. The proposal was authored by James Morgan, a prominent figure in the Ethereum NFT ecosystem.</p>\n\n<p>While EIP-2334 gained initial traction in the NFT community, it has since been moved to the Ethereum ERCs repository. This relocation suggests that the proposal has evolved beyond its initial draft stage and is now being considered as part of the broader Ethereum Request for Comments (ERC) process. The current status of the proposal is \"Moved,\" indicating that it is no longer actively discussed in its original form but continues to be developed within the ERC framework.</p>\n\n<p>Today, while EIP-2334 has not been formally adopted as a standard, many of its principles have been incorporated into existing NFT metadata practices. The NFT space has seen rapid evolution, with newer proposals and standards emerging to address more specific use cases and challenges. As such, developers and platforms should refer to the latest ERC standards and best practices when implementing NFT metadata schemas.</p></article>",
  "EIP-2335": "<article><h1>EIP-2335: Deposit Contract Standard</h1>\n\n<p>EIP-2335, proposed by Carl Beekhuizen, Danny Ryan, and others, aimed to standardize the deposit contract for Ethereum 2.0 (now known as the Beacon Chain). The proposal was crucial for the transition from Ethereum's Proof of Work to Proof of Stake consensus mechanism, allowing users to stake their ETH and participate in network validation.</p>\n\n<p>The proposal defined the interface and behavior for the deposit contract, ensuring compatibility across different client implementations. It specified the deposit amount, withdrawal credentials, and other essential parameters. EIP-2335 played a significant role in the early stages of Ethereum's transition to PoS, facilitating the launch of the Beacon Chain in December 2020.</p>\n\n<p>Currently, EIP-2335 has been moved to the Ethereum ERCs repository, indicating its importance as a reference standard. While the proposal itself is no longer actively developed, its implementation continues to be crucial for Ethereum's ongoing transition to a full Proof of Stake network. The deposit contract defined by EIP-2335 remains a fundamental component of Ethereum's staking ecosystem.</p></article>",
  "EIP-234": "<article><h1>EIP-234: Add `blockHash` to JSON-RPC filter options</h1>\n\n<p>EIP-234, proposed by Micah Zoltu in March 2017, aimed to enhance the functionality of Ethereum's JSON-RPC filter options. The proposal suggested adding a `blockHash` parameter to the `eth_newFilter` and `eth_getLogs` methods, allowing clients to fetch logs for specific blocks, including those not in the current main chain.</p>\n\n<p>The primary motivation behind this proposal was to improve the robustness of client applications in dealing with chain reorganizations and unreliable network connections. By enabling log retrieval for specific blocks, developers could more easily implement reliable notification systems for both log additions and removals.</p>\n\n<p>EIP-234 has been finalized and implemented in major Ethereum clients. It has become a standard feature in Ethereum's JSON-RPC API, providing developers with more flexible and precise log querying capabilities. This improvement has been particularly valuable for applications requiring accurate historical data and those dealing with complex smart contract interactions.</p>\n</article>",
  "EIP-2364": "<article><h1>EIP-2364: eth/64 forkid-extended protocol handshake</h1>\n\n<p>EIP-2364, authored by Péter Szilágyi and Tim Beiko, introduces the inclusion of the <code>forkid</code> in the Ethereum wire protocol handshake. This proposal builds upon EIP-2124, which defined the <code>forkid</code> concept for quickly determining compatibility between Ethereum nodes. The primary motivation was to enable nodes to efficiently assess compatibility before engaging in resource-intensive block exchanges and validations.</p>\n\n<p>The proposal specifies a new version of the Ethereum wire protocol, <code>eth/64</code>, which includes the <code>forkid</code> as a new field in the handshake process. By validating the <code>forkid</code> during the initial connection, incompatible nodes can disconnect early, preventing unnecessary resource consumption and improving overall network efficiency. This enhancement is particularly valuable in the context of Ethereum's frequent network updates and forks.</p>\n\n<p>EIP-2364 has reached \"Final\" status, indicating its acceptance and implementation in the Ethereum network. It represents an important optimization in node communication and network efficiency, building upon previous improvements to streamline peer connections in the ever-evolving Ethereum ecosystem.</p></article>",
  "EIP-2378": "<article><h1>EIP-2378: EIPs Eligible for Inclusion</h1>\n\n<p>EIP-2378 was proposed by James Hancock in November 2019 as part of an effort to formalize the Ethereum Improvement Proposal (EIP) process. It introduced the concept of \"Eligible for Inclusion\" as a key stage in the EIP pipeline, sitting between Draft and Implementation stages. The goal was to provide clearer signaling from core developers about which proposals had general support before significant implementation work began.</p>\n\n<p>The proposal outlined a process where EIPs would be briefly discussed on All Core Devs calls, with rough consensus required to move an EIP to \"Eligible for Inclusion\" status. This was meant to streamline development by giving EIP authors a green light to proceed with more detailed work. The EIP also proposed tracking which proposals had reached this stage to provide transparency.</p>\n\n<p>While EIP-2378 helped clarify the EIP process, it ultimately stagnated and was not formally adopted. However, its core ideas around formalizing early-stage EIP vetting influenced later process improvements. Today, the EIP process remains an evolving area, with ongoing efforts to balance thorough review with efficient development of Ethereum protocol upgrades.</p>\n</article>",
  "EIP-2384": "<article><h1>EIP-2384: Muir Glacier Difficulty Bomb Delay</h1>\n\n<p>EIP-2384 was proposed by Eric Conner in November 2019 to delay Ethereum's difficulty bomb for another 4 million blocks (approximately 611 days). The difficulty bomb is a mechanism that gradually increases mining difficulty, incentivizing upgrades to the network. However, it can also lead to longer block times if not adjusted periodically.</p>\n\n<p>This proposal came after block times had started increasing noticeably in late 2019 due to the difficulty bomb. Without intervention, block times were projected to reach 30+ seconds by February 2020, making the network less usable. EIP-2384 aimed to push back the effects of the difficulty bomb to coincide better with the expected launch of Ethereum 2.0's finality gadget.</p>\n\n<p>The Muir Glacier hard fork implementing EIP-2384 was activated on January 2, 2020 at block 9,200,000. This successfully delayed the difficulty bomb's effects, maintaining more consistent block times. Subsequent proposals like EIP-3554 and EIP-4345 have continued to delay the difficulty bomb further as the transition to proof-of-stake has progressed.</p>\n</article>",
  "EIP-2386": "<article><h1>EIP-2386: Ethereum Provider Connect Event</h1>\n\n<p>EIP-2386, originally proposed by Micah Zoltu, aimed to standardize the 'connect' event for Ethereum providers. This proposal was designed to improve the user experience and developer workflow when interacting with Ethereum-enabled applications. The 'connect' event would allow dApps to react appropriately when a user connects their Ethereum account, streamlining the process of establishing a connection between the application and the user's wallet.</p>\n\n<p>The proposal was motivated by the inconsistent implementation of connection events across different Ethereum providers, which led to confusion and potential security issues. By standardizing this event, EIP-2386 sought to create a more uniform and predictable environment for both developers and users. However, the proposal's journey was not straightforward, and it underwent significant discussion and revision within the Ethereum community.</p>\n\n<p>As of now, EIP-2386 has been moved to the Ethereum Request for Comments (ERCs) repository, specifically to <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-2386.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-2386.md</a>. This relocation suggests that while the proposal is still",
  "EIP-2387": "<article><h1>EIP-2387: Muir Glacier Hardfork</h1>\n\n<p>EIP-2387, known as the Muir Glacier hardfork, was proposed by James Hancock in November 2019 to address the impending \"Ice Age\" on the Ethereum mainnet. The Ice Age, also known as the Difficulty Bomb, is a mechanism that artificially increases mining difficulty over time, potentially leading to longer block times and reduced network performance.</p>\n\n<p>The primary motivation for Muir Glacier was to delay the Ice Age, which was approaching faster than anticipated. This hardfork pushed back the Difficulty Bomb by 4,000,000 blocks (approximately 611 days), buying time for the Ethereum community to develop a more permanent solution to the Ice Age problem. The proposal was implemented on January 2, 2020, at block number 9,200,000.</p>\n\n<p>While Muir Glacier successfully delayed the Ice Age, it did not solve the underlying issue. The Ethereum community has since continued to discuss more permanent solutions, including the possibility of removing the Difficulty Bomb entirely or implementing a more predictable difficulty adjustment mechanism. As of now, the Ice Age remains a part of Ethereum's protocol, with periodic hardforks still necessary to delay its effects.</p></article>",
  "EIP-2390": "<article><h1>EIP-2390: Ethereum Contract Wallet Standard</h1>\n\n<p>EIP-2390, proposed by Yoav Weiss and Alex Forshtat in 2019, aimed to establish a standard interface for Ethereum contract wallets. The proposal sought to improve interoperability between different contract wallet implementations and simplify interactions for dApps and users. It defined a set of functions that compliant wallets should implement, including methods for transaction execution, signature verification, and nonce management.</p>\n\n<p>While the proposal generated interest within the Ethereum community, it did not achieve widespread adoption in its original form. Instead, it evolved and influenced subsequent standards and implementations. The core ideas from EIP-2390 contributed to the development of more comprehensive wallet standards, such as EIP-4337 (Account Abstraction) and ERC-725 (Smart Contract Based Account).</p>\n\n<p>As of now, EIP-2390 has been moved to the Ethereum ERCs repository, indicating that it is no longer actively pursued as an Ethereum Improvement Proposal. The current status is \"Moved,\" and developers interested in contract wallet standards are advised to refer to more recent proposals and implementations that have built upon the foundational concepts introduced in EIP-2390.</p></article>",
  "EIP-2400": "<article><h1>EIP-2400: Transaction Relay</h1>\n\n<p>EIP-2400, originally proposed by Micah Zoltu in 2019, aimed to introduce a standardized method for relaying transactions on the Ethereum network. The primary purpose was to enable users to pay transaction fees in tokens other than Ether (ETH), potentially lowering the barrier to entry for new users and improving the overall user experience.</p>\n\n<p>The proposal outlined a mechanism where a third-party relayer would submit transactions on behalf of users, covering the ETH gas costs and being reimbursed in the specified token. This concept gained traction in the Ethereum community, particularly among those interested in meta-transactions and gas abstraction. However, the proposal did not reach final status in its original form.</p>\n\n<p>As of now, EIP-2400 has been moved to the Ethereum ERCs repository, indicating a shift in its categorization and potential development. While the core idea of transaction relaying remains relevant, newer proposals and implementations, such as EIP-1559 (which introduced a new fee market) and various Layer 2 solutions, have addressed some of the initial concerns that EIP-2400 sought to resolve. The current status suggests that while the concept is still valuable, its implementation may have evolved or been incorporated into other standards.</p>\n</article>",
  "EIP-2458": "<article><h1>EIP-2458: Updates and Updated-by Header</h1>\n\n<p>EIP-2458, proposed by Edson Ayllon in January 2020, aimed to introduce two new header options for Ethereum Improvement Proposals (EIPs): \"updates\" and \"updated-by\". The purpose was to enhance the modularity of the EIP improvement process, particularly for active EIPs, and to provide better visibility for updates to existing active EIPs.</p>\n\n<p>The proposal suggested that these new headers would allow for more granular tracking of changes to active EIPs, similar to how \"replaces\" and \"superseded-by\" headers work for final EIPs. This would enable updates to be made in a modular fashion, with each update going through the standard EIP discussion and auditing process. The intent was to improve transparency and traceability in the evolution of active EIPs.</p>\n\n<p>However, EIP-2458 was ultimately withdrawn and did not progress to implementation. The current status of \"Withdrawn\" suggests that the proposal did not gain sufficient traction or consensus within the Ethereum community. While the idea of more granular tracking for EIP updates remains relevant, the Ethereum improvement process continues to rely on existing mechanisms for managing changes to active EIPs.</p>\n</article>",
  "EIP-2464": "<article><h1>EIP-2464: eth/65 Transaction Announcements and Retrievals</h1>\n\n<p>EIP-2464, authored by Péter Szilágyi, Gary Rong, and Tim Beiko, introduced significant improvements to transaction propagation in the Ethereum network protocol. The proposal added three new message types to the eth protocol, creating version eth/65: NewPooledTransactionHashes, GetPooledTransactions, and PooledTransactions. These additions aimed to reduce bandwidth usage for transaction propagation from linear to square root complexity in relation to the number of peers.</p>\n\n<p>The motivation behind this EIP was to address inefficiencies in the existing transaction broadcast mechanism. Prior to EIP-2464, newly mined blocks could be propagated either by broadcasting the entire block or by announcing only the block hash. This duality allowed for optimized bandwidth usage in block propagation, but a similar mechanism was lacking for individual transactions. EIP-2464 aimed to bring this efficiency to transaction propagation as well.</p>\n\n<p>EIP-2464 achieved Final status and has been implemented in major Ethereum clients. Its introduction has significantly improved network efficiency, reducing initial transaction exchange sizes from potentially hundreds of megabytes to around 128KB in typical scenarios. This improvement has had a positive impact on network performance and scalability, particularly as transaction volumes on the Ethereum",
  "EIP-2470": "<article><h1>EIP-2470 Summary</h1>\n\n<p>EIP-2470, also known as ERC-2470, was a proposed Ethereum Improvement Proposal that aimed to standardize a method for implementing upgradeable smart contracts. The proposal was authored by Nicolás Venturo, a prominent Ethereum developer, in an effort to address the challenges associated with contract upgradeability and versioning.</p>\n\n<p>The proposal suggested a mechanism for creating proxy contracts that could delegate calls to different implementation contracts, allowing for easier upgrades without changing the contract's address. This approach was designed to enhance the flexibility and maintainability of smart contracts on the Ethereum network. However, the proposal did not gain widespread adoption and was eventually moved to the Ethereum ERCs repository.</p>\n\n<p>As of now, EIP-2470 has been superseded by more advanced upgradeability patterns and proposals. The current status of the proposal is \"Moved,\" indicating that it is no longer actively considered for implementation in its original form. Developers interested in contract upgradeability are now more likely to explore alternative solutions such as the OpenZeppelin Upgrades library or other more recent proposals addressing similar concerns.</p>\n</article>",
  "EIP-2474": "<article><h1>EIP-2474: Coinbase Calls</h1>\n\n<p>EIP-2474, proposed by Ricardo Guilherme Schmidt in January 2020, aimed to allow block validators (miners in proof-of-work systems) to call contract functions directly without signing a transaction. The primary motivation was to reduce overhead for calls that don't use <code>msg.sender</code> and are executed by validators with <code>tx.gasPrice = 0</code>.</p>\n\n<p>This proposal was particularly relevant for scenarios like gas relaying in meta-transactions (as described in EIP-1077). It would have allowed validators to execute such functions more efficiently by removing the need for an unnecessary signed transaction. The proposal suggested including these calls at the beginning of a block, consuming gas normally but without associated costs.</p>\n\n<p>Currently, EIP-2474 is in a \"Stagnant\" status, indicating that it has not seen significant activity or updates. While the idea had potential benefits for certain use cases, it doesn't appear to have gained widespread support or implementation. As Ethereum has evolved, other solutions for meta-transactions and gas abstraction have been developed, potentially reducing the need for this specific proposal.</p>\n</article>",
  "EIP-2477": "<article><h1>EIP-2477: Token Metadata Integrity</h1>\n<p>EIP-2477, titled \"Token Metadata Integrity,\" was proposed to address the issue of trust and authenticity in token metadata. The proposal aimed to establish a standard method for verifying the integrity of off-chain metadata associated with tokens, particularly for ERC-721 and ERC-1155 non-fungible tokens (NFTs). This was important as metadata often contains crucial information about the token, such as its name, description, and image.</p>\n<p>The proposal was authored by James Grimmelmann and Blaine Malone, who recognized the need for a reliable way to ensure that token metadata hasn't been tampered with or altered without authorization. EIP-2477 suggested using cryptographic signatures to verify the authenticity of metadata, allowing token owners and marketplaces to confirm that the metadata they're viewing is legitimate and hasn't been modified.</p>\n<p>As of now, EIP-2477 has been moved to the Ethereum ERCs repository, indicating that it's no longer being actively considered as an Ethereum Improvement Proposal. While the concept of metadata integrity remains important in the NFT space, other solutions and standards have emerged to address similar concerns. Currently, platforms and developers often implement their own methods for ensuring metadata authenticity, and the community continues to work on more comprehensive solutions for this ongoing",
  "EIP-2481": "<article><h1>EIP-2481: eth/66 Request Identifier</h1>\n\n<p>EIP-2481, proposed by Christoph Burgdorf in January 2020, introduced request identifiers for all requests in the Ethereum network protocol. The proposal aimed to improve the reliability and efficiency of peer-to-peer communication between Ethereum nodes.</p>\n\n<p>Prior to this EIP, the eth protocol lacked a way to match responses to their corresponding requests, making it difficult to handle timeouts and retries effectively. EIP-2481 addressed this by adding a request ID field to all request messages, allowing responses to be properly correlated. This change enabled better error handling and flow control in node communications.</p>\n\n<p>The proposal reached Final status and was implemented as part of the eth/66 protocol upgrade. It built upon the foundations laid by EIP-2464, which introduced protocol versioning. EIP-2481 has since become an integral part of Ethereum's networking layer, improving the robustness of node interactions across the network.</p>\n\n</article>",
  "EIP-2488": "<article><h1>EIP-2488: Deprecate the CALLCODE opcode</h1>\n\n<p>EIP-2488 was proposed by Alex Beregszaszi in December 2019 to deprecate the CALLCODE opcode in Ethereum. The CALLCODE opcode was part of the original Frontier release but was quickly found to be inadequate for its intended purpose. It was effectively replaced by the DELEGATECALL opcode introduced in EIP-7 with the Homestead update in early 2016.</p>\n\n<p>The proposal aims to deprecate CALLCODE in a somewhat backwards compatible way by making it always return a failure result rather than removing it entirely. This approach allows existing contracts to potentially handle the failure gracefully. The motivation is to reduce the burden on EVM implementations while minimizing disruption to the ecosystem.</p>\n\n<p>As of 2023, EIP-2488 remains in \"Stagnant\" status and has not been implemented. The Ethereum community appears to have prioritized other improvements over removing this legacy opcode. While deprecating unused opcodes could provide some benefits for light clients and partial syncing, the minimal usage of CALLCODE likely reduces the urgency of this change.</p>\n</article>",
  "EIP-2494": "<article><h1>EIP-2494: Baby Jubjub Elliptic Curve</h1>\n\n<p>EIP-2494, also known as the Baby Jubjub Elliptic Curve proposal, was originally intended to standardize a specific elliptic curve for use in Ethereum-based zero-knowledge proof systems. The proposal was authored by Barry WhiteHat and Jordi Baylina, two prominent figures in the Ethereum zero-knowledge proof community. The Baby Jubjub curve is a twisted Edwards curve designed to be efficiently implemented within the Ethereum Virtual Machine (EVM).</p>\n\n<p>The primary motivation behind this proposal was to enhance privacy and scalability in Ethereum applications, particularly those utilizing zk-SNARKs (Zero-Knowledge Succinct Non-Interactive Arguments of Knowledge). By standardizing the Baby Jubjub curve, developers could more easily implement and interoperate zero-knowledge proof systems within the Ethereum ecosystem. This curve was chosen for its efficiency and compatibility with existing Ethereum cryptographic primitives.</p>\n\n<p>As of now, EIP-2494 has been moved to the Ethereum ERCs repository, indicating a shift in its categorization from an Ethereum Improvement Proposal to an Ethereum Request for Comment. This change suggests that while the concept remains relevant, it may require further discussion or refinement before potential implementation. Developers intereste",
  "EIP-2515": "<article><h1>EIP-2515: Implement Difficulty Freeze</h1>\n\n<p>EIP-2515, proposed by James Hancock in February 2020, aimed to replace Ethereum's difficulty bomb with a difficulty freeze mechanism. The proposal sought to address issues with the unpredictability and unintended consequences of the existing difficulty bomb, which had caused unexpected network slowdowns and required multiple hard forks to delay.</p>\n\n<p>The difficulty freeze would activate at a predetermined block height, freezing the mining difficulty and then increasing it by 1% for all subsequent blocks. This approach was designed to be more predictable and easier to model than the existing exponential difficulty bomb. It aimed to maintain regular network upgrades by incentivizing developers to implement changes before the freeze, while also requiring any potential chain splits to address the difficulty increase.</p>\n\n<p>Despite its potential benefits, EIP-2515 did not gain widespread adoption and is currently in a \"Stagnant\" status. The Ethereum community has instead continued to use and adjust the difficulty bomb mechanism through subsequent network upgrades. While the proposal highlighted important concerns about network upgrade incentives, alternative approaches like the transition to Proof-of-Stake have since been implemented to address Ethereum's long-term scalability and upgrade path.</p>\n</article>",
  "EIP-2520": "<article><h1>EIP-2520: Multi-Token Standard</h1>\n\n<p>EIP-2520, also known as the Multi-Token Standard, was proposed as an extension to the popular ERC-20 and ERC-721 token standards. It aimed to create a unified interface for managing multiple token types within a single contract, addressing the need for more complex token interactions in decentralized applications. The proposal was authored by Philippe Castonguay and introduced in early 2020.</p>\n\n<p>The standard sought to simplify the process of handling various token types, including fungible, non-fungible, and semi-fungible tokens, within a single smart contract. This would have allowed for more efficient token management and reduced gas costs for complex operations involving multiple token types. However, EIP-2520 faced competition from other multi-token proposals, such as EIP-1155, which gained more traction in the Ethereum community.</p>\n\n<p>As of now, EIP-2520 has been moved to the Ethereum ERCs repository, indicating that it is no longer actively considered for implementation as an Ethereum Improvement Proposal. The current status suggests that other standards, particularly EIP-1155 (Multi Token Standard), have become more widely adopted for similar use cases. Developers looking to implement multi-token functionality are generally advised to consider EIP-1155 or other more established standards",
  "EIP-2525": "<article><h1>EIP-2525: Minimal Proxy Contract</h1>\n\n<p>EIP-2525, also known as the Minimal Proxy Contract, was proposed by Nick Mudge in 2020. This proposal aimed to create a standardized, gas-efficient way to deploy multiple instances of the same contract. The idea was to use a small proxy contract that delegates all calls to a master implementation contract, significantly reducing deployment costs for multiple instances.</p>\n\n<p>The proposal gained traction in the Ethereum community due to its potential to save gas and simplify contract deployments. However, it was eventually moved to the ERCs repository, indicating a shift in its categorization from an Ethereum Improvement Proposal to an Ethereum Request for Comment. This change suggests that while the concept was valuable, it needed further discussion and refinement within the community.</p>\n\n<p>Currently, the proposal's status is \"Moved,\" and it can be found in the ERCs repository. While EIP-2525 itself may not be actively pursued, its core concept has influenced other similar proposals and implementations, such as EIP-1167 (Minimal Proxy Contract). These alternatives continue to address the need for efficient contract deployment in the Ethereum ecosystem.</p>\n</article>",
  "EIP-2535": "<article><h1>EIP-2535: Diamond Standard</h1>\n\n<p>EIP-2535, also known as the Diamond Standard, was proposed by Nick Mudge in 2020 to address the limitations of smart contract size and upgradability in Ethereum. This proposal introduced a modular approach to smart contract development, allowing for the creation of larger, more complex contracts that can be upgraded without changing their address.</p>\n\n<p>The Diamond Standard gained traction in the Ethereum community due to its ability to overcome the 24KB contract size limit and provide a flexible upgrade mechanism. It allows developers to split contract functionality into multiple facets (separate contracts) that can be added, replaced, or removed from a main Diamond contract. This modular design facilitates easier maintenance, testing, and upgrades of complex smart contract systems.</p>\n\n<p>As of 2023, EIP-2535 has been moved from the main Ethereum Improvement Proposals repository to the Ethereum Request for Comments (ERCs) repository. This move indicates that while the proposal is still relevant and in use, it may not be considered for direct implementation in the Ethereum protocol. However, it remains a valuable standard for developers building large-scale, upgradeable smart contract systems on Ethereum and other EVM-compatible blockchains.</p></article>",
  "EIP-2537": "<article><h1>EIP-2537: Precompile for BLS12-381 curve operations</h1>\n\n<p>EIP-2537 proposes adding precompiled contracts to efficiently perform operations on the BLS12-381 elliptic curve, which is used for BLS signatures. It was authored by Alex Vlasov, Kelly Olson, Alex Stokes, and Antonio Sanso in February 2020. The motivation was to provide a more secure alternative to the existing BN254 curve precompile, offering 120+ bits of security compared to BN254's 80 bits.</p>\n\n<p>The proposal specifies precompiles for basic curve operations like point addition and scalar multiplication, as well as more complex operations like multiexponentiation. These allow for efficient BLS signature verification and key aggregation. The precompiles cover operations on both G1 and G2 groups of the BLS12-381 curve, as well as pairing checks.</p>\n\n<p>As of 2023, EIP-2537 remains in \"Review\" status and has not been implemented. However, BLS signatures on BLS12-381 have gained prominence in Ethereum 2.0 / The Merge. Alternative approaches like EIP-2537-A have been proposed to provide similar functionality. The core ideas of EIP-2537 remain relevant",
  "EIP-2539": "<article><h1>EIP-2539: BLS12-377 Curve Operations</h1>\n\n<p>EIP-2539 proposes adding precompiles for BLS12-377 curve operations to Ethereum. Authored by Alex Vlasov and hujw77, this improvement aims to enable efficient BLS signature verification and SNARK verifications. The BLS12-377 curve has unique properties that allow for efficient pairing-based SNARKs and constant-size BLS signature aggregation.</p>\n\n<p>The proposal introduces nine separate precompiles for operations like point addition, multiplication, and multiexponentiation on both the base curve and its twist, as well as pairing operations. These precompiles would significantly reduce the gas costs for cryptographic operations using the BLS12-377 curve, making advanced cryptographic protocols more feasible on Ethereum.</p>\n\n<p>As of its last update, EIP-2539 remains in Draft status. While it offers potential benefits for zkSNARKs and signature schemes, its implementation would require careful consideration of the added complexity to the Ethereum protocol. The proposal builds upon previous EIPs like EIP-1109 and EIP-2046, showing the evolving nature of Ethereum's cryptographic capabilities.</p>\n</article>",
  "EIP-2542": "<article><h1>EIP-2542: New opcodes TXGASLIMIT and CALLGASLIMIT</h1>\n\n<p>EIP-2542, proposed by Alex Forshtat in February 2020, aimed to introduce new opcodes to allow smart contracts to access gas limit information for the current transaction and execution frame. The proposal was motivated by the growing popularity of relaying, meta-transactions, and account abstraction concepts, which require precise gas tracking.</p>\n\n<p>The proposed opcodes, TXGASLIMIT and CALLGASLIMIT, would provide smart contracts with access to the initial gas limit for the current transaction and execution frame, respectively. This information was not previously available through existing opcodes, forcing developers to resort to approximations or complex on-chain logic to estimate gas usage.</p>\n\n<p>As of now, EIP-2542 is in a \"Stagnant\" status, indicating that it has not seen significant activity or progress since its proposal. While the idea addresses a real need in certain use cases, it has not gained enough traction to move forward in the Ethereum improvement process. Developers working on gas-sensitive applications may still find value in the concept, but alternative solutions or more comprehensive proposals may be necessary to address these concerns in the future.</p>\n</article>",
  "EIP-2544": "<article><h1>EIP-2544: ENS Wildcard Resolution</h1>\n\n<p>EIP-2544, originally proposed by Nick Johnson in 2020, aimed to introduce wildcard resolution support for the Ethereum Name Service (ENS). This proposal sought to enable the resolution of subdomains that haven't been explicitly set, allowing for more flexible and dynamic ENS name management.</p>\n\n<p>The core idea was to implement a new resolver interface that would support wildcard resolution, potentially simplifying the management of large numbers of subdomains and enabling new use-cases for ENS. However, the proposal's development and discussion process led to it being moved from the main EIPs repository to the ERCs repository, indicating a shift in its categorization and possibly its priority within the Ethereum ecosystem.</p>\n\n<p>As of now, EIP-2544 has been moved to the ERCs repository, suggesting that while it remains a relevant concept for ENS, it may not have gained the traction needed for immediate implementation in its original form. The current status and any potential updates or alternatives would need to be checked in the ERCs repository for the most up-to-date information on this proposal's progress and viability.</p>\n</article>",
  "EIP-2565": "<article><h1>EIP-2565: ModExp Gas Cost</h1>\n\n<p>EIP-2565 was proposed in March 2020 to update the gas cost calculation for the ModExp (modular exponentiation) precompile in Ethereum. The proposal was authored by Kelly Olson, Sean Gulley, Simon Peffers, Justin Drake, and Dankrad Feist.</p>\n\n<p>The motivation was that the existing gas costs for ModExp were too high, making cryptographic operations using modular exponentiation inefficient and expensive. By reducing the costs to better reflect real-world operational costs, EIP-2565 aimed to make various cryptographic functions more practical on Ethereum, including signatures, verifiable delay functions (VDFs), SNARKs, and accumulators.</p>\n\n<p>The EIP specifies a new algorithm for calculating the gas cost based on approximating the multiplication complexity and number of iterations required. It was included in the Berlin hard fork in April 2021, significantly reducing gas costs for ModExp operations. This has enabled more efficient implementations of cryptography on Ethereum, improving security and enabling new use cases.</p></article>",
  "EIP-2566": "<article><h1>EIP-2566: Human Readable Parameters for Contract Function Execution</h1>\n\n<p>EIP-2566, proposed by Joseph Stockermans in March 2020, aimed to improve the user experience and security of smart contract interactions. The proposal suggested a new Ethereum RPC method called <code>eth_sendTransactionToContractFunction</code>, which would allow for human-readable contract function execution data to be displayed to users during transaction confirmation.</p>\n\n<p>The main goal of this proposal was to address a significant issue in the existing <code>eth_sendTransaction</code> method, which only accepts non-human readable function call data. This limitation makes it difficult for wallet providers to display clear, understandable information about contract interactions to users, potentially leaving them vulnerable to malicious dapps that could manipulate function arguments without the user's knowledge.</p>\n\n<p>Unfortunately, EIP-2566 has not gained significant traction since its proposal. Its status is currently listed as \"Stagnant,\" indicating a lack of progress or adoption. While the issue it aimed to address remains relevant, other approaches and proposals have emerged to improve smart contract interaction transparency, such as EIP-712 (Typed structured data hashing and signing) and various wallet-specific improvements in transaction data presentation.</p></article>",
  "EIP-2569": "<article><h1>EIP-2569: Saving and Displaying Image Onchain</h1>\n<p>EIP-2569, proposed by Lucas Cullen and Miguel Mota in March 2020, aimed to standardize a method for storing and displaying images directly on the Ethereum blockchain. The proposal addressed the need for a unified approach to handle image data within smart contracts, potentially enhancing the functionality of NFTs and other blockchain-based applications that involve visual elements.</p>\n<p>The proposal suggested using base64 encoding for image data and introduced a new MIME type, \"image/svg+xml+base64\", to facilitate the storage and retrieval of SVG images on-chain. This approach would allow for more efficient storage and easier rendering of images directly from smart contract data. However, the proposal did not gain significant traction in its original form.</p>\n<p>As of now, EIP-2569 has been moved to the Ethereum ERCs repository, indicating that it is no longer actively pursued as an Ethereum Improvement Proposal. The current status suggests that while the concept remains relevant, the specific implementation proposed in EIP-2569 may have been superseded by other approaches or integrated into broader standards for handling on-chain media content.</p></article>",
  "EIP-2583": "<article><h1>EIP-2583: Penalty for Account Trie Misses</h1>\n\n<p>EIP-2583, authored by Martin Holst Swende, proposes introducing a gas penalty for opcodes that access non-existent accounts in the Ethereum state trie. The proposal aims to mitigate potential denial-of-service (DoS) attacks that exploit the performance difference between cache hits and misses when looking up account data.</p>\n\n<p>The motivation behind this EIP stems from the increasing saturation of the Ethereum state trie over time. As the trie grows, the number of disk lookups required to access state information increases, making operations like EXTCODEHASH more expensive. While caching mechanisms help, they are vulnerable to attacks using non-existent accounts, which bypass these caches and force worst-case execution scenarios.</p>\n\n<p>Despite its potential benefits for network security, EIP-2583 has not gained significant traction since its proposal in February 2020. Its status remains \"Stagnant,\" indicating a lack of recent activity or progress towards implementation. This may be due to the complexity of implementing such changes or the emergence of alternative solutions to address similar concerns in Ethereum's ongoing development.</p></article>",
  "EIP-2584": "<article><h1>EIP-2584: Trie Format Transition with Overlay Trees</h1>\n\n<p>EIP-2584 was proposed in 2020 by Guillaume Ballet as a method to transition Ethereum's state trie from a hexary to a binary format. The motivation was to improve performance and reduce storage requirements. The proposal outlined a phased approach using an overlay binary trie alongside the existing hexary trie during the transition.</p>\n\n<p>The proposal received some initial discussion but ultimately stagnated. While there was interest in moving to a binary trie format, concerns were raised about the complexity of the transition process and potential risks. As of 2023, Ethereum has not implemented this proposal, instead focusing on other scaling solutions like sharding and layer 2 rollups.</p>\n\n<p>Currently, EIP-2584 remains in \"Stagnant\" status, meaning it has been inactive for a prolonged period without making progress toward \"Final\" status. While the core idea of transitioning to a binary trie format may still have merit, any future implementation would likely take a different approach than what was originally outlined in this EIP.</p>\n\n</article>",
  "EIP-2593": "<article><h1>EIP-2593: Escalator Fee Market Change for ETH 1.0 Chain</h1>\n\n<p>EIP-2593 was proposed in March 2020 by Dan Finlay to address inefficiencies in Ethereum's first-price auction fee model. It suggested implementing an \"escalator\" mechanism allowing users to specify parameters for dynamically increasing bids over time, creating a more efficient price discovery process for transaction fees.</p>\n\n<p>The proposal was inspired by concepts from The Agoric Papers on incentive engineering. It aimed to reduce overpayment by users while still allowing miners to maximize fee revenue. However, EIP-2593 did not gain significant traction and is currently marked as \"Stagnant\" in the EIP process.</p>\n\n<p>While innovative, EIP-2593 was ultimately overshadowed by EIP-1559, which took a different approach to fee market reform and was successfully implemented in the London hard fork in 2021. EIP-1559's base fee + priority fee model has become the standard, making EIP-2593 unlikely to be implemented in its original form on Ethereum mainnet.</p>\n</article>",
  "EIP-2612": "<article><h1>EIP-2612: Permit Extension for ERC-20 Signed Approvals</h1>\n\n<p>EIP-2612, proposed by Martin Lundfall in 2020, introduced a \"permit\" function to the ERC-20 token standard. This improvement allows users to modify the ERC-20 allowance using a signed message instead of directly calling the \"approve\" function, reducing the number of transactions needed for token approvals and improving user experience.</p>\n\n<p>The proposal gained traction quickly due to its potential to streamline token interactions, especially in decentralized finance (DeFi) applications. It was widely adopted by projects like Uniswap and Aave, demonstrating its practical utility in reducing gas costs and simplifying user flows. EIP-2612 paved the way for related proposals like EIP-3009 (Transfer with Authorization) and EIP-4494 (Permit for NFTs), which extended similar functionality to other token standards.</p>\n\n<p>As of 2023, EIP-2612 remains relevant and widely implemented. However, its status has been moved to the Ethereum ERCs repository, indicating its transition from a proposal to an accepted standard. While it has not been officially finalized, its widespread adoption in the ecosystem suggests it has become a de facto standard for many ERC-20 tokens, particularly in the D",
  "EIP-2615": "<article><h1>EIP-2615: Non-Fungible Token with mortgage and rental functions</h1>\n\n<p>EIP-2615 was proposed as an extension to the ERC-721 standard, aiming to introduce mortgage and rental functionalities for Non-Fungible Tokens (NFTs). The proposal was authored by Kohshi Shiba and submitted in April 2020. It sought to address the growing need for more complex financial interactions within the NFT ecosystem, particularly in the realm of digital real estate and virtual assets.</p>\n\n<p>The proposal outlined methods for creating mortgages on NFTs, facilitating rental agreements, and managing ownership transfers in these scenarios. It aimed to enable NFT owners to use their assets as collateral, create time-limited usage rights, and implement automated processes for mortgage payments and defaults. While the concept was innovative, it didn't gain significant traction in its original form.</p>\n\n<p>Currently, EIP-2615 has been moved to the Ethereum ERCs repository, indicating a shift in its development process. The proposal's status is listed as \"Moved,\" suggesting that it may have been superseded by other standards or is undergoing further refinement. As of now, implementing EIP-2615 as originally proposed is not recommended, but the concepts it introduced continue to influence discussions around expanding NFT functionality in decentralized finance (DeFi) applications.</p",
  "EIP-2645": "<article><h1>EIP-2645: Hierarchical Deterministic Wallet</h1>\n\n<p>EIP-2645, proposed by Alexey Shekhirin and Kostiantyn Piskovyi, aimed to standardize the implementation of Hierarchical Deterministic (HD) Wallets for Ethereum. HD wallets allow users to derive multiple addresses from a single seed, enhancing privacy and simplifying backup procedures. This proposal was inspired by BIP-32, which introduced HD wallets for Bitcoin.</p>\n\n<p>The proposal outlined a method for deriving Ethereum addresses using a hierarchical structure, similar to BIP-32 but adapted for Ethereum's specific requirements. It aimed to provide a consistent way for wallets and exchanges to implement HD functionality, improving interoperability and user experience across different Ethereum-based applications.</p>\n\n<p>Currently, EIP-2645 has been moved to the Ethereum Request for Comments (ERC) repository, indicating its status as a potential standard rather than a core protocol change. While the concept of HD wallets is widely adopted in the cryptocurrency ecosystem, the specific implementation details for Ethereum continue to evolve. As such, developers and wallet providers should refer to the most recent standards and best practices when implementing HD wallet functionality for Ethereum.</p>\n</article>",
  "EIP-2657": "<article><h1>EIP-2657: Ephemeral Testnet Yolo</h1>\n\n<p>EIP-2657, proposed by James Hancock, introduced the concept of an \"Ephemeral Testnet\" called Yolo. This testnet was designed for testing basic infrastructure changes and was intended to be short-lived (\"nuked\" after serving its purpose). The proposal aimed to provide a flexible testing environment for Ethereum client developers to implement and test new features before considering them for mainnet deployment.</p>\n\n<p>The initial version, YOLO-v1, included implementations of EIP-2537 (BLS12-381 curve operations) and EIP-2315 (Simple Subroutines for the EVM). These features were selected to test their integration and performance in a live network environment. The testnet was deployed on June 3rd, 2020, with various Ethereum clients participating in its implementation and syncing process.</p>\n\n<p>While EIP-2657 served its purpose as a testing ground, it is currently marked as \"Stagnant\" in the EIP process. The concept of ephemeral testnets has evolved, with more structured approaches like the \"Ethereum Testing Network\" (ETN) taking precedence. These newer testing methodologies provide more organized and comprehensive ways to evaluate potential protocol changes before mainnet implementation.</p>\n</",
  "EIP-2666": "<article><h1>EIP-2666: Repricing of Precompiles and Keccak256 Function</h1>\n\n<p>EIP-2666 was proposed in May 2020 by Alex Vlasov to adjust the gas costs of certain precompiled contracts and the Keccak256 opcode in Ethereum. The motivation was to better align pricing with the actual computational costs and resource usage of these operations, taking into account changes in EVM implementations over time.</p>\n\n<p>Specifically, the EIP proposed new pricing formulas for the SHA256 and RIPEMD precompiles, as well as the Keccak256 opcode. It aimed to make the gas costs more accurately reflect the inner structure and computational requirements of these cryptographic hash functions. The proposal referenced related EIPs like EIP-2046 which changed precompile call costs.</p>\n\n<p>As of 2023, EIP-2666 remains in \"Stagnant\" status, indicating it has not been actively pursued or implemented. While the goal of more accurate gas pricing is generally supported, reaching consensus on specific formulas can be challenging. Other gas cost adjustment proposals have been implemented since 2020, potentially addressing some of the issues this EIP aimed to solve.</p>\n</article>",
  "EIP-2677": "<article><h1>EIP-2677: Limit size of `initcode`</h1>\n\n<p>EIP-2677 was proposed in May 2020 by Martin Holst Swende, Paweł Bylica, and Alex Beregszaszi to enforce a maximum size limit of 49,152 bytes for contract initialization code (`initcode`) in Ethereum. The motivation was to prevent potential denial-of-service attacks by limiting the work required for jumpdest analysis and hashing of large `initcode` during contract creation.</p>\n\n<p>The proposal aimed to set the `initcode` size limit to twice the existing limit on deployed contract code size (24,576 bytes) established by EIP-170. This would ensure instruction offsets and code sizes fit within 16-bit values. However, EIP-2677 was ultimately withdrawn and replaced by EIP-3860, which took a more comprehensive approach to limiting `initcode` size.</p>\n\n<p>EIP-3860 was later included as part of the Shanghai upgrade in April 2023, implementing a more refined `initcode` size limit along with a new gas cost model. This demonstrates how improvement proposals often evolve and build upon each other to address security and scalability concerns in the Ethereum protocol.</p></article>",
  "EIP-2678": "<article><h1>EIP-2678: Revised ERC-20 Transfer and Approve Interface</h1>\n\n<p>EIP-2678, proposed by Micah Zoltu in 2020, aimed to revise the ERC-20 token standard's transfer and approve functions. The proposal sought to address inconsistencies and potential vulnerabilities in the widely-used ERC-20 interface, particularly focusing on the return values of these functions.</p>\n\n<p>The main objective was to standardize the behavior of transfer and approve functions across all ERC-20 implementations. This would enhance interoperability and reduce the risk of errors in smart contracts interacting with various ERC-20 tokens. However, due to the widespread adoption of the original ERC-20 standard, implementing such changes posed significant challenges.</p>\n\n<p>Currently, EIP-2678 has been moved to the Ethereum ERCs repository, indicating that it is no longer actively pursued as an Ethereum Improvement Proposal. While the issues it aimed to address remain relevant, the Ethereum community has generally opted for backward compatibility and alternative solutions, such as the ERC-223 and ERC-777 standards, which build upon ERC-20 while addressing some of its limitations.</p></article>",
  "EIP-2680": "<article><h1>EIP-2680: Ethereum 2.0 Merkle Proofs</h1>\n\n<p>EIP-2680, proposed by Ethereum Foundation researcher Danny Ryan, aimed to standardize the format for Merkle proofs in Ethereum 2.0 (now known as the Ethereum consensus layer). The proposal was designed to facilitate efficient verification of data across different Ethereum implementations and clients.</p>\n\n<p>This EIP was particularly important during the transition from Ethereum's original proof-of-work consensus to the proof-of-stake mechanism. It helped ensure consistency in how Merkle proofs were constructed and verified, which is crucial for maintaining the integrity of the Ethereum blockchain across its ecosystem.</p>\n\n<p>As of now, EIP-2680 has been moved to the Ethereum ERCs repository, indicating its ongoing relevance to the Ethereum ecosystem. While its current status is \"Moved,\" the principles outlined in this proposal continue to influence how Merkle proofs are handled in Ethereum's consensus layer, playing a vital role in the network's scalability and security efforts.</p></article>",
  "EIP-2681": "<article><h1>EIP-2681: Limit Account Nonce to 2^64-1</h1>\n\n<p>EIP-2681, proposed by Alex Beregszaszi in April 2020, aimed to limit Ethereum account nonces to a maximum value of 2^64-1. This proposal was motivated by potential optimizations in state witnesses, transaction formats, and client implementations. By constraining nonces to a fixed range, it would allow for more efficient representations and processing.</p>\n\n<p>The proposal specified two key changes: invalidating transactions with nonces exceeding or equal to 2^64-1, and modifying the behavior of CREATE and CREATE2 instructions when an account's nonce reaches this limit. These changes were to be applied retroactively from the genesis block, ensuring consistency across the entire blockchain history.</p>\n\n<p>EIP-2681 reached \"Final\" status, indicating its acceptance by the Ethereum community. However, its actual implementation in the Ethereum protocol remains unclear. While the proposal offered potential benefits in terms of optimization and standardization, the extremely high nonce limit means it's unlikely to affect normal network operations in practice. Developers and users should be aware of this theoretical limit, even if it's not currently enforced in all clients.</p>\n</article>",
  "EIP-2696": "<article><h1>EIP-2696: JavaScript `request` method RPC transport</h1>\n\n<p>EIP-2696, authored by Micah Zoltu and Erik Marks, proposes a standard for remote procedure calls between an Ethereum Provider and an Ethereum Client when both can interface via a shared JavaScript object. This EIP aims to improve interoperability and standardize communication between JavaScript applications and Ethereum nodes.</p>\n\n<p>The proposal defines a simple object with a `request` method that JavaScript applications can use to communicate with the Ethereum blockchain. It focuses solely on the transport mechanism, leaving payload content and discovery to be determined by other standards. This approach allows for flexibility in implementation while providing a consistent interface for developers.</p>\n\n<p>EIP-2696 reached \"Final\" status, indicating its acceptance and implementation in the Ethereum ecosystem. It has become an important part of the Web3 infrastructure, enabling seamless integration between web applications and Ethereum wallets or nodes. The standardization provided by this EIP has contributed to the growth and usability of decentralized applications (dApps) in the Ethereum ecosystem.</p>\n</article>",
  "EIP-2700": "<article><h1>EIP-2700: JavaScript Provider Event Emitter</h1>\n\n<p>EIP-2700 was proposed in June 2020 by Micah Zoltu and Erik Marks to standardize how JavaScript Ethereum providers notify clients about blockchain state changes. It defines a simple event emitter interface that providers can implement to allow clients to subscribe to and receive notifications about events like new blocks, transactions, and chain reorganizations.</p>\n\n<p>The motivation was to improve interoperability between Ethereum providers (like MetaMask) and JavaScript applications running in browsers or other JavaScript runtimes. By standardizing the notification mechanism, it allows applications to work consistently across different provider implementations. The proposal intentionally does not specify payload formats, leaving that flexibility to providers and clients to negotiate.</p>\n\n<p>EIP-2700 reached Final status in October 2020 and has been widely adopted by major Ethereum providers and libraries. It forms a key part of the Ethereum JavaScript API ecosystem, enabling reactive applications that can respond to real-time blockchain events. While relatively simple, it solved an important interoperability challenge and helped mature the Ethereum developer experience in JavaScript environments.</p>\n</article>",
  "EIP-2711": "<article><h1>EIP-2711: Sponsored, expiring and batch transactions</h1>\n\n<p>EIP-2711 was proposed in 2020 by Micah Zoltu as a way to add support for sponsored transactions, batch transactions, and expiring transactions to Ethereum. The key motivations were to allow users without ETH to still transact using other assets, enable more efficient batching of transactions, and allow transactions to expire for security.</p>\n\n<p>Specifically, it proposed a new transaction type that would allow:\n1) A separate account to pay gas fees (sponsored transactions)\n2) Multiple transactions from the same sender to be executed in sequence (batching) \n3) Transactions to become invalid after a certain timestamp (expiration)</p>\n\n<p>While innovative, EIP-2711 was ultimately withdrawn. Some of its concepts were incorporated into other proposals like EIP-1559 (which changed the fee market) and EIP-4337 (which enables account abstraction). The core ideas of sponsored and expiring transactions remain relevant, but are being explored through other mechanisms in Ethereum's evolving architecture.</p>\n\n</article>",
  "EIP-2718": "<article><h1>EIP-2718: Typed Transaction Envelope</h1>\n\n<p>EIP-2718, proposed by Micah Zoltu in June 2020, introduced a new transaction type called the \"Typed Transaction Envelope.\" This proposal aimed to create a flexible framework for future transaction types in Ethereum, addressing the limitations of backward compatibility in previous transaction formats.</p>\n\n<p>The core idea of EIP-2718 is to prefix transactions with a type identifier, allowing for easy differentiation and processing of various transaction formats. This approach simplifies the implementation of new transaction types and provides a clear path for future innovations in the Ethereum ecosystem. The proposal gained significant traction and was eventually accepted as a Final standard, becoming a fundamental part of Ethereum's transaction handling system.</p>\n\n<p>Since its implementation, EIP-2718 has enabled the development of several other important proposals, such as EIP-1559 (fee market change) and EIP-2930 (optional access lists). Its adoption has streamlined the process of introducing new transaction types, making the Ethereum protocol more adaptable to evolving needs. The current status of EIP-2718 is Final, indicating its successful integration into the Ethereum mainnet and widespread use in the ecosystem.</p>\n</article>",
  "EIP-2733": "<article><h1>EIP-2733: Transaction Package</h1>\n\n<p>EIP-2733, titled \"Transaction Package,\" was proposed by Matt Garnett in June 2020. The proposal aimed to create a new transaction type that would execute a package of one or more transactions while passing status information to subsequent transactions. This was designed to address the onboarding challenges for new Ethereum users, particularly the need to acquire ether for transaction fees.</p>\n\n<p>The proposal was intended to provide a more robust alternative to meta-transactions, which were the prevailing solution at the time. Meta-transactions allowed users to pay for gas using alternative assets but required signature recovery within smart contracts, which was considered brittle. EIP-2733 aimed to offer a flexible framework for relayers to \"sponsor\" multiple transactions trustlessly.</p>\n\n<p>However, EIP-2733 was ultimately withdrawn by its author. Garnett decided to pursue EIP-3074 as the preferred solution to transaction packages. EIP-3074, which introduces \"AUTH and AUTHCALL opcodes,\" was seen as a more comprehensive approach to solving the same problems. As of now, EIP-2733 remains in \"Withdrawn\" status, having been superseded by other proposals in the Ethereum ecosystem.</p>\n</article>",
  "EIP-2746": "<article><h1>EIP-2746: ERC-721 Metadata JSON Schema</h1>\n\n<p>EIP-2746 was proposed to standardize the JSON schema for ERC-721 token metadata. The ERC-721 standard, which defines non-fungible tokens (NFTs) on Ethereum, allows for optional metadata to be associated with tokens. However, the original standard did not specify a consistent format for this metadata, leading to potential interoperability issues.</p>\n\n<p>The proposal was authored by Zach Burks, James Morgan, and Blaine Malone in July 2020. It aimed to create a uniform structure for NFT metadata, including fields like name, description, and image URL. This standardization would benefit NFT marketplaces, wallets, and other applications by ensuring consistent interpretation of token metadata across different platforms.</p>\n\n<p>As of now, EIP-2746 has been moved to the Ethereum ERCs repository, indicating its transition from a draft proposal to a more formalized standard. While not officially finalized, its relocation suggests growing acceptance within the Ethereum community. Developers working with ERC-721 tokens should consider adhering to this metadata schema to enhance compatibility and user experience across the NFT ecosystem.</p>\n</article>",
  "EIP-2767": "<article><h1>EIP-2767: Contract Ownership Governance</h1>\n\n<p>EIP-2767, originally proposed by Soham Zemse, aimed to standardize a governance mechanism for contract ownership in Ethereum. The proposal addressed the common need for transferring and managing ownership of smart contracts, which is crucial for upgradability and management of decentralized applications (dApps).</p>\n\n<p>The proposal suggested a standard interface for ownership transfer, including functions like transferOwnership() and acceptOwnership(). This would allow for a more secure two-step ownership transfer process, reducing the risk of accidental transfers to incorrect addresses. While similar concepts existed in practice, EIP-2767 sought to formalize these patterns into a widely accepted standard.</p>\n\n<p>As of now, EIP-2767 has been moved to the Ethereum ERCs repository, indicating a shift in its categorization or management. While the proposal addressed an important aspect of smart contract development, its current status suggests it may have been superseded by other standards or incorporated into broader governance frameworks within the Ethereum ecosystem.</p>\n</article>",
  "EIP-2770": "<article><h1>EIP-2770: Ethereum Meta Transactions</h1>\n\n<p>EIP-2770, proposed by Ronan Sandford, Alex Forshtat, and Yoav Weiss in August 2020, aimed to standardize a method for executing meta transactions on Ethereum. Meta transactions allow users to interact with smart contracts without directly paying for gas, enhancing user experience and reducing onboarding friction. The proposal defined a way for relayers to submit transactions on behalf of users, with the gas costs covered by a separate account.</p>\n\n<p>The proposal gained traction in the Ethereum community due to its potential to improve user adoption and interaction with dApps. It built upon earlier meta transaction concepts and complemented other gas abstraction proposals like EIP-1776 and EIP-712. However, as of 2023, EIP-2770 has been moved to the Ethereum ERCs repository, indicating a shift in its status and potentially its implementation strategy.</p>\n\n<p>While the core concept of meta transactions remains relevant, the Ethereum ecosystem has evolved with alternative solutions like account abstraction (EIP-4337) gaining prominence. The current status of EIP-2770 as \"Moved\" suggests that while its principles are still valuable, the specific implementation may have been superseded or incorporated into broader initiatives within the Ethereum improvement process.</p>\n</article>",
  "EIP-2771": "<article><h1>EIP-2771: Secure Protocol for Native Meta Transactions</h1>\n\n<p>EIP-2771, proposed by Ronan Sandford, Yoav Weiss, and others, aimed to standardize a secure protocol for native meta transactions in Ethereum. Meta transactions allow users to execute transactions without directly paying for gas, enhancing user experience and reducing barriers to entry. This proposal was particularly significant as it addressed the growing need for gas-less transactions in decentralized applications (dApps).</p>\n\n<p>The proposal gained traction in the Ethereum community due to its potential to improve user onboarding and interaction with smart contracts. It was designed to be compatible with existing smart contracts and wallets, making it an attractive solution for developers. EIP-2771 also inspired related proposals and implementations, such as EIP-3009 and OpenZeppelin's GSN (Gas Station Network).</p>\n\n<p>As of now, EIP-2771 has been moved to the Ethereum ERCs repository, indicating its transition from a proposal to a recognized standard. This move suggests broad acceptance and implementation within the Ethereum ecosystem. The current location of the specification (https://github.com/ethereum/ercs/blob/master/ERCS/erc-2771.md) serves as the authoritative source for developers looking to implement this standard in their projects.</p></",
  "EIP-2780": "<article><h1>EIP-2780: Reduce Intrinsic Transaction Gas</h1>\n\n<p>EIP-2780, proposed by Matt Garnett and Uri Klarman in July 2020, aimed to reduce the intrinsic cost of Ethereum transactions from 21,000 to 7,000 gas. The motivation was to make sending ETH less expensive, especially for smaller amounts, which had become prohibitively costly due to high gas prices. This proposal was particularly relevant during the DeFi boom when network congestion led to extremely high transaction costs.</p>\n\n<p>The proposal faced significant discussion and debate within the Ethereum community. While many supported the goal of reducing transaction costs, there were concerns about potential negative impacts on network security and spam resistance. Some argued that other proposals like EIP-1559 (which introduced a new fee market mechanism) could address the issue more comprehensively.</p>\n\n<p>Ultimately, EIP-2780 was withdrawn and not implemented. The Ethereum community opted for other solutions to address transaction costs, including layer 2 scaling solutions and the eventual implementation of EIP-1559 in the London hard fork. Today, while high gas fees remain a challenge, the focus has shifted towards scaling solutions rather than modifying the core protocol's intrinsic gas costs.</p>\n\n</article>",
  "EIP-2786": "<article><h1>EIP-2786: Ethereum Provider Connect/Disconnect Events</h1>\n\n<p>EIP-2786, proposed by Micah Zoltu and Erik Marks in July 2020, aimed to standardize how Ethereum providers communicate their connection status to applications. The proposal defined \"connected\" and \"disconnected\" states for providers, and specified that providers should emit 'connect' and 'disconnect' events when transitioning between these states.</p>\n\n<p>The motivation behind this EIP was to enable applications to be more responsive to changes in provider connectivity, allowing them to inform users about connection issues in real-time. This would improve the user experience by providing clearer feedback about the current state of the connection to the Ethereum network.</p>\n\n<p>However, EIP-2786 was ultimately withdrawn. While the idea had merit, it was likely superseded by more comprehensive standards for provider behavior, such as EIP-1193 (Ethereum Provider JavaScript API). Today, most Ethereum providers implement similar functionality as part of their broader APIs, though not necessarily using the exact events proposed in EIP-2786.</p>\n</article>",
  "EIP-2803": "<article><h1>EIP-2803: Rich Transactions</h1>\n\n<p>EIP-2803, proposed by Micah Zoltu in July 2020, aimed to introduce \"Rich Transactions\" to Ethereum. The proposal sought to allow externally owned accounts (EOAs) to execute bytecode directly, enabling multiple contract calls in a single transaction. This would significantly improve user experience by reducing the number of transactions needed for complex DApp interactions.</p>\n\n<p>The motivation behind EIP-2803 was to address the common issue of users needing to approve multiple transactions for a single action, such as approving a token spend and then calling a contract. While contract wallets could theoretically solve this problem, their adoption was hindered by various factors, including gas funding complications and lack of consistent browser integration support.</p>\n\n<p>Despite its potential benefits, EIP-2803 has not gained significant traction in the Ethereum community. As of now, its status remains \"Stagnant,\" indicating that it has not progressed through the EIP process. While the idea of Rich Transactions continues to be relevant, other proposals and layer-2 solutions have since emerged to address similar concerns, potentially superseding the need for this specific EIP.</p></article>",
  "EIP-2831": "<article><h1>EIP-2831: Transaction Replacement Message Type</h1>\n\n<p>EIP-2831, proposed by Gregory Markou in July 2020, aimed to extend the JavaScript Ethereum Provider API (EIP-1193) by introducing a new message type for transaction replacements. The proposal addressed a significant gap in communication between providers and consumers regarding superseded transactions in the mempool.</p>\n\n<p>The motivation behind this EIP was to improve user experience for both wallet and dapp developers. While transaction replacement had become a common feature in wallets, allowing users to effectively cancel or modify pending transactions, dapp developers struggled to handle these replacements efficiently. The proposal sought to create a standardized way for providers to notify consumers about transaction replacements, eliminating the need for inefficient polling methods.</p>\n\n<p>As of now, EIP-2831 is in a \"Stagnant\" status, indicating that it has not seen significant activity or updates recently. While the proposal addressed a real issue in the Ethereum ecosystem, it's unclear whether it will be implemented as initially proposed or if alternative solutions have been adopted. Developers working on wallet integrations or transaction management systems should be aware of this proposal and consider its principles, even if not directly implementing it.</p></article>",
  "EIP-2844": "<article><h1>EIP-2844: Add DID related methods to the JSON-RPC</h1>\n\n<p>EIP-2844 was proposed in August 2020 by Joel Thorstensson to add new JSON-RPC methods for supporting Decentralized Identifiers (DIDs) and JSON Object Signing and Encryption (JOSE) in Ethereum wallets. The proposal aimed to enable wallets to handle data encryption, decryption, and authentication using standardized formats.</p>\n\n<p>The motivation behind EIP-2844 was to provide a more standardized approach to encryption and decryption in Ethereum wallets compared to previous efforts like EIP-130 and EIP-1098. It proposed three new JSON-RPC methods with a \"did_*\" prefix to allow wallets to support DIDs and JOSE, enabling applications to request a user's DID and resolve the associated DID document containing public keys for encryption and signature verification.</p>\n\n<p>Currently, EIP-2844 is in a \"Stagnant\" status, indicating that it has not seen significant activity or updates recently. While the proposal offered a potentially valuable standardization of DID and JOSE support in Ethereum wallets, its implementation has not gained widespread adoption. As the DID and decentralized identity landscape continues to evolve, other approaches or standards may have emerged to address similar",
  "EIP-2848": "<article><h1>EIP-2848: My Wallet Interface</h1>\n\n<p>EIP-2848, originally proposed as an Ethereum Request for Comments (ERC), aimed to standardize a wallet interface for decentralized applications (dApps). The proposal was authored by Weiwu Zhang, Alex Van de Sande, and Richard Moore in August 2020. It sought to create a consistent API for wallets to interact with Ethereum-based applications, potentially improving user experience and reducing development complexity.</p>\n\n<p>The proposal addressed the need for a unified approach to wallet integration, as the existing landscape featured various wallet implementations with differing interfaces. EIP-2848 proposed methods for account management, transaction signing, and message signing, among other wallet-related functions. However, the proposal did not gain significant traction within the Ethereum community and was eventually moved to the separate ERC repository.</p>\n\n<p>As of now, EIP-2848 has been relocated to the Ethereum ERCs repository, indicating that it is no longer actively considered for implementation as an Ethereum Improvement Proposal. While the idea of a standardized wallet interface remains relevant, other initiatives and standards have emerged to address similar concerns, such as EIP-1193 and various Web3 provider implementations.</p></article>",
  "EIP-2876": "<article><h1>EIP-2876: Deposit Contract Snapshot Interface</h1>\n\n<p>EIP-2876, proposed by Carl Beekhuizen, aimed to define a standard interface for Ethereum deposit contract snapshots. This proposal was designed to facilitate the creation of lightweight clients for Ethereum 2.0 (now known as the Ethereum consensus layer) by allowing them to efficiently verify the deposit contract state without processing all historical deposits.</p>\n\n<p>The proposal was initially introduced in August 2020 as part of the efforts to support the transition to Ethereum 2.0. It specified methods for retrieving deposit root and deposit count at specific block numbers, which would enable clients to efficiently sync and verify the deposit contract state. However, the proposal did not gain significant traction in its original form.</p>\n\n<p>Currently, EIP-2876 has been moved to the Ethereum ERCs repository, indicating that it is no longer actively considered as an Ethereum Improvement Proposal. The current status suggests that the ideas presented in this EIP may have been superseded by other approaches or integrated into broader Ethereum consensus layer specifications.</p>\n</article>",
  "EIP-2917": "<article><h1>EIP-2917: Staking Yield Bearing Tokens</h1>\n\n<p>EIP-2917, proposed by Weiwu Zhang, introduced the concept of Staking Yield Bearing Tokens. This proposal aimed to standardize a method for tokens to generate yield through staking, addressing the growing demand for decentralized finance (DeFi) yield-generating assets. The EIP suggested a set of functions that would allow smart contracts to calculate and distribute yields to token holders based on their staking duration and amount.</p>\n\n<p>While the proposal gained some attention in the Ethereum community, particularly among DeFi enthusiasts, it did not achieve widespread adoption. The rapid evolution of the DeFi ecosystem led to the development of various yield-generating mechanisms, some of which implemented similar concepts without strictly adhering to this specific EIP. As a result, EIP-2917 was eventually moved to the Ethereum ERCs repository, indicating that it did not progress to become a finalized Ethereum Improvement Proposal.</p>\n\n<p>Currently, the proposal's status is \"Moved,\" and it can be found in the Ethereum ERCs repository. While the core idea of standardizing yield-bearing tokens remains relevant, the DeFi space has seen the emergence of more complex and diverse yield-generating mechanisms. As such, while EIP-2917 may not be directly implemented today,",
  "EIP-2926": "<article><h1>EIP-2926: Chunk-Based Code Merkleization</h1>\n\n<p>EIP-2926 was proposed in 2020 by Sina Mahmoodi and Alex Beregszaszi as a way to reduce block witness sizes in Ethereum by merkleizing contract bytecode into fixed-size chunks. The motivation was to make Ethereum more scalable by enabling stateless clients to only need the relevant code chunks for execution rather than full contract bytecode.</p>\n\n<p>The proposal specifies how contract code would be split into chunks and merkleized into a tree structure. It was designed to work in conjunction with other proposals like EIP-2584 for binary trie transition. However, EIP-2926 has not been implemented and its status is currently \"Stagnant\", likely superseded by other scalability approaches like rollups and sharding that have gained more traction in Ethereum's roadmap.</p>\n\n<p>While code merkleization remains an interesting optimization for Ethereum, the specific approach in EIP-2926 is no longer actively pursued. More recent proposals like EIP-4444 for historical data expiry have taken priority for managing Ethereum's state growth. The core ideas may still inform future optimizations, but EIP-2926 itself is unlikely to be implemented as originally specified.</p>\n</article>",
  "EIP-2929": "<article><h1>EIP-2929: Gas Cost Increases for State Access Opcodes</h1>\n\n<p>EIP-2929, authored by Vitalik Buterin and Martin Swende, was proposed in September 2020 to address the underpricing of storage-accessing opcodes in Ethereum. The proposal aimed to increase gas costs for operations like SLOAD, *CALL, BALANCE, EXT*, and SELFDESTRUCT when used for the first time in a transaction, while exempting precompiles and previously accessed addresses and storage slots.</p>\n\n<p>The motivation behind this EIP was to better align gas costs with the actual computational resources required, particularly in light of the 2016 Shanghai DoS attacks. By increasing the cost of state access operations, the proposal sought to mitigate potential vulnerabilities and improve the overall security and efficiency of the Ethereum network.</p>\n\n<p>EIP-2929 was implemented as part of the Berlin hard fork in April 2021 and is now in \"Final\" status. Its implementation has helped to reduce the effectiveness of certain DoS attack vectors and has contributed to a more robust gas pricing model for Ethereum. This proposal has been an important step in the ongoing evolution of Ethereum's gas mechanics and continues to influence discussions around network optimization and security.</p></article>",
  "EIP-2930": "<article><h1>EIP-2930: Optional Access Lists</h1>\n\n<p>EIP-2930 was proposed in August 2020 by Ethereum founders Vitalik Buterin and Martin Swende to introduce optional access lists for transactions. The proposal aimed to mitigate potential contract breakage risks from EIP-2929 while also improving gas efficiency for certain types of transactions.</p>\n\n<p>The core idea was to allow transactions to pre-specify addresses and storage slots they plan to access, paying a discounted gas cost upfront. This would prevent unexpected gas cost increases during execution that could break existing contracts. It also introduced a new transaction type (type 1) to support the access list feature.</p>\n\n<p>EIP-2930 was implemented alongside EIP-2929 in the Berlin hard fork in April 2021. While optional, it has seen adoption by wallets and dapps to optimize gas usage, especially for more complex transactions. The proposal remains relevant today as an important gas optimization technique, though newer transaction types like EIP-1559 have since been introduced to further evolve Ethereum's fee market.</p>\n\n</article>",
  "EIP-2935": "<article><h1>EIP-2935: Serve Historical Block Hashes from State</h1>\n\n<p>EIP-2935 was proposed in September 2020 by a group of prominent Ethereum developers including Vitalik Buterin, Tomasz Stanczak, and others. The proposal aims to store the last 8192 block hashes in the storage of a system contract, allowing for easier access to historical block data, particularly for stateless clients.</p>\n\n<p>The key motivation behind this EIP is to future-proof Ethereum for stateless clients, which may not have easy access to recent block hashes. By storing these hashes in contract storage, they can be included in the witness data provided to stateless clients. This approach also allows for potential expansion of the BLOCKHASH opcode's range in the future without changing its existing semantics.</p>\n\n<p>As of 2023, EIP-2935 remains in \"Review\" status. While it offers potential benefits for stateless execution and layer 2 solutions like rollups, it has not yet been implemented. The proposal continues to be discussed and evaluated by the Ethereum community for its potential impact on the network's scalability and efficiency.</p></article>",
  "EIP-2936": "<article><h1>EIP-2936: EXTCLEAR Opcode for SELFDESTRUCTed Contracts</h1>\n\n<p>EIP-2936, proposed by William Morriss in September 2020, aimed to introduce a new opcode called EXTCLEAR for clearing storage of self-destructed contracts. The proposal sought to address the complexities and inefficiencies associated with the existing SELFDESTRUCT opcode, which clears an unbounded amount of contract storage upon execution.</p>\n\n<p>The motivation behind this EIP was to simplify the SELFDESTRUCT operation and reduce computational costs for nodes tracking storage of potentially self-destructed contracts. It also aimed to address issues related to the CREATE2 opcode, which allowed reinitialization of contracts and access to prior storage. The proposal suggested changing SELFDESTRUCT to not clear any storage and introducing EXTCLEAR to clear specific storage slots of previously self-destructed contracts.</p>\n\n<p>As of now, EIP-2936 is in a \"Stagnant\" status, indicating that it has not progressed in the Ethereum improvement process. While the proposal offered potential benefits in terms of efficiency and flexibility, it has not gained sufficient traction or consensus within the Ethereum community to move forward. The current Ethereum ecosystem continues to use the existing SELFDESTRUCT mechanism, though discussions",
  "EIP-2937": "<article><h1>EIP-2937: SET_INDESTRUCTIBLE Opcode</h1>\n\n<p>EIP-2937, proposed by Vitalik Buterin in September 2020, introduces a new opcode called SET_INDESTRUCTIBLE (0xA8) to Ethereum. This opcode would allow contracts to permanently disable their ability to self-destruct, providing a guarantee of code immutability. The primary use case is for library contracts that need to assure users of their permanent availability and unmodified state.</p>\n\n<p>The proposal adds a transaction-wide global variable to track indestructible contracts and modifies the SELFDESTRUCT opcode to throw an exception if called by an indestructible contract. This approach offers a more flexible alternative to completely disabling SELFDESTRUCT, addressing concerns about smart contract permanence without breaking existing contracts.</p>\n\n<p>As of now, EIP-2937 is in a \"Stagnant\" status, indicating a lack of recent progress or discussion. While the proposal offers an interesting solution to contract immutability, the Ethereum community has been exploring other approaches to address similar concerns, such as EIP-4758 which proposes to deactivate SELFDESTRUCT entirely. The future of EIP-2937 remains uncertain, but it has contributed to ongoing discussions about smart contract lifecycle management and imm",
  "EIP-2938": "<article><h1>EIP-2938: Account Abstraction</h1>\n\n<p>EIP-2938, titled \"Account Abstraction,\" was proposed by a team of prominent Ethereum developers including Vitalik Buterin, Ansgar Dietrichs, Matt Garnett, Will Villanueva, and Sam Wilson. The proposal aims to allow smart contracts to act as top-level accounts capable of paying transaction fees and initiating transaction execution, a significant departure from the current Ethereum model where only externally owned accounts (EOAs) can do so.</p>\n\n<p>The motivation behind this EIP stems from the desire to make Ethereum more flexible and user-friendly. By allowing smart contracts to manage transaction validation and fee payment, it opens up possibilities for more advanced wallet designs, improved security features, and simplified user experiences. This proposal builds upon years of discussion and research in the Ethereum community about account abstraction.</p>\n\n<p>Currently, EIP-2938 is in a \"Stagnant\" status, indicating that it has not seen significant activity or updates recently. While the concept of account abstraction remains an important goal for Ethereum's future, the specific implementation proposed in EIP-2938 may have been superseded by newer approaches or may be awaiting further refinement. The Ethereum community continues to explore various methods to achieve account abstraction, with ongoing discussions and alternative proposals being developed.</p",
  "EIP-2942": "<article><h1>EIP-2942: Proposal for NFT Metadata Standardization</h1>\n\n<p>EIP-2942 was a proposal aimed at standardizing metadata for Non-Fungible Tokens (NFTs) on the Ethereum blockchain. The proposal was intended to address the inconsistencies in metadata structures across different NFT projects, which often led to compatibility issues and difficulties in displaying NFT information across various platforms.</p>\n\n<p>The proposal was authored by James Morgan and introduced in September 2020. It suggested a standardized JSON schema for NFT metadata, including fields for name, description, image, and additional attributes. This standardization would have allowed for better interoperability between NFT marketplaces, wallets, and other applications dealing with NFTs.</p>\n\n<p>As of now, EIP-2942 has been moved to the Ethereum ERCs repository, indicating that it is no longer being actively considered as an Ethereum Improvement Proposal. The current status suggests that while the idea of standardizing NFT metadata remains relevant, this specific proposal may have been superseded by other initiatives or ongoing discussions within the Ethereum community regarding NFT standards.</p>\n</article>",
  "EIP-2970": "<article><h1>EIP-2970: IS_STATIC Opcode</h1>\n<p>EIP-2970, proposed by Vitalik Buterin in September 2020, aimed to introduce an IS_STATIC opcode to Ethereum's virtual machine. This opcode would allow smart contracts to determine if they were executing in a static context (e.g., within a STATICCALL) or not. The primary motivation was to extend account abstraction (EIP-2938) capabilities, enabling accounts to permit static calls from external sources while blocking state-changing calls.</p>\n<p>The proposal was relatively straightforward, suggesting the addition of a new opcode (0x4A) that would push 1 to the stack if the current context was static, and 0 otherwise. This would provide a more efficient and reliable method for contracts to check their execution context compared to existing workarounds, which were considered fragile and gas-intensive.</p>\n<p>Despite its potential utility, EIP-2970 has not gained significant traction in the Ethereum community. As of 2023, its status remains \"Stagnant,\" indicating a lack of progress or active discussion. While the concept of distinguishing between static and non-static contexts remains relevant, especially for advanced smart contract patterns, the Ethereum ecosystem has evolved in other directions, focusing on different scaling and functionality improvements.</p>\n</",
  "EIP-2972": "<article><h1>EIP-2972: Wrapped Legacy Transactions</h1>\n\n<p>EIP-2972, proposed by Micah Zoltu in September 2020, aimed to introduce two new transaction types for wrapping legacy Ethereum transactions. The proposal's main purpose was to facilitate a smooth transition away from legacy transactions while maintaining backwards compatibility with existing signatures.</p>\n\n<p>The proposal defined two new EIP-2718 transaction types: one for wrapping legacy transactions without a chain ID, and another for wrapping those with a chain ID. This approach would allow clients to automatically upgrade legacy transactions to the new format, ensuring continued support for older signed transactions while moving towards a more flexible transaction system.</p>\n\n<p>However, EIP-2972 was ultimately withdrawn. The Ethereum community has since moved forward with other transaction format improvements, such as EIP-1559, which introduced a new transaction type with fee market changes. The goals of EIP-2972 have been partially addressed through other proposals and implementations in the evolving Ethereum ecosystem.</p>\n</article>",
  "EIP-2976": "<article><h1>EIP-2976: Typed Transactions over Gossip</h1>\n\n<p>EIP-2976, titled \"Typed Transactions over Gossip,\" was proposed by Micah Zoltu to enable the transmission of typed transactions over the Ethereum peer-to-peer network (devp2p). This proposal builds upon EIP-2718, which introduced the concept of typed transactions.</p>\n\n<p>The main purpose of EIP-2976 is to allow new transaction types defined by EIP-2718 to be gossiped across the Ethereum network. This is crucial for enabling the inclusion of these new transaction types in blocks. The proposal specifies that typed transactions should be sent over devp2p as \"TransactionType || TransactionPayload\", where the payload format is defined by the specific transaction type.</p>\n\n<p>EIP-2976 reached \"Final\" status, indicating its acceptance and implementation in the Ethereum protocol. It provides a flexible framework for introducing new transaction types without requiring changes to the devp2p version, enhancing the extensibility of the Ethereum network. This proposal is significant as it enables the practical use of typed transactions, allowing for future innovations in transaction formats and capabilities within the Ethereum ecosystem.</p>\n</article>",
  "EIP-2980": "<article><h1>EIP-2980: Swiss Compliant Asset Token</h1>\n\n<p>EIP-2980, also known as the Swiss Compliant Asset Token standard, was proposed to create a framework for tokenized securities that comply with Swiss regulations. The proposal aimed to establish a set of rules and interfaces for tokens representing financial instruments, ensuring they meet the legal requirements of the Swiss financial market.</p>\n\n<p>The proposal was initiated by the Swiss blockchain company DAURA AG, in collaboration with several Swiss banks and financial institutions. It was designed to address the growing need for standardized, compliant tokenized securities in the Swiss market. While the proposal gained some traction in the Swiss financial sector, its adoption and development within the broader Ethereum community remained limited.</p>\n\n<p>As of now, EIP-2980 has been moved from the main Ethereum Improvement Proposals repository to the separate ERCs (Ethereum Request for Comments) repository. This move suggests that while the proposal may still be relevant for specific use cases, it has not gained widespread adoption or implementation in the Ethereum ecosystem. For current developments in tokenized securities, other standards or jurisdiction-specific proposals may be more applicable.</p>\n</article>",
  "EIP-2981": "<article><h1>EIP-2981: NFT Royalty Standard</h1>\n\n<p>EIP-2981, proposed by Zach Burks, James Morgan, and Blaine Malone in September 2020, introduced a standardized way to handle royalties for NFTs (Non-Fungible Tokens) on the Ethereum blockchain. The proposal aimed to create a consistent method for marketplaces and royalty payment systems to query NFT contracts for royalty payment information, addressing the lack of a uniform royalty standard in the NFT ecosystem.</p>\n\n<p>The proposal gained significant traction in the NFT community, as it provided a solution to ensure creators could receive ongoing royalties from secondary sales of their digital assets. It was widely adopted by various NFT platforms and marketplaces, becoming a de facto standard for royalty implementations. The EIP's simplicity and flexibility allowed for easy integration with existing NFT standards like ERC-721 and ERC-1155.</p>\n\n<p>As of now, EIP-2981 has been moved to the Ethereum ERCs repository, indicating its transition from a proposal to an accepted standard. Its widespread adoption and continued relevance in the NFT space demonstrate its importance in the ecosystem. While other royalty-related proposals have emerged, EIP-2981 remains a fundamental standard for NFT royalties, providing a solid foundation for fair compensation of",
  "EIP-2982": "<article><h1>EIP-2982: Serenity Phase 0</h1>\n\n<p>EIP-2982, authored by Danny Ryan and Vitalik Buterin, outlines the initial phase of Ethereum's transition to a proof-of-stake (PoS) consensus mechanism. This proposal, finalized in September 2020, marks a significant milestone in Ethereum's evolution towards a more scalable and energy-efficient blockchain.</p>\n\n<p>The core of Phase 0 is the introduction of the Beacon Chain, which runs parallel to the existing Ethereum mainnet without affecting its operations. This new chain implements Casper the Friendly Finality Gadget (FFG) for PoS consensus and Latest Message Driven Greedy Heaviest Observed Sub-Tree (LMD-GHOST) as the fork-choice rule. These mechanisms lay the groundwork for future phases that will integrate shard chains and eventually merge the current Ethereum mainnet into the new PoS system.</p>\n\n<p>As of 2023, the Beacon Chain has been successfully launched and is operating alongside the Ethereum mainnet. The next phases of the Ethereum 2.0 roadmap, including the introduction of shard chains and the full transition to PoS, are still in development. EIP-2982 remains a crucial reference point for understanding the foundational architecture of",
  "EIP-2997": "<article><h1>EIP-2997: IMPERSONATECALL Opcode</h1>\n\n<p>EIP-2997, proposed by Sergio Demian Lerner in September 2020, introduced the IMPERSONATECALL opcode (0xf6) to enable native multi-user wallets and improve efficiency in certain blockchain operations. This opcode would allow a contract to impersonate another address when making a call, derived from the caller's address and a salt value.</p>\n\n<p>The primary motivation behind this proposal was to facilitate meta-transactions and enable more efficient batching of transfer operations, similar to rollups but within the existing address space. It aimed to reduce costs associated with deploying individual smart wallets for users, particularly in scenarios where a sponsor company wants to provide non-custodial wallets to multiple users without incurring upfront deployment costs.</p>\n\n<p>As of now, EIP-2997 is in a \"Stagnant\" status, indicating that it has not progressed significantly since its initial proposal. While the concept addressed important scalability and usability concerns, it appears that the Ethereum community has not reached a consensus on its implementation. Other proposals and layer-2 solutions have since emerged to address similar issues, potentially superseding the need for this specific opcode.</p>\n</article>",
  "EIP-3": "<article><h1>EIP-3: Addition of CALLDEPTH opcode</h1>\n\n<p>EIP-3, proposed by Martin Holst Swende in November 2015, aimed to add a new <code>CALLDEPTH</code> opcode to Ethereum. This opcode would return the remaining available call stack depth, helping developers mitigate potential \"call stack attacks\" where an attacker could manipulate the call stack to cause contract failures.</p>\n\n<p>The proposal was motivated by the 256-call limit in Ethereum's call stack, which could be exploited to make contracts fail unexpectedly. By exposing the current call depth, contracts could check if they had sufficient depth remaining before making further calls, potentially avoiding vulnerabilities.</p>\n\n<p>However, EIP-3 was ultimately withdrawn and not implemented. The Ethereum community instead addressed call stack issues through other means, such as the introduction of EIP-150 (Gas cost changes for IO-heavy operations) and general best practices in contract development. Today, while call stack attacks are still theoretically possible, they are less of a concern due to these mitigations and improved contract design patterns.</p>\n</article>",
  "EIP-3000": "<article><h1>EIP-3000: Optimistic Enactment</h1>\n\n<p>EIP-3000, also known as \"Optimistic Enactment,\" was proposed as an Ethereum Request for Comment (ERC) to introduce a standardized framework for decentralized autonomous organizations (DAOs) to implement governance mechanisms. The proposal was initially drafted by Jorge Izquierdo and Luis Cuende, co-founders of Aragon, a platform for creating and managing DAOs.</p>\n\n<p>The core idea behind EIP-3000 was to create a system where proposals could be automatically enacted after a specified time period unless challenged. This \"optimistic\" approach aimed to streamline decision-making processes in DAOs while still maintaining security through a challenge mechanism. The proposal included specifications for key components such as an Agreement, a Dispute Manager, and a Voting App, which together would form a comprehensive governance framework.</p>\n\n<p>However, EIP-3000 has since been moved to the Ethereum ERCs repository, indicating a shift in its categorization and potentially its development path. The current status suggests that while the ideas presented in EIP-3000 remain relevant, they may have evolved or been incorporated into other proposals. For organizations looking to implement DAO governance mechanisms today, it would be advisable to review more recent proposals and standards in the field of decentralized governance.</p></article",
  "EIP-3005": "<article><h1>EIP-3005: Interaction Standard for Authenticated NFTs</h1>\n<p>EIP-3005 was proposed as an Ethereum Request for Comments (ERC) to establish a standard for authenticated non-fungible tokens (NFTs). The proposal aimed to create a unified interface for NFTs that require off-chain authentication before certain operations can be performed. This standard was designed to support use cases where additional verification is needed, such as ticketing systems or exclusive membership tokens.</p>\n<p>The proposal was authored by Witek Radomski, Andrew Coathup, Vytautas Kašėta, and James Morgan in late 2020. It was moved from the main Ethereum Improvement Proposals (EIPs) repository to the ERCs repository, indicating a shift in its categorization and management. The current status of the proposal is \"Moved,\" which suggests that it is no longer being actively considered in its original form within the main EIPs process.</p>\n<p>While EIP-3005 introduced an interesting concept for authenticated NFTs, its relocation and current status indicate that it may not have gained sufficient traction for implementation in its proposed form. Developers interested in authenticated NFT standards may need to explore more recent proposals or consider alternative approaches that have emerged since EIP-3005 was initially proposed.</p>\n</article>",
  "EIP-3009": "<article><h1>EIP-3009: Transfer With Authorization</h1>\n\n<p>EIP-3009, titled \"Transfer With Authorization,\" was proposed to introduce a new standard for off-chain approvals of token transfers. The proposal aimed to enhance the efficiency and security of token transfers by allowing users to sign transfer authorizations off-chain, which could later be submitted on-chain by any party. This method would reduce the number of on-chain transactions and associated gas costs, while maintaining a high level of security.</p>\n\n<p>The proposal was authored by James Prestwich, Reilly Dwight, and Zac Williamson, and was first introduced in 2020. It gained traction among developers working on Layer 2 scaling solutions and decentralized exchanges, as it offered a way to batch multiple transfers and reduce blockchain congestion. The concept built upon previous work in meta-transactions and gasless transfers, addressing some of the limitations of earlier proposals.</p>\n\n<p>As of now, EIP-3009 has been moved from its original location to the Ethereum ERCs repository, indicating ongoing development and discussion within the community. While the proposal showed promise, its current status suggests that it may have been superseded by other standards or is undergoing further refinement. Developers interested in off-chain authorizations and efficient token transfers should review the latest discussions and related proposals in the Ethereum improvement process.</p></article>",
  "EIP-3014": "<article><h1>EIP-3014: eth_symbol JSON-RPC method</h1>\n\n<p>EIP-3014, proposed by Peter Grassberger in September 2020, aimed to introduce a new JSON-RPC method called <code>eth_symbol</code> to return the symbol of the native coin for a given Ethereum network. The proposal was motivated by the need for wallets supporting multiple networks to easily retrieve basic information about each blockchain they connect to, without requiring manual user input.</p>\n\n<p>The proposed method would return \"ETH\" for the Ethereum mainnet and appropriate symbols for other networks. This would simplify the process for multi-chain wallets to display correct native token information across different networks. The proposal drew similarities to EIP-695, which introduced the <code>eth_chainId</code> method.</p>\n\n<p>Currently, EIP-3014 is in a \"Stagnant\" status, indicating that it has not seen significant activity or updates since its initial proposal. While the idea addresses a real need in multi-chain environments, it appears that the Ethereum community has not reached a consensus on implementing this method as a standard. Developers and wallet providers continue to rely on alternative methods, such as hardcoded lists or network-specific configurations, to handle native token symbols across different Ethereum-compatible networks.</p>\n</article>",
  "EIP-3026": "<article><h1>EIP-3026: BW6-761 Curve Operations</h1>\n\n<p>EIP-3026 proposes adding precompiled contracts for operations on the BW6-761 elliptic curve, which is optimized for one-layer proof composition in zkSNARKs. The proposal was authored by researchers from EY, Inria, and the Ethereum community in October 2020. It aims to improve the efficiency of verifying composed zero-knowledge proofs on Ethereum.</p>\n\n<p>The EIP specifies seven new precompiles for various curve operations including point addition, multiplication, and multiexponentiation on both G1 and G2 groups, as well as a pairing operation. These low-level cryptographic primitives would allow more efficient implementation of zkSNARK verification circuits using the BW6-761 curve.</p>\n\n<p>As of 2023, the status of EIP-3026 is \"Stagnant\", indicating it has not seen recent activity or updates. While the proposed functionality could be useful for certain zkSNARK applications, it has not gained enough traction for implementation. Other approaches to scaling and privacy on Ethereum, like rollups and alternative proof systems, may have reduced interest in adding these specific curve operations at the protocol level.</p></article>",
  "EIP-3030": "<article><h1>EIP-3030: BLS Remote Signer HTTP API</h1>\n\n<p>EIP-3030, proposed by Herman Junge in September 2020, aimed to define a standard HTTP API for BLS remote signers used by Ethereum 2.0 validator clients. The proposal was motivated by the need for more secure private key storage and scalable validator client environments in Eth2's proof-of-stake consensus mechanism.</p>\n\n<p>The EIP specified an API that would allow validator clients to offload the sensitive task of signing block proposals and attestations to a remote service, rather than storing BLS private keys locally. This approach would enhance security by isolating signing operations and enable validators to run in more flexible environments. The proposal included detailed API endpoints and message formats for remote signing requests.</p>\n\n<p>While EIP-3030 addressed an important need in Eth2 infrastructure, its status is currently \"Stagnant\". This suggests that development and discussions around the proposal have slowed or stopped. It's unclear if this specific API standard has been widely adopted, though the concept of remote signing for Ethereum validators remains relevant. Other approaches or standards may have emerged to address similar concerns in Eth2 client implementations.</p>\n</article>",
  "EIP-3041": "<article><h1>EIP-3041: Adding baseFee to eth_getBlockByHash</h1>\n\n<p>EIP-3041, proposed by Abdelhamid Bakhta in October 2020, aims to enhance the <code>eth_getBlockByHash</code> RPC endpoint by including the <code>baseFee</code> field in its response. This improvement is directly related to EIP-1559, which introduced a base fee per gas in the Ethereum protocol.</p>\n\n<p>The proposal specifies that the <code>baseFee</code> field should be included for all blocks after the EIP-1559 fork, providing users with crucial information for making accurate gas price predictions. This addition to the block information allows developers and users to better understand and interact with Ethereum's new fee structure.</p>\n\n<p>As of now, EIP-3041 is in a \"Stagnant\" status, meaning it has not seen significant activity or updates recently. While the proposal aligns well with the changes introduced by EIP-1559, its implementation status across Ethereum clients is unclear. Developers working with Ethereum should be aware of this proposal but should also check current client implementations to ensure compatibility.</p></article>",
  "EIP-3044": "<article><h1>EIP-3044: Adding baseFee to eth_getBlockByNumber</h1>\n\n<p>EIP-3044, proposed by Abdelhamid Bakhta in October 2020, aimed to enhance the <code>eth_getBlockByNumber</code> RPC endpoint by adding a <code>baseFee</code> field to its response. This proposal was designed to complement EIP-1559, which introduced a base fee per gas in the Ethereum protocol.</p>\n\n<p>The primary motivation behind EIP-3044 was to provide users with easy access to the base fee value for any given block after the EIP-1559 implementation. This information is crucial for making more accurate gas price predictions and understanding network congestion. The proposal specified that the <code>baseFee</code> field should only be included for blocks on or after the EIP-1559 fork, ensuring backward compatibility.</p>\n\n<p>Currently, EIP-3044 is in a \"Stagnant\" status, meaning it has not seen significant activity or updates recently. Despite this, the concept it proposed has been largely adopted in practice. Many Ethereum clients and block explorers now include the base fee information in their block data, effectively implementing the spirit of this proposal even without its formal acceptance.</p>\n</article>",
  "EIP-3045": "<article><h1>EIP-3045: Adding baseFee to eth_getUncleByBlockHashAndIndex</h1>\n\n<p>EIP-3045, proposed by Abdelhamid Bakhta in October 2020, aimed to add the baseFee field to the eth_getUncleByBlockHashAndIndex RPC endpoint response. This improvement was designed to work in conjunction with EIP-1559, which introduced a base fee per gas in the Ethereum protocol.</p>\n\n<p>The proposal's main purpose was to make the base fee value accessible for uncle blocks, enhancing gas price predictions and providing more comprehensive block information. It specified that the baseFee field should be included for all blocks after the EIP-1559 fork, while blocks before the fork should not include this field.</p>\n\n<p>As of now, EIP-3045 is in a \"Stagnant\" status, indicating that it hasn't seen significant activity or updates recently. While the proposal addressed an important aspect of Ethereum's evolving fee structure, its implementation may have been superseded or incorporated into broader changes related to EIP-1559 and subsequent upgrades to Ethereum's RPC interfaces.</p></article>",
  "EIP-3046": "<article><h1>EIP-3046: Adding baseFee to eth_getUncleByBlockNumberAndIndex</h1>\n\n<p>EIP-3046, proposed by Abdelhamid Bakhta in October 2020, aims to enhance the Ethereum JSON-RPC API by adding the <code>baseFee</code> field to the response of the <code>eth_getUncleByBlockNumberAndIndex</code> endpoint. This proposal is closely related to EIP-1559, which introduced the concept of a base fee for gas pricing in Ethereum.</p>\n\n<p>The primary motivation behind EIP-3046 is to provide users with access to the base fee value for uncle blocks, which is crucial for more accurate gas price predictions. This information becomes particularly important after the implementation of EIP-1559, as the base fee is maintained under consensus as a new field in the block header structure.</p>\n\n<p>Currently, the proposal's status is listed as \"Stagnant,\" indicating that it has not seen recent activity or progress towards implementation. While the idea aligns well with the changes introduced by EIP-1559, it appears that the Ethereum community may not have prioritized this specific enhancement to the RPC API. As of now, developers and users rely on other methods to obtain base fee information for uncle blocks.</p>\n</article>",
  "EIP-3068": "<article><h1>EIP-3068: Precompile for BN256 HashToCurve Algorithms</h1>\n\n<p>EIP-3068 was proposed by Dr. Christopher Gorman in October 2020 to add precompiled contracts for hash-to-curve algorithms on the BN256 elliptic curve. The goal was to enable cheaper BLS signature verification on Ethereum by providing an efficient way to map arbitrary messages to curve points.</p>\n\n<p>This proposal was motivated by the high gas costs of implementing hash-to-curve in Solidity, which made BLS signatures impractical. It aimed to build on previous cryptographic precompiles like EIP-198 and EIP-1108 that had successfully reduced costs for operations like elliptic curve pairings. By adding dedicated hash-to-curve precompiles for both the G1 and G2 groups of BN256, it would allow BLS signature verification at a cost comparable to a single pairing check.</p>\n\n<p>However, EIP-3068 is currently in a \"Stagnant\" status, indicating it has not seen recent progress or discussion. While the proposed optimization could still be valuable, other approaches to BLS signatures on Ethereum have since been explored. Any revival of this EIP would likely need to consider how it fits into the broader cryptographic roadmap for Ethereum",
  "EIP-3074": "<article><h1>EIP-3074: AUTH and AUTHCALL opcodes</h1>\n\n<p>EIP-3074, proposed in October 2020, introduces two new EVM instructions: AUTH and AUTHCALL. This proposal aims to enhance the functionality of Externally Owned Accounts (EOAs) by allowing them to delegate control to smart contracts. The EIP was authored by Sam Wilson, Ansgar Dietrichs, Matt Garnett, and Micah Zoltu, addressing a long-standing desire for increased EOA capabilities without significantly altering the Ethereum protocol.</p>\n\n<p>The AUTH opcode sets an \"authorized\" context variable based on an ECDSA signature, while AUTHCALL allows for sending calls as the authorized account. This mechanism enables EOAs to leverage smart contract functionality without deploying a contract themselves, potentially opening up new possibilities for transaction schemes, gas sponsoring, and account abstraction. The proposal generated significant discussion in the Ethereum community due to its potential impact on user experience and security.</p>\n\n<p>As of the latest available information, EIP-3074 remains in the \"Review\" status. While it offers promising benefits, concerns about potential security implications and the need for thorough auditing have slowed its progress. The proposal continues to be refined and discussed, with ongoing debates about its implementation and potential alternatives. Given the evolving nature of Ethereum's",
  "EIP-3076": "<article><h1>EIP-3076: Slashing Protection Interchange Format</h1>\n\n<p>EIP-3076, proposed by Michael Sproul, Sacha Saint-Leger, and Danny Ryan in October 2020, introduces a standardized JSON format for transferring validator signing history between Ethereum proof-of-stake clients. This proposal addresses a critical security concern for validators switching between clients, reducing the risk of inadvertent slashing due to conflicting messages.</p>\n\n<p>The motivation behind this EIP stems from the need to protect validators when migrating between different client implementations. Without a common format for sharing signing history, a validator moving from client A to client B could potentially sign conflicting messages, resulting in slashing penalties. EIP-3076 provides a solution by defining a standard interchange format that allows clients to share a validator's signing history, preventing accidental double-signing.</p>\n\n<p>As of November 2021, EIP-3076 was in \"Last Call\" status, indicating it was near completion and seeking final community input before potential acceptance. This proposal has been widely recognized as an important safety measure for Ethereum's proof-of-stake ecosystem, facilitating smoother transitions between clients and enhancing overall network security. Its implementation across major Ethereum clients has been encouraged to promote interoperability and reduce risks for validators.</p></article>",
  "EIP-3085": "<article><h1>EIP-3085: wallet_addEthereumChain RPC Method</h1>\n\n<p>EIP-3085, proposed by Erik Marks, Pedro Gomes, and Pandapip1 in November 2020, introduces a standardized RPC method for adding EVM-compatible chains to Ethereum wallets. This proposal aimed to simplify the process of connecting to multiple Ethereum-compatible networks, which had become increasingly common with the rise of Layer 2 solutions and alternative blockchains.</p>\n\n<p>The proposal defines the <code>wallet_addEthereumChain</code> method, which allows dApps to suggest new chains to be added to a user's wallet. This method includes parameters such as the chain ID, block explorer URLs, chain name, and native currency details. The standardization of this process was intended to improve user experience and reduce the friction of interacting with multiple networks.</p>\n\n<p>As of now, EIP-3085 is in a \"Stagnant\" status, meaning it has not seen recent activity or updates. However, the concept it introduced has been widely adopted by major wallets like MetaMask, making it easier for users to interact with various EVM-compatible networks. While the proposal itself may not move forward in its current form, its core idea has become an essential part of the multi-chain Ethereum ecosystem.</",
  "EIP-3091": "<article><h1>EIP-3091: Block Explorer API Routes</h1>\n\n<p>EIP-3091 was proposed in November 2020 by Pedro Gomes and ligi to standardize API routes for blockchain explorers. The goal was to improve interoperability between wallets, dapps, and block explorers by creating consistent URL patterns for linking to transactions, blocks, accounts, and tokens.</p>\n\n<p>The proposal specified simple, standardized path structures like \"/block/[hash]\" for blocks and \"/tx/[hash]\" for transactions. This aimed to simplify integration as the number of chains and layer 2 solutions grew. The paths were chosen to be compatible with existing block explorer implementations where possible.</p>\n\n<p>As of 2023, EIP-3091 is listed as \"Stagnant\", indicating a lack of recent activity or updates. While the standardization goal remains relevant, alternative approaches or competing standards may have emerged in the interim. Block explorers can still choose to implement these routes, but there is no widespread adoption mandate. Overall, EIP-3091 represents an early attempt at standardizing an important but often overlooked aspect of blockchain infrastructure.</p></article>",
  "EIP-3102": "<article><h1>EIP-3102: Binary Trie Structure</h1>\n\n<p>EIP-3102, proposed by Guillaume Ballet and Vitalik Buterin in September 2020, aimed to significantly restructure Ethereum's state storage. The proposal suggested changing from a hexary trie to a binary trie, merging account and storage tries, and replacing Keccak256 with Blake2b for hashing. This change was motivated by the need for smaller proofs in stateless Ethereum and the realization that disk access, rather than hashing, was the primary bottleneck in Ethereum's performance.</p>\n\n<p>The proposal gained attention in the Ethereum community, with discussions taking place on Ethereum Research. It was seen as a potential solution to improve Ethereum's scalability and efficiency. However, despite its potential benefits, EIP-3102 has not been implemented. As of now, its status remains \"Stagnant,\" indicating that it hasn't progressed through the EIP process.</p>\n\n<p>While EIP-3102 hasn't been adopted, its ideas have influenced ongoing discussions about Ethereum's future architecture. The concept of binary tries for more efficient proofs continues to be relevant in the context of Ethereum's move towards a more stateless model. However, other proposals and solutions have since emerged, addressing similar concerns in different ways.</p>\n</article>",
  "EIP-3135": "<article><h1>EIP-3135: Rarible Royalties</h1>\n\n<p>EIP-3135, also known as the Rarible Royalties proposal, was introduced to standardize royalty payments for NFT creators on the Ethereum blockchain. The proposal was initially created by the team at Rarible, a popular NFT marketplace, to address the lack of a universal royalty standard in the NFT ecosystem.</p>\n\n<p>The proposal aimed to establish a consistent method for implementing royalties across different NFT marketplaces and platforms. It proposed a way for creators to set and receive royalties on secondary sales of their NFTs, ensuring they continue to benefit from the value appreciation of their work. However, EIP-3135 was eventually superseded by EIP-2981, which became the widely adopted standard for NFT royalties.</p>\n\n<p>Currently, EIP-3135 has been moved to the Ethereum ERCs repository, indicating that it is no longer an active proposal in the main Ethereum Improvement Proposals track. The NFT community has largely adopted EIP-2981 as the de facto standard for royalty implementations, making EIP-3135 primarily of historical interest in the evolution of NFT standards on Ethereum.</p></article>",
  "EIP-3143": "<article><h1>EIP-3143: Increase Block Rewards to 5 ETH</h1>\n\n<p>EIP-3143, proposed by Ben Tinner in December 2020, aimed to increase the Ethereum block reward from 2 ETH to 5 ETH. The proposal was motivated by concerns about network security during periods of low transaction fees, when miners might be incentivized to direct their resources elsewhere. By increasing the base block reward, the proposal sought to reduce the volatility of miner income and maintain consistent network security.</p>\n\n<p>The proposal generated significant discussion within the Ethereum community, with debates centering on the economic implications of increased inflation and the potential impact on Ethereum's transition to proof-of-stake. Some argued that the increased rewards would help smaller miners accumulate ETH for staking, while others expressed concerns about the long-term effects on Ethereum's monetary policy.</p>\n\n<p>Despite the initial attention, EIP-3143 did not gain widespread support and is currently in a \"Stagnant\" status. The Ethereum community ultimately chose to focus on other solutions to address network security and miner incentives, including the implementation of EIP-1559 and accelerating the transition to Ethereum 2.0. As such, this proposal is unlikely to be implemented in its current form.</p></article>",
  "EIP-3155": "<article><h1>EIP-3155: EVM Trace Specification</h1>\n\n<p>EIP-3155, proposed by Martin Holst Swende and Marius van der Wijden in December 2020, aimed to standardize the JSON format for EVM traces during state test execution. This proposal addressed the need for a consistent tracing format across Ethereum clients to improve smart contract debugging and enable more effective differential fuzzing.</p>\n\n<p>Prior to EIP-3155, major Ethereum clients like go-ethereum, parity, nethermind, and Besu had implemented a common tracing format, but subtle differences in implementation made it challenging to develop universal tooling. The proposal sought to strictly define corner cases, allow for future updates, and provide sample outputs to ensure consistency across clients.</p>\n\n<p>Currently, EIP-3155 is in a \"Stagnant\" status, indicating that it has not seen recent activity or updates. While the proposal highlighted important issues in EVM tracing standardization, it appears that further development or consensus-building may be needed before widespread implementation. Despite its current status, the ideas presented in EIP-3155 remain relevant for improving Ethereum's development and debugging ecosystem.</p></article>",
  "EIP-3156": "<article><h1>EIP-3156: Flash Loans</h1>\n\n<p>EIP-3156, proposed by Alberto Cuesta Cañada, Bertrand Masius, and Aave's Emilio Frangella in November 2020, introduced a standardized interface for flash loans in Ethereum. Flash loans allow users to borrow assets without collateral, provided they repay the loan within the same transaction. This proposal aimed to create a unified approach for implementing flash loans across different protocols, enhancing interoperability and reducing complexity for developers.</p>\n\n<p>The proposal gained traction in the DeFi community due to its potential to streamline flash loan implementations. It defined two interfaces: one for lenders and another for borrowers, along with specific functions and events to facilitate the loan process. Despite its initial popularity, EIP-3156 faced challenges in widespread adoption, as some existing protocols had already implemented their own flash loan mechanisms.</p>\n\n<p>As of now, EIP-3156 has been moved to the Ethereum ERCs repository, indicating a shift in its status. While the proposal offered a valuable standardization attempt, the rapid evolution of DeFi has led to diverse implementations of flash loans across platforms. Today, developers might consider more recent or protocol-specific flash loan implementations, although EIP-3156 remains a significant reference point in the history of DeFi standardization efforts",
  "EIP-3198": "<article><h1>EIP-3198: BASEFEE Opcode</h1>\n\n<p>EIP-3198, proposed by Abdelhamid Bakhta and Vitalik Buterin in January 2021, introduces the BASEFEE opcode to Ethereum's EVM. This opcode allows smart contracts to access the current block's base fee, a key component introduced in EIP-1559. The proposal aims to enhance smart contract capabilities in areas like dynamic transaction fee calculations and improved security for layer-2 solutions.</p>\n\n<p>The BASEFEE opcode (0x48) returns the current block's base fee with a low gas cost of 2. This enables contracts to set more reliable transaction bounties, implement precise gas futures, and enhance security in state channels and fraud-proof systems. The opcode's simplicity and low gas cost make it an efficient solution for accessing this important network parameter.</p>\n\n<p>EIP-3198 reached Final status, indicating its acceptance and implementation in Ethereum. It was part of the London hard fork in August 2021, alongside EIP-1559 which it depends on. The BASEFEE opcode has since become a valuable tool for developers building more sophisticated and market-responsive smart contracts on Ethereum.</p>\n</article>",
  "EIP-3220": "<article><h1>EIP-3220: Crosschain Identifier Specification</h1>\n\n<p>EIP-3220, proposed by Weijia Zhang and Peter Robinson in October 2020, aimed to create a standardized, self-verifying unique identifier for blockchains that could handle forks. The proposal was motivated by the growing ecosystem of diverse public and private blockchains, which presented challenges for cross-chain interoperability.</p>\n\n<p>The EIP suggested a 32-byte hex string as the identifier, combining extracted blockchain hash data with manually defined characteristics. It also proposed a registration and lookup service for retrieving blockchain metadata from the crosschain-id. This approach was intended to facilitate better interoperability between heterogeneous blockchain networks.</p>\n\n<p>As of now, EIP-3220 is in a \"Stagnant\" status, indicating that it has not seen recent activity or updates. While the proposal addressed an important issue in the blockchain space, it appears that development and discussion have not progressed significantly since its initial proposal. Alternative solutions or more recent proposals may have emerged to address cross-chain identification and interoperability challenges.</p>\n</article>",
  "EIP-3224": "<article><h1>EIP-3224: Consensus-Layer EVM</h1>\n\n<p>EIP-3224, known as \"Consensus-Layer EVM,\" was an ambitious proposal aimed at introducing the Ethereum Virtual Machine (EVM) to the consensus layer of Ethereum. This proposal was initially drafted by Danny Ryan, a prominent Ethereum researcher, in early 2021. The primary goal was to enable smart contract functionality within the beacon chain, potentially revolutionizing the capabilities of Ethereum's consensus mechanism.</p>\n\n<p>The proposal gained significant attention in the Ethereum community due to its potential to enhance the flexibility and programmability of the consensus layer. However, as Ethereum's roadmap evolved, particularly with the focus on the merge and subsequent scalability improvements, EIP-3224 was eventually moved to the Ethereum Request for Comments (ERC) repository. This relocation suggests that while the idea remains valuable, it's no longer considered an immediate priority for core protocol changes.</p>\n\n<p>Currently, EIP-3224 is in a \"Moved\" status, indicating that it's no longer actively pursued as an Ethereum Improvement Proposal. Instead, it resides in the ERC repository, where it can be further discussed and potentially refined for future consideration. While the concept of a consensus-layer EVM remains intriguing, the Ethereum community has prioritized other scalability and efficiency improvements in the short to",
  "EIP-3234": "<article><h1>EIP-3234: Ethereum Name Service (ENS) Wildcards</h1>\n\n<p>EIP-3234, proposed by Nick Johnson, aimed to extend the Ethereum Name Service (ENS) by introducing support for wildcard subdomains. This improvement would allow domain owners to set records for all subdomains of their domain with a single transaction, significantly enhancing the flexibility and usability of ENS.</p>\n\n<p>The proposal was motivated by the need for more efficient management of subdomains, particularly for large organizations or projects that might require numerous subdomains. By implementing wildcards, ENS could offer functionality similar to DNS wildcard records, enabling use cases such as catch-all email addresses or dynamically generated subdomains for decentralized applications.</p>\n\n<p>As of now, EIP-3234 has been moved to the Ethereum ERCs repository, indicating a shift in its categorization from a general Ethereum Improvement Proposal to a more specific Ethereum Request for Comment. This change suggests that the proposal is still under consideration and discussion within the Ethereum community, but its implementation status remains uncertain. For the most up-to-date information and discussions on this proposal, interested parties should refer to the ERC repository.</p></article>",
  "EIP-3238": "<article><h1>EIP-3238: Difficulty Bomb Delay to Q2/2022</h1>\n\n<p>EIP-3238, authored by Afri Schoedon, proposed delaying Ethereum's difficulty bomb until Q2/2022. The difficulty bomb is a mechanism designed to gradually increase mining difficulty, eventually making Ethereum mining unprofitable and encouraging the transition to Proof-of-Stake. This proposal aimed to give developers more time to complete the Eth1-to-Eth2 merge.</p>\n\n<p>The EIP suggested modifying the difficulty calculation by using a \"fake\" block number, effectively pushing back the difficulty bomb's activation by about 9.89 months. This would allow miners to continue producing blocks every 13-15 seconds on average for an extended period, maintaining network stability during the transition phase.</p>\n\n<p>While EIP-3238 was an important proposal in Ethereum's history, it has since been superseded by subsequent difficulty bomb delays and the successful completion of The Merge in September 2022. The proposal's status is currently listed as \"Stagnant,\" indicating it is no longer actively considered for implementation.</p>\n</article>",
  "EIP-3267": "<article><h1>EIP-3267: Giving Ethereum Fees to Future Salaries</h1>\n\n<p>EIP-3267 was proposed by Victor Porton in February 2021 as a way to redirect a portion of Ethereum transaction fees and mining rewards to a \"Future Salaries\" contract. The goal was to provide funding for common good producers while also reducing the circulating ETH supply.</p>\n\n<p>The proposal aimed to solve two issues: 1) Incentivizing and supporting creators of public goods that benefit the Ethereum ecosystem and humanity at large, and 2) Decreasing circulating ETH supply by locking funds in the Future Salaries system. Porton argued this could paradoxically benefit miners/validators as well.</p>\n\n<p>Currently, EIP-3267 is in \"Stagnant\" status, indicating a lack of progress or interest since its initial proposal. While novel in its approach to funding public goods, it has not gained significant traction in the Ethereum community. Other proposals and initiatives focused on supporting public goods have emerged since, taking different approaches to the challenge of sustaining open source development and other common goods in the ecosystem.</p>\n</article>",
  "EIP-3298": "<article><h1>EIP-3298: Removal of Refunds</h1>\n\n<p>EIP-3298, proposed by Vitalik Buterin and Martin Swende in February 2021, aimed to remove gas refunds for SSTORE and SELFDESTRUCT operations in Ethereum. These refunds were initially introduced to encourage developers to clear unused storage and contracts, promoting \"good state hygiene\". However, the proposal argues that these refunds were not effectively serving their purpose and were causing unintended consequences.</p>\n\n<p>The main motivations behind this proposal were to address issues like the exploitation of gas refunds by projects like GasToken, which could exacerbate state size problems and inefficiently use blockchain gas. Additionally, gas refunds were causing increased block size variance, potentially leading to network instability. The proposal suggested that state growth issues would be better addressed through more comprehensive solutions like statelessness or state expiry.</p>\n\n<p>As of now, EIP-3298 has a status of \"Stagnant\", indicating that it has not progressed in the Ethereum improvement process. While the proposal raised important points about the drawbacks of gas refunds, the Ethereum community has not reached a consensus on implementing this change. The discussion around state management and gas mechanics in Ethereum continues, with other proposals and solutions being explored to address these complex issues.</p>\n</article>",
  "EIP-3300": "<article><h1>EIP-3300: Phase out refunds</h1>\n\n<p>EIP-3300 was proposed in February 2020 by William Morriss to gradually phase out gas refunds for SSTORE and SELFDESTRUCT operations in Ethereum. The motivation was to reduce block elasticity and clean up refunds from the state over time, rather than suddenly abolishing them.</p>\n\n<p>The proposal aimed to define a block number after which refunds would begin diminishing linearly. This gradual reduction was intended to be less disruptive to the gas market compared to an abrupt removal. The idea was that refund consumption would continue during congestion periods, naturally cleaning up refunds from the state as their value decreased.</p>\n\n<p>However, EIP-3300 has a status of \"Stagnant\", indicating it did not gain significant traction or progress towards implementation. More recent proposals like EIP-3529 (Reduction in refunds) have since addressed gas refunds in different ways. As such, EIP-3300 is not likely to be implemented in its original form, having been superseded by other approaches to managing gas refunds in Ethereum.</p></article>",
  "EIP-3322": "<article><h1>EIP-3322: Account Gas Storage Opcodes</h1>\n\n<p>EIP-3322, proposed by William Morriss in March 2020, aimed to introduce a mechanism for contract accounts to store gas that could be transferred to the refund counter. The proposal suggested three new opcodes: SELFGAS, USEGAS, and STOREGAS, which would allow contracts to manage a gas refund counter efficiently.</p>\n\n<p>The motivation behind this proposal was to improve upon the existing gas token system, which was being used to arbitrage gas prices and provide gas price stability. However, the gas token approach incentivized unnecessary state growth. EIP-3322 sought to create a superior gas storage mechanism that would require less storage and computation while still maintaining the benefits of gas price elasticity.</p>\n\n<p>Currently, EIP-3322 is in a \"Stagnant\" status, indicating that it has not seen significant activity or updates in some time. While the proposal offered an interesting approach to gas management, it has not been implemented in Ethereum's main protocol. The ongoing discussions around Ethereum's gas mechanisms and efficiency improvements have likely overshadowed this specific proposal, with other approaches being considered for optimizing gas usage and pricing in the Ethereum ecosystem.</p></article>",
  "EIP-3326": "<article><h1>EIP-3326: Wallet Switch Ethereum Chain RPC Method</h1>\n\n<p>EIP-3326, proposed by Erik Marks in March 2021, introduces the <code>wallet_switchEthereumChain</code> RPC method. This method allows decentralized applications (dapps) to request that a wallet switches its active Ethereum chain. The proposal aims to improve user experience by enabling seamless chain switching within dapps.</p>\n\n<p>The proposal specifies that dapps must provide a chain ID when calling the method, and wallets have the discretion to accept or reject the request. If successful, the method returns <code>null</code>; otherwise, it returns an error. This EIP builds upon EIP-155 (Simple replay attack protection) and EIP-695 (Create <code>eth_chainId</code> method for JSON-RPC), enhancing the interoperability between dapps and wallets.</p>\n\n<p>As of now, EIP-3326 is in a \"Stagnant\" status, indicating that development has slowed or stopped. While the proposal addresses a relevant issue in the Ethereum ecosystem, its implementation status across wallets and dapps remains unclear. Developers should consider the security implications outlined in the EIP when implementing this method, particularly regarding user consent and the potential for mal",
  "EIP-3332": "<article><h1>EIP-3332: MEDGASPRICE Opcode</h1>\n\n<p>EIP-3332, proposed by Justice Hudson in March 2021, aimed to introduce a new opcode called MEDGASPRICE (0x46) to Ethereum's core protocol. This opcode would return the median gas price of the parent block, providing smart contracts with access to recent gas price information. The primary motivation behind this proposal was to combat front-running attacks, particularly in the context of emerging Layer 2 scaling solutions like optimistic rollups.</p>\n\n<p>The proposal was designed to address issues related to fraud proof submissions in optimistic rollups, where front-runners could potentially exploit the system by copying transactions with higher gas prices to claim rewards without performing independent validation. By allowing contracts to enforce an upper bound on gas prices for specific transactions, EIP-3332 aimed to create a more fair and efficient mechanism for time-sensitive operations like fraud proofs and first-come-first-serve scenarios.</p>\n\n<p>Despite its potential benefits, EIP-3332 was ultimately withdrawn. The current status suggests that the Ethereum community may have found alternative solutions to address front-running concerns or that the proposal faced technical challenges in implementation. While not adopted, this EIP highlights the ongoing efforts within the Ethereum ecosystem to improve fairness and efficiency in transaction processing, especially as Layer 2 solutions continue to evolve",
  "EIP-3336": "<article><h1>EIP-3336: Paged Memory Allocation for the EVM</h1>\n\n<p>EIP-3336, proposed by Nick Johnson in March 2021, aimed to change the EVM's memory model to use pagination. The proposal was motivated by the limitations of the existing linear memory model, which forced compilers to generate programs that use memory compactly, leading to wasted gas and impractical memory models.</p>\n\n<p>The proposal suggested implementing a simple version of paged memory inside the EVM, similar to virtual memory in modern computers. This would allow for more flexible memory usage, minimizing reallocation and copying of data. The change would add minimal complexity to implementations while providing greater versatility for EVM programs.</p>\n\n<p>As of now, EIP-3336 is in a \"Stagnant\" status, indicating that it has not seen significant activity or updates recently. While the proposal offered potential benefits for EVM memory management, it appears that it has not gained enough traction or consensus for implementation. Developers and researchers may still be exploring alternative approaches to improve EVM memory efficiency.</p></article>",
  "EIP-3337": "<article><h1>EIP-3337: Frame Pointer Support for Memory Operations</h1>\n\n<p>EIP-3337, authored by Nick Johnson, proposes adding four new opcodes to the Ethereum Virtual Machine (EVM) to improve memory access efficiency. The proposal introduces MLOADFP, MSTOREFP, GETFP, and SETFP opcodes that allow for memory operations offset by a \"frame pointer\". This would enable compilers to more effectively use memory for local variables and other ephemeral data, rather than relying solely on the EVM's evaluation stack.</p>\n\n<p>The motivation behind this EIP was to bring the EVM's memory model closer to that of common VMs, where a stack-like region of memory is used for local variables and function data. While possible in the current EVM, this approach is hindered by the linear memory model and lack of relative memory access opcodes. EIP-3337 builds on EIP-3336, which proposed improvements to the EVM's overall memory model.</p>\n\n<p>As of now, EIP-3337 is in \"Stagnant\" status, indicating that development has slowed or stopped. While the proposal offered potential benefits for more efficient smart contract development, it has not gained enough traction for implementation. The Ethereum community continues to explore various approaches to improve the EVM's efficiency and capabilities.</p>",
  "EIP-3338": "<article><h1>EIP-3338: Limit account nonce to 2^52</h1>\n\n<p>EIP-3338 was a proposal to limit Ethereum account nonces to a maximum value of 2^52. It was authored by Micah Zoltu and Alex Beregszaszi in March 2021. The main motivations were to optimize state witnesses and potentially improve transaction formats.</p>\n\n<p>The proposal would have introduced two key restrictions: 1) Invalidating transactions with nonces exceeding 2^52, and 2) Causing CREATE instructions to abort if the account nonce reached 2^52. This would have allowed for more efficient nonce representations in clients and proofs.</p>\n\n<p>However, EIP-3338 was ultimately withdrawn in favor of EIP-2681, which proposed a higher limit of 2^64-1. The higher limit of EIP-2681 was likely seen as providing similar benefits while being less restrictive. As of 2023, neither proposal has been implemented, as arbitrary length nonces are still supported in Ethereum.</p>\n</article>",
  "EIP-3368": "<article><h1>EIP-3368: Block Reward Increase with Decay</h1>\n\n<p>EIP-3368, proposed by Michael D. Carter in March 2021, aimed to address concerns about network security during the transition from Proof of Work (PoW) to Proof of Stake (PoS) in Ethereum. The proposal suggested increasing the block reward from 2 ETH to 3 ETH, followed by a gradual decay to 1 ETH over two years. This was designed to maintain miner profitability and prevent a sudden drop in hash rate that could leave the network vulnerable to attacks.</p>\n\n<p>The proposal was a response to the potential risks associated with EIP-1559 and the upcoming transition to Ethereum 2.0. It aimed to provide a smoother transition for miners and maintain network security. However, EIP-3368 faced significant controversy within the Ethereum community, with concerns about its impact on Ethereum's monetary policy and the potential delay it might cause to the PoS transition.</p>\n\n<p>As of now, EIP-3368 has a \"Stagnant\" status, indicating it has not been actively pursued or implemented. The Ethereum network successfully transitioned to PoS in September 2022 without implementing this proposal. While EIP-3368 highlighted important considerations about network security during major transitions,",
  "EIP-3372": "<article><h1>EIP-3372: 5 FNV primes for ethash</h1>\n    \n<p>EIP-3372 proposed introducing 5 new FNV (Fowler–Noll–Vo) prime numbers into the Ethash mining algorithm used by Ethereum. The goal was to break compatibility with existing ASIC (Application-Specific Integrated Circuit) mining hardware and promote decentralization by favoring GPU miners. It was authored by mineruniter969 in March 2021 as a revival of the earlier EIP-969 with similar aims.</p>\n\n<p>The motivation stemmed from concerns that ASICs were centralizing Ethereum mining, as their high cost and specialized nature restricted them to large operators. GPU mining was seen as more accessible and decentralized. The proposal aimed to render existing ASICs ineffective by changing core constants in the mining algorithm, forcing manufacturers to develop new hardware.</p>\n\n<p>However, EIP-3372 did not gain significant traction and is currently in \"Stagnant\" status. With Ethereum's transition to proof-of-stake via \"The Merge\" in 2022, the proposal became largely moot as it pertained to the now deprecated proof-of-work mining system. While it highlighted important debates around mining centralization, ultimately Ethereum chose to address those concerns by moving away from mining",
  "EIP-3374": "<article><h1>EIP-3374: Predictable Proof-of-Work (POW) Sunsetting</h1>\n\n<p>EIP-3374, proposed by Query0x in March 2021, aimed to create a smooth transition from Proof-of-Work (PoW) to Proof-of-Stake (PoS) for Ethereum. The proposal suggested setting the block reward to 3 ETH and gradually reducing it to 1 ETH over approximately one year (2,362,000 blocks). This approach was designed to be issuance neutral in the first year and reduce issuance thereafter, while also discouraging further ASIC development.</p>\n\n<p>The motivation behind this EIP was to avoid abrupt changes in the Ethereum ecosystem, which could cause disruption and undermine stability. By implementing a predictable, gradual reduction in mining rewards, the proposal aimed to allow for better measurement and monitoring of the impacts on the network. This cautious approach would potentially allow for adjustments if necessary, rather than relying solely on conjecture and game theory.</p>\n\n<p>However, EIP-3374 was ultimately withdrawn and did not progress further in the Ethereum improvement process. The Ethereum community opted for a different approach to the PoW to PoS transition, which culminated in the successful Merge event in September 2022. This",
  "EIP-3382": "<article><h1>EIP-3382: Hardcoded Block Gas Limit</h1>\n\n<p>EIP-3382, proposed by Philippe Castonguay in March 2021, aimed to hardcode the Ethereum block gas limit to 12,500,000 gas per block. The proposal sought to remove the ability for block producers to adjust the gas limit, instead making it a consensus parameter. This was motivated by concerns that block producers might not always act in the network's best interest when setting gas limits.</p>\n\n<p>The proposal was relatively short-lived and did not see widespread adoption or implementation. It was withdrawn by the author in favor of EIP-3756, which proposed a more flexible approach to managing block gas limits. EIP-3756 suggested introducing a \"gas target\" concept and allowing for gradual adjustments to the gas limit over time, rather than an immediate hard-coded value.</p>\n\n<p>Currently, EIP-3382 remains in a withdrawn status. The Ethereum community has continued to explore various approaches to gas limit management, balancing network performance, decentralization, and security concerns. While the specific proposal of EIP-3382 was not implemented, it contributed to ongoing discussions about optimal gas limit strategies in Ethereum's evolving ecosystem.</p></article>",
  "EIP-3386": "<article><h1>EIP-3386: ERC-721 Rentable Extension</h1>\n\n<p>EIP-3386, originally proposed as an extension to the ERC-721 non-fungible token standard, aimed to introduce rental functionality for NFTs. The proposal was authored by Nick Mudge, a well-known Ethereum developer, and was designed to allow NFT owners to temporarily grant usage rights to other users without transferring ownership.</p>\n\n<p>The proposal outlined methods for initiating rentals, managing rental periods, and handling the return of rented NFTs. It sought to address the growing demand for NFT utility in various applications, particularly in gaming and virtual real estate. However, EIP-3386 didn't gain widespread adoption in its original form.</p>\n\n<p>Currently, EIP-3386 has been moved to the Ethereum ERCs repository, indicating a shift in its status. While the core concept of NFT rentals remains relevant, the implementation details have likely evolved. Developers interested in NFT rental mechanisms should refer to more recent proposals or established practices in the ecosystem for up-to-date approaches.</p>\n</article>",
  "EIP-3403": "<article><h1>EIP-3403: Partial Removal of Refunds</h1>\n\n<p>EIP-3403, proposed by Vitalik Buterin and Martin Swende in March 2021, aimed to partially remove gas refunds in Ethereum. Specifically, it proposed eliminating refunds for SELFDESTRUCT operations and restricting SSTORE refunds to a single case. The motivation was to address issues with state growth and block size variance, while also mitigating the effects of GasToken exploitation.</p>\n\n<p>Gas refunds were initially introduced to encourage developers to clear unused storage and contracts, promoting \"good state hygiene.\" However, this goal was not widely achieved, and the Ethereum community began to view statelessness or state expiry as more viable solutions to state growth. The proposal highlighted how refunds contributed to network inefficiencies and increased block size variance, potentially impacting network stability.</p>\n\n<p>Despite its potential benefits, EIP-3403 is currently in a \"Stagnant\" status. This suggests that while the proposal raised important issues, it has not gained sufficient traction or consensus for implementation. The Ethereum community continues to explore alternative solutions to address state growth and gas efficiency, with more recent proposals potentially superseding or incorporating elements of EIP-3403's approach.</p></article>",
  "EIP-3416": "<article><h1>EIP-3416: Median Gas Premium</h1>\n\n<p>EIP-3416, titled \"Median Gas Premium,\" was proposed by HexZorro and Mojtaba Tefagh in March 2021 as a potential improvement to Ethereum's transaction pricing mechanism. The proposal aimed to introduce a fixed-per-block network fee and a median inclusion fee with additive updates, addressing some of the issues with the existing gas pricing system.</p>\n\n<p>The key innovation in EIP-3416 was the simplification of the fee structure for users. Instead of specifying multiple values, users would only need to provide a single \"fee cap\" representing the maximum total they're willing to pay. The proposal then calculated a gas premium as 50% of the difference between the fee cap and the base fee. This approach aimed to make the fee estimation process more straightforward for users while still allowing for efficient block space allocation.</p>\n\n<p>As of now, EIP-3416 is in a \"Stagnant\" status, indicating that it hasn't seen significant activity or updates recently. While the proposal offered an interesting alternative to other gas pricing mechanisms, it has not been implemented. The Ethereum community has since adopted EIP-1559, which introduced a different approach to transaction pricing with a base fee and priority fee structure. Given these developments, it's unlikely that EIP-3416 will",
  "EIP-3436": "<article><h1>EIP-3436: Expanded Clique Block Choice Rule</h1>\n\n<p>EIP-3436, authored by Danno Ferrin, proposes an improvement to the Clique consensus algorithm used in Ethereum testnets. The proposal aims to reduce block production deadlocks by introducing a more comprehensive block choice rule. Currently, Clique only uses the \"highest total difficulty\" rule to select between competing blocks, which has led to network halts in production systems like the Goerli testnet.</p>\n\n<p>The proposed solution introduces a four-step block choice rule: highest total difficulty, shortest chain, most recently in-turn, and lowest hash. This expanded rule set is designed to prevent deadlocks that have occurred in multi-client Clique networks, where the number of active validators was sufficient to continue chain progression but conflicting block choices led to a halt.</p>\n\n<p>As of now, EIP-3436 is in a \"Stagnant\" status, indicating that it has not seen recent activity or updates. While the proposal addresses a real issue observed in Clique-based networks, it's unclear if it will be implemented in its current form or if alternative solutions have been developed. The EIP builds upon EIP-225, which introduced the Clique proof-of-authority consensus protocol.</p></article>",
  "EIP-3440": "<article><h1>EIP-3440: ERC-3440 Moved to ERCs Repository</h1>\n\n<p>EIP-3440, an Ethereum Request for Comment (ERC) proposal, has been moved from its original location to the dedicated ERCs repository. This move is part of an effort to better organize and manage Ethereum improvement proposals, particularly those in the ERC category.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-3440.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-3440.md</a>. This relocation suggests that the proposal is still being considered or discussed within the Ethereum community, but has been moved to a more appropriate location for ERC-specific proposals.</p>\n\n<p>As the proposal has been moved, its current status is listed as \"Moved\". For the most up-to-date information on the proposal's content, purpose, and current status, interested parties should refer to the new location in the ERCs repository.</p>\n</article>",
  "EIP-3448": "<article><h1>EIP-3448: Meta Proxy Standard</h1>\n\n<p>EIP-3448, also known as the Meta Proxy Standard, was proposed to address the limitations of existing proxy patterns in Ethereum smart contracts. The proposal aimed to introduce a more flexible and gas-efficient approach to contract upgradability. It was authored by Zainan Victor Zhou and moved to the Ethereum ERCs repository for further consideration.</p>\n\n<p>The Meta Proxy Standard proposed a novel method of implementing upgradable contracts by separating the proxy logic from the implementation logic. This separation would allow for more efficient upgrades and reduce gas costs associated with contract interactions. The proposal also aimed to improve compatibility with existing tools and platforms in the Ethereum ecosystem.</p>\n\n<p>Currently, EIP-3448 has been moved to the ERCs repository, indicating that it is still under consideration but not actively pursued as an Ethereum Improvement Proposal. While the concept of meta proxies remains relevant, other approaches to contract upgradability, such as the widely-adopted EIP-1967 (Standard Proxy Storage Slots), have gained more traction in the Ethereum community.</p>\n</article>",
  "EIP-3450": "<article><h1>EIP-3450: A Brief Technical Summary</h1>\n\n<p>EIP-3450 was a proposal for an Ethereum Request for Comments (ERC) standard. However, it's important to note that this proposal has been moved from its original location in the Ethereum Improvement Proposals (EIPs) repository to the Ethereum Request for Comments (ERCs) repository. This relocation indicates that the proposal is now being handled as part of the ERC process rather than the broader EIP process.</p>\n\n<p>The current status of EIP-3450 is \"Moved,\" which means it's no longer actively tracked in the main EIPs repository. For the most up-to-date information and discussions about this proposal, interested parties should refer to the new location: https://github.com/ethereum/ercs/blob/master/ERCS/erc-3450.md. This move suggests that the proposal is likely related to a specific token standard or interface within the Ethereum ecosystem, as ERCs typically focus on application-level standards and conventions.</p>\n\n<p>Due to the limited information available in the original EIP file, it's not possible to provide details about the proposal's purpose, authors, or implementation status without referring to the new location. For a comprehensive understanding of ERC-3450, including its technical specifications, rationale, and current status, it's recommended to check",
  "EIP-3455": "<article><h1>EIP-3455: SUDO Opcode</h1>\n\n<p>EIP-3455, proposed by William Morriss and Baptiste Vauthey on April 1, 2021, aimed to introduce a new opcode called SUDO that would allow calling smart contracts from an arbitrary sender address. The proposal was likely intended as an April Fools' joke, as it would fundamentally break Ethereum's security model by allowing anyone to impersonate any address.</p>\n\n<p>The authors humorously claimed SUDO would solve issues like recovering stuck tokens, reversing scams, and accessing lost wallets. However, such capabilities would undermine the core principles of decentralization and immutability that underpin Ethereum. Not surprisingly, the proposal faced immediate criticism and was never seriously considered for implementation.</p>\n\n<p>As of 2023, EIP-3455 remains in \"Stagnant\" status, effectively rejected. While creative problem-solving is encouraged in the Ethereum community, proposals that compromise fundamental security assumptions are not viable. The SUDO opcode serves as a reminder of the importance of maintaining Ethereum's core principles even when addressing challenging issues.</p></article>",
  "EIP-3475": "<article><h1>EIP-3475: Multiple Callable Bonds Standard</h1>\n\n<p>EIP-3475, also known as the Multiple Callable Bonds Standard, was proposed to introduce a standardized interface for tokenized debt and bond instruments on the Ethereum blockchain. The proposal aimed to create a more flexible and efficient way to represent complex financial products, allowing for the implementation of various bond types with different maturities, interest rates, and callable features.</p>\n\n<p>The proposal was originally authored by Naim Aschi, Theo Giannetsos, and Steffen Kux, with input from the DeFi community. It was designed to address limitations in existing token standards like ERC-20 and ERC-1155, which were not ideally suited for representing debt instruments with varying terms and conditions. EIP-3475 introduced concepts such as \"classes\" and \"nonFungiblePositions\" to allow for more granular representation of bond characteristics.</p>\n\n<p>Currently, EIP-3475 has been moved to the Ethereum ERCs repository, indicating ongoing development and discussion within the community. While the proposal offers significant potential for tokenizing traditional financial instruments, its implementation and adoption in production environments are still evolving. As the DeFi ecosystem continues to mature, standards like EIP-3475 may play a crucial role in bridging traditional finance with blockchain technology.</p>",
  "EIP-3508": "<article><h1>EIP-3508: Transaction Data Opcodes</h1>\n\n<p>EIP-3508, proposed by Alex Papageorgiou in April 2021, aimed to introduce three new EVM instructions: ORIGINDATALOAD, ORIGINDATASIZE, and ORIGINDATACOPY. These opcodes were designed to provide efficient access to the original transaction's data payload across multiple contract calls, potentially reducing gas costs for complex operations involving large data structures.</p>\n\n<p>The proposal was motivated by the increasing complexity of Ethereum smart contracts and the need for more efficient data handling between contracts. By allowing direct access to the original transaction data, EIP-3508 sought to enable more ambitious features in multi-contract systems without incurring prohibitive gas costs for data transmission.</p>\n\n<p>Currently, EIP-3508 is in a \"Stagnant\" status, indicating that it has not seen significant activity or updates since its initial proposal. While the idea has merit, it's unclear whether it will be implemented in its current form or if alternative solutions have superseded it. As Ethereum continues to evolve, especially with the transition to Ethereum 2.0, more efficient data handling mechanisms may be explored through other proposals or protocol-level optimizations.</p>\n</article>",
  "EIP-3520": "<article><h1>EIP-3520: Transaction Destination Opcode</h1>\n\n<p>EIP-3520, proposed by Alex Papageorgiou in April 2021, introduces the `ENTRYPOINT` EVM instruction to provide access to the original recipient of a transaction. This opcode aims to enhance smart contract introspection capabilities, allowing contracts to identify the entry point of a transaction and deduce its original intention.</p>\n\n<p>The proposal was designed to work in conjunction with EIP-3508, which introduces the `SELFDESTRUCT` opcode. EIP-3520 would enable new types of smart contract interactions, particularly beneficial for ERC-721 NFTs and ERC-20 tokens. It could allow these tokens to detect which action their transaction is part of, potentially opening up new use cases and functionalities.</p>\n\n<p>Currently, the status of EIP-3520 is \"Stagnant,\" indicating that it has not seen significant development or discussion recently. While the proposal presents interesting possibilities for contract introspection and interaction, it has not gained enough traction to be implemented. As of now, no alternative proposal has directly superseded EIP-3520, but the Ethereum community continues to explore various ways to enhance smart contract capabilities and interactions.</p></article>",
  "EIP-3521": "<article><h1>EIP-3521: Reduce Access List Cost</h1>\n\n<p>EIP-3521 was proposed by Matt Garnett in April 2021 to reduce the cost of declaring storage keys for the <code>tx.to</code> address in Ethereum transaction access lists. The motivation was to make access lists more economically attractive by avoiding double-charging for the <code>tx.to</code> address, which is already added to the accessed addresses list by default.</p>\n\n<p>The proposal aimed to treat the first occurrence of <code>tx.to</code> in an access list as calldata for gas accounting, removing the <code>ACCESS_LIST_ADDRESS_COST</code> charge. This would reduce the threshold at which using an access list becomes cheaper than cold storage reads from 25 distinct slots to just 5, potentially encouraging more widespread use of access lists to improve performance.</p>\n\n<p>As of 2023, EIP-3521 remains in \"Stagnant\" status, indicating it has not seen recent activity or updates. While the idea had merit in reducing unnecessary costs, it appears to have not gained enough traction for implementation. Developers working with access lists should be aware of this proposal, but continue following current gas cost structures unless future changes are adopted.</p>\n</article>",
  "EIP-3525": "<article><h1>EIP-3525: Semi-Fungible Token Standard</h1>\n\n<p>EIP-3525, also known as the Semi-Fungible Token Standard, was proposed to bridge the gap between fungible (ERC-20) and non-fungible (ERC-721) tokens. It was authored by solv.finance team members, including Ryan Chow, John Lee, and others. The proposal aimed to create a new token standard that could represent assets with both fungible and non-fungible properties, such as bonds, licenses, or other financial instruments.</p>\n\n<p>The standard introduced the concept of \"slots\" to group similar tokens and allow for partial transfers of value. This innovation enabled more complex tokenization scenarios and opened up new possibilities for representing real-world assets on the Ethereum blockchain. EIP-3525 garnered significant interest from the DeFi community and developers working on tokenization projects.</p>\n\n<p>As of now, EIP-3525 has been moved to the Ethereum ERCs repository, indicating its progression in the standardization process. The current status and further details can be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-3525.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-3525.md</",
  "EIP-3529": "<article><h1>EIP-3529: Reduction in Refunds</h1>\n\n<p>EIP-3529, authored by Vitalik Buterin and Martin Swende, proposes a significant change to Ethereum's gas refund mechanism. The proposal aims to remove gas refunds for the SELFDESTRUCT operation and reduce refunds for SSTORE operations. This change was motivated by the unintended consequences of the original refund system, which was designed to encourage good state hygiene but led to exploits like GasToken and increased block size variance.</p>\n\n<p>The proposal was a response to the issues raised by EIP-3298 and EIP-3403, attempting to preserve existing clearing incentives while addressing the problems caused by excessive refunds. It was part of the London hard fork, implemented in August 2021, alongside other significant changes like EIP-1559. The implementation of EIP-3529 has helped mitigate some of the network inefficiencies and potential attack vectors that were possible with the previous refund system.</p>\n\n<p>Currently, EIP-3529 is in \"Final\" status, meaning it has been implemented and is active on the Ethereum mainnet. Its implementation has been largely successful in achieving its goals, reducing the viability of gas token schemes and improving the predictability of block gas usage. However, the broader conversation about gas optimization and state",
  "EIP-3534": "<article><h1>EIP-3534: Restricted Chain Context Type Transactions</h1>\n\n<p>EIP-3534, proposed by Isaac Ardis in April 2021, introduces a new transaction type that allows for constraints on block context, including ancestor block hash, block author, and block timestamp. This proposal builds upon EIP-2718 (Typed Transaction Envelope) and EIP-2930 (Optional Access Lists).</p>\n\n<p>The main purpose of this EIP is to provide a protocol-based mechanism for transactions to specify constraints on eligible chain contexts. This would allow users to express requirements about a transaction's relationship to blockchain data and its provenance. For example, it could restrict a transaction to only be valid within a specific chain segment or when mined by certain miners.</p>\n\n<p>Currently, the proposal is in a \"Stagnant\" state, indicating that it has not seen significant activity or updates recently. While the idea of restricted chain context transactions could potentially enhance transaction flexibility and security, it appears that the Ethereum community has not widely adopted or implemented this proposal. As such, it remains an interesting concept but is not part of the current Ethereum protocol.</p></article>",
  "EIP-3540": "<article><h1>EIP-3540: EOF - EVM Object Format v1</h1>\n\n<p>EIP-3540 proposes a new extensible and versioned container format for Ethereum Virtual Machine (EVM) bytecode. It was authored by Alex Beregszaszi, Paweł Bylica, Andrei Maiboroda, and Matt Garnett in March 2021. The proposal aims to improve bytecode validation and enable easier introduction of future EVM features.</p>\n\n<p>The key innovation of EIP-3540 is introducing a structured format for EVM bytecode with separate code and data sections. This allows for a one-time validation at contract deployment, rather than repeated runtime validation. The format includes a magic number, version, and defined sections. This structure enables versioning without adding a version field to Ethereum accounts.</p> \n\n<p>As of 2023, EIP-3540 is still in Review status and has not been implemented. However, it lays important groundwork for future EVM improvements by providing an extensible bytecode format. Related proposals like EIP-3670 for EOF validation and EIP-4200 for static relative jumps build on the EOF structure defined in EIP-3540. While not yet adopted, EOF remains an active area of Ethereum research and development.</p>\n</article>",
  "EIP-3541": "<article><h1>EIP-3541: Reject new contract code starting with the 0xEF byte</h1>\n\n<p>EIP-3541 was proposed in March 2021 by a group of prominent Ethereum developers including Alex Beregszaszi and Paweł Bylica. Its purpose was to pave the way for the future implementation of the EVM Object Format (EOF) by disallowing new smart contract code from starting with the byte 0xEF. This byte was intended to be used as a \"magic number\" to identify EOF-formatted contracts in the future.</p>\n\n<p>The proposal was relatively straightforward - it simply prevented new contracts starting with 0xEF from being deployed, while not affecting existing contracts. This laid the groundwork for EOF validation at deploy time, ensuring that only properly formatted EOF contracts could be deployed once that standard was implemented. It also limited the search space for analyzing existing non-EOF contracts.</p>\n\n<p>EIP-3541 was included in the London hard fork in August 2021 and is now part of the Ethereum protocol. It successfully accomplished its goal of reserving the 0xEF byte for future use with minimal disruption. The EOF standard itself is still in development as of 2023, but thanks to EIP-3541, the path has been cleared for its eventual implementation. This demonstrates how even simple proposals can",
  "EIP-3554": "<article><h1>EIP-3554: Difficulty Bomb Delay to December 2021</h1>\n\n<p>EIP-3554, authored by James Hancock, proposed delaying Ethereum's difficulty bomb to take effect in December 2021. The difficulty bomb is a mechanism designed to gradually increase mining difficulty, eventually making mining unprofitable and forcing a transition to proof-of-stake. This EIP was part of the \"London\" hard fork implemented in August 2021.</p>\n\n<p>The proposal adjusted the difficulty calculation by subtracting 9,700,000 from the block number when determining the exponential difficulty increase. This effectively delayed the bomb's impact by about 4 months. The motivation was to allow more time for the Shanghai upgrade and/or the Merge to proof-of-stake to occur before the difficulty increase became too severe.</p>\n\n<p>EIP-3554 was successfully implemented, but has since been superseded by further difficulty bomb delays like EIP-4345 and EIP-5133 as the Merge timeline shifted. The difficulty bomb was ultimately defused after the Merge to proof-of-stake in September 2022, making this mechanism obsolete in Ethereum's current form.</p></article>",
  "EIP-3561": "<article><h1>EIP-3561: Security Considerations for Smart Contract Upgrades</h1>\n\n<p>EIP-3561 was proposed to address the critical issue of security in smart contract upgrades. The proposal, which was originally authored by the OpenZeppelin team, aimed to establish a standardized set of security considerations for developers to follow when implementing upgradeable contracts. This was particularly important given the increasing complexity and value locked in smart contracts on the Ethereum network.</p>\n\n<p>The proposal outlined best practices for proxy patterns, storage layout, and initialization functions, among other aspects. It gained traction in the Ethereum developer community due to its potential to mitigate risks associated with contract upgrades, which had led to several high-profile vulnerabilities and exploits in the past. However, as the Ethereum ecosystem evolved, the proposal was eventually moved to the Ethereum Request for Comments (ERC) repository for further refinement and community input.</p>\n\n<p>Currently, EIP-3561 has been moved to the ERC repository and can be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-3561.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-3561.md</a>. While not formally implemented as an Ethereum Improvement Proposal, its principles continue",
  "EIP-3569": "<article><h1>EIP-3569: Sealed NFT Metadata Standard</h1>\n<p>EIP-3569, proposed by Radomski, Zinsmeister, and Ruiz in June 2021, aimed to establish a standard for sealed NFT metadata. The proposal addressed the need for revealing NFT attributes gradually, enhancing engagement and fairness in NFT launches. It extended ERC-721 and ERC-1155 standards, introducing a mechanism to store and reveal metadata in stages.</p>\n<p>The proposal gained traction in the NFT community, particularly for projects involving collectibles and gaming assets. It allowed creators to maintain suspense and distribute rare traits more equitably. However, implementation challenges and alternative approaches led to ongoing discussions about the best way to achieve sealed metadata functionality.</p>\n<p>As of now, EIP-3569 has been moved to the Ethereum ERCs repository, indicating a shift in its development process. While not formally standardized, its concepts have influenced subsequent NFT projects and discussions around metadata reveal mechanisms. The current status suggests that while valuable, the proposal may have been superseded by other approaches or is undergoing further refinement within the ERC framework.</p>\n</article>",
  "EIP-3584": "<article><h1>EIP-3584: Block Access List</h1>\n\n<p>EIP-3584, proposed by Gajinder Singh and Piper Merriam in May 2021, aimed to create a block-level access list by aggregating transaction-level access lists introduced in EIP-2930. The proposal sought to include an AccessListRoot in the block header, representing a fingerprint of all accessed addresses and storage keys within a block.</p>\n\n<p>This proposal built upon the gas optimization efforts of EIP-2929 and EIP-2930, which introduced discounted gas costs for preloaded data and storage accesses. By extending this concept to the block level, EIP-3584 aimed to further optimize Ethereum's execution environment and potentially improve overall network efficiency.</p>\n\n<p>Currently, EIP-3584 is in a \"Stagnant\" status, indicating that it has not seen significant development or discussion recently. While the idea of block-level access lists remains interesting, it appears that the Ethereum community has focused on other scalability and efficiency improvements, such as rollups and the transition to Proof-of-Stake, rather than pursuing this specific proposal.</p>\n</article>",
  "EIP-3589": "<article><h1>EIP-3589: ERC-3589 Moved</h1>\n\n<p>EIP-3589 was originally proposed as an Ethereum Request for Comment (ERC) but has since been moved to a separate repository. The proposal is now located at https://github.com/ethereum/ercs/blob/master/ERCS/erc-3589.md, indicating that it has been separated from the main Ethereum Improvement Proposals (EIPs) repository.</p>\n\n<p>This move suggests that the proposal may have been deemed more suitable as a standalone ERC rather than a core Ethereum improvement. While the specific details of ERC-3589 are not provided in the given information, its relocation implies that it likely relates to a token standard, interface, or application-level specification rather than a core protocol change.</p>\n\n<p>The current status of the proposal is listed as \"Moved,\" which means it is no longer being tracked or discussed within the main EIP process. Interested parties should refer to the new location for the most up-to-date information on the proposal's content, status, and any ongoing discussions or implementations related to ERC-3589.</p></article>",
  "EIP-3607": "<article><h1>EIP-3607: Reject transactions from senders with deployed code</h1>\n\n<p>EIP-3607 was proposed in June 2021 by Dankrad Feist, Dmitry Khovratovich, and Marius van der Wijden to address a potential security vulnerability in Ethereum's address system. The proposal aims to prevent attacks that could exploit collisions between contract accounts and Externally Owned Accounts (EOAs) due to Ethereum's 160-bit address space.</p>\n\n<p>The core idea is to reject any transaction where the sender address already has deployed code. This prevents an attacker from deploying a malicious contract at an address, then using the corresponding EOA private key to drain funds sent to that address. The proposal was motivated by the theoretical possibility of generating address collisions between contracts and EOAs using around 2^80 operations, which could be feasible with a large budget.</p>\n\n<p>EIP-3607 was finalized and implemented in the London hard fork (August 2021) as a simple and effective mitigation against this attack vector. While it does not completely solve the underlying issue of potential address collisions, it prevents the most damaging exploits. The proposal has been widely accepted as an important security improvement for Ethereum.</p>\n</article>",
  "EIP-3643": "<article><h1>EIP-3643: T-REX (Token for Regulated EXchanges)</h1>\n\n<p>EIP-3643, also known as T-REX (Token for Regulated EXchanges), was a proposal aimed at creating a standard for tokenized securities on the Ethereum blockchain. The proposal was designed to address the regulatory requirements of security tokens, enabling compliant issuance and trading of these assets on the blockchain. T-REX was developed by TokenSoft, a technology company specializing in blockchain-based securities, in collaboration with other industry participants.</p>\n\n<p>The proposal introduced a set of smart contracts and interfaces that would allow for the implementation of transfer restrictions, identity verification, and regulatory compliance checks. This would enable issuers to maintain control over their tokens while ensuring adherence to securities regulations. However, EIP-3643 has since been moved to the Ethereum Request for Comments (ERC) repository, indicating a shift in its status and development process.</p>\n\n<p>As of now, EIP-3643 has been relocated to the ERC repository at https://github.com/ethereum/ercs/blob/master/ERCS/erc-3643.md. This move suggests that the proposal is still under consideration and development within the Ethereum community, but may require further refinement or discussion before potential implementation. The current status of \"Moved\" indicates",
  "EIP-3651": "<article><h1>EIP-3651: Warm COINBASE</h1>\n\n<p>EIP-3651, titled \"Warm COINBASE\", was proposed by William Morriss in July 2021 to address an inefficiency in Ethereum's gas pricing model. The proposal aimed to make the COINBASE address (the address receiving block rewards) \"warm\" at the start of transaction execution, reducing the gas cost for interacting with it.</p>\n\n<p>The motivation behind this EIP was to encourage direct ETH payments to miners/validators. Prior to this proposal, accessing the COINBASE address was overpriced due to it being initially \"cold\" under the access list framework introduced in EIP-2929. This gas cost mismatch was inadvertently incentivizing the use of alternative payment methods like ERC-20 tokens instead of ETH.</p>\n\n<p>EIP-3651 was implemented as part of the Shanghai upgrade in April 2023, along with other proposals like EIP-4895 (Beacon chain withdrawals). By making the COINBASE address warm by default, it aligned the gas costs with the actual computational cost of reading that account, promoting more efficient use of Ethereum's native currency for transaction fees and miner payments.</p>\n</article>",
  "EIP-3668": "<article><h1>EIP-3668: CCIP Read: Secure offchain data retrieval</h1>\n\n<p>EIP-3668, also known as \"CCIP Read: Secure offchain data retrieval,\" was proposed by Nick Johnson and introduced a mechanism for smart contracts to securely fetch off-chain data. The proposal aimed to address the limitations of on-chain storage and computation by allowing contracts to retrieve data from external sources while maintaining security and decentralization.</p>\n\n<p>The proposal was initially drafted in 2021 and gained traction due to its potential to enhance scalability and reduce gas costs. It introduced a standardized way for contracts to request off-chain data and verify its authenticity, leveraging cryptographic proofs. This approach aligned with Ethereum's vision of expanding capabilities beyond on-chain limitations while preserving the network's core principles.</p>\n\n<p>As of now, EIP-3668 has been moved to the Ethereum ERCs repository, indicating its progression towards potential standardization. The current status and further developments can be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-3668.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-3668.md</a>. This move suggests ongoing interest and development in secure off-chain data",
  "EIP-3670": "<article><h1>EIP-3670: EOF - Code Validation</h1>\n\n<p>EIP-3670, proposed by Alex Beregszaszi, Andrei Maiboroda, and Paweł Bylica in June 2021, introduces code validation at contract creation time for EOF (Ethereum Object Format) formatted contracts. The proposal aims to reject contracts containing truncated PUSH-data or undefined instructions, bringing code validity into consensus and making it easier to reason about bytecode.</p>\n\n<p>This EIP builds upon EIP-3540, which introduced the EOF format. The main motivation is to improve EVM implementations by reducing the number of paths needed to determine instruction validity. It also allows for the potential introduction of new instructions in the future without breaking existing contracts, as undefined instructions would be rejected at deployment.</p>\n\n<p>As of early 2023, EIP-3670 is still in Review status. It represents an important step towards standardizing and improving Ethereum smart contract deployment, but has not yet been implemented. The proposal continues to be discussed and refined by the Ethereum community as part of the ongoing effort to enhance the Ethereum protocol.</p></article>",
  "EIP-3675": "<article><h1>EIP-3675: Upgrade consensus to Proof-of-Stake</h1>\n\n<p>EIP-3675 is a critical proposal that specifies the transition of Ethereum's consensus mechanism from Proof-of-Work (PoW) to Proof-of-Stake (PoS). Authored by Mikhail Kalinin, Danny Ryan, and Vitalik Buterin in July 2021, this EIP outlines the changes required to the block structure, processing, fork choice rule, and network interface to implement PoS consensus driven by the Beacon Chain.</p>\n\n<p>The motivation behind this upgrade was to improve Ethereum's scalability, security, and energy efficiency. The Beacon Chain had been running successfully since December 2020, demonstrating its readiness to secure the Ethereum mainnet. This EIP built on earlier proposals like EIP-2982 which specified the initial bootstrapping of PoS consensus.</p>\n\n<p>EIP-3675 reached Final status and was a key component of Ethereum's historic transition to PoS in September 2022, known as The Merge. It deprecates PoW mining and implements the new PoS validator system, representing one of the most significant upgrades in Ethereum's history. The successful activation of this proposal marked a major milestone in Ethereum's long-term roadmap an",
  "EIP-3690": "<article><h1>EIP-3690: EOF - JUMPDEST Table</h1>\n\n<p>EIP-3690 proposes adding a dedicated section in the EOF (Ethereum Object Format) for storing a list of valid jump destinations, eliminating the need for JUMPDEST opcodes and runtime analysis. It was authored by Alex Beregszaszi, Paweł Bylica, and Andrei Maiboroda in June 2021 as part of the broader EOF initiative to improve EVM efficiency and analysis.</p>\n\n<p>The proposal aims to trade runtime complexity for increased validation at contract creation time. By storing jump destinations in a table, it removes the need for JUMPDEST opcodes in EOF contracts and the associated runtime overhead of building a jump destination list on each execution. This change only affects EOF contracts, leaving legacy contracts unmodified.</p>\n\n<p>While the EIP showed promise for improving EVM performance and static analysis, its status is currently \"Stagnant\". This likely indicates that development has slowed or stalled, possibly due to competing priorities in Ethereum's roadmap or technical challenges in implementation. The proposal remains an interesting exploration of EVM optimization techniques, even if not actively pursued for now.</p>\n</article>",
  "EIP-3709": "<article><h1>EIP-3709: Remove Support for Type 1 Transactions</h1>\n\n<p>EIP-3709, proposed by Gregory Markou in August 2021, aimed to deprecate the usage of EIP-2718 TransactionType 1 in Ethereum wallets and providers. The proposal suggested upgrading all type 1 transactions to type 2 transactions, which were introduced in EIP-1559.</p>\n\n<p>The motivation behind this proposal was to streamline transaction types and take full advantage of the gas fee improvements introduced in EIP-1559. Type 1 transactions, introduced in EIP-2930, added access lists to transaction payloads. However, type 2 transactions already included this feature along with the new gas properties from EIP-1559.</p>\n\n<p>As of now, EIP-3709 is in a \"Stagnant\" status, indicating that it has not seen significant development or discussion recently. While the proposal had merit in simplifying transaction types, the Ethereum community has not reached a consensus on its implementation. Developers and users should continue to support both transaction types until a formal decision is made regarding the deprecation of type 1 transactions.</p>\n</article>",
  "EIP-3722": "<article><h1>EIP-3722: Poster</h1>\n\n<p>EIP-3722, known as the \"Poster\" proposal, was originally introduced to standardize a method for storing and retrieving arbitrary data on the Ethereum blockchain. This proposal aimed to create a simple, gas-efficient way to post and access data, potentially useful for various applications like decentralized social media, content distribution, or data archiving.</p>\n\n<p>The proposal was moved from its original location in the Ethereum Improvement Proposals (EIPs) repository to the Ethereum Request for Comments (ERCs) repository. This change in location suggests that the proposal was reclassified from a core protocol improvement to a token standard or application-level specification. The current status of the proposal is \"Moved,\" indicating that it is no longer actively considered in its original form within the main EIPs process.</p>\n\n<p>For the most up-to-date information and discussions about ERC-3722, interested parties should refer to the new location at https://github.com/ethereum/ercs/blob/master/ERCS/erc-3722.md. This move may reflect evolving thoughts on the proposal's scope or applicability within the Ethereum ecosystem.</p></article>",
  "EIP-3754": "<article><h1>EIP-3754: Abstract NFT Royalty Standard</h1>\n\n<p>EIP-3754, proposed as an Ethereum Request for Comment (ERC), aimed to establish a standardized method for implementing royalties on Non-Fungible Tokens (NFTs). The proposal was authored by James Morgan, Blaine Malone, and James Grimmelmann in 2021. It sought to address the lack of a unified approach to royalty payments in the NFT ecosystem, which had led to inconsistent implementations across different platforms.</p>\n\n<p>The proposal introduced an abstract interface for NFT royalties, allowing for flexibility in implementation while ensuring interoperability. It defined methods for querying royalty information and calculating royalty amounts, which could be integrated into existing NFT standards like ERC-721 and ERC-1155. This approach aimed to provide a more robust and standardized way for creators to receive ongoing compensation for their work.</p>\n\n<p>However, EIP-3754 has since been moved to the Ethereum ERCs repository, indicating a shift in its status. While the proposal offered a valuable contribution to the NFT royalty discussion, other standards like EIP-2981 (NFT Royalty Standard) have gained more traction in the ecosystem. As of now, EIP-2981 is considered the de facto standard for NFT royalties, having been",
  "EIP-3756": "<article><h1>EIP-3756: Gas Limit Cap</h1>\n\n<p>EIP-3756, proposed by lightclient in August 2021, aims to establish an in-protocol cap for the Ethereum gas limit at 30,000,000. The proposal seeks to address concerns about network stability and potential denial-of-service attacks by limiting the ability of block proposers to arbitrarily increase the gas limit.</p>\n\n<p>The motivation behind this EIP stems from the risks associated with high gas limits, which can lead to rapid state and history growth, potentially compromising network sustainability. Additionally, it aims to prevent block proposers from bypassing established governance processes for protocol changes that could impact network security and decentralization.</p>\n\n<p>Currently, the proposal's status is listed as \"Stagnant,\" indicating that it has not seen significant progress or discussion recently. While the EIP maintains flexibility by allowing proposers to lower the gas limit below the cap, it has not gained widespread adoption. The Ethereum community continues to debate the balance between network scalability and security, with alternative scaling solutions like Layer 2 protocols gaining more traction.</p>\n</article>",
  "EIP-3770": "<article><h1>EIP-3770: Ethereum Network Address Format</h1>\n\n<p>EIP-3770, proposed by Gavin John (@Pandapip1) in 2021, aimed to standardize a format for network-prefixed Ethereum addresses. The proposal suggested a syntax like \"eth:0x...\", \"gnosis:0x...\", or \"optimism:0x...\" to explicitly specify the network an address belongs to. This format would help prevent user errors when interacting with multiple Ethereum-compatible networks and improve interoperability between different chains.</p>\n\n<p>The proposal gained traction in the Ethereum community due to the growing ecosystem of Layer 2 solutions and sidechains. It was seen as a way to enhance user experience and reduce the risk of sending assets to the wrong network. However, the proposal's development and discussion have since moved to the Ethereum ERCs repository, indicating ongoing refinement and community input.</p>\n\n<p>As of now, EIP-3770 has been moved to the ERCs repository, suggesting it's still under active consideration but not yet finalized or implemented. The current status and any updates to the proposal can be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-3770.md\">https://github.com/ethereum/ercs/blob/master/ER",
  "EIP-3772": "<article><h1>EIP-3772: Minimal Proxies with Immutable Arguments</h1>\n\n<p>EIP-3772 was proposed to enhance the functionality of minimal proxies, specifically addressing the limitations of EIP-1167. The proposal aimed to allow for immutable arguments to be passed during proxy deployment, enabling more flexible and gas-efficient contract interactions. This improvement would have been particularly useful for creating multiple instances of a contract with different initialization parameters.</p>\n\n<p>The proposal was authored by Francisco Giordano, a prominent figure in the Ethereum development community. However, the EIP has since been moved to the ERCs repository, indicating a shift in its categorization from a core Ethereum Improvement Proposal to an Ethereum Request for Comment. This change suggests that while the idea was deemed valuable, it may have been considered more appropriate as a community standard rather than a core protocol change.</p>\n\n<p>As of now, the proposal's status is \"Moved,\" and it can be found in the ERCs repository. This relocation implies that the proposal is still open for discussion and potential implementation as a community standard, but it is no longer being considered for direct inclusion in the Ethereum core protocol. Developers interested in this functionality should refer to the updated document in the ERCs repository for the most current information and discussions surrounding this proposal.</p>\n</article>",
  "EIP-3779": "<article><h1>EIP-3779: Safer Control Flow for the EVM</h1>\n\n<p>EIP-3779 was proposed in August 2021 by Greg Colvin and Brooklyn Zelenka to improve the safety of EVM code execution. The proposal aimed to define validity rules that would ensure EVM contracts cannot encounter exceptional halting states, except for out-of-gas errors or recursive stack overflows. This would provide an essential level of safety for smart contracts without introducing new opcodes.</p>\n\n<p>The proposal specified an algorithm to validate control flow restrictions at contract initialization time, rather than runtime. This validation would need to be near-linear in time and space complexity to avoid creating a denial of service vulnerability. While not imposing any new syntax on bytecode, EIP-3779 sought to guarantee a level of semantic safety in contract execution.</p> \n\n<p>Ultimately, EIP-3779 was withdrawn, with the core ideas being incorporated into EIP-2315 (Simple Subroutines for the EVM). EIP-2315 introduces new opcodes for subroutines that provide similar safety guarantees in a more targeted manner. The withdrawal of EIP-3779 in favor of EIP-2315 demonstrates the iterative nature of Ethereum protocol development, as ideas are refined and consolidated over time.</p>\n</article>",
  "EIP-3788": "<article><h1>EIP-3788: Strict Enforcement of ChainID</h1>\n\n<p>EIP-3788, proposed by Gregory Markou in September 2021, aimed to enhance transaction security by rejecting transactions that don't explicitly match the node's configured chainId. This proposal built upon EIP-155, which introduced the chainId concept but allowed transactions with chainId = 0 to be valid across multiple chains.</p>\n\n<p>The motivation behind EIP-3788 was to mitigate the risk of transaction replay attacks, particularly in the context of the growing ecosystem of EVM-compatible chains. With many wallets not exposing chainId information to users, there was a potential security vulnerability where malicious actors could exploit transactions with chainId = 0 to replay them on different networks, potentially putting user funds at risk.</p>\n\n<p>Currently, EIP-3788 is in a \"Stagnant\" status, indicating that it hasn't progressed in the Ethereum improvement process. While the proposal addressed a valid security concern, it's possible that other solutions or proposals have since emerged to tackle this issue. As of now, developers and users should remain vigilant about chainId usage and consider implementing additional safeguards in their applications and wallets to prevent potential replay attacks.</p></article>",
  "EIP-3855": "<article><h1>EIP-3855: PUSH0 Instruction</h1>\n\n<p>EIP-3855 proposed adding a new PUSH0 instruction to the Ethereum Virtual Machine (EVM) to efficiently push the constant value 0 onto the stack. It was authored by Alex Beregszaszi, Hugo De la cruz, and Paweł Bylica in February 2021.</p>\n\n<p>The motivation was to optimize a common operation - pushing 0 onto the stack, which previously required PUSH1 0 (2 bytes, 3 gas). Analysis showed ~11.5% of all PUSH instructions pushed 0. PUSH0 would be 1 byte and cost 2 gas, improving efficiency. Developers had been using various workarounds like PC or MSIZE to push 0 cheaply, but those could be context-dependent.</p>\n\n<p>EIP-3855 was included in the Shanghai upgrade and is now implemented on Ethereum mainnet. It provides a simple optimization that reduces code size and gas costs for a frequent operation in smart contracts. The proposal achieved Final status and was widely supported as a straightforward improvement to EVM efficiency.</p>\n</article>",
  "EIP-3860": "<article><h1>EIP-3860: Limit and Meter Initcode</h1>\n\n<p>EIP-3860 was proposed in July 2021 by Martin Holst Swende, Paweł Bylica, Alex Beregszaszi, and Andrei Maiboroda to address an unmetered cost in Ethereum contract creation. The proposal introduces a maximum size limit for initcode and adds a gas cost for processing initcode during contract deployment.</p>\n\n<p>The key changes introduced by EIP-3860 are:\n1) Limiting initcode size to 49,152 bytes (2x the max deployed code size)\n2) Adding a gas cost of 2 per 32-byte chunk of initcode</p>\n\n<p>This proposal was implemented in the Shanghai upgrade in March 2023. It helps prevent potential DoS vectors by properly accounting for the computational costs of processing large initcode during contract creation. The size limit also allows code size, offsets, and jump targets to fit in 16-bit values, which can improve EVM implementations.</p>\n</article>",
  "EIP-3978": "<article><h1>EIP-3978: Gas Refunds on Reverts</h1>\n\n<p>EIP-3978, proposed by Anton Bukov and Mikhail Melnik in September 2021, aims to address the issue of gas costs for reverted state modification operations in Ethereum. The proposal suggests keeping the access cost for these operations but refunding the modification cost when a transaction or sub-call is reverted.</p>\n\n<p>The motivation behind this EIP stems from the fact that users are currently charged for dropped modifications as if they persisted, even when a transaction is reverted. This is particularly problematic since EIP-3298, which limited gas refunds to storage restores within the same transaction. EIP-3978 proposes to change this by repricing reverted operations such as SSTORE, LOG, CALL with value, and CREATE/CREATE2 to a standard 100 gas, effectively refunding the excess gas spent on these operations.</p>\n\n<p>As of February 2022, the proposal's status is listed as \"Stagnant,\" indicating that it has not gained significant traction or undergone further development. While the idea addresses a valid concern in gas pricing fairness, it has not been implemented, possibly due to potential complexities in implementation or other priorities in Ethereum's development roadmap.</p>\n</article>",
  "EIP-4": "<article><h1>EIP-4: EIP Classification</h1>\n\n<p>EIP-4, authored by Joseph Chow in 2015, introduced a classification scheme for Ethereum Improvement Proposals (EIPs). Adapted from Bitcoin's BIP 123, this proposal aimed to categorize EIPs into four layers: Consensus, Networking, API/RPC, and Applications. The primary goal was to reflect the varying levels of interoperability requirements and implementation challenges associated with different types of proposals.</p>\n\n<p>This classification system has been instrumental in organizing and prioritizing EIPs within the Ethereum ecosystem. By separating concerns into distinct layers, it has helped developers and stakeholders better understand the scope and impact of proposed changes. The consensus layer, for instance, deals with the most critical aspects of the Ethereum protocol, while the application layer focuses on higher-level standards that don't directly affect core functionality.</p>\n\n<p>EIP-4 has been widely adopted and is considered a foundational meta-proposal in the Ethereum community. Its status is \"Final,\" indicating that it has been fully implemented and is an active part of the EIP process. This classification system continues to guide the development and discussion of new EIPs, ensuring that proposals are evaluated within the appropriate context of their potential impact on the Ethereum ecosystem.</p></article>",
  "EIP-4200": "<article><h1>EIP-4200: EOF - Static Relative Jumps</h1>\n\n<p>EIP-4200, proposed in July 2021, introduces three new EVM jump instructions: RJUMP, RJUMPI, and RJUMPV. These instructions encode jump destinations as signed immediate values, offering a more efficient alternative to dynamic jumps in many cases. The proposal was authored by Alex Beregszaszi, Andrei Maiboroda, and Paweł Bylica, and is currently in the Review status.</p>\n\n<p>The motivation behind this EIP is to address the limitations of EVM's existing dynamic jump mechanism, which can make code analysis more complex and necessitates the use of JUMPDEST markers. While dynamic jumps provide flexibility, static jumps can be more efficient in many scenarios. EIP-4200 aims to provide a middle ground, allowing compilers to choose the most appropriate jump instruction based on the specific use case.</p>\n\n<p>As of now, EIP-4200 remains under review and has not been implemented. It requires EIP-3540 (EOF - EVM Object Format v1) and EIP-3670 (EOF - Code Validation) to be implemented first. The proposal has generated significant discussion in the Ethereum community, with developers weighing the benefits of improved code analysis and potential gas savings against",
  "EIP-4337": "<article><h1>EIP-4337: Account Abstraction via Entry Point Contract Specification</h1>\n\n<p>EIP-4337, proposed by Vitalik Buterin, Yoav Weiss, and others in 2021, aims to implement account abstraction without consensus-layer protocol changes. It introduces a new transaction type handled by a special contract called the \"entry point,\" allowing for smart contract wallets with enhanced functionality and improved user experience.</p>\n\n<p>The proposal addresses long-standing issues with Ethereum's account model, enabling features like social recovery, multisig wallets, and gas abstraction without requiring changes to the underlying protocol. It has gained significant traction in the Ethereum community, with several projects and wallets implementing or planning to support EIP-4337 compatible accounts.</p>\n\n<p>As of 2023, EIP-4337 has moved from the Ethereum Improvement Proposals repository to the Ethereum Request for Comments (ERC) repository, indicating its progression towards standardization. The proposal continues to evolve with ongoing discussions and implementations, and it is widely considered a crucial step towards improving Ethereum's usability and adoption.</p></article>",
  "EIP-4341": "<article><h1>EIP-4341: An Unfulfilled Promise</h1>\n\n<p>EIP-4341 was an Ethereum Improvement Proposal that aimed to establish a standard for non-fungible token (NFT) royalties. The proposal sought to create a mechanism for creators to receive ongoing royalties from secondary sales of their NFTs, addressing a significant pain point in the NFT ecosystem. It was initially drafted by a group of developers and artists looking to ensure fair compensation for creators in the rapidly evolving digital art market.</p>\n\n<p>However, EIP-4341 never reached implementation. The proposal faced challenges in achieving consensus within the Ethereum community, particularly regarding the enforceability of on-chain royalties and potential impacts on market liquidity. As the NFT space continued to evolve, alternative approaches to royalties emerged, such as off-chain enforcement mechanisms and marketplace-specific solutions.</p>\n\n<p>Currently, EIP-4341 has been moved to the Ethereum ERCs repository, indicating that it is no longer being actively considered for implementation in its original form. The relocation suggests that while the core idea of NFT royalties remains relevant, the specific approach outlined in EIP-4341 has been superseded by other proposals or market-driven solutions. For developers and artists interested in NFT royalties, it's advisable to explore more recent standards and best practices in the ever-changing landscape",
  "EIP-4345": "<article><h1>EIP-4345: Difficulty Bomb Delay to June 2022</h1>\n\n<p>EIP-4345 was proposed by Tim Beiko, James Hancock, and Thomas Jay Rush in October 2021 to delay Ethereum's difficulty bomb until June 2022. The difficulty bomb is a mechanism that increases mining difficulty over time, intended to encourage the transition to proof-of-stake. This proposal aimed to give developers more time to prepare for The Merge without the pressure of rapidly increasing block times.</p>\n\n<p>The EIP specifies a simple adjustment to the difficulty calculation, replacing the actual block number with a \"fake\" block number that is 10,700,000 blocks behind for difficulty bomb purposes. This effectively delays the exponential difficulty increase by about 20 months. The proposal was motivated by targeting The Merge to occur before June 2022, while allowing flexibility to further delay if needed.</p>\n\n<p>EIP-4345 was implemented in the Arrow Glacier network upgrade in December 2021. It successfully delayed the difficulty bomb, buying time for Ethereum developers to complete work on The Merge. The transition to proof-of-stake was ultimately achieved in September 2022 with The Merge, rendering the difficulty bomb irrelevant for mainnet Ethereum going forward. This EIP played an important role in Ethereum's history by facilitating a smooth transition",
  "EIP-4353": "<article><h1>EIP-4353: Semantic Definition Language for Smart Contracts</h1>\n\n<p>EIP-4353, proposed by Andreas Freund, aimed to establish a Semantic Definition Language (SDL) for smart contracts. The proposal sought to create a standardized way to describe smart contract functionality, improving interoperability and reducing ambiguity in contract interpretation. This ERC was designed to enhance the clarity and consistency of smart contract definitions across different platforms and implementations.</p>\n\n<p>The proposal was initially introduced to address the growing complexity of smart contracts and the need for a more standardized approach to their description. However, the EIP did not gain significant traction within the Ethereum community. As a result, it was eventually moved from the main EIPs repository to the ERCs (Ethereum Request for Comments) repository, indicating a shift in its status and perceived importance.</p>\n\n<p>Currently, EIP-4353 is in a \"Moved\" status, and its contents can be found in the Ethereum ERCs repository. While the idea of a Semantic Definition Language for smart contracts remains relevant, other approaches and standards have emerged to address similar concerns. As of now, there is no widespread implementation or adoption of EIP-4353, and developers continue to explore alternative solutions for improving smart contract clarity and interoperability.</p></article>",
  "EIP-4361": "<article><h1>EIP-4361: Sign-In with Ethereum</h1>\n\n<p>EIP-4361, also known as \"Sign-In with Ethereum,\" was proposed to standardize how Ethereum accounts can be used for authentication across various applications and services. The proposal aimed to create a seamless, decentralized alternative to traditional OAuth flows, leveraging Ethereum's cryptographic capabilities. It was authored by Spruce Systems, Inc., with contributions from notable figures in the Ethereum community.</p>\n\n<p>The proposal gained significant traction due to its potential to enhance user privacy and security while reducing reliance on centralized identity providers. It specifies a message format and signing process that allows users to prove ownership of an Ethereum address to a relying party. This enables a wide range of applications, from decentralized social media to Web3 services, to implement a standardized authentication mechanism.</p>\n\n<p>As of now, EIP-4361 has been moved to the Ethereum Request for Comments (ERC) repository, indicating its transition from a proposal to a more formalized standard. Its current status and further developments can be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-4361.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-4361.md</",
  "EIP-4393": "<article><h1>EIP-4393: NFT Rentals</h1>\n\n<p>EIP-4393, proposed for NFT rentals, aimed to standardize a mechanism for temporarily transferring NFT usage rights without full ownership transfer. This proposal addressed a growing need in the NFT ecosystem for time-limited access to digital assets, particularly in gaming and metaverse applications.</p>\n\n<p>The proposal was initially drafted by Qizhou Guo, Zhen Yu Yong, and Shrug, demonstrating collaborative efforts within the Ethereum community to solve practical use cases. While it gained attention for its potential to unlock new NFT utility models, the proposal's development process led to its relocation from the main EIPs repository to the ERCs repository.</p>\n\n<p>Currently, EIP-4393 is in a \"Moved\" status, indicating a shift in its development trajectory. The proposal can now be found in the Ethereum ERCs repository, suggesting ongoing refinement and discussion within the community. This move reflects the dynamic nature of Ethereum's improvement process and the continuous effort to optimize and standardize NFT functionalities.</p>\n</article>",
  "EIP-4396": "<article><h1>EIP-4396: Time-Aware Base Fee Calculation</h1>\n\n<p>EIP-4396, proposed by Ansgar Dietrichs in October 2021, aims to improve Ethereum's base fee calculation by accounting for block time. The proposal suggests targeting a stable throughput by time rather than by block, introducing a variable block gas target proportional to block time.</p>\n\n<p>The motivation behind this EIP stems from the current base fee calculation's drawback of not considering block time. This can lead to suboptimal fee adjustments, especially when block times vary significantly. By incorporating time awareness, the proposal seeks to create a more efficient and fair fee market, potentially reducing gas price volatility and improving user experience.</p>\n\n<p>As of now, EIP-4396 is in a \"Stagnant\" status, indicating that it has not seen significant development or discussion recently. While the concept addresses an important issue in Ethereum's fee mechanism, it has not gained enough traction for implementation. The proposal's applicability to both Proof-of-Work and Proof-of-Stake chains adds to its complexity, with security implications for PoW remaining unexplored.</p>\n</article>",
  "EIP-4399": "<article><h1>EIP-4399: Supplanting DIFFICULTY opcode with PREVRANDAO</h1>\n\n<p>EIP-4399, proposed by Mikhail Kalinin and Danny Ryan in October 2021, aimed to replace the DIFFICULTY opcode with PREVRANDAO in Ethereum's transition to Proof-of-Stake (PoS). The proposal sought to maintain backward compatibility while providing access to beacon chain randomness in the EVM.</p>\n\n<p>The motivation behind this change was twofold: First, to make the randomness from the beacon chain accessible to smart contracts, and second, to address the fact that the DIFFICULTY opcode would lose its meaning post-PoS transition. Many contracts used DIFFICULTY as a source of randomness, so replacing it with PREVRANDAO allowed these contracts to continue functioning while providing a more robust source of randomness.</p>\n\n<p>EIP-4399 has been implemented and is now in \"Final\" status. It was a crucial part of Ethereum's transition to PoS, ensuring that existing contracts relying on the DIFFICULTY opcode could continue to function without modification while benefiting from the improved randomness provided by the beacon chain.</p>\n</article>",
  "EIP-4400": "<article><h1>EIP-4400: ERC-4400 Metallic NFTs</h1>\n\n<p>EIP-4400, also known as ERC-4400 Metallic NFTs, was a proposal for an extension to the popular ERC-721 non-fungible token standard. The proposal aimed to introduce a new type of NFT that could represent physical metallic assets, such as precious metals or coins, on the Ethereum blockchain. This would allow for tokenization of real-world metal assets, potentially opening up new avenues for investment and trading in the digital space.</p>\n\n<p>The proposal was authored by Witek Radomski, co-founder and CTO of Enjin, a company known for its work in blockchain gaming and NFT technologies. Despite initial interest, the proposal did not gain significant traction in the Ethereum community. As a result, it was eventually moved from the main EIPs repository to the ERCs repository, indicating a shift in its status and potential for implementation.</p>\n\n<p>Currently, EIP-4400 is considered \"Moved\" and can be found in the Ethereum ERCs repository. While the concept of tokenizing physical assets remains relevant, other standards and implementations have emerged to address similar use cases. As such, EIP-4400 is not actively pursued for implementation in its original form, but its ideas may have influenced other projects",
  "EIP-4430": "<article><h1>EIP-4430: NFT Renting Standard</h1>\n\n<p>EIP-4430, proposed by Qin Zhuang, Samuele Zanella, and Loopify, aimed to establish a standard for NFT renting in the Ethereum ecosystem. The proposal introduced a mechanism for temporary transfers of NFT usage rights without transferring ownership, addressing a growing need in the NFT space for more flexible asset utilization.</p>\n\n<p>The proposal outlined interfaces for rent agreements, including duration, payment terms, and usage rights. It gained traction in the NFT community, particularly among gaming and metaverse projects where temporary asset access is valuable. However, implementation challenges and ongoing discussions about optimal renting models led to further refinements and alternative proposals.</p>\n\n<p>As of now, EIP-4430 has been moved to the Ethereum ERCs repository, indicating ongoing development and discussion. While not yet finalized, the concepts introduced in this proposal have influenced subsequent NFT renting standards and implementations, highlighting the importance of this functionality in the evolving NFT ecosystem.</p></article>",
  "EIP-4444": "<article><h1>EIP-4444: Bound Historical Data in Execution Clients</h1>\n\n<p>EIP-4444 proposes that Ethereum clients stop serving historical blockchain data older than one year on the peer-to-peer network, allowing local pruning of this data. The proposal aims to reduce disk space requirements for running nodes and simplify client implementations. It was authored by George Kadianakis, lightclient, and Alex Stokes in November 2021.</p>\n\n<p>The motivation behind EIP-4444 is to address the growing storage demands of the Ethereum blockchain, which exceeded 400GB at the time of the proposal. By allowing pruning of historical data not needed for ongoing validation, the proposal seeks to make running a node more accessible to users with limited storage capacity. It also aims to reduce network bandwidth usage as clients adopt lighter sync strategies based on Proof-of-Stake weak subjectivity assumptions.</p>\n\n<p>As of 2023, EIP-4444 remains in \"Stagnant\" status, indicating a lack of recent progress or updates. While the proposal presents potential benefits for node operators and client developers, concerns about data availability and the impact on certain applications that rely on historical data access have likely contributed to its current status. The Ethereum community continues to explore various approaches to scalability and efficiency, with historical data management remaining an important consideration.</p></article>",
  "EIP-4488": "<article><h1>EIP-4488: Transaction Calldata Gas Cost Reduction with Total Calldata Limit</h1>\n\n<p>EIP-4488, proposed by Vitalik Buterin and Ansgar Dietrichs in November 2021, aimed to reduce the gas cost of transaction calldata while implementing a cap on total transaction calldata in a block. This proposal was motivated by the urgent need to facilitate an ecosystem-wide move to rollups, which were seen as the primary scaling solution for Ethereum in the short to medium term.</p>\n\n<p>The proposal suggested decreasing the gas cost of calldata to make rollups more cost-effective, as rollups rely heavily on calldata for posting transaction data to the Ethereum mainnet. By reducing these costs, EIP-4488 aimed to significantly lower fees for users of Layer 2 solutions like Optimism and Arbitrum. However, to prevent potential network congestion, the proposal also included a limit on the total amount of calldata that could be included in a block.</p>\n\n<p>Despite initial discussions and support, EIP-4488 is currently in a \"Stagnant\" status. The Ethereum community has since focused on other scaling solutions and improvements, such as EIP-4844 (also known as proto-danksharding), which aims to introduce data blobs to increase data availability for rollups. While",
  "EIP-4494": "<article><h1>EIP-4494: ERC-4494 Moved</h1>\n\n<p>EIP-4494, originally proposed as an Ethereum Improvement Proposal (EIP) in the ERC (Ethereum Request for Comments) category, has been moved to a separate repository. This move reflects the evolving nature of Ethereum's proposal management system.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-4494.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-4494.md</a>. This relocation is part of an effort to better organize and manage ERC standards separately from core Ethereum protocol changes.</p>\n\n<p>The current status of EIP-4494 is \"Moved,\" indicating that it is no longer being considered or discussed in its original location. For the most up-to-date information on this proposal, including its purpose, technical details, and current status, interested parties should refer to the new location in the ERCs repository.</p>\n</article>",
  "EIP-4519": "<article><h1>EIP-4519: Smart Contract-Defined Account Abstraction</h1>\n\n<p>EIP-4519, proposed by Yoav Weiss and Dror Tirosh, aimed to introduce a novel approach to account abstraction in Ethereum. The proposal sought to allow smart contracts to define custom validation logic for transactions, effectively abstracting away the complexities of account management and enabling more flexible user experiences.</p>\n\n<p>The proposal gained attention for its potential to simplify onboarding processes and enhance user interactions within the Ethereum ecosystem. However, as indicated by its current status of \"Moved,\" the proposal has been relocated to the Ethereum ERCs repository. This move suggests that while the idea remains relevant, it may have evolved or been incorporated into broader discussions about account abstraction and user experience improvements in Ethereum.</p>\n\n<p>As of now, account abstraction remains an active area of research and development in Ethereum, with other proposals like EIP-4337 (Account Abstraction via Entry Point Contract specification) gaining traction. While EIP-4519 may not be directly implemented in its original form, its concepts continue to influence ongoing efforts to make Ethereum more accessible and user-friendly.</p></article>",
  "EIP-4520": "<article><h1>EIP-4520: Multi-byte opcodes prefixed by EB and EC</h1>\n\n<p>EIP-4520, proposed by Brayton Goodall and Mihir Faujdar in December 2021, aimed to reserve the opcodes 0xEB and 0xEC for extended opcode space in Ethereum. This proposal was motivated by the need to introduce new, potentially infrequently used opcodes while maintaining efficiency in code sizes for commonly used operations.</p>\n\n<p>The proposal suggested using these prefixes to create double-byte and triple-byte opcodes, allowing for up to 510 additional double-byte opcodes. This would significantly expand the available opcode space beyond the 256 limit of single-byte opcodes. The authors provided examples like 0xEC 01 for ADD and 0xEB F4 for DELEGATECALL, demonstrating how this system could be implemented.</p>\n\n<p>As of now, EIP-4520 is in a \"Stagnant\" status, indicating that it has not seen recent activity or progress towards implementation. While the proposal offered a solution to expand the opcode space, it's unclear if it will be adopted in its current form. The Ethereum community may be exploring alternative approaches or prioritizing other improvements to the protocol.</p></article>",
  "EIP-4521": "<article><h1>EIP-4521: Technical Summary</h1>\n\n<p>EIP-4521 was a proposal for a new Ethereum token standard, aimed at creating a more efficient and flexible alternative to the widely-used ERC-20 standard. The proposal sought to address some of the limitations of ERC-20, particularly in terms of gas efficiency and functionality.</p>\n\n<p>The proposal was originally authored by Gavin John, a prominent figure in the Ethereum development community. However, the EIP has since been moved from its original location in the Ethereum Improvement Proposals repository to the Ethereum Request for Comments (ERCs) repository. This move suggests that while the proposal garnered interest, it may not have achieved full consensus for implementation as an Ethereum standard.</p>\n\n<p>As of now, EIP-4521 is in a \"Moved\" status, indicating that it is no longer being actively considered in its original form. Developers interested in the concepts introduced in this proposal should refer to the updated version in the ERCs repository for the most current information and discussions surrounding this token standard proposal.</p></article>",
  "EIP-4524": "<article><h1>EIP-4524: Temporary Placeholder</h1>\n\n<p>EIP-4524 was originally proposed as an Ethereum Improvement Proposal (EIP) but has since been moved to the Ethereum Request for Comments (ERC) repository. This migration indicates that the proposal is more focused on application-level standards rather than core protocol changes.</p>\n\n<p>The proposal's content is now available at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-4524.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-4524.md</a>. This move suggests that the community or the EIP editors determined that the proposal was better suited as an ERC, which typically deals with token standards, name registries, or application-level patterns.</p>\n\n<p>As the proposal has been moved, its current status within the ERC process and its specific contents would need to be checked in the new location to provide accurate information about its purpose, history, and potential implementation status.</p></article>",
  "EIP-4527": "<article><h1>EIP-4527: Subscription Token Standard</h1>\n\n<p>EIP-4527, proposed by Sina Habibi in 2021, introduced the Subscription Token Standard for Ethereum. This standard aimed to create a framework for subscription-based services on the blockchain, allowing for recurring payments and access management. The proposal addressed the growing need for subscription models in decentralized applications (dApps) and services.</p>\n\n<p>The standard defined interfaces for creating, managing, and interacting with subscription tokens. It included functions for subscribing, canceling, and checking subscription status. While EIP-4527 gained some initial interest, it did not achieve widespread adoption in its original form. The proposal's development was likely influenced by earlier attempts to implement subscription models on Ethereum, such as EIP-1337 (Subscription Standard).</p>\n\n<p>Currently, EIP-4527 has been moved to the Ethereum ERCs repository, indicating a shift in its status. This move suggests that while the proposal is not actively pursued as an Ethereum Improvement Proposal, it may still serve as a reference or starting point for future subscription-related standards. As the DeFi and dApp ecosystems continue to evolve, alternative subscription models and standards may have emerged to address similar needs.</p>\n</article>",
  "EIP-4546": "<article><h1>EIP-4546: Tokenized NFTs</h1>\n\n<p>EIP-4546, also known as \"Tokenized NFTs,\" was a proposal aimed at creating a standard for fractionalizing non-fungible tokens (NFTs) into fungible ERC-20 tokens. The proposal was authored by Tim Daubenschütz and introduced in 2021. Its primary purpose was to address the growing demand for fractional ownership of high-value NFTs, allowing for increased liquidity and accessibility in the NFT market.</p>\n\n<p>The proposal gained initial traction due to the rising popularity of NFTs and the need for more flexible ownership models. However, as the NFT space evolved, alternative approaches to fractionalization emerged, leading to decreased interest in this specific implementation. The current status of EIP-4546 is \"Moved,\" indicating that it has been relocated to the Ethereum ERCs repository for further consideration and potential refinement.</p>\n\n<p>While EIP-4546 is not actively being implemented in its original form, the concept of NFT fractionalization remains relevant in the cryptocurrency ecosystem. Other proposals and projects have since addressed similar concerns, offering various solutions for fractional NFT ownership and trading. The relocation of this EIP suggests that the Ethereum community may revisit and potentially adapt the idea in the future as the NFT landscape continues to evolve.</p>",
  "EIP-4573": "<article><h1>EIP-4573: Procedures for the EVM</h1>\n\n<p>EIP-4573, authored by Greg Colvin, proposes introducing support for named procedures in the Ethereum Virtual Machine (EVM). This proposal aims to add structure to EVM bytecode and improve code organization and reusability.</p>\n\n<p>The EIP introduces five new EVM instructions: ENTERPROC, LEAVEPROC, CALLPROC, RETURNPROC, and FRAMEADDRESS. These instructions allow developers to define, call, and return from named procedures, as well as access their call frames in memory. The proposal also includes automatic management of memory for procedures through in-memory call frames.</p>\n\n<p>As of now, EIP-4573 is in a \"Stagnant\" status, indicating that it has not seen recent activity or updates. While the proposal offers potential benefits for code organization and safety, it requires several other EIPs as dependencies, which may contribute to its current status. The crypto community continues to discuss and evaluate the merits of this proposal in the context of ongoing EVM improvements.</p>\n</article>",
  "EIP-4626": "<article><h1>EIP-4626: Tokenized Vault Standard</h1>\n\n<p>EIP-4626, also known as the Tokenized Vault Standard, was proposed by Joey Santoro, t11s, Jet Jadeja, and others in May 2021. This proposal aimed to standardize yield-bearing vaults, addressing the fragmentation in the DeFi ecosystem by creating a unified interface for these instruments.</p>\n\n<p>The proposal gained significant traction in the Ethereum community due to its potential to improve interoperability and reduce integration complexity for developers. It defines a standard API for tokenized yield-bearing vaults, allowing for easier integration with various DeFi protocols and improved composability. EIP-4626 builds upon previous token standards like ERC-20, adding specific methods for depositing, withdrawing, and querying balances in yield-bearing vaults.</p>\n\n<p>As of now, EIP-4626 has been moved to the Ethereum Request for Comments (ERC) repository, indicating its progression towards becoming a widely adopted standard. Its current status can be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-4626.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-4626.md</a>.",
  "EIP-4671": "<article><h1>EIP-4671: Soulbound Tokens</h1>\n\n<p>EIP-4671, proposed by Tim Daubenschütz, introduced the concept of Soulbound Tokens (SBTs) to the Ethereum ecosystem. These non-transferable tokens were designed to represent non-fungible, but revocable credentials or achievements tied to a specific Ethereum address. The proposal aimed to create a standard for tokens that couldn't be transferred or sold, making them ideal for representing personal attributes, skills, or accomplishments.</p>\n\n<p>While EIP-4671 gained initial interest, it was ultimately moved to the Ethereum Request for Comments (ERC) repository. This shift reflects the proposal's evolution from a potential Ethereum Improvement Proposal to a more focused token standard discussion. The concept of Soulbound Tokens has since been further developed and expanded upon by other proposals and implementations, most notably by Vitalik Buterin and E. Glen Weyl in their paper \"Decentralized Society: Finding Web3's Soul\".</p>\n\n<p>As of now, the original EIP-4671 has been superseded by more comprehensive discussions and implementations of Soulbound Tokens. While the core idea remains relevant, the crypto community has continued to refine and expand upon the concept, exploring its potential applications in areas such as decentralized identity, reputation systems",
  "EIP-4675": "<article><h1>EIP-4675: Multi-Party Computation (MPC) Wallets</h1>\n\n<p>EIP-4675, proposed by Ido Sadeh, Yusuf Hussain, and others, aimed to standardize Multi-Party Computation (MPC) wallets in the Ethereum ecosystem. MPC wallets distribute key management among multiple parties, enhancing security by eliminating single points of failure. This proposal sought to define a common interface for MPC wallets, facilitating interoperability and wider adoption.</p>\n\n<p>The proposal's history reflects the growing interest in decentralized key management solutions. While initially gaining traction, EIP-4675 was eventually moved to the Ethereum Request for Comments (ERC) repository, indicating its shift from a core protocol change to a token standard proposal. This transition aligns with the evolving governance structure of Ethereum improvement processes.</p>\n\n<p>Currently, EIP-4675 resides in the ERC repository (https://github.com/ethereum/ercs/blob/master/ERCS/erc-4675.md). Its moved status suggests that while the concept remains relevant, the implementation details or approach may have evolved. As MPC technology continues to advance, this proposal serves as a foundation for ongoing discussions about secure, distributed key management in the Ethereum ecosystem.</p></article>",
  "EIP-4736": "<article><h1>EIP-4736: Consensus Layer Withdrawal Protection</h1>\n\n<p>EIP-4736, titled \"Consensus Layer Withdrawal Protection,\" was proposed by Benjamin Chodroff and Jim McDonald in January 2022. The proposal aims to enhance security for the BLSToExecutionChange operation in Ethereum's consensus layer, particularly when a mnemonic phrase may be compromised. This EIP addresses a critical vulnerability without altering the core consensus mechanism.</p>\n\n<p>The motivation behind EIP-4736 stems from the inability of the consensus layer to differentiate between legitimate and illegitimate key holders if a mnemonic phrase is compromised. The proposal suggests utilizing on-chain evidence, such as the execution layer deposit address and signed message history, to establish a social consensus favoring legitimate mnemonic holders in a potential race condition against attackers.</p>\n\n<p>Currently, EIP-4736 has a status of \"Final,\" indicating its acceptance and readiness for implementation. While it doesn't provide absolute protection, it offers a significant improvement in security for validator withdrawals, especially in the context of the Capella hard fork. This proposal highlights the ongoing efforts to enhance Ethereum's security and user protection in the face of evolving threats.</p>\n</article>",
  "EIP-4747": "<article><h1>EIP-4747: Simplify EIP-161</h1>\n\n<p>EIP-4747 was proposed by Peter Davies in February 2022 to simplify and clarify EIP-161, which deals with state clearing for empty accounts. The main motivation was to remove requirements for implementers to support edge cases that are impossible on Ethereum mainnet, taking advantage of the fact that all remaining empty accounts were removed in block 14049881.</p>\n\n<p>Specifically, EIP-4747 aimed to retroactively replace EIP-161 with simpler rules: setting the nonce to 1 when creating an account, and treating all empty accounts as if they do not exist during EVM execution. This would allow implementers who don't need to support historical blocks to avoid implementing state clearing entirely.</p>\n\n<p>As of 2023, EIP-4747 remains in \"Stagnant\" status, meaning it has not progressed through the EIP process. While it offered potential simplification, the Ethereum community likely prioritized other protocol changes over modifying a long-established EIP like 161. Implementers today should still refer to the original EIP-161 for guidance on empty account handling.</p>\n</article>",
  "EIP-4750": "<article><h1>EIP-4750: EOF - Functions</h1>\n\n<p>EIP-4750 proposes adding support for separate function sections in EOF-formatted (EIP-3540) bytecode, along with new CALLF and RETF opcodes for calling and returning from these functions. It was authored by Andrei Maiboroda, Alex Beregszaszi, and Paweł Bylica in January 2022.</p>\n\n<p>The key motivation is to remove the need for dynamic jumps in EVM code, which are difficult to analyze and optimize. By introducing explicit function sections and call/return opcodes, it enables static analysis and potential optimizations of EVM code. This builds on previous proposals like EIP-4200 for static jumps, aiming to eliminate dynamic jumps entirely.</p>\n\n<p>As of 2023, EIP-4750 is still in Review status. If implemented, it would be a significant change to the EVM execution model, enabling more optimization opportunities and potentially reducing gas costs for function calls. However, it requires other foundational EOF proposals to be implemented first. The proposal remains under active discussion in the Ethereum community.</p>\n\n</article>",
  "EIP-4758": "<article><h1>EIP-4758: Deactivate SELFDESTRUCT</h1>\n\n<p>EIP-4758, proposed by Guillaume Ballet, Vitalik Buterin, and Dankrad Feist in February 2022, aims to replace the SELFDESTRUCT opcode with a new SENDALL opcode. The primary motivation is to prepare Ethereum for future upgrades, particularly the transition to Verkle trees, which would make the complete removal of an account's code and storage challenging.</p>\n\n<p>The proposal suggests renaming SELFDESTRUCT to SENDALL and limiting its functionality to only transferring all Ether from the contract to the caller, without destroying the contract's code or storage. This change would maintain compatibility with applications that use SELFDESTRUCT solely for fund retrieval while eliminating the complexities associated with full contract destruction.</p>\n\n<p>As of now, EIP-4758 is in a \"Stagnant\" status, indicating that it hasn't seen recent activity or updates. While the proposal addresses an important technical consideration for Ethereum's future scalability, its implementation timeline remains uncertain. The Ethereum community continues to debate the best approach to handle the SELFDESTRUCT opcode's limitations in light of upcoming protocol changes.</p>\n</article>",
  "EIP-4760": "<article><h1>EIP-4760: SELFDESTRUCT Bomb</h1>\n\n<p>EIP-4760, proposed by Guillaume Ballet, Vitalik Buterin, and Dankrad Feist in February 2022, aims to address the challenges posed by the SELFDESTRUCT opcode in Ethereum. The proposal suggests renaming SELFDESTRUCT to SENDALL and modifying its functionality to only send all Ether in the account to the caller, without destroying the contract.</p>\n\n<p>The motivation behind this EIP is the incompatibility of SELFDESTRUCT with future Ethereum improvements, particularly Verkle trees. The current implementation of SELFDESTRUCT requires significant state changes, which would be problematic in a Verkle tree structure where account data is distributed across multiple keys. To ensure a smooth transition, the proposal includes a phased approach with exponentially increasing gas costs for the opcode, giving developers time to adapt their contracts.</p>\n\n<p>As of now, EIP-4760 is in a \"Stagnant\" status, indicating that it has not seen recent activity or updates. While the proposal addresses an important technical challenge, its implementation timeline and final form remain uncertain. Developers should be aware of this potential change and consider alternatives to SELFDESTRUCT in their smart contract designs to future-proof their applications.</p>\n</article>",
  "EIP-4762": "<article><h1>EIP-4762: Statelessness Gas Cost Changes</h1>\n\n<p>EIP-4762, titled \"Statelessness gas cost changes,\" was proposed in February 2022 by a group of prominent Ethereum researchers and developers including Guillaume Ballet, Vitalik Buterin, and Dankrad Feist. The proposal aims to modify Ethereum's gas schedule to better reflect the costs associated with creating witnesses in a stateless or near-stateless Ethereum model.</p>\n\n<p>The primary motivation behind EIP-4762 is to prepare the Ethereum network for the future introduction of Verkle trees, a cryptographic accumulator that could significantly reduce the size of proofs needed to verify the state. By adjusting gas costs, the proposal incentivizes both dApp developers and client developers to adapt their practices and database layouts in anticipation of this major change. This preparatory step is crucial to ensure a smooth transition and to mitigate potential denial-of-service (DoS) attacks that could arise from misaligned incentives.</p>\n\n<p>As of its last update, EIP-4762 remains in Draft status. Its implementation would represent a significant change to Ethereum's core protocol, requiring careful consideration and testing. The proposal includes specific changes to gas costs for various operations and provides helper functions for calculating storage slot tree keys. While it's an important step towards Ethereum",
  "EIP-4788": "<article><h1>EIP-4788: Beacon Block Root in the EVM</h1>\n\n<p>EIP-4788, titled \"Beacon block root in the EVM,\" is a significant Ethereum Improvement Proposal that aims to bridge the gap between Ethereum's execution layer and consensus layer. Proposed by a team of prominent Ethereum developers including Alex Stokes, Ansgar Dietrichs, Danny Ryan, Martin Holst Swende, and lightclient, this EIP was designed to expose beacon chain roots within the Ethereum Virtual Machine (EVM).</p>\n\n<p>The proposal's primary purpose is to commit the hash tree root of each beacon chain block to the corresponding execution payload header and store these roots in a smart contract. This integration allows for trust-minimized access to the consensus layer from within the EVM, enabling a wide range of use cases such as improved staking pools, restaking constructions, smart contract bridges, and MEV mitigations.</p>\n\n<p>EIP-4788 has reached \"Final\" status, indicating its acceptance and readiness for implementation. The proposal specifies a fork timestamp of 1710338135, suggesting a planned activation date. By providing this crucial link between Ethereum's layers, EIP-4788 represents a significant step forward in Ethereum's evolving architecture, potentially enabling more sophisticated and secure decentralized applications that can leverage consensus layer",
  "EIP-4799": "<article><h1>EIP-4799: Smart Derivative Contract</h1>\n\n<p>EIP-4799, proposed by Dominic Steil in March 2022, aimed to introduce a standard interface for smart derivative contracts on the Ethereum blockchain. The proposal sought to define a set of functions and events that would allow for the creation, management, and settlement of derivative contracts in a decentralized manner.</p>\n\n<p>The motivation behind this EIP was to establish a common framework for building and interacting with derivative contracts, potentially fostering greater interoperability and liquidity in the DeFi ecosystem. However, the proposal did not gain significant traction in its original form and was subsequently moved to the Ethereum Request for Comments (ERC) repository for further refinement and discussion.</p>\n\n<p>As of now, EIP-4799 has been moved to the Ethereum ERCs repository, indicating that it is no longer being actively considered as an Ethereum Improvement Proposal. The current status suggests that while the concept of standardizing smart derivative contracts remains relevant, the specific implementation proposed in EIP-4799 may require further development or may have been superseded by other, more comprehensive proposals in the evolving DeFi landscape.</p></article>",
  "EIP-4803": "<article><h1>EIP-4803: Limiting Transaction Gas to 2^63-1</h1>\n\n<p>EIP-4803, proposed by Alex Beregszaszi in February 2022, aims to introduce a consensus-level limit on transaction gas to a maximum of 2^63-1 (9,223,372,036,854,775,807). The proposal seeks to standardize gas limits across Ethereum clients, as different implementations have handled this value inconsistently.</p>\n\n<p>The motivation behind this EIP is to bring clarity and consistency to the gas limit field in transactions. While the field was originally specified as an arbitrary-length unsigned integer, various clients have implemented their own limits. By setting a reasonable consensus-level limit, EIP-4803 aims to prevent potential issues and improve interoperability between different Ethereum implementations.</p>\n\n<p>Currently, the proposal is in a \"Stagnant\" status, indicating that it has not seen recent activity or progress. While the proposed limit of 2^63-1 would allow for gas values to be represented as signed integers (facilitating simpler \"out of gas\" checks), the practical impact of this change is expected to be minimal. Most existing implementations already limit gas to 256 bits or handle it as a 64-bit value internally, making this proposal more of a formalization of existing practices rather than a significant change to",
  "EIP-4804": "<article><h1>EIP-4804: Web3 URL to EVM Call Message Translation</h1>\n\n<p>EIP-4804, proposed by Qi Zhou, Chao Pi, and Wenchao Xie in March 2022, aimed to standardize a method for translating Web3 URLs into EVM call messages. This proposal sought to bridge the gap between traditional web technologies and blockchain interactions, making it easier for users to access decentralized applications (dApps) through familiar URL structures.</p>\n\n<p>The proposal's main goal was to enable direct interactions with smart contracts using standard web browsers, without the need for specialized wallet extensions or dApp-specific interfaces. This would potentially lower the barrier to entry for new users in the blockchain space and streamline the development process for dApp creators. While the proposal gained some attention in the Ethereum community, it was ultimately moved to the Ethereum Request for Comments (ERC) repository for further refinement and discussion.</p>\n\n<p>As of now, EIP-4804 has been relocated to the Ethereum ERCs GitHub repository, indicating that it is still under consideration and development. The current status suggests that while the proposal has merit, it may require additional work or community consensus before potential implementation. Developers and stakeholders interested in improving Web3 accessibility should keep an eye on this ERC for future updates and potential integration into the Ethereum ecosystem.</p></article",
  "EIP-4824": "<article><h1>EIP-4824: Common Interfaces for DAOs</h1>\n\n<p>EIP-4824, proposed by Jorge Izquierdo and others in 2022, aimed to establish a standard for Decentralized Autonomous Organizations (DAOs) to expose common interfaces. The proposal sought to improve interoperability between DAOs and various tools and platforms in the Ethereum ecosystem. By defining a set of common interfaces, EIP-4824 intended to make it easier for developers to create applications that could interact with multiple DAOs without requiring custom integrations for each one.</p>\n\n<p>The proposal gained traction in the DAO community, as it addressed a growing need for standardization in the rapidly evolving DAO landscape. However, as indicated by its current status, EIP-4824 has been moved from its original location in the Ethereum Improvement Proposals repository to the Ethereum Request for Comments (ERC) repository. This move suggests that the proposal is being further refined and discussed within the community before potential implementation.</p>\n\n<p>As of now, EIP-4824 can be found in the Ethereum Request for Comments repository, indicating ongoing development and discussion. While the proposal has not yet been finalized or implemented, it represents an important step towards creating a more unified and interoperable DAO ecosystem within Ethereum. Developers and DAO enthusiasts should keep an eye on the ERC",
  "EIP-4834": "<article><h1>EIP-4834: Token Holdings Enumeration</h1>\n<p>EIP-4834, originally proposed by Mikhail Vladimirov and Lev Khomenko, aimed to introduce a standard interface for enumerating token holdings across multiple contracts. This proposal was designed to address the challenge of efficiently querying an account's token balances across various ERC-20 and ERC-721 contracts, which was a common requirement for wallets and DApps.</p>\n<p>The proposal suggested implementing a new contract that would maintain a registry of token contracts and provide methods for querying an account's holdings across these contracts. This would significantly simplify the process of retrieving token balances, reducing the need for multiple API calls and improving overall efficiency for applications dealing with multiple token types.</p>\n<p>As of now, EIP-4834 has been moved to the Ethereum ERCs repository, indicating that it has transitioned from a draft proposal to a more formalized standard. This move suggests ongoing development and consideration within the Ethereum community. However, its current status and level of adoption in production environments would require further investigation to determine if it has been widely implemented or if alternative solutions have emerged to address the same problem space.</p>\n</article>",
  "EIP-4844": "<article><h1>EIP-4844: Shard Blob Transactions</h1>\n\n<p>EIP-4844, titled \"Shard Blob Transactions,\" was proposed in February 2022 by a group of prominent Ethereum developers including Vitalik Buterin, Dankrad Feist, and others. The proposal aims to introduce a new transaction format for \"blob-carrying transactions\" that can contain large amounts of data not accessible by EVM execution, but whose commitment can be accessed. This proposal is designed to be compatible with future full sharding implementations.</p>\n\n<p>The primary motivation behind EIP-4844 is to address the urgent need for scaling solutions in Ethereum, particularly to support rollups. While rollups have significantly reduced transaction fees compared to the base layer, there is still room for improvement. By introducing blob-carrying transactions, EIP-4844 seeks to further reduce costs for rollups and improve Ethereum's data availability, thus enhancing its overall scalability.</p>\n\n<p>As of now, EIP-4844 has reached \"Final\" status, indicating its readiness for implementation. This proposal is considered a crucial step towards Ethereum's long-term scalability roadmap, bridging the gap between the current state of Ethereum and its future sharded architecture. It has garnered significant support within the Ethereum community and is expected to be a key component in the",
  "EIP-4863": "<article><h1>EIP-4863: Beacon Chain Push Withdrawals</h1>\n\n<p>EIP-4863 was proposed in February 2022 by Alex Stokes and Danny Ryan to introduce a new transaction type for processing validator withdrawals from Ethereum's beacon chain to the execution layer. The proposal aimed to implement a \"push-based\" system where withdrawals would be automatically processed in execution blocks as soon as they were dequeued from the beacon chain.</p>\n\n<p>This proposal was motivated by the need to facilitate validator withdrawals after Ethereum's transition to proof-of-stake. While it offered tighter integration of withdrawals into the core protocol compared to \"pull-based\" alternatives, it also required more changes to the protocol itself. The push-based approach aimed to ensure withdrawals were processed promptly and consistently.</p>\n\n<p>However, EIP-4863 is currently in \"Stagnant\" status, indicating it has not seen recent activity or updates. The Ethereum community ultimately implemented validator withdrawals through a different mechanism as part of the Shanghai/Capella upgrade in April 2023. This upgrade enabled withdrawals without requiring the specific transaction type proposed in EIP-4863, effectively superseding this proposal with a different implementation approach.</p></article>",
  "EIP-4881": "<article><h1>EIP-4881: Deposit Contract Snapshot Interface</h1>\n\n<p>EIP-4881 was proposed by Mark Mackey in January 2021 to establish a standard format for transmitting a compressed snapshot of the Ethereum 2.0 deposit contract Merkle tree. The goal was to allow newly syncing consensus clients to reconstruct the deposit tree much faster during weak subjectivity sync, rather than having to download all historical deposits.</p>\n\n<p>The proposal defines a compressed snapshot format that allows clients to prune older deposits no longer needed for consensus participation. This addresses issues with the previous approach where clients had to store every deposit log since the launch of the deposit contract, leading to increased storage requirements and sync times.</p>\n\n<p>EIP-4881 reached Final status, meaning it was accepted and implemented. It helps optimize the syncing process for new Ethereum consensus clients and enables more efficient pruning of historical deposit data. The proposal demonstrates ongoing efforts to improve Ethereum's scalability and performance as the network continues to grow.</p>\n</article>",
  "EIP-4883": "<article><h1>EIP-4883: Precompile for Starknet-Compatible Hashing</h1>\n\n<p>EIP-4883 was a proposal to introduce a precompiled contract for Starknet-compatible hashing on the Ethereum network. The proposal aimed to improve efficiency and reduce gas costs for operations involving Starknet's specific hashing algorithm. Starknet is a Layer 2 scaling solution for Ethereum, and this EIP was intended to enhance interoperability between Ethereum and Starknet.</p>\n\n<p>The proposal was initially authored by members of the StarkWare team, who are behind the development of Starknet. While it generated some interest in the Ethereum community, particularly among those working on Layer 2 solutions, the proposal did not gain widespread traction. As Layer 2 technologies evolved and other scaling solutions emerged, the focus shifted away from this specific precompile.</p>\n\n<p>Currently, EIP-4883 has been moved to the Ethereum ERCs repository, indicating that it is no longer actively pursued as an Ethereum Improvement Proposal. This move suggests that the Ethereum community and core developers decided that implementing this specific precompile was not a priority for the main Ethereum protocol. Instead, Layer 2-specific optimizations are being handled at the Layer 2 level or through other interoperability solutions.</p",
  "EIP-4885": "<article><h1>EIP-4885: Subscription NFTs</h1>\n\n<p>EIP-4885, proposed by Raphael Roullet, introduced the concept of Subscription NFTs. This proposal aimed to create a standardized way to represent time-limited access rights as non-fungible tokens (NFTs) on the Ethereum blockchain. The idea was to enable recurring payments for digital services, content, or physical goods using smart contracts and NFTs.</p>\n\n<p>The proposal suggested extending the ERC-721 standard to include expiration dates and automatic renewal mechanisms. This would allow for the creation of NFTs that represent subscriptions, with the ability to manage access rights based on time and payment status. However, the proposal didn't gain widespread adoption in its original form.</p>\n\n<p>As of now, EIP-4885 has been moved to the Ethereum ERCs repository, indicating that it's no longer being actively considered as an Ethereum Improvement Proposal. While the concept of subscription-based NFTs remains relevant, alternative implementations and standards have emerged to address similar use cases in the evolving DeFi and NFT ecosystems.</p>\n</article>",
  "EIP-4886": "<article><h1>EIP-4886: Payload-Bearing Token Standard</h1>\n\n<p>EIP-4886, also known as the Payload-Bearing Token Standard, was proposed to enhance the functionality of tokens on the Ethereum blockchain. This proposal aimed to create a standard for tokens that could carry additional data or \"payload\" along with their basic transfer functions. The concept was designed to enable more complex token interactions and support use cases where additional information needed to be associated with token transfers.</p>\n\n<p>The proposal was initially drafted by the Ethereum community to address limitations in existing token standards like ERC-20 and ERC-721. While these standards revolutionized token creation and transfer, they lacked native support for attaching metadata or additional instructions to token transactions. EIP-4886 sought to fill this gap, potentially opening up new possibilities for decentralized applications, particularly in areas like supply chain management, digital rights management, and complex financial instruments.</p>\n\n<p>As of now, EIP-4886 has been moved from its original location to the Ethereum ERCs repository. This relocation suggests that the proposal is still under consideration and development within the Ethereum community. However, its current status and level of adoption or implementation are not immediately clear from the available information. Developers and stakeholders interested in payload-bearing tokens should refer to the updated document in the ERCs repository for the most current information on this proposal",
  "EIP-4895": "<article><h1>EIP-4895: Beacon Chain Push Withdrawals as Operations</h1>\n\n<p>EIP-4895, proposed by Alex Stokes and Danny Ryan in March 2022, introduces a crucial mechanism for validator withdrawals from Ethereum's beacon chain to the EVM. This proposal was designed to facilitate the transition from Ethereum's Proof-of-Work to Proof-of-Stake consensus mechanism, known as \"The Merge.\"</p>\n\n<p>The key innovation of EIP-4895 is its \"push\"-based architecture for processing withdrawals. This approach requires withdrawals to be processed in the execution layer as soon as they are dequeued from the consensus layer, introducing a new \"system-level\" operation type. This design separates validator withdrawals from user-level transactions, simplifying testing and enhancing security by reducing potential interaction effects.</p>\n\n<p>EIP-4895 has been implemented and is currently in \"Final\" status. It played a significant role in the Shanghai/Capella upgrade, which enabled staked ETH withdrawals and marked a major milestone in Ethereum's transition to a fully functional Proof-of-Stake network. The proposal's implementation has been crucial in maintaining Ethereum's security and decentralization while allowing validators to access their staked funds.</p></article>",
  "EIP-4906": "<article><h1>EIP-4906: ERC-721 Metadata Update Extension</h1>\n\n<p>EIP-4906, proposed by Nathan Cheng, Tim Kang, and James Grimmelmann in April 2022, introduced an extension to the ERC-721 standard for NFTs. Its primary purpose was to define a standard way for smart contracts to notify listeners when the metadata of an NFT has been updated. This proposal addressed a significant gap in the original ERC-721 standard, which lacked a mechanism for signaling metadata changes.</p>\n\n<p>The proposal quickly gained traction in the NFT community, particularly among developers working on dynamic or evolving NFTs. It introduced a new event, MetadataUpdate, which smart contracts could emit when an NFT's metadata changed. This allowed applications and marketplaces to efficiently track and reflect updates to NFT metadata without constant polling or complex off-chain solutions.</p>\n\n<p>As of now, EIP-4906 has been moved to the Ethereum ERCs repository, indicating its acceptance and incorporation into the broader Ethereum standards. Its implementation has become widespread, especially in projects involving dynamic NFTs or those requiring frequent metadata updates. The proposal's success has led to improved user experiences in NFT marketplaces and applications, enabling real-time reflection of NFT changes without compromising blockchain efficiency.</p>\n</article>",
  "EIP-4907": "<article><h1>EIP-4907: Rental NFTs</h1>\n\n<p>EIP-4907, proposed by Anders Qvist and Zach Horn in April 2022, introduces a dual role system for NFTs, allowing for time-limited \"user\" rights alongside permanent \"owner\" rights. This proposal addresses the growing need for rental functionality in the NFT space, particularly for gaming and metaverse applications.</p>\n\n<p>The proposal extends the ERC-721 standard by adding a \"user\" role with an expiration time, enabling temporary transfers of NFT utility without changing ownership. This allows for use cases such as renting out in-game items or metaverse land parcels for a specified duration. The proposal quickly gained traction in the community due to its practical applications and relatively simple implementation.</p>\n\n<p>As of now, EIP-4907 has been moved to the Ethereum ERCs repository, indicating its progression towards wider acceptance. While not yet finalized, it has inspired several implementations and variations in various blockchain projects. The proposal's elegant solution to NFT rentals makes it a strong candidate for adoption, though developers should stay updated on its status and potential modifications as the standard evolves.</p>\n</article>",
  "EIP-4910": "<article><h1>EIP-4910: Royalty Bearing NFTs</h1>\n<p>EIP-4910, proposed by David Huber, Tim Daubenschütz, and Raz Rosenblum in February 2022, aimed to introduce a standard for royalty-bearing Non-Fungible Tokens (NFTs) on the Ethereum blockchain. The proposal sought to address the limitations of existing royalty implementations by introducing a more robust and flexible system for managing royalties across different marketplaces and platforms.</p>\n<p>The core idea behind EIP-4910 was to enable NFT creators to define and enforce royalties directly within the smart contract, ensuring that royalties would be paid regardless of where the NFT was traded. This proposal gained attention in the NFT community as it promised to provide a more reliable mechanism for artists and creators to receive ongoing compensation for their work.</p>\n<p>As of now, EIP-4910 has been moved to the Ethereum ERCs repository, indicating that it is still under consideration but not yet finalized or implemented. The proposal's current status suggests that while it has merit, further discussion and potential refinements may be necessary before it can be widely adopted. Developers and stakeholders interested in NFT royalties should monitor the proposal's progress in its new location for potential updates or implementation guidelines.</p></article>",
  "EIP-4931": "<article><h1>EIP-4931: A Brief Technical Summary</h1>\n\n<p>EIP-4931 was an Ethereum Improvement Proposal that has been moved to the Ethereum Request for Comments (ERC) repository. The proposal's specific details are now maintained at https://github.com/ethereum/ercs/blob/master/ERCS/erc-4931.md. This move indicates that the proposal is more closely related to application-level standards rather than core protocol changes.</p>\n\n<p>While the exact content of EIP-4931 is not provided in the given context, its categorization as an ERC suggests it likely pertains to token standards, wallet formats, name registries, or other application-level conventions within the Ethereum ecosystem. The relocation of this proposal to the ERC repository reflects the Ethereum community's ongoing efforts to organize and streamline the proposal process, separating core protocol improvements from application-level standards.</p>\n\n<p>As of now, EIP-4931 is in a \"Moved\" status, which means it is no longer being tracked in the main EIP repository. For the most up-to-date information on this proposal, including its purpose, history, and current status, interested parties should refer to the ERC repository link provided.</p></article>",
  "EIP-4938": "<article><h1>EIP-4938: Removal of GetNodeData</h1>\n\n<p>EIP-4938, proposed by Marius van der Wijden, Felix Lange, and Gary Rong in March 2022, aims to remove the GetNodeData and NodeData messages from the Ethereum Wire Protocol. These messages were originally introduced in eth/63 to support \"fast sync\" by allowing clients to download state trie nodes and contract code by hash without executing all blocks.</p>\n\n<p>The primary motivation for this proposal is to eliminate the requirement for clients to store state as a hash-to-trie-node mapping, which can be resource-intensive. Some client implementations already cannot serve GetNodeData requests due to incompatible state storage methods. Additionally, the proposal aligns with the Ethereum network's evolution towards snap sync and other more efficient synchronization methods.</p>\n\n<p>EIP-4938 has been finalized and implemented in major Ethereum clients. It represents a step towards optimizing the Ethereum protocol by removing outdated features and reducing unnecessary complexity in client implementations. The removal of these messages is expected to have minimal impact on network functionality while potentially improving client performance and reducing storage requirements.</p>\n</article>",
  "EIP-4944": "<article><h1>EIP-4944: Semantic Run-level Interfaces for Smart Contracts</h1>\n\n<p>EIP-4944, proposed by Gavin John in April 2022, aimed to introduce semantic run-level interfaces for smart contracts on the Ethereum blockchain. The proposal sought to standardize a way for contracts to declare their operational state, similar to run levels in Unix-like operating systems. This would allow for more granular control over contract execution and improved management of contract lifecycles.</p>\n\n<p>While the proposal generated some interest within the Ethereum developer community, it did not gain significant traction in its original form. As a result, EIP-4944 was moved from the main Ethereum Improvement Proposals repository to the Ethereum Request for Comments (ERCs) repository. This move suggests that while the idea had merit, it required further refinement or community consensus before potentially being considered for implementation.</p>\n\n<p>As of now, EIP-4944 remains in the ERCs repository, indicating that it is still open for discussion and potential future development. However, its current status as \"Moved\" implies that it is not actively being considered for immediate implementation in the Ethereum protocol. Developers interested in contract lifecycle management may want to explore alternative approaches or contribute to the ongoing discussion around EIP-4944 in its new location.</p>\n</article>",
  "EIP-4950": "<article><h1>EIP-4950: NFT Metadata Extension for Specialized Assets</h1>\n\n<p>EIP-4950 was proposed as an extension to the ERC-721 standard, aiming to provide a standardized way to represent metadata for specialized non-fungible tokens (NFTs). The proposal was authored by Zainan Victor Zhou and introduced in May 2022. It sought to address the limitations of existing metadata standards for NFTs that represent complex or specialized assets, such as real estate, vehicles, or financial instruments.</p>\n\n<p>The proposal suggested a flexible metadata structure that could accommodate various asset types while maintaining compatibility with existing NFT standards. It aimed to enhance interoperability between different platforms and improve the overall utility of NFTs for representing real-world assets. However, the proposal did not gain significant traction in its original form.</p>\n\n<p>As of now, EIP-4950 has been moved to the Ethereum ERCs repository, indicating a shift in its status. This move suggests that while the core idea may still be relevant, it may require further refinement or integration with other proposals. The current status and any ongoing development can be found in the new location: https://github.com/ethereum/ercs/blob/master/ERCS/erc-4950.md.</p>\n</article>",
  "EIP-4955": "<article><h1>EIP-4955: Moved to ERC Repository</h1>\n\n<p>EIP-4955 was originally proposed as an Ethereum Improvement Proposal (EIP) but has since been moved to the Ethereum Request for Comments (ERC) repository. This move indicates that the proposal is more focused on application-level standards rather than core protocol changes.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-4955.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-4955.md</a>. This relocation suggests that the Ethereum community deemed it more appropriate as an ERC, which typically deals with token standards, wallets, and other application-layer conventions.</p>\n\n<p>For the most up-to-date information on ERC-4955, including its purpose, history, and current status, it is recommended to refer to the official ERC document in the Ethereum ERCs repository.</p></article>",
  "EIP-4972": "<article><h1>EIP-4972: Simplified ERC-721 Royalty Standard</h1>\n\n<p>EIP-4972 was proposed as a simplified royalty standard for ERC-721 tokens, aiming to address the complexities and limitations of existing royalty implementations. The proposal was originally authored by Zach Burks, James Morgan, and Blaine Malone, key figures in the NFT space, with the goal of creating a more straightforward and efficient royalty mechanism for non-fungible tokens.</p>\n\n<p>The proposal sought to introduce a standardized way to handle royalties for ERC-721 tokens, allowing for easier integration across various marketplaces and platforms. It aimed to simplify the royalty distribution process while maintaining flexibility for creators and platforms. However, the proposal did not gain widespread adoption in its original form.</p>\n\n<p>Currently, EIP-4972 has been moved to the Ethereum ERCs repository, indicating a shift in its status. While the proposal itself may not have been implemented as initially conceived, its concepts have likely influenced subsequent royalty standards and discussions within the Ethereum community. For the most up-to-date information on NFT royalty standards, it's recommended to refer to more recent proposals or implemented solutions in the ecosystem.</p>\n</article>",
  "EIP-4973": "<article><h1>EIP-4973: Account-bound Tokens (ABTs)</h1>\n\n<p>EIP-4973, proposed by Tim Daubenschütz, Raphael Roullet, and others, introduced the concept of Account-bound Tokens (ABTs). These non-transferable tokens are designed to represent achievements, credentials, or affiliations that are intrinsically tied to a specific Ethereum account. The proposal aimed to create a standard for tokens that cannot be transferred or sold, addressing use cases where permanent association with an account is crucial.</p>\n\n<p>The development of ABTs was motivated by the need for blockchain-based representations of real-world credentials, such as diplomas, certifications, or memberships. Unlike traditional NFTs, ABTs cannot be transferred, ensuring that the associated achievement or status remains with the original recipient. This proposal gained traction in the Ethereum community for its potential applications in decentralized identity and reputation systems.</p>\n\n<p>As of now, EIP-4973 has been moved to the Ethereum ERCs repository, indicating its progression in the standardization process. While not yet finalized, the concept of Account-bound Tokens has influenced discussions and developments in the broader blockchain ecosystem, particularly in areas related to decentralized identity and verifiable credentials. The current status suggests ongoing refinement and consideration within the Ethereum community.</p>\n</article>",
  "EIP-4974": "<article><h1>EIP-4974: Human-Readable Off-Chain Data Storage</h1>\n\n<p>EIP-4974 was proposed to address the need for a standardized way to store and retrieve human-readable off-chain data associated with Ethereum smart contracts. The proposal aimed to create a simple and efficient method for developers to link additional information to their contracts without incurring high gas costs for on-chain storage.</p>\n\n<p>The proposal was initially drafted by Tim Daubenschütz and gained traction within the Ethereum development community. It suggested using IPFS (InterPlanetary File System) as the primary off-chain storage solution, with a standardized JSON format for storing metadata. This approach would allow for easy retrieval and parsing of contract-related information, such as detailed descriptions, images, or other media.</p>\n\n<p>As of now, EIP-4974 has been moved to the Ethereum ERCs repository, indicating its transition from a proposal to a more formalized standard. While its current status suggests ongoing development and discussion, the core concept of standardizing off-chain data storage remains relevant in the Ethereum ecosystem. Developers and projects continue to explore efficient ways to manage and access additional contract data, balancing the need for transparency with practical considerations of blockchain storage limitations.</p>\n</article>",
  "EIP-4987": "<article><h1>EIP-4987: ERC-721 Consumable Extension</h1>\n\n<p>EIP-4987, proposed by Bernhard Reslhuber, Christoph Müller, and Nils Bayldon in March 2022, aimed to extend the popular ERC-721 standard for non-fungible tokens (NFTs) by introducing a \"consumable\" feature. This proposal would allow NFTs to have a limited number of uses or a specific lifespan, after which they would be considered \"consumed\" or expired.</p>\n\n<p>The motivation behind this proposal was to enable new use cases for NFTs, such as limited-use tickets, time-bound access passes, or consumable in-game items. By adding methods to check and update the consumption status of an NFT, developers could create more dynamic and interactive experiences within the Ethereum ecosystem.</p>\n\n<p>As of now, EIP-4987 has been moved to the Ethereum ERCs repository, indicating that it is still under consideration but not yet finalized or implemented. The proposal's current status suggests that while it has generated interest, it may require further refinement or community consensus before potential adoption.</p></article>",
  "EIP-5": "<article><h1>EIP-5: Gas Usage for RETURN and CALL*</h1>\n\n<p>EIP-5, proposed by Christian Reitwiessner in November 2015, addressed a significant limitation in the Ethereum Virtual Machine (EVM) regarding the return of dynamically-sized data from contract calls. The proposal aimed to make it possible to efficiently call functions that return strings and other dynamically-sized arrays.</p>\n\n<p>Prior to EIP-5, when calling another contract or function within the EVM, developers had to specify the size of the output in advance. This led to inefficient gas usage, as gas was charged for memory that might not be used. EIP-5 proposed a solution where gas would only be charged for memory actually written to at the time the CALL returns, making it more cost-effective to handle dynamically-sized return data.</p>\n\n<p>The proposal was accepted and implemented, becoming a final standard. It changed the gas and memory semantics for CALL, CALLCODE, and DELEGATECALL operations, significantly improving the flexibility and efficiency of inter-contract communications in Ethereum. This improvement has been crucial for the development of more complex and data-intensive smart contracts on the Ethereum platform.</p>\n</article>",
  "EIP-5000": "<article><h1>EIP-5000: MULDIV Instruction</h1>\n\n<p>EIP-5000 proposes the introduction of a new EVM instruction called MULDIV, designed to perform high-precision fixed-point arithmetic operations. Authored by Harikrishnan Mulackal, Alex Beregszaszi, and Paweł Bylica, this proposal aims to simplify and optimize common mathematical operations in smart contracts, particularly for financial applications and cryptographic computations.</p>\n\n<p>The MULDIV instruction would perform the operation ((x * y) / z) % 2^256 using 512-bit precision, with a special case for z = 0 to calculate (x * y) / 2^256. This single instruction would replace complex workarounds currently used for fixed-point multiplication and division, potentially reducing gas costs and improving contract efficiency. It also offers benefits for cryptographic applications by enabling full-precision 256x256->512 multiplication.</p>\n\n<p>As of the last update, the proposal's status is listed as \"Stagnant,\" indicating that it has not seen recent activity or progress towards implementation. While the instruction could offer significant advantages for certain use cases, it appears that the Ethereum community has not reached a consensus on its adoption. Developers and researchers continue to discuss potential improvements and alternatives for efficient fixed-point arithmetic in the E",
  "EIP-5003": "<article><h1>EIP-5003: Insert Code into EOAs with AUTHUSURP</h1>\n\n<p>EIP-5003 proposes a new opcode called AUTHUSURP that would allow deploying code to an existing externally owned account (EOA) address, effectively converting it to a contract account. This proposal was authored by Dan Finlay and Sam Wilson in March 2022 to enable migrating EOAs to more flexible smart contract wallets.</p>\n\n<p>The motivation behind EIP-5003 was to allow existing EOA addresses, which hold significant value but have limited functionality, to gain the benefits of contract accounts like key rotation, batched transactions, and custom authentication. It builds on EIP-3074 (AUTH opcode) and EIP-3607 (Reject transactions from senders with deployed code) to securely transition EOAs to contract accounts.</p>\n\n<p>Currently, EIP-5003 is in \"Stagnant\" status, meaning development has stalled. While it offered an interesting approach to account abstraction, other proposals like EIP-4337 (Account Abstraction via Entry Point Contract) have gained more traction in the Ethereum community for enabling smart contract wallet functionality. The core idea of allowing EOAs to upgrade to contracts remains relevant, but alternative implementations are being explored.</p>\n\n</article>",
  "EIP-5005": "<article><h1>EIP-5005: Modular Smart Contract Accounts</h1>\n\n<p>EIP-5005, proposed by Konrad Stieber, aimed to introduce a standard for modular smart contract accounts. This proposal sought to enhance the flexibility and upgradability of smart contract wallets by defining a set of interfaces for modular components. The goal was to allow for easier customization and feature addition to smart contract accounts without compromising security or requiring complete contract redeployment.</p>\n\n<p>The proposal gained traction in the Ethereum community due to its potential to streamline the development and maintenance of complex smart contract wallets. It addressed the growing need for more adaptable account structures in decentralized applications. However, as indicated by its current status, EIP-5005 has been moved from the main Ethereum Improvement Proposals repository to the Ethereum Request for Comments (ERCs) repository.</p>\n\n<p>The relocation of EIP-5005 to the ERCs repository suggests that while the concept remains relevant, it may require further refinement or community consensus before potentially being reintroduced as an EIP. Developers interested in modular smart contract accounts should refer to the updated document at https://github.com/ethereum/ercs/blob/master/ERCS/erc-5005.md for the most current information and discussions surrounding this proposal.</p></article>",
  "EIP-5006": "<article><h1>EIP-5006: Rental NFT Extension</h1>\n\n<p>EIP-5006, proposed by Zainan Victor Zhou, Jaycen Horton, and others, aimed to introduce a standardized way to implement rental functionality for non-fungible tokens (NFTs) on the Ethereum blockchain. The proposal extended the ERC-721 and ERC-1155 standards to allow token owners to grant time-limited usage rights to other addresses without transferring ownership.</p>\n\n<p>The proposal addressed a growing need in the NFT ecosystem, particularly in gaming and metaverse applications, where temporary access to digital assets is desirable. It introduced new functions like <code>setUser</code> and <code>userOf</code> to manage rental periods and permissions. While EIP-5006 gained some traction in the community, it has since been moved to the Ethereum ERCs repository, indicating a shift in its development process.</p>\n\n<p>As of now, EIP-5006 has been relocated to the Ethereum ERCs GitHub repository, suggesting it's no longer being pursued as an Ethereum Improvement Proposal but may continue development as an Ethereum Request for Comment (ERC). This move reflects the evolving nature of Ethereum standards and the community's focus on refining NFT functionalities to meet emerging use cases in the digital asset space.</p>",
  "EIP-5007": "<article><h1>EIP-5007: ERC-5007 Time NFT</h1>\n<p>EIP-5007, also known as ERC-5007 Time NFT, was proposed to introduce a standard for time-bound non-fungible tokens (NFTs) on the Ethereum blockchain. The proposal aimed to create NFTs with specific start and end times, allowing for time-limited ownership or access to digital assets. This concept was particularly useful for applications such as event tickets, temporary licenses, or time-based access to content.</p>\n<p>The proposal was authored by Zainan Victor Zhou and introduced in May 2022. It extended the widely-adopted ERC-721 standard for NFTs, adding functionality to query the start and end times associated with each token. This extension enabled developers to create more dynamic and time-sensitive NFT applications, opening up new possibilities in the realm of digital ownership and access rights.</p>\n<p>As of now, EIP-5007 has been moved to the Ethereum ERCs repository, indicating its transition from a proposal to an accepted standard. The current location of the specification is https://github.com/ethereum/ercs/blob/master/ERCS/erc-5007.md. This move suggests that the Ethereum community has recognized the value of time-bound NFTs and has incorporated the concept into its ecosystem of standards.</p></article",
  "EIP-5008": "<article><h1>EIP-5008: ERC-721 Nonce Extension</h1>\n\n<p>EIP-5008, proposed by Shumpei Koike, introduces a nonce extension for ERC-721 tokens. This proposal aims to enhance the functionality of non-fungible tokens (NFTs) by adding a nonce attribute to each token. The nonce serves as a counter that increments with each transfer, providing a way to track the number of times a token has changed hands and potentially enabling new use cases in NFT ecosystems.</p>\n\n<p>The proposal was motivated by the need for more granular control and tracking of NFT transfers. By introducing a nonce, developers can implement features such as transfer limits, loyalty programs based on holding duration, or even create \"battle-worn\" NFTs that change appearance based on their transfer history. The EIP also includes methods for retrieving and incrementing the nonce, allowing for seamless integration with existing ERC-721 implementations.</p>\n\n<p>As of now, EIP-5008 has been moved to the Ethereum ERCs repository, indicating ongoing discussion and potential refinement. While the proposal offers interesting possibilities for NFT functionality, its adoption and implementation in major NFT projects remain to be seen. Developers and NFT platforms may need to weigh the benefits of added functionality against the increased complexity and potential gas costs associated with implementing and managing token",
  "EIP-5018": "<article><h1>EIP-5018: Micro-Onchain Sponsored Transaction Protocol</h1>\n\n<p>EIP-5018, proposed by Qi Zhou and Wanseob Lim on May 12, 2022, aimed to introduce a protocol for micro-onchain sponsored transactions in Ethereum. The proposal was designed to allow third parties to sponsor gas fees for users, potentially lowering the barrier to entry for new users and enabling more seamless dApp experiences.</p>\n\n<p>The proposal suggested a mechanism where sponsors could deposit ETH into a smart contract, which would then be used to pay for gas fees on behalf of users. This would allow users to interact with dApps without holding ETH themselves, potentially increasing adoption and user engagement. However, the proposal faced challenges in implementation and consensus-building within the Ethereum community.</p>\n\n<p>As of now, EIP-5018 has been moved to the Ethereum ERCs repository, indicating that it is no longer being actively considered as an Ethereum Improvement Proposal. The current status suggests that while the idea of sponsored transactions remains relevant, this specific implementation may have been superseded by other proposals or alternative solutions for addressing transaction fee concerns in the Ethereum ecosystem.</p>\n</article>",
  "EIP-5022": "<article><h1>EIP-5022: Increase SSTORE Gas Cost for New Storage</h1>\n\n<p>EIP-5022, proposed by Green in April 2022, aims to increase the gas cost of the SSTORE opcode from 20,000 to 40,000 when creating new storage slots (changing from zero to non-zero). The motivation is to more accurately price state growth, as the fixed cost has not kept pace with increasing state size. This would reduce the subsidization of state growth by other operations and potentially allow for gas limit increases.</p>\n\n<p>The proposal specifically targets only new storage creation, not updates to existing slots. This encourages developers to reuse existing storage where possible. The EIP does not propose changing the gas refund mechanism for clearing storage, focusing solely on the initial creation cost.</p>\n\n<p>As of 2023, EIP-5022 remains in \"Stagnant\" status, indicating a lack of recent activity or progress towards implementation. While the proposal addresses an important issue of state growth pricing, it has not gained significant traction in the Ethereum community. Other proposals and scaling solutions may have reduced urgency around this specific change.</p>\n</article>",
  "EIP-5023": "<article><h1>EIP-5023: A Brief Technical Summary</h1>\n\n<p>EIP-5023 was originally proposed as an Ethereum Improvement Proposal (EIP) in the ERC (Ethereum Request for Comments) category. However, it has since been moved to a separate repository dedicated to ERCs. This relocation suggests that the proposal is specifically related to token standards or other application-level conventions within the Ethereum ecosystem.</p>\n\n<p>The current status of EIP-5023 is listed as \"Moved,\" indicating that it is no longer being discussed or considered in its original location. Instead, interested parties can find the full details and ongoing discussions about this proposal at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-5023.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-5023.md</a>. This move may have been done to better organize and manage ERC proposals separately from core protocol improvements.</p>\n\n<p>Without access to the specific contents of ERC-5023, it's challenging to provide details about its purpose, authors, or potential implementation. However, its placement in the ERC repository suggests that it likely proposes a new token standard or an enhancement to existing standards. To fully understand its implications and current relevance, one would need to review the",
  "EIP-5027": "<article><h1>EIP-5027: Remove the limit on contract code size</h1>\n\n<p>EIP-5027, proposed by Qi Zhou in April 2022, aims to remove the 24576-byte limit on Ethereum contract code size. The proposal seeks to allow developers to deploy large, complex contracts without needing to split them into multiple sub-contracts. This change would simplify development and maintenance of increasingly sophisticated smart contracts, addressing the growing needs of decentralized applications (dApps).</p>\n\n<p>The proposal suggests removing the hard limit on code size while still constraining contracts by block gas limits. It includes adjustments to gas metering to prevent potential abuse of unlimited contract sizes. EIP-5027 builds upon previous proposals like EIP-170 (which originally set the 24576-byte limit), EIP-2929, and EIP-2930, which deal with gas costs and access lists.</p>\n\n<p>As of now, EIP-5027 is in a \"Stagnant\" status, indicating that it has not seen significant activity or progress recently. While the idea of removing code size limits has merit for complex dApp development, concerns about network performance and security implications may be contributing to its lack of advancement. The Ethereum community continues to debate the balance between enabling more complex contracts and maintaining network efficiency and security.</p></article>",
  "EIP-5050": "<article><h1>EIP-5050: ERC-5050</h1>\n\n<p>EIP-5050 was initially proposed as an Ethereum Improvement Proposal in the ERC (Ethereum Request for Comments) category. However, the proposal has since been moved to a separate repository dedicated to ERCs.</p>\n\n<p>The current location of the EIP-5050 specification is https://github.com/ethereum/ercs/blob/master/ERCS/erc-5050.md. This move suggests that the proposal is still being considered and developed, but is now managed within a more specialized context for Ethereum-based token standards and interfaces.</p>\n\n<p>As the proposal has been relocated, interested parties should refer to the new location for the most up-to-date information on ERC-5050's purpose, implementation details, and current status within the Ethereum development community.</p>\n</article>",
  "EIP-5058": "<article><h1>EIP-5058: Lockable ERC-721</h1>\n\n<p>EIP-5058, proposed by Ran Xu and Zhen Yu Yong, introduced a lockable extension for ERC-721 tokens. This improvement aimed to enhance the functionality of non-fungible tokens (NFTs) by allowing them to be temporarily locked, preventing transfers while maintaining ownership. The proposal was designed to support use cases such as staking, rental, and collateralization of NFTs without the need for wrapping or transferring ownership.</p>\n\n<p>The proposal defined new functions for locking and unlocking tokens, as well as querying their lock status. It also introduced events to track these actions. While EIP-5058 gained some attention in the NFT community, it did not achieve widespread adoption. The proposal's status has since been moved, indicating that it is no longer actively pursued in its original form.</p>\n\n<p>As of now, the EIP-5058 specification has been relocated to the Ethereum ERCs repository, suggesting that it may be undergoing further refinement or discussion. While the concept of lockable NFTs remains relevant, other proposals or implementations may have emerged to address similar needs in the evolving NFT ecosystem.</p>\n</article>",
  "EIP-5065": "<article><h1>EIP-5065: Instruction for Transferring Ether</h1>\n\n<p>EIP-5065, proposed by Mudit Gupta in April 2022, aims to introduce a new EVM instruction called \"AIRDROP\" for transferring Ether without transferring execution flow. This proposal addresses a significant architectural issue in Ethereum, where transferring Ether typically involves handing over control to potentially untrusted contracts.</p>\n\n<p>The motivation behind EIP-5065 stems from the security concerns associated with the current methods of Ether transfer. Existing solutions, such as reentrancy guards, are not considered ideal. The proposed AIRDROP instruction would function similarly to SELFDESTRUCT in transferring Ether without making a call to the destination address, but without the destructive side effects.</p>\n\n<p>As of now, EIP-5065 is in a \"Stagnant\" status, indicating that it has not seen recent activity or updates. While the proposal offers a potentially valuable solution to a known issue in Ethereum's architecture, its implementation would require significant changes to the Ethereum protocol. The crypto community continues to debate the merits and potential implications of such a fundamental change to Ether transfers.</p></article>",
  "EIP-5069": "<article><h1>EIP-5069: EIP Editor Handbook</h1>\n\n<p>EIP-5069, titled \"EIP Editor Handbook,\" is a Meta-type Ethereum Improvement Proposal that serves as a comprehensive guide for EIP Editors. Authored by Pooja Ranjan, Gavin John, Sam Wilson, and others, this proposal was created on May 2, 2022, to define the organizational structure, decision-making process, and various responsibilities of EIP Editors.</p>\n\n<p>The proposal outlines the mission of EIP Editors, emphasizing their role as both archivists and publishers. It details their responsibilities in publishing proposals, facilitating discussions, and upholding quality standards within the Ethereum ecosystem. EIP-5069 aims to foster transparency, encourage open dialogue, and ensure long-term accessibility of valuable insights from past proposals.</p>\n\n<p>Currently, EIP-5069 maintains a \"Living\" status, indicating that it is an actively maintained document subject to ongoing updates and revisions. This status reflects the dynamic nature of the EIP process and the need for continuous refinement of editorial guidelines. The proposal serves as a crucial resource for maintaining consistency and clarity in the EIP development process, ultimately contributing to the growth and improvement of the Ethereum protocol.</p></article>",
  "EIP-5081": "<article><h1>EIP-5081: Expirable Transactions</h1>\n\n<p>EIP-5081, proposed by Zainan Victor Zhou, Nick Johnson, and Konrad Feldmeier in May 2022, introduces a new transaction type that includes an expiration block number. This proposal aims to address the issue of lingering transactions with low gas prices that can potentially be executed at unexpected times in the future.</p>\n\n<p>The motivation behind this EIP stems from the common practice of users submitting multiple transactions with increasing gas prices to replace a stuck transaction. However, this approach can lead to unintended consequences, especially during network congestion when gas prices fluctuate significantly. EIP-5081 provides a cleaner solution by allowing users to set an expiration block number for their transactions, effectively canceling them if they are not included in a block before the specified expiration.</p>\n\n<p>As of now, EIP-5081 is in a \"Stagnant\" status, indicating that it has not seen significant activity or updates recently. While the proposal addresses a real issue in transaction management, it's unclear whether it will be implemented in its current form or if alternative solutions will be developed. The Ethereum community continues to explore various approaches to improve transaction handling and user experience in the face of network congestion and gas price volatility.</p>\n</article>",
  "EIP-5094": "<article><h1>EIP-5094: NFC-Enabled Physical Asset Referenced Token Standard</h1>\n\n<p>EIP-5094, proposed by Weixin Wang, Xuannu Xu, and Hao Shi in May 2022, aimed to establish a standard for Non-Fungible Tokens (NFTs) that reference physical assets using Near Field Communication (NFC) technology. The proposal sought to bridge the gap between digital tokens and real-world objects, enhancing the authenticity and traceability of physical items through blockchain technology.</p>\n\n<p>The core idea of EIP-5094 was to create a new token standard that would embed NFC chips in physical assets, allowing for seamless verification and tracking. This approach would potentially revolutionize industries such as luxury goods, art, and collectibles by providing a robust method to combat counterfeiting and ensure provenance. However, the proposal didn't gain significant traction in its original form on the Ethereum Improvement Proposals repository.</p>\n\n<p>As of now, EIP-5094 has been moved to the Ethereum Request for Comments (ERCs) repository, specifically to https://github.com/ethereum/ercs/blob/master/ERCS/erc-5094.md. This relocation suggests that while the idea has merit, it may require further refinement or community discussion before potentially being considered for implementation as",
  "EIP-5095": "<article><h1>EIP-5095: Principle Token</h1><p>EIP-5095, also known as the Principle Token standard, was proposed to address the need for a standardized representation of interest-bearing tokens in decentralized finance (DeFi). Originally authored by Arryon Tijsma, Torsten Stüber, and Ivo Georgiev, this proposal aimed to create a more efficient and interoperable system for handling yield-bearing assets on the Ethereum blockchain.</p>\n<p>The Principle Token standard introduced a novel approach to representing interest-accruing tokens by separating the principal amount from the accrued interest. This separation allows for more straightforward integration with existing DeFi protocols and improved composability. The proposal gained traction within the DeFi community due to its potential to simplify complex yield-bearing token interactions and reduce gas costs associated with interest calculations.</p>\n<p>As of now, EIP-5095 has been moved to the Ethereum ERCs repository, indicating its transition from a draft proposal to a more formalized standard. This move suggests ongoing development and refinement of the Principle Token concept. While not yet fully implemented across the ecosystem, the ideas presented in EIP-5095 continue to influence discussions around the future of interest-bearing tokens in DeFi.</p></article>",
  "EIP-5114": "<article><h1>EIP-5114: Soulbound Token</h1>\n\n<p>EIP-5114, also known as the Soulbound Token (SBT) proposal, was introduced to address the need for non-transferable tokens on the Ethereum blockchain. The concept was initially popularized by Vitalik Buterin, Ethereum's co-founder, in a blog post discussing the potential for \"soulbound\" items in blockchain ecosystems. The proposal aimed to create a standard for tokens that are permanently bound to a specific address, representing achievements, credentials, or affiliations that shouldn't be transferable.</p>\n\n<p>While the initial idea gained significant attention in the crypto community, the proposal's development faced challenges. The concept of non-transferable tokens raised questions about implementation, use cases, and potential conflicts with existing standards. As a result, EIP-5114 was eventually moved from the main Ethereum Improvement Proposals repository to the ERCs (Ethereum Request for Comments) repository, indicating a shift in its status and development focus.</p>\n\n<p>Currently, the proposal resides at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-5114.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-5114.md</a>. While the idea of",
  "EIP-5115": "<article><h1>EIP-5115: Soulbound Token</h1>\n\n<p>EIP-5115, proposed by Vitalik Buterin, introduces the concept of Soulbound Tokens (SBTs) to the Ethereum ecosystem. SBTs are non-transferable tokens that represent a person's credentials, affiliations, or achievements. The primary purpose of SBTs is to create a decentralized identity and reputation system, addressing the limitations of fungible and non-fungible tokens in representing social relationships and credentials.</p>\n\n<p>While the proposal generated significant interest and discussion within the Ethereum community, it has since been moved to the Ethereum Request for Comments (ERC) repository. This move indicates that the proposal is still under consideration and development, rather than being an active Ethereum Improvement Proposal. The current status of \"Moved\" suggests that further refinement and community consensus are needed before it can be considered for implementation.</p>\n\n<p>As of now, EIP-5115 has not been fully implemented, but it has sparked numerous discussions and inspired related proposals exploring the concept of non-transferable tokens and decentralized identity systems. The idea of Soulbound Tokens continues to evolve, with ongoing debates about their potential applications, privacy implications, and technical implementation details within the broader context of Web3 and decentralized identity solutions.</p></article>",
  "EIP-5131": "<article><h1>EIP-5131: ERC-5131 ENS Name Wrapper</h1>\n<p>EIP-5131, proposed by Nick Johnson and other contributors from the Ethereum Name Service (ENS) team, aimed to introduce a \"Name Wrapper\" for ENS (Ethereum Name Service) domains. The proposal's primary purpose was to enhance the functionality and flexibility of ENS names by wrapping them in ERC-721 compatible tokens.</p>\n\n<p>The Name Wrapper concept addressed several limitations of the original ENS implementation, including the inability to create sub-domains programmatically and difficulties in managing permissions for ENS names. By tokenizing ENS names, EIP-5131 would have allowed for more granular control over domain and subdomain management, as well as enabling new use cases such as time-limited name transfers and improved integration with other smart contracts.</p>\n\n<p>However, EIP-5131 has been moved to the Ethereum ERCs repository, indicating a change in its status and potentially its scope. The current version can be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-5131.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-5131.md</a>. This move suggests that while the core concepts of the",
  "EIP-5133": "<article><h1>EIP-5133: Delaying Difficulty Bomb to mid-September 2022</h1>\n\n<p>EIP-5133 was proposed in June 2022 to delay Ethereum's difficulty bomb by approximately 700,000 blocks, pushing it back to mid-September 2022. The difficulty bomb is a mechanism built into Ethereum that gradually increases mining difficulty, eventually making mining unprofitable and incentivizing the transition to proof-of-stake. This proposal was authored by several Ethereum core developers including Tomasz Stanczak and Eric Marti Haynes.</p>\n\n<p>The motivation behind EIP-5133 was to avoid premature network degradation due to the difficulty bomb activating before Ethereum was ready to transition to proof-of-stake. It accomplished this by having clients calculate difficulty using a \"fake\" block number that is 11,400,000 blocks behind the actual block number, effectively delaying the exponential difficulty increase.</p>\n\n<p>EIP-5133 was implemented in the Gray Glacier network upgrade in June 2022. It successfully delayed the difficulty bomb as intended, giving developers more time to prepare for The Merge to proof-of-stake. The proposal has now been marked as Final, having served its purpose of pushing back the difficulty bomb activation to mid-September 2022, around the time of the successful Merge transition",
  "EIP-5139": "<article><h1>EIP-5139: Remote Procedure Call (RPC) Subscription Methods</h1>\n\n<p>EIP-5139 proposed standardizing Remote Procedure Call (RPC) subscription methods for Ethereum clients. The proposal aimed to improve interoperability between different Ethereum implementations by defining a consistent set of subscription-based APIs. These APIs would allow clients to receive real-time updates about blockchain events without repeatedly polling the node.</p>\n\n<p>The proposal was authored by Marius van der Wijden and initially introduced in May 2022. It addressed the lack of standardization in subscription methods across various Ethereum clients, which had led to inconsistencies and compatibility issues. By establishing a common set of subscription endpoints, EIP-5139 sought to enhance the developer experience and facilitate more efficient dApp development.</p>\n\n<p>As of now, EIP-5139 has been moved to the Ethereum Request for Comments (ERC) repository, indicating a shift in its categorization. The current status is \"Moved,\" and the proposal can be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-5139.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-5139.md</a>. This change suggests that the proposal is still under consideration but may",
  "EIP-5143": "<article><h1>EIP-5143: Slashing Protection Interchange Format</h1>\n\n<p>EIP-5143 proposed a standardized format for exchanging slashing protection data between Ethereum validators. This proposal aimed to enhance the security of the Ethereum network by allowing validators to transfer their slashing protection history when moving between different client implementations or infrastructure providers. The proposal was authored by Jim McDonald and Micah Zoltu, two prominent figures in the Ethereum development community.</p>\n\n<p>The need for this proposal arose as the Ethereum network transitioned to Proof-of-Stake, where validators play a crucial role in maintaining network security. Slashing is a penalty mechanism that discourages malicious behavior, but it also requires validators to keep track of their signing history to avoid accidental double-signing. EIP-5143 aimed to make this process more manageable and reduce the risk of unintentional slashing events.</p>\n\n<p>As of now, EIP-5143 has been moved from its original location to the Ethereum ERCs repository. This move suggests that the proposal has gained traction and is being considered for implementation. However, its current status and any potential updates or modifications would need to be verified in its new location. The proposal's relocation also indicates ongoing development and refinement of the slashing protection interchange format, which could lead to improved validator security and interoperability across different",
  "EIP-5164": "<article><h1>EIP-5164: Cross-Chain Execution</h1>\n\n<p>EIP-5164, proposed by Brendan Asselstine, Pierrick Turelier, and Nayms, aimed to standardize cross-chain execution for Ethereum-compatible blockchains. The proposal sought to establish a common interface for initiating and executing transactions across different chains, potentially improving interoperability and simplifying cross-chain applications.</p>\n\n<p>While the proposal gained some attention in the Ethereum community, it was ultimately moved from the main Ethereum Improvement Proposals repository to the Ethereum Request for Comments (ERCs) repository. This relocation suggests that while the idea was considered valuable, it may have been deemed more appropriate as a community standard rather than a core protocol change. The current status of the proposal is \"Moved,\" indicating that further discussion and development may be ongoing within the ERC framework.</p>\n\n<p>As cross-chain interoperability remains a crucial area of development in the blockchain space, the concepts introduced in EIP-5164 may continue to influence future proposals and implementations. However, given its moved status, developers and projects looking to implement cross-chain execution should refer to the latest discussions and potential successors to this proposal in the ERC repository.</p></article>",
  "EIP-5169": "<article><h1>EIP-5169: ERC-5169 - Token Metadata JSON Schema</h1>\n\n<p>EIP-5169, proposed by Ethan Wilding and Greg Markou, aimed to establish a standardized JSON schema for token metadata in Ethereum. This proposal was designed to provide a consistent format for representing token information, enhancing interoperability across various platforms and applications in the Ethereum ecosystem.</p>\n\n<p>The proposal was initially introduced to address the lack of a unified standard for token metadata, which had led to inconsistencies and compatibility issues between different platforms. EIP-5169 sought to define a structured approach to storing and retrieving essential token information, including name, symbol, decimals, and other relevant details.</p>\n\n<p>As of now, EIP-5169 has been moved to the Ethereum ERCs repository, indicating a shift in its development and management process. The current status suggests that while the proposal is still relevant, it may be undergoing further refinement or integration within the broader Ethereum standards framework. Developers and stakeholders interested in token metadata standardization should refer to the updated document in the ERCs repository for the most current information and implementation guidelines.</p>\n</article>",
  "EIP-5173": "<article><h1>EIP-5173: Stealth Addresses</h1>\n\n<p>EIP-5173, proposed by Vitalik Buterin, introduced the concept of stealth addresses for Ethereum. This improvement aimed to enhance privacy in cryptocurrency transactions by allowing senders to create unique, one-time addresses for recipients without requiring their active participation. The proposal was designed to address the privacy concerns associated with public blockchain transactions, where addresses and transaction amounts are typically visible to all network participants.</p>\n\n<p>The proposal gained significant attention within the Ethereum community due to its potential to improve transaction privacy. However, as indicated by its \"Moved\" status, EIP-5173 has been relocated to the Ethereum ERCs repository. This move suggests that the proposal is still under consideration and development, but may require further refinement or community consensus before potential implementation. The relocation also indicates that the Ethereum community recognizes the importance of privacy-enhancing features and is actively working on solutions in this area.</p>\n\n<p>As of now, stealth addresses have not been fully implemented in Ethereum's main protocol. However, the concepts introduced in EIP-5173 have inspired ongoing research and development in blockchain privacy solutions. While this specific proposal may not be implemented in its original form, it has contributed to the broader conversation about privacy in blockchain transactions and may influence future improvements in this domain.</p></article>",
  "EIP-5185": "<article><h1>EIP-5185: NFT Royalty Standard</h1>\n\n<p>EIP-5185, also known as the NFT Royalty Standard, was proposed to address the lack of a standardized approach for implementing royalties in NFT transactions. The proposal aimed to create a consistent method for marketplaces and wallets to honor royalty payments to content creators. It was initially drafted by Zach Burks, James Morgan, and Blaine Malone, building upon earlier discussions and proposals in the Ethereum community.</p>\n\n<p>The proposal gained traction due to the growing popularity of NFTs and the need for a fair compensation model for artists and creators. However, EIP-5185 faced challenges in achieving consensus within the community. As a result, it was eventually moved to the Ethereum ERCs repository, indicating that it did not progress to become an official Ethereum Improvement Proposal.</p>\n\n<p>Currently, the NFT royalty landscape remains fragmented, with various marketplaces implementing their own royalty systems. While EIP-5185 is no longer actively pursued as an Ethereum standard, its concepts have influenced ongoing discussions and alternative proposals for addressing NFT royalties. The current status of the proposal is \"Moved,\" and interested parties are directed to the Ethereum ERCs repository for further information and potential updates.</p></article>",
  "EIP-5187": "<article><h1>EIP-5187: Extension of ERC-721 with Rental and Lending Functionality</h1>\n\n<p>EIP-5187 was proposed to extend the popular ERC-721 non-fungible token standard with rental and lending capabilities. The proposal aimed to address the growing need for time-limited transfers of NFT utility without transferring ownership. It was authored by Qin Wang, Zer0dots, and others, reflecting a collaborative effort to enhance NFT functionality in the Ethereum ecosystem.</p>\n\n<p>The proposal introduced new methods to the ERC-721 interface, allowing token owners to grant temporary usage rights to other addresses. This would enable use cases such as renting out in-game items, temporary access to exclusive content, or collateralized lending of valuable NFTs. The EIP garnered interest from the NFT and DeFi communities, as it opened up new possibilities for monetization and utility of non-fungible assets.</p>\n\n<p>As of now, EIP-5187 has been moved to the Ethereum ERC repository, indicating ongoing discussion and development. While not yet finalized or implemented, the proposal remains relevant in the context of expanding NFT use cases. However, interested parties should refer to the most recent version in the ERC repository for the latest status and any potential modifications to the original proposal.</p></article>",
  "EIP-5189": "<article><h1>EIP-5189: Ethereum Request for Comment (ERC) Proposal</h1>\n\n<p>EIP-5189 was initially proposed as an Ethereum Improvement Proposal (EIP) in the ERC category. However, it has since been moved to a separate repository dedicated to Ethereum Request for Comments (ERCs). This relocation indicates that the proposal is now being managed and discussed within a more specific context of Ethereum standards.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-5189.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-5189.md</a>. This move suggests that the Ethereum community is working to streamline and organize its standards development process, separating ERCs from other types of EIPs to facilitate more focused discussions and development.</p>\n\n<p>As of now, the proposal's status is listed as \"Moved,\" reflecting its transition to the new repository. For the most up-to-date information on ERC-5189, including its purpose, technical details, and current status, interested parties should refer to the new location in the Ethereum ERCs repository.</p></article>",
  "EIP-5192": "<article><h1>EIP-5192: Minimal Soulbound NFTs</h1>\n\n<p>EIP-5192, proposed by Qin Zhuo, introduced the concept of \"Minimal Soulbound NFTs\" to the Ethereum ecosystem. Soulbound tokens are non-transferable NFTs that represent achievements, credentials, or affiliations tied to a specific Ethereum address. This proposal aimed to standardize a minimal implementation for soulbound tokens, addressing the need for non-transferable digital assets in various use cases such as identity verification, loyalty programs, and certification systems.</p>\n\n<p>The proposal gained traction in the Ethereum community due to its simplicity and potential applications. It defined a basic interface for soulbound tokens, including a function to check if a token is transferable. This allowed for easy integration with existing NFT standards while maintaining the non-transferable property essential to soulbound tokens. The EIP was shepherded through the Ethereum Improvement Proposal process, receiving feedback and refinements from the community.</p>\n\n<p>Currently, EIP-5192 has been moved to the Ethereum Request for Comments (ERC) repository, indicating its progression in the standardization process. While the proposal has merit, the rapidly evolving nature of the NFT space means that other competing or complementary standards may have emerged. Developers and projects considering implementing soulbound tokens should review the",
  "EIP-5202": "<article><h1>EIP-5202: Blueprint</h1>\n\n<p>EIP-5202, also known as the \"Blueprint\" proposal, was originally introduced to address the need for a standardized way to handle contract code reuse and upgradability in Ethereum. The proposal aimed to separate contract logic from storage, allowing for more efficient upgrades and code sharing across multiple contracts.</p>\n\n<p>The concept behind EIP-5202 was developed by Arachnid (Nick Johnson) and other contributors in the Ethereum community. It proposed a new contract type called a \"blueprint\" that would serve as a template for other contracts, enabling developers to create upgradeable and reusable smart contract architectures more easily. This approach was designed to reduce gas costs and improve overall contract management.</p>\n\n<p>As of now, EIP-5202 has been moved to the Ethereum ERCs repository, indicating a shift in its categorization. The current status of the proposal is \"Moved,\" and it can be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-5202.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-5202.md</a>. This move suggests that the proposal is still being considered and developed within the Ethereum community, but may require further refinement",
  "EIP-5216": "<article><h1>EIP-5216: ERC-721 Permit Extension</h1>\n\n<p>EIP-5216, also known as the ERC-721 Permit Extension, was proposed to enhance the functionality of ERC-721 tokens by introducing a gasless approval mechanism. This improvement aimed to allow users to grant permissions for their NFTs without needing to execute on-chain transactions, similar to the EIP-2612 standard for ERC-20 tokens.</p>\n\n<p>The proposal was initially drafted by Tim Daubenschütz and Rahul Rumalla in 2022. It aimed to address the issue of high gas costs associated with NFT approvals, particularly in marketplaces and other dApps where frequent approvals are necessary. By implementing a permit system, users could sign messages off-chain to grant approvals, potentially reducing transaction costs and improving user experience.</p>\n\n<p>As of now, EIP-5216 has been moved to the Ethereum ERCs repository, indicating ongoing development and discussion within the community. While the proposal offers valuable improvements for NFT ecosystems, its implementation status and whether it has been superseded by other proposals is not clear from the available information. Developers and stakeholders in the NFT space should monitor its progress in the ERCs repository for the most up-to-date status and potential adoption.</p></article>",
  "EIP-5218": "<article><h1>EIP-5218 Summary</h1>\n\n<p>EIP-5218 was an Ethereum Improvement Proposal that has been moved to the Ethereum Request for Comments (ERC) repository. The proposal's specific details are now maintained at https://github.com/ethereum/ercs/blob/master/ERCS/erc-5218.md. This relocation suggests that the proposal is related to application-level standards or conventions rather than core protocol changes.</p>\n\n<p>The move to the ERC repository indicates that EIP-5218 is likely focused on token standards, wallet formats, name registries, or other application-level concerns within the Ethereum ecosystem. Unfortunately, without accessing the new location, it's not possible to provide specific details about the proposal's purpose, history, or current status.</p>\n\n<p>For the most up-to-date and accurate information about EIP-5218, interested parties should refer to the new location in the ERC repository. This move also suggests that the proposal is still under consideration or discussion within the Ethereum community, as it has not been finalized as an EIP.</p>\n</article>",
  "EIP-5219": "<article><h1>EIP-5219: NFT Delegate Transfer</h1>\n\n<p>EIP-5219, originally proposed for NFT Delegate Transfer, was an attempt to address the need for more flexible transfer mechanisms in the NFT ecosystem. The proposal aimed to allow NFT owners to delegate transfer rights to other addresses without relinquishing ownership. This would have enabled scenarios like NFT marketplaces executing trades on behalf of users, or gaming platforms managing in-game assets more efficiently.</p>\n\n<p>The proposal was likely authored by a member of the Ethereum community interested in enhancing NFT functionality, though specific authorship details are not readily available. It's worth noting that the EIP has been moved from its original location to the Ethereum ERCs repository, indicating a shift in how it's being managed or considered within the Ethereum improvement process.</p>\n\n<p>As of now, EIP-5219 has a status of \"Moved,\" suggesting that it's no longer being actively considered in its original form. The relocation to the ERCs repository might indicate that it's being reworked or incorporated into a broader standard. For current implementation considerations, developers should refer to the latest version in the new location and consult the Ethereum community for the most up-to-date status and recommendations.</p>\n</article>",
  "EIP-5247": "<article><h1>EIP-5247: Stealth Address for Social Recovery</h1>\n\n<p>EIP-5247 was a proposed Ethereum Improvement Proposal aimed at enhancing the privacy and security of social recovery wallets. The core idea was to implement stealth addresses for guardians in social recovery systems, making it harder for attackers to identify and target these critical recovery addresses.</p>\n\n<p>The proposal was authored by Vitaly Yakovlev and introduced in 2022. It sought to address the vulnerability of publicly visible guardian addresses in existing social recovery implementations. By using stealth addresses, the proposal aimed to significantly improve the privacy of guardians, thus strengthening the overall security of social recovery wallets.</p>\n\n<p>As of now, EIP-5247 has been moved from its original location to the Ethereum ERCs repository. This relocation suggests that while the proposal garnered interest, it may have undergone revisions or been incorporated into broader discussions about social recovery mechanisms. Its current status and potential for implementation would require further investigation in its new location.</p>\n</article>",
  "EIP-5252": "<article><h1>EIP-5252: Brief Technical Summary</h1>\n\n<p>EIP-5252 was originally proposed as an Ethereum Improvement Proposal (EIP) in the ERC (Ethereum Request for Comments) category. However, it has since been moved to the Ethereum ERCs repository, indicating a shift in its classification and management.</p>\n\n<p>The proposal's full details are now available at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-5252.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-5252.md</a>. This move suggests that while the proposal is still considered relevant to the Ethereum ecosystem, it may not have met the criteria for a full EIP or may have been deemed more suitable as an ERC standard.</p>\n\n<p>As of now, the proposal's status is listed as \"Moved,\" reflecting its relocation from the EIPs repository to the ERCs repository. For the most up-to-date information on its purpose, implementation status, and any related developments, interested parties should refer to the new location in the ERCs repository.</p>\n</article>",
  "EIP-5267": "<article><h1>EIP-5267: Retrieval of Structured Data</h1>\n\n<p>EIP-5267, also known as \"Retrieval of Structured Data,\" was proposed to standardize a method for smart contracts to expose structured metadata. This proposal aimed to enhance the interoperability and discoverability of on-chain information, allowing dApps and other contracts to more easily interact with and understand the capabilities of deployed contracts.</p>\n\n<p>The proposal was initially drafted by Nick Johnson, a prominent Ethereum developer known for his work on ENS (Ethereum Name Service). It was designed to address the growing need for a standardized way to retrieve complex, structured data from smart contracts, going beyond the limitations of existing methods like events or simple getter functions.</p>\n\n<p>As of now, EIP-5267 has been moved to the Ethereum ERCs repository, indicating its transition from a proposal to a more formalized standard. This move suggests that the community has recognized its value and potential for widespread adoption. The current implementation can be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-5267.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-5267.md</a>, where developers can review and potentially implement this standard in their smart contracts to improve metadata accessibility and inter",
  "EIP-5269": "<article><h1>EIP-5269: Refundable NFTs</h1>\n<p>EIP-5269, originally proposed for Refundable NFTs, was an attempt to introduce a mechanism for refunding Non-Fungible Tokens (NFTs) within the Ethereum ecosystem. The proposal aimed to address the issue of buyer's remorse in the NFT market by allowing purchasers to return their NFTs within a specified timeframe for a full or partial refund.</p>\n<p>While the initial concept garnered some attention, the proposal has since been moved from its original location in the Ethereum Improvement Proposals (EIPs) repository to the Ethereum Request for Comments (ERCs) repository. This relocation suggests that the idea is still under consideration and discussion within the Ethereum community, but it has not yet achieved the status of a formal improvement proposal.</p>\n<p>As of now, EIP-5269 has not been implemented in its original form. The NFT space continues to evolve rapidly, and other proposals or market-driven solutions may have emerged to address similar concerns. For the most up-to-date information and discussions on this topic, interested parties should refer to the current version of the proposal in the ERCs repository and follow ongoing community discussions.</p></article>",
  "EIP-5283": "<article><h1>EIP-5283: Semaphore for Reentrancy Protection</h1>\n\n<p>EIP-5283, proposed by Sergio D. Lerner in July 2022, aims to introduce a precompiled contract for reentrancy protection that is compatible with parallel execution of smart contracts. The proposal addresses limitations of traditional storage-based reentrancy guards, which can hinder parallelization efforts in Ethereum's execution layer.</p>\n\n<p>The core idea is to replace the common pattern of modifying a storage cell for reentrancy checks with a semaphore function implemented as a precompile. This approach avoids storage writes, making it forward-compatible with designs for fine-grained parallelization of EVM transactions. The proposal builds upon concepts from previous EIPs, including EIP-20 (Token Standard), EIP-1283 (Net Gas Metering), and EIP-1352 (Restricted Address Range for Precompiles).</p>\n\n<p>As of now, EIP-5283 is in a \"Stagnant\" status, indicating that development has slowed or stopped. While the proposal offers potential benefits for future scalability improvements, it has not gained significant traction in the Ethereum community. The concept may still be relevant for ongoing discussions about optimizing smart contract execution and preparing for potential parallel processing capabilities in future",
  "EIP-5289": "<article><h1>EIP-5289: A Brief Technical Summary</h1>\n\n<p>EIP-5289 was an Ethereum Improvement Proposal that has since been moved to the Ethereum Request for Comments (ERC) repository. The proposal's relocation suggests it was more focused on application-level standards rather than core protocol changes. Unfortunately, without access to the specific content of the ERC, it's challenging to provide detailed information about its purpose, history, or current status.</p>\n\n<p>The move to the ERC repository (https://github.com/ethereum/ercs/blob/master/ERCS/erc-5289.md) indicates that the proposal likely deals with token standards, wallet interfaces, or other application-layer specifications. These types of proposals are crucial for maintaining interoperability and establishing best practices within the Ethereum ecosystem.</p>\n\n<p>To gain more insights into ERC-5289's specifics, including its purpose, authors, and current implementation status, one would need to refer to the linked document in the Ethereum ERCs repository. This move also suggests that the proposal is still under consideration or discussion within the Ethereum community.</p>\n</article>",
  "EIP-5298": "<article><h1>EIP-5298: ENS Name Wrapper</h1>\n\n<p>EIP-5298, known as the ENS Name Wrapper, was proposed to enhance the functionality and usability of the Ethereum Name Service (ENS). The proposal aimed to create a wrapper contract that would allow for more flexible management of ENS names, including improved subname control and easier integration with other smart contracts.</p>\n\n<p>The proposal was originally drafted by Nick Johnson, the lead developer of ENS, in collaboration with other ENS contributors. It addressed limitations in the existing ENS system, particularly regarding subname management and permissions. The Name Wrapper concept was designed to provide a more robust and feature-rich way to interact with ENS names while maintaining backwards compatibility.</p>\n\n<p>As of now, EIP-5298 has been moved to the Ethereum ERCs repository, indicating its transition from a proposal to a more formalized standard. The current location of the specification is <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-5298.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-5298.md</a>. This move suggests that the proposal has gained traction and is being actively developed and refined within the Ethereum community.</p>\n</article>",
  "EIP-5313": "<article><h1>EIP-5313: A Brief Technical Summary</h1>\n\n<p>EIP-5313 was an Ethereum Improvement Proposal that has been moved to the Ethereum Request for Comments (ERC) repository. The proposal's specific details are now maintained at https://github.com/ethereum/ercs/blob/master/ERCS/erc-5313.md. This move indicates that the proposal is considered more suitable as an ERC, which typically focuses on application-level standards and conventions, rather than core protocol changes.</p>\n\n<p>The relocation of EIP-5313 to the ERC repository suggests that it likely deals with token standards, smart contract interfaces, or other application-layer specifications. Unfortunately, without access to the current content of the ERC, it's not possible to provide specific details about its purpose, authors, or current status. The move itself, however, implies that the Ethereum community saw value in the proposal but determined it was better suited as an ERC rather than an EIP.</p>\n\n<p>For the most up-to-date information on ERC-5313, including its purpose, history, and current status, interested parties should refer to the provided GitHub link. This change in categorization highlights the dynamic nature of Ethereum's improvement process and the community's ongoing efforts to organize and refine proposals effectively.</p></article>",
  "EIP-5334": "<article><h1>EIP-5334: Brief Technical Summary</h1>\n\n<p>EIP-5334 was an Ethereum Improvement Proposal that has been moved to the Ethereum Request for Comments (ERC) repository. The proposal's specific details are now located at https://github.com/ethereum/ercs/blob/master/ERCS/erc-5334.md. This move suggests that the proposal was deemed more suitable as an ERC, which typically focuses on application-level standards and conventions, rather than core protocol changes.</p>\n\n<p>The relocation of this proposal indicates that it likely addresses a specific use case or standard within the Ethereum ecosystem, rather than a fundamental change to the Ethereum protocol. ERCs often deal with token standards, name registries, URI schemes, library/package formats, or wallet formats. Without access to the current content, it's challenging to provide specific details about the proposal's purpose, authors, or current status.</p>\n\n<p>For the most up-to-date and accurate information about ERC-5334, interested parties should refer to the new location in the ERC repository. This move also implies that the proposal is still under consideration and may be subject to further discussion and potential implementation within the Ethereum community.</p></article>",
  "EIP-5345": "<article><h1>EIP-5345: Silent Signing Extension for JSON-RPC</h1>\n\n<p>EIP-5345, proposed in July 2022 by Stanley Wu, Mücahit Büyükyılmaz, and Muhammed Emin Aydın, aims to improve user experience for mobile applications that require frequent blockchain transactions. The proposal introduces \"Silent Signing,\" a feature allowing wallets to sign and send transactions without constant user interaction, based on time-limited user consent.</p>\n\n<p>The motivation behind this proposal stems from the disruptive nature of frequent wallet UI switches, particularly in gaming applications with their own sidechains. To address this, EIP-5345 suggests new Ethereum JSON-RPC methods that would enable wallets to implement Silent Signing, potentially streamlining the transaction process for users engaged in blockchain-intensive applications.</p>\n\n<p>Currently, the proposal's status is listed as \"Stagnant,\" indicating that it has not seen significant development or discussion recently. While the idea addresses a real user experience concern, its implementation would require careful consideration of security implications and user control. As of now, no major wallets or applications have publicly announced plans to implement this feature, likely due to the proposal's stagnant status and potential security considerations.</p>\n\n</article>",
  "EIP-5375": "<article><h1>EIP-5375: NFT Royalty Standard</h1>\n\n<p>EIP-5375, also known as the NFT Royalty Standard, was proposed to establish a standardized method for implementing and enforcing royalties for non-fungible tokens (NFTs) on the Ethereum blockchain. The proposal aimed to create a consistent approach for creators to receive ongoing compensation for their work through secondary sales. It was initially developed to address the lack of a unified royalty system across different NFT marketplaces and platforms.</p>\n\n<p>The proposal was shepherded by the Ethereum community, with input from various stakeholders in the NFT ecosystem. However, as indicated by its current status of \"Moved,\" EIP-5375 has been relocated to the Ethereum Request for Comments (ERC) repository. This move suggests that the proposal is still under consideration and development, but may require further refinement or community consensus before potential implementation.</p>\n\n<p>As of now, the NFT royalty landscape remains fragmented, with different platforms implementing their own royalty systems. While EIP-5375 aimed to standardize this process, its current status indicates that a universally accepted solution has not yet been finalized. Developers and NFT platforms continue to explore various approaches to royalty enforcement, balancing the interests of creators, collectors, and marketplace operators.</p>\n</article>",
  "EIP-5380": "<article><h1>EIP-5380: ERC-5380 NFT Royalty Standard</h1>\n<p>EIP-5380, also known as the ERC-5380 NFT Royalty Standard, was a proposal aimed at addressing the challenges of royalty payments in the NFT ecosystem. The proposal was designed to create a standardized method for implementing and enforcing royalties for non-fungible tokens (NFTs) on the Ethereum blockchain.</p>\n<p>The proposal was originally authored by a group of developers and NFT enthusiasts who recognized the need for a more robust royalty system. However, as indicated by its current status of \"Moved\", the proposal has been relocated to the Ethereum ERCs repository. This move suggests that while the proposal garnered interest, it may have undergone revisions or been superseded by other standards.</p>\n<p>As of now, the ERC-5380 proposal can be found at https://github.com/ethereum/ercs/blob/master/ERCS/erc-5380.md. For the most up-to-date information on its status and potential implementation, it's recommended to refer to the official Ethereum Improvement Proposals (EIPs) repository and the Ethereum ERCs repository.</p>\n</article>",
  "EIP-5409": "<article><h1>EIP-5409: NFT Renting Standard</h1>\n\n<p>EIP-5409, titled \"NFT Renting Standard,\" was proposed to establish a standardized method for renting non-fungible tokens (NFTs) on the Ethereum blockchain. The proposal aimed to create a framework that would allow NFT owners to temporarily transfer usage rights to renters while retaining ownership. This would enable new use cases and revenue streams for NFT holders, particularly in gaming and metaverse applications.</p>\n\n<p>The proposal was initially drafted by Qizhou Guo, Yusuke Obinata, and Zer0dot1 in June 2022. It gained traction in the Ethereum community due to the growing popularity of NFTs and the need for more flexible ownership models. The EIP suggested implementing new functions in smart contracts to manage rental agreements, including duration, terms, and access rights.</p>\n\n<p>As of now, EIP-5409 has been moved to the Ethereum ERCs repository, indicating ongoing development and discussion. While not yet finalized, the proposal has influenced several projects exploring NFT rental mechanisms. Its current status suggests that the Ethereum community recognizes the potential value of standardized NFT renting, but further refinement and consensus-building may be needed before widespread adoption.</p>\n</article>",
  "EIP-5437": "<article><h1>EIP-5437: ERC for Ticket-based Random Selection</h1>\n\n<p>EIP-5437 was a proposed Ethereum Improvement Proposal (EIP) that aimed to establish a standard for ticket-based random selection on the Ethereum blockchain. The proposal was authored by Keegan Quigley and introduced in July 2022. Its primary purpose was to create a fair and transparent method for selecting winners in various blockchain-based applications, such as lotteries, raffles, and other random selection processes.</p>\n\n<p>The proposal suggested a system where users could purchase \"tickets\" represented as tokens, which would then be used in a provably fair random selection process. This approach aimed to provide a more efficient and cost-effective alternative to existing random selection methods on the Ethereum network. The EIP outlined the necessary functions and events for implementing this standard, including methods for purchasing tickets, conducting the selection, and distributing rewards.</p>\n\n<p>As of now, EIP-5437 has been moved from its original location to the Ethereum ERCs repository. This relocation suggests that the proposal is still under consideration and development within the Ethereum community. However, its current status and potential for implementation remain uncertain. Developers and stakeholders interested in random selection mechanisms on Ethereum should monitor the proposal's progress and consider its potential impact on future blockchain applications.</p>\n</article>",
  "EIP-5450": "<article><h1>EIP-5450: EOF - Stack Validation</h1>\n\n<p>EIP-5450, proposed in August 2022, introduces extended validation of EOF (EVM Object Format) code sections to ensure that neither stack underflow nor overflow can occur during the execution of validated contracts. This proposal builds upon earlier EIPs related to EOF, including EIP-3540, EIP-3670, EIP-4200, and EIP-4750.</p>\n\n<p>The primary motivation behind EIP-5450 is to minimize the number of runtime validity checks required by the EVM. By performing these checks at deploy-time, the proposal aims to improve efficiency and prevent the execution and deployment of invalid code. Key benefits include removing runtime stack underflow checks for all instructions, reducing stack overflow checks, ensuring proper termination of execution, and discouraging the use of code sections for data storage.</p>\n\n<p>As of its last update, EIP-5450 was in the \"Review\" status, indicating ongoing discussion and potential refinement. The proposal was authored by Andrei Maiboroda, Paweł Bylica, Alex Beregszaszi, and Danno Ferrin, all experienced contributors to Ethereum's development. While the EIP offers significant advantages in terms of performance and security, it also introduces new constraints on contract development, which may require adjustments to existing",
  "EIP-5453": "<article><h1>EIP-5453: Subscription NFTs</h1>\n\n<p>EIP-5453, originally proposed by Rahul Rumalla, introduces the concept of Subscription NFTs. This proposal aims to create a standard for tokenizing subscriptions as non-fungible tokens (NFTs) on the Ethereum blockchain. The idea is to enable recurring payments and access management for various services using smart contracts, potentially revolutionizing subscription-based business models in the Web3 ecosystem.</p>\n\n<p>The proposal outlines methods for creating, managing, and transferring subscription NFTs, as well as handling payments and access rights. It builds upon existing NFT standards like ERC-721 and ERC-1155, adding functionality specific to subscription management. While the concept garnered interest from the community, the proposal's development seems to have slowed down.</p>\n\n<p>As of now, EIP-5453 has been moved to the Ethereum ERCs repository, indicating a shift in its categorization. This move suggests that while the idea remains relevant, it may require further refinement or community consensus before potential implementation. The current status and future of this proposal remain uncertain, and developers interested in subscription-based NFTs may need to explore alternative approaches or wait for further developments in this area.</p>\n</article>",
  "EIP-5478": "<article><h1>EIP-5478: CREATE2COPY Opcode</h1>\n\n<p>EIP-5478 proposes adding a new opcode called CREATE2COPY to reduce gas costs for deploying identical smart contracts. It was authored by Qi Zhou in August 2022 as a potential optimization for account abstraction contracts.</p>\n\n<p>The CREATE2COPY opcode would function similarly to the existing CREATE2 opcode, but with an additional parameter specifying an existing contract address that already contains the desired bytecode. This allows reusing existing bytecode instead of storing duplicate copies, significantly reducing gas costs for deploying multiple contracts with identical code.</p> \n\n<p>As of early 2023, EIP-5478 remains in \"Stagnant\" status, indicating lack of recent activity or progress towards implementation. While it presents an interesting optimization, concerns around added complexity and limited use cases may have hampered adoption. The proposal highlights ongoing efforts to reduce gas costs and improve scalability for smart contract platforms like Ethereum.</p>\n</article>",
  "EIP-5484": "<article><h1>EIP-5484: Consensus-Layer Proposer/Builder Separation</h1>\n\n<p>EIP-5484, originally proposed by Vitalik Buterin, aimed to separate the roles of block proposer and block builder in Ethereum's consensus layer. This proposal was designed to address concerns about centralization and improve the network's resistance to censorship. The core idea was to allow validators to propose blocks without necessarily building them, potentially reducing the hardware requirements for participation in block production.</p>\n\n<p>The proposal gained significant attention in the Ethereum community due to its potential to enhance decentralization. However, as the ecosystem evolved, the concept was further developed and integrated into broader discussions about Ethereum's roadmap. This led to the proposal being moved from its original location to the Ethereum Research and Consensus (ERCs) repository, indicating its ongoing relevance to Ethereum's development.</p>\n\n<p>Currently, the proposal's status is \"Moved,\" and it can be found at https://github.com/ethereum/ercs/blob/master/ERCS/erc-5484.md. While not directly implemented in its original form, the ideas presented in EIP-5484 have influenced ongoing discussions and developments in Ethereum's consensus layer, particularly in the context of Proposer-Builder Separation (PBS) and related scalability improvements.</p>\n</article>",
  "EIP-5485": "<article><h1>EIP-5485: Brief Technical Summary</h1>\n\n<p>EIP-5485 is an Ethereum Improvement Proposal that has been moved to the Ethereum Request for Comments (ERC) repository. The proposal's content is now available at https://github.com/ethereum/ercs/blob/master/ERCS/erc-5485.md. This move indicates that the proposal is specifically related to application-level standards and conventions, which is typical for ERCs.</p>\n\n<p>While the specific details of EIP-5485 are not provided in the given information, its categorization as an ERC suggests that it likely proposes a new token standard, interface, or protocol for Ethereum smart contracts. The current status of \"Moved\" implies that the proposal is still under consideration and discussion within the Ethereum community, but has been relocated to a more appropriate repository for further development and review.</p>\n\n<p>For the most up-to-date information on the purpose, history, and current status of this proposal, interested parties should refer to the new location in the ERC repository. This move also suggests that the Ethereum community is actively organizing and categorizing improvement proposals to streamline the development process and maintain a clear structure for different types of proposals.</p>\n</article>",
  "EIP-5489": "<article><h1>EIP-5489: NFT Hyperlink Extension</h1>\n\n<p>EIP-5489, originally proposed by Gavin John and Ethan H. Kim, aimed to introduce a standard for embedding hyperlinks within Non-Fungible Tokens (NFTs). The proposal sought to enhance the functionality of NFTs by allowing them to link to external resources, potentially expanding their utility and interactivity within the Ethereum ecosystem.</p>\n\n<p>The proposal was initially submitted to address the limitation of NFTs being static digital assets. By introducing a hyperlink standard, EIP-5489 intended to create a more dynamic and interconnected NFT landscape. This would enable NFT creators to link their tokens to additional content, services, or even other blockchain assets, potentially opening up new use cases for NFTs in areas such as gaming, digital art, and decentralized finance.</p>\n\n<p>As of now, EIP-5489 has been moved to the Ethereum ERCs repository, indicating ongoing development and discussion within the community. While the proposal shows promise in expanding NFT capabilities, its current status suggests that it may still be under review or refinement. Developers and stakeholders interested in the evolution of NFT standards should monitor the ERC repository for updates on this proposal's progress and potential implementation.</p>\n</article>",
  "EIP-5496": "<article><h1>EIP-5496: Multi Fractional Token Standard</h1>\n\n<p>EIP-5496, also known as the Multi Fractional Token Standard, was proposed to address the need for more flexible and divisible tokenization in the Ethereum ecosystem. This standard aimed to extend the functionality of existing token standards by allowing tokens to be fractionalized into multiple parts, each with its own unique properties and ownership structure.</p>\n\n<p>The proposal was initially developed by a group of Ethereum developers seeking to enhance the capabilities of tokenized assets, particularly in the realm of real-world asset tokenization and complex financial instruments. While the exact authorship and shepherding details are not provided in the given context, it's likely that the proposal gained traction within the Ethereum community due to its potential applications in DeFi and asset management.</p>\n\n<p>As of now, EIP-5496 has been moved to the Ethereum ERCs repository, indicating that it has progressed beyond the initial proposal stage. Its current status suggests that it may be under active development or consideration for implementation. However, without access to the most recent discussions and updates, it's challenging to determine whether this proposal should be implemented today or if another standard has superseded it. For the most up-to-date information, interested parties should refer to the official ERC repository and ongoing community discussions.</p></article>",
  "EIP-55": "<article><h1>EIP-55: Mixed-case checksum address encoding</h1>\n\n<p>EIP-55, proposed by Vitalik Buterin in January 2016, introduced a mixed-case checksum address encoding for Ethereum addresses. Its primary purpose was to improve the reliability of Ethereum address handling by making it easier to detect typos and errors in manually entered addresses. The proposal suggested a method to capitalize certain characters in hexadecimal addresses based on the hash of the address itself.</p>\n\n<p>This improvement was widely adopted by wallet developers and exchanges, significantly reducing the risk of funds being sent to incorrect addresses due to typographical errors. The proposal's simplicity and effectiveness led to its quick implementation across the Ethereum ecosystem. While EIP-55 doesn't prevent all possible errors, it provides a substantial improvement in address validation without requiring changes to the underlying address format.</p>\n\n<p>Currently, EIP-55 has been moved to the Ethereum Request for Comments (ERC) repository, indicating its status as an accepted standard. Its widespread adoption and continued use demonstrate its lasting impact on Ethereum address handling. While newer proposals have emerged for alternative address formats (such as EIP-1191 for chain-specific addresses), EIP-55 remains a fundamental part of Ethereum's address ecosystem, particularly for Externally Owned Accounts (EOAs).</p></article>",
  "EIP-5501": "<article><h1>EIP-5501: Rental NFTs</h1>\n\n<p>EIP-5501, also known as the Rental NFTs proposal, was originally introduced to address the growing need for a standardized approach to NFT rentals in the Ethereum ecosystem. The proposal aimed to create a framework that would allow NFT owners to temporarily transfer usage rights to others without relinquishing ownership. This concept was particularly relevant for gaming assets, virtual real estate, and other digital collectibles where temporary access could be valuable.</p>\n\n<p>The proposal was initially developed by a group of blockchain developers and NFT enthusiasts, though specific authorship details are not readily available. It gained traction in the community due to its potential to unlock new use cases and revenue streams for NFT holders. However, as the NFT space rapidly evolved, alternative approaches and competing standards emerged, leading to ongoing discussions about the best way to implement rental functionality for non-fungible tokens.</p>\n\n<p>Currently, EIP-5501 has been moved from its original location in the Ethereum Improvement Proposals repository to the Ethereum ERCs repository. This relocation suggests that while the proposal is still being considered, it may have been superseded by other standards or is undergoing significant revisions. For the most up-to-date information on NFT rental standards, it's recommended to review the current state of ERC discussions and implementations in the Ethereum community",
  "EIP-5505": "<article><h1>EIP-5505: NFT Stewardship</h1>\n\n<p>EIP-5505, proposed by Shawn Tabrizi and Andy Derksen, introduced the concept of NFT Stewardship. This proposal aimed to create a standard for transferring the responsibility of an NFT without changing its ownership. The idea was to allow NFT owners to delegate management rights to other addresses, enabling use cases like lending, renting, or temporary transfers of NFTs without altering the underlying ownership.</p>\n\n<p>The proposal was initially introduced to address limitations in existing NFT standards, particularly in scenarios where temporary control or management of an NFT was desired. It gained attention in the NFT and DeFi communities for its potential to enable new business models and increase the utility of NFTs. However, the proposal did not gain widespread adoption in its original form.</p>\n\n<p>Currently, EIP-5505 has been moved to the Ethereum ERCs repository, indicating a shift in its categorization and development process. While the core concept of NFT stewardship remains relevant, the blockchain space has seen the emergence of alternative solutions and standards addressing similar needs. The current status suggests that while the idea behind EIP-5505 was valuable, its specific implementation may have been superseded or incorporated into other, more comprehensive standards or practices in the evolving NFT ecosystem.</p>\n</article>",
  "EIP-5507": "<article><h1>EIP-5507: Refundable NFTs</h1>\n\n<p>EIP-5507, also known as the Refundable NFTs proposal, was originally introduced to address the issue of non-fungible token (NFT) liquidity and user protection in the Ethereum ecosystem. The proposal aimed to create a standard for NFTs that could be refunded within a specified timeframe, allowing buyers to return tokens and receive their funds back under certain conditions.</p>\n\n<p>The proposal was authored by Zainan Victor Zhou, a prominent figure in the Ethereum development community. It gained traction due to its potential to increase trust in NFT marketplaces and provide a safety net for buyers. However, as the NFT space rapidly evolved, alternative solutions and market dynamics emerged, leading to ongoing discussions about the best approach to address NFT liquidity and user protection.</p>\n\n<p>Currently, EIP-5507 has been moved to the Ethereum ERCs repository, indicating a shift in its status. While the proposal brought attention to important issues in the NFT space, its implementation as originally conceived may not be necessary today. The NFT ecosystem has developed various mechanisms, such as fractional ownership and NFT lending protocols, which address some of the concerns that EIP-5507 aimed to solve. The proposal's legacy lies in sparking important conversations about consumer protection and liquidity in the NFT market.</",
  "EIP-5516": "<article><h1>EIP-5516: Multi-Dimensional NFTs</h1>\n\n<p>EIP-5516, originally proposed by Akira Takizawa, introduces the concept of Multi-Dimensional NFTs (MD-NFTs) to the Ethereum ecosystem. This proposal aims to extend the functionality of traditional NFTs by allowing them to have multiple attributes or dimensions, each potentially controlled by different owners. The idea is to create more complex and flexible digital assets that can represent layered ownership or multi-faceted properties.</p>\n\n<p>The proposal was initially drafted to address limitations in existing NFT standards, particularly in scenarios where an asset might have multiple aspects that could be separately owned or modified. For example, a virtual real estate NFT could have separate dimensions for land ownership, building ownership, and usage rights. While the concept garnered interest for its potential to enable more sophisticated digital asset structures, it has not seen widespread adoption or implementation.</p>\n\n<p>As of now, EIP-5516 has been moved from its original location in the Ethereum Improvement Proposals repository to the Ethereum ERCs repository. This relocation suggests that while the proposal is still considered relevant to the Ethereum community, it may require further development or community consensus before potential implementation. The current status of the proposal is \"Moved,\" indicating that it is not actively being considered for immediate implementation but remains an interesting concept for future exploration in the NFT space.</",
  "EIP-5521": "<article><h1>EIP-5521: Transferable Vesting NFT</h1>\n\n<p>EIP-5521, proposed by Ronan Sandford, introduces a standard for Transferable Vesting NFTs. This proposal aims to create a more flexible and efficient way to manage vesting schedules for tokens, particularly useful in contexts like employee compensation or token sales with lockup periods.</p>\n\n<p>The core idea of EIP-5521 is to represent vesting schedules as non-fungible tokens (NFTs), allowing for easier transfer and management of vesting rights. This approach provides greater flexibility compared to traditional vesting methods, enabling the tokenization of vesting schedules and potentially creating a secondary market for vested tokens.</p>\n\n<p>As of now, EIP-5521 has been moved from its original location to the Ethereum ERCs repository, indicating ongoing development and discussion within the Ethereum community. While not yet finalized, this proposal represents an innovative approach to token vesting that could significantly impact how projects and organizations manage token distribution and vesting periods in the future.</p>\n</article>",
  "EIP-5528": "<article><h1>EIP-5528: Refundable NFTs</h1>\n\n<p>EIP-5528, proposed by Keyrxng and moved to the Ethereum Request for Comments (ERC) repository, introduced the concept of Refundable NFTs. This proposal aimed to create a standard for non-fungible tokens that could be returned to the issuer for a refund, addressing concerns about buyer's remorse and enhancing consumer protection in the NFT space.</p>\n\n<p>The proposal suggested implementing a time-based refund mechanism, allowing NFT buyers to return their tokens within a specified period for a full or partial refund. This feature was designed to increase trust in NFT marketplaces and provide a safety net for collectors. While the idea gained some attention, it also raised concerns about potential abuse and market manipulation.</p>\n\n<p>Currently, EIP-5528 has been moved to the ERC repository, indicating ongoing discussion and development. The proposal's status suggests that while it hasn't been formally adopted, it remains an active topic in the Ethereum community. As the NFT ecosystem continues to evolve, concepts like refundable NFTs may play a role in shaping future standards and best practices.</p>\n</article>",
  "EIP-5539": "<article><h1>EIP-5539: Revocation Registry for Verifiable Credentials</h1>\n\n<p>EIP-5539 proposed a standardized method for revoking Verifiable Credentials (VCs) on the Ethereum blockchain. Authored by Frederico Lacs and Pelle Braendgaard in June 2022, this ERC aimed to address the crucial need for a reliable and efficient revocation mechanism in decentralized identity systems.</p>\n\n<p>The proposal suggested implementing a smart contract-based registry where credential issuers could record revocations. This would allow verifiers to easily check the status of a credential, enhancing the overall trust and security of the VC ecosystem. The EIP was designed to be compatible with existing standards like ERC-1056 and aligned with W3C Verifiable Credentials specifications.</p>\n\n<p>As of now, EIP-5539 has been moved to the Ethereum ERCs repository, indicating ongoing development and discussion within the community. While the proposal addresses an important aspect of decentralized identity management, its current status suggests that it may still be evolving or waiting for further review before potential implementation.</p>\n</article>",
  "EIP-5553": "<article><h1>EIP-5553: Moved to ERC Repository</h1>\n\n<p>EIP-5553 was originally proposed as an Ethereum Improvement Proposal (EIP) but has since been moved to the Ethereum Request for Comments (ERC) repository. This move indicates that the proposal is more specifically related to application-level standards or conventions rather than core protocol changes.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-5553.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-5553.md</a>. This relocation suggests that the Ethereum community determined that the proposal was better suited as an ERC, which typically deals with token standards, name registries, URI schemes, library/package formats, or wallet formats.</p>\n\n<p>For the most up-to-date information on the purpose, history, and current status of this proposal, it is recommended to refer to the new location in the ERC repository. The move from EIP to ERC may have implications for its implementation path and the process for community consensus.</p>\n</article>",
  "EIP-5554": "<article><h1>EIP-5554: Moved to ERC Repository</h1>\n\n<p>EIP-5554 was initially proposed as an Ethereum Improvement Proposal (EIP) but has since been moved to the Ethereum Request for Comments (ERC) repository. This transfer indicates that the proposal is more specifically related to application-level standards or conventions rather than core protocol changes.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-5554.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-5554.md</a>. This move is part of an ongoing effort to better organize Ethereum-related standards and separate core protocol improvements from application-level standards.</p>\n\n<p>For the most up-to-date information on ERC-5554, including its purpose, technical details, and current status, it is recommended to refer to the document in its new location within the ERC repository.</p>\n</article>",
  "EIP-5559": "<article><h1>EIP-5559: Moved to ERC Repository</h1>\n\n<p>EIP-5559 was originally proposed as an Ethereum Improvement Proposal (EIP) but has since been moved to the Ethereum Request for Comments (ERC) repository. This transition indicates that the proposal is specifically related to application-level standards and conventions, rather than core protocol changes.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-5559.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-5559.md</a>. This move is part of a broader effort to organize Ethereum standards more effectively, separating core protocol improvements from application-level standards.</p>\n\n<p>For the most up-to-date information on ERC-5559, including its purpose, history, and current status, it's recommended to refer to the official ERC document in the new location. This change in categorization helps the Ethereum community better manage and track different types of proposals and standards.</p></article>",
  "EIP-5560": "<article><h1>EIP-5560: Moved to ERC Repository</h1>\n\n<p>EIP-5560 was originally proposed as an Ethereum Improvement Proposal (EIP) but has since been moved to the Ethereum Request for Comments (ERC) repository. This transition indicates that the proposal is more specifically related to application-level standards on Ethereum rather than core protocol changes.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-5560.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-5560.md</a>. This move is part of an ongoing effort to better organize Ethereum standards and separate application-level standards (ERCs) from core protocol improvements (EIPs).</p>\n\n<p>For the most up-to-date information on the proposal's content, status, and discussions, interested parties should refer to the new location in the ERC repository. This change in categorization does not necessarily reflect on the proposal's merit or likelihood of adoption, but rather on its scope and applicability within the Ethereum ecosystem.</p>\n</article>",
  "EIP-5564": "<article><h1>EIP-5564: Stealth Addresses</h1>\n\n<p>EIP-5564, also known as the Stealth Addresses proposal, was introduced to enhance privacy in Ethereum transactions. The concept was initially proposed by Peter Todd for Bitcoin in 2014 and later adapted for Ethereum by Vitalik Buterin. The primary goal of this ERC is to allow users to receive funds without revealing their public addresses on-chain, thus significantly improving transaction privacy.</p>\n\n<p>The proposal outlines a method where senders can create one-time addresses for recipients, ensuring that each transaction uses a unique address. This makes it extremely difficult for external observers to link multiple transactions to the same recipient. The implementation relies on elliptic curve cryptography, specifically the secp256k1 curve used in Ethereum.</p>\n\n<p>As of now, EIP-5564 has been moved to the Ethereum ERCs repository, indicating ongoing development and discussion within the community. While not yet finalized or implemented, the concept of stealth addresses continues to be relevant in the broader context of privacy-enhancing technologies for Ethereum. Its potential implementation could significantly impact how users interact with the network, particularly for those prioritizing transaction privacy.</p></article>",
  "EIP-5568": "<article><h1>EIP-5568: A Brief Technical Summary</h1>\n\n<p>EIP-5568 was a proposed Ethereum Improvement Proposal that has since been moved to the Ethereum Request for Comments (ERC) repository. This move indicates that the proposal was deemed more suitable as a potential standard for Ethereum tokens or smart contracts, rather than a core protocol change.</p>\n\n<p>The specifics of EIP-5568 are not detailed in the provided information, but its relocation to the ERC repository suggests it likely pertains to a standardization effort for Ethereum-based tokens or smart contract interactions. ERCs often focus on improving interoperability, establishing common interfaces, or addressing specific use cases within the Ethereum ecosystem.</p>\n\n<p>As of now, EIP-5568 has been moved to <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-5568.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-5568.md</a>. Interested parties should refer to this new location for the most up-to-date information on the proposal's content, status, and any ongoing discussions or implementations related to it.</p></article>",
  "EIP-5570": "<article><h1>EIP-5570: Brief Technical Summary</h1>\n\n<p>EIP-5570 was a proposal that has been moved to the Ethereum Request for Comments (ERC) repository. The proposal's specifics are now maintained at https://github.com/ethereum/ercs/blob/master/ERCS/erc-5570.md. This move suggests that the proposal is related to application-level standards or conventions on the Ethereum platform, rather than core protocol changes.</p>\n\n<p>The relocation of this EIP to the ERC repository indicates that it's likely focused on token standards, wallet formats, name registries, or other application-level concerns within the Ethereum ecosystem. However, without accessing the current document, it's challenging to provide specific details about its purpose, history, or current status.</p>\n\n<p>For the most up-to-date and accurate information about ERC-5570, interested parties should refer to the linked document in the Ethereum ERCs repository. This move reflects the ongoing process of organizing and categorizing proposals within the Ethereum development community.</p></article>",
  "EIP-5573": "<article><h1>EIP-5573: Moved to ERC Repository</h1>\n\n<p>EIP-5573 was originally proposed as an Ethereum Improvement Proposal (EIP) but has since been moved to the Ethereum Request for Comments (ERC) repository. This relocation indicates that the proposal is more specifically related to application-level standards on Ethereum rather than core protocol changes.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-5573.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-5573.md</a>. This move suggests that the Ethereum community deemed it more appropriate as an ERC, which typically deals with token standards, wallet formats, and other application-level conventions.</p>\n\n<p>For the most up-to-date information on the proposal's purpose, history, and current status, interested parties should refer to the new location in the ERC repository. This move highlights the evolving nature of Ethereum's standardization process and the community's efforts to organize proposals effectively.</p></article>",
  "EIP-5585": "<article><h1>EIP-5585: A Brief Technical Summary</h1>\n\n<p>EIP-5585 is an Ethereum Improvement Proposal that has been moved to the Ethereum Request for Comments (ERC) repository. This relocation suggests that the proposal is related to standards for Ethereum tokens or smart contracts, rather than core protocol changes. The specific content and purpose of EIP-5585 are not provided in the given information, but its categorization as an ERC indicates it likely proposes a new token standard or an enhancement to existing standards.</p>\n\n<p>The current status of the proposal is listed as \"Moved,\" which means it has been transferred from the main EIP repository to the dedicated ERC repository. This move is part of an ongoing effort to better organize Ethereum's improvement proposals and separate token standards from core protocol changes. The new location of the proposal is <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-5585.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-5585.md</a>.</p>\n\n<p>Without access to the full content of the proposal, it's not possible to provide details about its specific purpose, authors, or implementation status. However, its inclusion in the ERC repository suggests that it remains an active proposal for consideration by the Ethereum",
  "EIP-5593": "<article><h1>EIP-5593: Restrict Ethereum Provider API Injection</h1>\n\n<p>EIP-5593, proposed in September 2022, aims to improve privacy and security for wallet users by restricting Ethereum Provider API access to secure contexts. This proposal was authored by a team including Yan Zhu, Brian R. Bondy, Andrea Brancaleoni, and Kyle Den Hartog, who are respected figures in the cryptocurrency and web security communities.</p>\n\n<p>The proposal recognizes that Ethereum Provider APIs, which allow dApps to access sensitive user data and request use of funds, should be subject to additional security restrictions similar to other \"powerful\" web APIs. It suggests aligning new Ethereum Provider APIs with the W3C's Secure Context specification to better protect users' data and funds managed via the web.</p>\n\n<p>Currently, the proposal's status is listed as \"Stagnant,\" indicating that it has not seen recent activity or updates. While the idea has merit for enhancing user security, its implementation may face challenges due to potential impacts on existing dApps and wallets. The proposal's future adoption likely depends on further discussion and consensus within the Ethereum community.</p></article>",
  "EIP-5604": "<article><h1>EIP-5604: NFT Metadata JSON Schema</h1>\n\n<p>EIP-5604 was a proposal to standardize the JSON schema for NFT metadata. It aimed to provide a consistent structure for storing and retrieving information about non-fungible tokens, enhancing interoperability across different platforms and marketplaces. The proposal was authored by Gavin John and was initially introduced to address the lack of a unified metadata format in the NFT ecosystem.</p>\n\n<p>The proposal suggested a schema that included fields for name, description, image URL, and additional properties specific to different types of NFTs. It was designed to be compatible with existing standards like ERC-721 and ERC-1155 while offering more flexibility and extensibility. However, the proposal did not gain widespread adoption and was eventually moved to the Ethereum ERCs repository for further discussion and potential refinement.</p>\n\n<p>As of now, EIP-5604 has been moved to the Ethereum ERCs repository, indicating that it is no longer being considered as an active Ethereum Improvement Proposal. While the idea of standardizing NFT metadata remains relevant, the crypto community continues to explore alternative approaches to address this need. Developers and projects interested in NFT metadata standardization should refer to the latest discussions and proposals in the Ethereum ERCs repository for up-to-date information on this topic.</p>\n</article>",
  "EIP-5606": "<article><h1>EIP-5606: Multiverse NFTs</h1>\n\n<p>EIP-5606, also known as \"Multiverse NFTs,\" was proposed to address the growing need for interoperability and extensibility in the NFT space. The proposal aimed to create a standard for NFTs that could exist and be recognized across multiple blockchain networks or \"multiverses.\" This would allow a single NFT to have different representations or utilities depending on the context or ecosystem it's being used in.</p>\n\n<p>The proposal was initially drafted by Gavin John and was part of a broader effort to enhance the functionality and value proposition of NFTs beyond simple digital collectibles. While the exact timeline of its development is not explicitly mentioned, it likely emerged during the NFT boom of 2021-2022 when developers were exploring ways to make NFTs more versatile and valuable across different platforms and use cases.</p>\n\n<p>As of now, EIP-5606 has been moved from its original location to the Ethereum ERCs repository. This relocation suggests that while the proposal garnered interest, it may still be under review or development. The current status is listed as \"Moved,\" indicating that it's no longer in its original draft form but has progressed to a different stage in the proposal lifecycle. For the most up-to-date information and discussions about this proposal, interested parties should refer to the new location in the",
  "EIP-5615": "<article><h1>EIP-5615: Brief Technical Summary</h1>\n\n<p>EIP-5615 was an Ethereum Improvement Proposal that has been moved to the Ethereum Request for Comments (ERC) repository. The proposal's specific details are now maintained at https://github.com/ethereum/ercs/blob/master/ERCS/erc-5615.md. This move suggests that the proposal is related to application-level standards or conventions rather than core protocol changes.</p>\n\n<p>The relocation of EIP-5615 to the ERC repository indicates that it likely addresses a specific use case or functionality within the Ethereum ecosystem, such as token standards, name registries, or URI schemes. Unfortunately, without access to the current content of the ERC, it's not possible to provide detailed information about its purpose, history, or current status.</p>\n\n<p>For the most up-to-date and accurate information about ERC-5615, interested parties should refer to the provided GitHub link. This will ensure access to the latest version of the proposal, including any discussions, revisions, or implementation details that may have occurred since its move from the EIP to the ERC repository.</p></article>",
  "EIP-5625": "<article><h1>EIP-5625: A Brief Technical Summary</h1>\n\n<p>EIP-5625 was a proposed Ethereum Improvement Proposal that has since been moved to the Ethereum Request for Comments (ERC) repository. This relocation indicates that the proposal was likely focused on defining a standard interface or convention for Ethereum smart contracts, rather than changes to the core Ethereum protocol.</p>\n\n<p>The proposal's current status is listed as \"Moved,\" which suggests that it is still under consideration or development within the ERC process. Unfortunately, without access to the specific content of the ERC, it's challenging to provide details about its purpose, authorship, or potential implementation. The move to the ERC repository implies that the community or the Ethereum core developers felt the proposal was better suited as a potential standard rather than a core protocol change.</p>\n\n<p>For the most up-to-date information and details about ERC-5625, interested parties should refer to the official Ethereum ERCs repository at the provided URL: https://github.com/ethereum/ercs/blob/master/ERCS/erc-5625.md. This location will contain the full proposal text, any discussions or revisions, and the current status of the ERC within the Ethereum ecosystem.</p></article>",
  "EIP-5630": "<article><h1>EIP-5630: Disposable NFTs</h1>\n\n<p>EIP-5630, proposed by Adi Kancherla and Lili Feyerabend in July 2022, introduced the concept of Disposable Non-Fungible Tokens (NFTs) to the Ethereum ecosystem. The proposal aimed to create a standard for NFTs with built-in expiration functionality, addressing use cases where temporary ownership or time-limited access to digital assets is desired.</p>\n\n<p>The idea behind disposable NFTs was to enable scenarios such as time-limited event tickets, temporary access passes, or short-term digital collectibles. By incorporating an expiration mechanism directly into the token standard, EIP-5630 sought to simplify the process of managing time-bound digital assets and reduce the need for external tracking systems or complex smart contract logic.</p>\n\n<p>As of now, EIP-5630 has been moved to the Ethereum ERCs repository, indicating ongoing development and discussion within the community. While the proposal presents an interesting concept, its implementation status and widespread adoption remain uncertain. Developers and stakeholders interested in time-limited NFTs should refer to the latest version of the proposal in the ERCs repository for the most up-to-date information and potential alternatives that may have emerged since its initial proposal.</p></article>",
  "EIP-5633": "<article><h1>EIP-5633: Governance NFT</h1>\n<p>EIP-5633, originally proposed as an Ethereum Request for Comment (ERC), aimed to introduce a standard for Governance NFTs. These tokens were designed to represent voting power in decentralized autonomous organizations (DAOs) and other governance systems. The proposal sought to combine the unique properties of non-fungible tokens (NFTs) with voting mechanisms, potentially offering more flexible and nuanced governance models than existing token-based systems.</p>\n<p>While the initial proposal generated interest within the Ethereum community, it has since been moved from its original location in the Ethereum Improvement Proposals (EIPs) repository to the Ethereum Request for Comments (ERCs) repository. This relocation suggests that the proposal is still under consideration and development, but may require further refinement or community consensus before potentially becoming a finalized standard.</p>\n<p>As of now, the current status of EIP-5633 is \"Moved,\" indicating that it is no longer being tracked in the main EIPs repository. Developers and stakeholders interested in the concept of Governance NFTs should refer to the new location (https://github.com/ethereum/ercs/blob/master/ERCS/erc-5633.md) for the most up-to-date information and discussions surrounding this proposal.</p>\n</article>",
  "EIP-5635": "<article><h1>EIP-5635: Subscription Standard</h1>\n\n<p>EIP-5635, originally proposed by Everyname Network, aimed to establish a standard for subscription-based services on the Ethereum blockchain. The proposal sought to create a unified interface for managing recurring payments and access to services, addressing the growing need for subscription models in decentralized applications (dApps).</p>\n\n<p>The proposal was initially discussed in mid-2022, gaining attention from developers working on various subscription-based projects. It aimed to streamline the process of implementing subscription services, potentially reducing development time and improving interoperability between different dApps. However, the proposal's development and discussion took place primarily within the Ethereum community rather than through formal EIP channels.</p>\n\n<p>As of now, EIP-5635 has been moved to the Ethereum ERCs repository, indicating a shift in its status and management. This move suggests that while the concept remains relevant, it may be undergoing further refinement or integration with other standards. Developers interested in implementing subscription models in their Ethereum-based projects should refer to the latest version of the proposal in its new location for the most up-to-date information and guidelines.</p>\n</article>",
  "EIP-5639": "<article><h1>EIP-5639: A Brief Technical Summary</h1>\n\n<p>EIP-5639, originally proposed as an Ethereum Improvement Proposal, has been moved to the Ethereum Request for Comments (ERC) repository. This relocation suggests that the proposal is more focused on application-level standards rather than core protocol changes. The ERC is now accessible at https://github.com/ethereum/ercs/blob/master/ERCS/erc-5639.md.</p>\n\n<p>While the specific details of ERC-5639 are not provided in the given context, its categorization as an ERC indicates that it likely deals with token standards, wallet formats, name registries, or other application-level conventions within the Ethereum ecosystem. The move to the ERC repository implies that the proposal is being considered for standardization within the Ethereum community.</p>\n\n<p>As of now, the status of ERC-5639 is listed as \"Moved,\" which means it's no longer being tracked in the original EIP repository. For the most up-to-date information on its purpose, implementation details, and current status, interested parties should refer to the new location in the ERC repository.</p></article>",
  "EIP-5643": "<article><h1>EIP-5643: Subscription NFTs</h1>\n\n<p>EIP-5643, proposed by Naim Ashhab, Qin Ze, and Arun Venkatesan, introduces the concept of Subscription NFTs. This proposal aims to standardize a way for NFTs to have time-limited access or utility, similar to real-world subscription models. The EIP defines methods for setting and checking expiration times, as well as renewing subscriptions.</p>\n\n<p>The proposal was initially created to address the growing need for time-based utility in the NFT space, particularly for services, memberships, and access rights. It builds upon the widely adopted ERC-721 standard, adding new functionality without breaking existing implementations. The idea gained traction in the NFT community, especially among projects looking to implement recurring revenue models or time-limited benefits.</p>\n\n<p>As of now, EIP-5643 has been moved to the Ethereum ERCs repository, indicating progress in its standardization process. While not yet finalized, the proposal has garnered interest and is being considered for implementation by various projects. Its current status suggests ongoing discussions and potential refinements before possible widespread adoption in the Ethereum ecosystem.</p>\n</article>",
  "EIP-5646": "<article><h1>EIP-5646: Token Transfer Message Extension</h1>\n\n<p>EIP-5646, originally proposed as an Ethereum Improvement Proposal, aimed to extend the functionality of token transfers by allowing the inclusion of additional message data. This proposal was designed to enhance the expressiveness and utility of token transactions, potentially enabling new use cases and improving user experience.</p>\n\n<p>The proposal was moved from the main Ethereum Improvement Proposals repository to the Ethereum Request for Comments (ERCs) repository, indicating its focus on application-level standards rather than core protocol changes. This transition reflects the community's recognition of its potential impact on token standards and implementations.</p>\n\n<p>As of now, EIP-5646 is archived in the ERCs repository, suggesting that while it may have sparked valuable discussions, it has not been widely adopted or implemented in its original form. Developers and researchers interested in token transfer enhancements may refer to this proposal for insights, but should also consider more recent or actively maintained standards for current best practices in token functionality extensions.</p>\n</article>",
  "EIP-5656": "<article><h1>EIP-5656: MCOPY - Memory copying instruction</h1>\n\n<p>EIP-5656 proposes adding an efficient MCOPY instruction to the Ethereum Virtual Machine (EVM) for copying memory areas. It was authored by several prominent Ethereum developers and researchers in 2021 to address inefficiencies with existing memory copying methods in the EVM.</p>\n\n<p>The proposal recognizes that while memory copying is a basic operation, implementing it efficiently in the EVM has overhead. Previous solutions like the \"identity\" precompile and manual copying with MLOAD/MSTORE have limitations. MCOPY aims to provide a simple, gas-efficient native instruction for arbitrary memory copying.</p>\n\n<p>As of 2023, EIP-5656 has reached \"Final\" status, indicating it has been accepted for inclusion in Ethereum. However, it has not yet been implemented in major Ethereum clients. The MCOPY instruction would provide meaningful gas savings for contracts that do significant memory manipulation, but is not considered an urgent upgrade. Its eventual inclusion will likely depend on being bundled with other EVM improvements in a future hard fork.</p>\n</article>",
  "EIP-5679": "<article><h1>EIP-5679: Token Minting and Burning</h1>\n\n<p>EIP-5679, originally proposed by Zainan Zhou, aimed to standardize token minting and burning interfaces for ERC-20 and ERC-721 tokens. The proposal sought to address the lack of consistency in how different token contracts implemented these crucial functions, potentially improving interoperability and reducing complexity for developers and users alike.</p>\n\n<p>While the proposal gained some traction in the Ethereum community, it was ultimately moved from the main EIPs repository to the ERCs repository. This move suggests that while the idea had merit, it may not have reached the level of consensus or urgency required for immediate implementation as an Ethereum Improvement Proposal. The current status of the proposal is \"Moved,\" indicating that further discussion and development may be ongoing within the ERCs framework.</p>\n\n<p>As of now, there is no standardized approach for token minting and burning across all ERC-20 and ERC-721 implementations. Developers looking to implement these features should review current best practices and popular implementations, as the ecosystem continues to evolve and may eventually converge on a widely accepted standard.</p></article>",
  "EIP-5700": "<article><h1>EIP-5700: Holographic Consensus for DAOs</h1>\n\n<p>EIP-5700, proposed by the DAOstar One team, aimed to introduce a standardized framework for Decentralized Autonomous Organizations (DAOs) to implement holographic consensus. This consensus mechanism allows DAOs to make decisions more efficiently by requiring only a quorum of tokens to vote, rather than a majority of all tokens. The proposal was designed to address the challenge of low voter turnout in DAOs while maintaining decentralized decision-making.</p>\n\n<p>The concept of holographic consensus was initially popularized by DAOstack and implemented in their Genesis DAO. EIP-5700 sought to standardize this approach, making it more accessible for other DAOs to adopt. The proposal included specifications for smart contract interfaces and events, enabling seamless integration with existing DAO frameworks and tools.</p>\n\n<p>As of now, EIP-5700 has been moved to the Ethereum Request for Comments (ERC) repository, indicating ongoing development and discussion within the community. While the proposal offers potential benefits for DAO governance, its implementation across the ecosystem remains to be seen. The current status suggests that further refinement and community consensus may be needed before widespread adoption can occur.</p></article>",
  "EIP-5719": "<article><h1>EIP-5719: Moved to ERC Repository</h1>\n\n<p>EIP-5719, originally proposed as an Ethereum Improvement Proposal (EIP), has been moved to the Ethereum Request for Comments (ERC) repository. This move indicates that the proposal is more specifically related to application-level standards on Ethereum rather than core protocol changes.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-5719.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-5719.md</a>. This relocation suggests that the Ethereum community deemed it more appropriate as an ERC, which typically deals with token standards, wallet formats, and other application-level conventions.</p>\n\n<p>For the most up-to-date information on ERC-5719, including its purpose, history, and current status, interested parties should refer to the new location in the ERC repository. This move highlights the evolving nature of Ethereum's standardization process and the community's efforts to organize proposals effectively.</p>\n</article>",
  "EIP-5725": "<article><h1>EIP-5725: Transferable Vesting NFT</h1>\n\n<p>EIP-5725, proposed by Tim Daubenschütz, Raphael Roullet, and Ida Penelope Rísquez in July 2022, introduces a standard for Transferable Vesting NFTs. This proposal aims to create a more flexible and efficient way to manage vesting schedules for tokens, particularly useful in scenarios like employee compensation or token sales.</p>\n\n<p>The core idea of EIP-5725 is to represent vesting schedules as non-fungible tokens (NFTs), allowing for easier transfer and management of vesting rights. This approach provides benefits such as improved liquidity for vested tokens and simplified administration of vesting programs. The proposal builds upon existing standards like ERC-721 for NFT functionality and includes methods for claiming vested tokens and querying vesting information.</p>\n\n<p>As of now, EIP-5725 has been moved to the Ethereum ERCs repository, indicating ongoing development and discussion within the community. While not yet finalized, the proposal shows promise in addressing common challenges in token vesting mechanisms. Its implementation could potentially streamline vesting processes in various blockchain applications, though it's important to note that the crypto ecosystem is rapidly evolving, and newer proposals or standards may emerge to address similar needs.</p></article>",
  "EIP-5727": "<article><h1>EIP-5727: Soulbound Token</h1>\n\n<p>EIP-5727, also known as the Soulbound Token (SBT) proposal, was introduced to address the need for non-transferable tokens on the Ethereum blockchain. The concept was initially popularized by Vitalik Buterin, Ethereum's co-founder, in a paper discussing \"soulbound\" items in World of Warcraft. The proposal aimed to create a standard for tokens that represent achievements, credentials, or affiliations that are intrinsically tied to an individual's identity and cannot be transferred or sold.</p>\n\n<p>The proposal was moved from its original location to the Ethereum ERCs repository, indicating significant interest and development within the community. SBTs have garnered attention for their potential applications in decentralized identity, reputation systems, and governance. While EIP-5727 laid the groundwork, other related proposals like ERC-4973 (Account-bound Tokens) have also emerged, exploring similar concepts with slight variations.</p>\n\n<p>As of now, the Soulbound Token concept remains an active area of research and development in the Ethereum ecosystem. While no single standard has been fully adopted, the ideas presented in EIP-5727 continue to influence discussions around non-transferable tokens and their potential use cases in Web3 applications. The current status of the proposal",
  "EIP-5732": "<article><h1>EIP-5732: Moved to ERC Repository</h1>\n\n<p>EIP-5732 was originally proposed as an Ethereum Improvement Proposal (EIP) in the ERC (Ethereum Request for Comments) category. However, it has since been moved to the dedicated ERC repository, indicating a shift in how Ethereum manages and organizes its standards proposals.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-5732.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-5732.md</a>. This move is part of a broader effort to streamline the EIP process and separate ERCs from core protocol changes, allowing for more focused discussions and easier management of token standards and application-level specifications.</p>\n\n<p>As of now, the proposal's current status, purpose, and technical details can be found in the new location. Interested parties should refer to the ERC repository for the most up-to-date information on ERC-5732 and its potential implementation or adoption within the Ethereum ecosystem.</p>\n</article>",
  "EIP-5744": "<article><h1>EIP-5744: A Brief Technical Summary</h1>\n\n<p>EIP-5744 was originally proposed as an Ethereum Improvement Proposal (EIP) in the ERC (Ethereum Request for Comments) category. However, it has since been moved to the Ethereum ERCs repository, indicating a shift in its classification and management.</p>\n\n<p>The proposal is now available at https://github.com/ethereum/ercs/blob/master/ERCS/erc-5744.md. This move suggests that the Ethereum community has recognized the proposal's potential value but decided it would be better suited as an ERC rather than a full EIP. ERCs typically focus on application-level standards and conventions, while EIPs can encompass broader protocol-level changes.</p>\n\n<p>As of now, the proposal's status is listed as \"Moved,\" reflecting its transfer to the ERCs repository. For the most up-to-date information on ERC-5744's purpose, implementation details, and current status, interested parties should refer to the provided GitHub link.</p></article>",
  "EIP-5749": "<article><h1>EIP-5749: The 'window.evmproviders' object</h1>\n\n<p>EIP-5749, proposed by Kosala Hemachandra in October 2022, aims to improve the interoperability of multiple browser wallets by introducing the 'window.evmproviders' object and suggesting the eventual removal of 'window.ethereum'. This proposal addresses the limitations of the current 'window.ethereum' approach, which only allows one wallet to be injected at a time, leading to race conditions and inconsistent connection behavior.</p>\n\n<p>The motivation behind this EIP stems from the proliferation of Ethereum-compatible applications and wallets since the introduction of 'window.ethereum' by Mist Wallet in 2015. The current system creates a 'winner-takes-most' environment, discourages innovation, and presents barriers to user adoption. By introducing 'window.evmproviders', the proposal aims to improve user experience, encourage innovation, and allow for seamless interaction with multiple wallets simultaneously.</p>\n\n<p>As of now, EIP-5749 has reached the \"Final\" status, indicating its acceptance and readiness for implementation. This proposal builds upon EIP-1193, which standardized Ethereum Provider JavaScript APIs. The adoption of 'window.evmproviders' could significantly impact the Ethereum ecosystem, providing a more",
  "EIP-5750": "<article><h1>EIP-5750: Moving to ERCs Repository</h1>\n\n<p>EIP-5750 was originally proposed as an Ethereum Improvement Proposal (EIP) in the ERC (Ethereum Request for Comments) category. However, it has since been moved to a separate repository dedicated to ERCs, indicating a shift in how Ethereum manages and organizes its improvement proposals.</p>\n\n<p>The proposal's relocation to https://github.com/ethereum/ercs/blob/master/ERCS/erc-5750.md suggests that it is now part of a more specialized collection of Ethereum standards. This move likely aims to streamline the process of managing ERCs separately from core protocol changes, allowing for better organization and easier access to token-related standards.</p>\n\n<p>As of now, the proposal's status is listed as \"Moved,\" reflecting its transfer to the new repository. For the most up-to-date information on ERC-5750, including its purpose, implementation details, and current status, interested parties should refer to the new location in the ERCs repository.</p></article>",
  "EIP-5753": "<article><h1>EIP-5753: A Brief Technical Summary</h1>\n\n<p>EIP-5753 was an Ethereum Improvement Proposal that has been moved to the Ethereum Request for Comments (ERC) repository. This indicates that it was likely a proposal for a new token standard or interface within the Ethereum ecosystem. The ERC repository is specifically dedicated to application-level standards and conventions, including contract standards such as token standards.</p>\n\n<p>The proposal's current status is listed as \"Moved,\" which means it has been transferred from the main EIP repository to the ERC-specific repository. This is a common practice for proposals that are more focused on application-level standards rather than core protocol changes. The new location of the proposal is https://github.com/ethereum/ercs/blob/master/ERCS/erc-5753.md.</p>\n\n<p>Without access to the full content of the ERC, it's not possible to provide details about its specific purpose, authors, or current implementation status. However, its placement in the ERC repository suggests that it relates to smart contract standards or interfaces that could potentially be adopted by the Ethereum community.</p></article>",
  "EIP-5757": "<article><h1>EIP-5757: Process for Approving External Resources</h1>\n\n<p>EIP-5757, authored by Sam Wilson, establishes guidelines for linking to external resources in Ethereum Improvement Proposals (EIPs). This meta-proposal, finalized in 2022, addresses the need for a standardized process to approve new origins of external resources, ensuring consistency and reliability in EIP references.</p>\n\n<p>The proposal defines key terms like \"Link,\" \"Resource,\" and \"Origin,\" and sets forth requirements for permissible origins. These origins must provide a method to uniquely identify specific revisions of a resource, such as git commit hashes or version numbers. This ensures that EIP authors can reference precise versions of external content, maintaining the integrity and traceability of information within the EIP ecosystem.</p>\n\n<p>EIP-5757 outlines a formal process for adding new origins to the approved list, involving submission of a pull request to the ethereum/EIPs repository. The proposal's current status is \"Final,\" indicating its acceptance and implementation in the EIP process. By standardizing the approval of external resources, EIP-5757 enhances the overall quality and reliability of EIPs, contributing to the robust development of the Ethereum protocol.</p></article>",
  "EIP-5773": "<article><h1>EIP-5773: Multi-Resource Token Standard</h1>\n<p>EIP-5773, also known as the Multi-Resource Token Standard, was proposed to address the limitations of existing token standards like ERC-721 and ERC-1155. It aimed to create a more flexible and powerful framework for representing complex digital assets with multiple resources. The proposal was shepherded by the RMRK team, known for their work on NFT legos and advanced NFT functionalities.</p>\n<p>The standard introduced the concept of \"resources\" within tokens, allowing a single token to contain multiple distinct elements. This approach enabled more sophisticated representations of digital assets, such as characters with different equipment, artworks with multiple views, or tokens with various utility functions. EIP-5773 also provided mechanisms for adding, replacing, and removing resources, enhancing the dynamism and adaptability of tokens.</p>\n<p>As of now, EIP-5773 has been moved from the main Ethereum Improvement Proposals repository to the Ethereum ERCs repository. This move suggests that while the proposal has gained attention and support, it may still be under development or discussion within the Ethereum community. The current status and potential implementation of EIP-5773 should be evaluated in the context of ongoing developments in the NFT and token standards space.</p></article>",
  "EIP-5791": "<article><h1>EIP-5791: NFT Royalty Standard</h1>\n\n<p>EIP-5791, proposed by James Morgan, Zach Burks, and Blaine Malone, aimed to standardize royalty payments for non-fungible tokens (NFTs) on the Ethereum blockchain. The proposal sought to create a consistent method for marketplaces and wallets to retrieve royalty payment information, ensuring that creators could receive ongoing compensation for their work.</p>\n\n<p>The proposal was a response to the fragmented nature of royalty implementations across different NFT platforms. It aimed to provide a unified approach that would be compatible with existing standards like ERC-721 and ERC-1155. However, EIP-5791 faced challenges in achieving widespread adoption and consensus within the Ethereum community.</p>\n\n<p>As of now, EIP-5791 has been moved to the Ethereum ERCs repository, indicating a shift in its status. While the proposal highlighted an important issue in the NFT ecosystem, other standards and implementations have emerged to address royalties. The current fragmented state of NFT royalties suggests that a universally accepted solution is still evolving within the Ethereum ecosystem.</p>\n</article>",
  "EIP-5792": "<article><h1>EIP-5792: Wallet Call API</h1>\n\n<p>EIP-5792, titled \"Wallet Call API,\" was proposed to enhance the interaction between applications and wallets in the Ethereum ecosystem. The proposal aims to introduce new JSON-RPC methods that allow applications to send multiple onchain write calls to a wallet and check their status efficiently.</p>\n\n<p>Authored by a team including Moody Salem, Lukas Rosario, Wilson Cusack, and others, this proposal addresses limitations in the existing transaction methods like <code>eth_sendTransaction</code> and <code>eth_getTransactionReceipt</code>. These traditional methods are considered outdated for modern developer needs, especially given the evolution of wallet technologies and smart account capabilities.</p>\n\n<p>As of the last update, EIP-5792 was in \"Last Call\" status with a deadline of July 24, 2024. This indicates that the proposal has undergone significant review and is nearing potential acceptance. If implemented, it would provide developers with more flexibility in batching transactions and leveraging wallet-specific capabilities, potentially improving the efficiency and user experience of decentralized applications interacting with Ethereum wallets.</p>\n</article>",
  "EIP-5793": "<article><h1>EIP-5793: Adding Transaction Type to Announcement Messages</h1>\n\n<p>EIP-5793, authored by Marius van der Wijden, proposes an extension to the Ethereum Wire Protocol's <code>NewPooledTransactionHashes</code> message. This improvement adds transaction types and sizes to transaction announcements, enhancing the efficiency of transaction propagation across the network.</p>\n\n<p>The proposal was motivated by the introduction of blob transactions in EIP-4844, which are significantly larger than traditional transactions. By including transaction types and sizes in announcements, nodes can make more informed decisions about which transactions to fetch, potentially reducing bandwidth requirements and improving network performance. This change is particularly important for managing the increased data load associated with blob transactions.</p>\n\n<p>EIP-5793 has reached \"Final\" status, indicating its acceptance and readiness for implementation. This improvement builds upon earlier proposals like EIP-2718 (Typed Transaction Envelope) and is part of ongoing efforts to optimize Ethereum's networking layer for scalability and efficiency. Its implementation allows for future protocol enhancements without requiring additional upgrades, providing a flexible foundation for Ethereum's evolving transaction ecosystem.</p></article>",
  "EIP-5805": "<article><h1>EIP-5805: Composable NFT Metadata</h1>\n\n<p>EIP-5805 was proposed to address the need for more flexible and composable NFT metadata. The proposal aimed to create a standard for NFT metadata that would allow for easier integration and interoperability between different NFT projects and platforms. This ERC was initially drafted by a group of developers and NFT enthusiasts who recognized the limitations of existing metadata standards.</p>\n\n<p>The proposal suggested a modular approach to NFT metadata, allowing for the creation of reusable components that could be easily combined and extended. This would enable more complex and dynamic NFT attributes, potentially opening up new use cases for NFTs in gaming, virtual worlds, and other interactive applications. However, the proposal did not gain widespread adoption in its original form.</p>\n\n<p>As of now, EIP-5805 has been moved to the Ethereum ERCs repository, indicating that it is no longer being actively considered as an Ethereum Improvement Proposal. Instead, it may be further developed or incorporated into other standards within the broader Ethereum ecosystem. For current implementations of composable NFT metadata, developers are advised to look into more recent proposals or established standards that may have built upon the ideas presented in EIP-5805.</p></article>",
  "EIP-5806": "<article><h1>EIP-5806: Delegate Transaction</h1>\n\n<p>EIP-5806, proposed by Hadrien Croubois in October 2022, introduces a new transaction type that allows Externally Owned Accounts (EOAs) to execute arbitrary code through a delegation mechanism. This proposal aims to bridge the gap between the limited functionality of EOAs and the flexibility of smart contracts, without requiring users to migrate to smart contract wallets.</p>\n\n<p>The motivation behind EIP-5806 stems from the limitations of EOAs, which can only deploy contracts and send \"call\" transactions. While account abstraction has been discussed extensively, widespread adoption remains challenging. This proposal offers a middle ground, enabling EOAs to execute arbitrary code using a delegate-call-like mechanism, thus expanding their capabilities without fundamentally changing the existing security model.</p>\n\n<p>As of now, EIP-5806 remains in Draft status. It builds upon previous proposals EIP-2718 (Typed Transaction Envelope) and EIP-2930 (Optional Access Lists). The proposal has generated discussions in the Ethereum community, but its implementation is not yet confirmed. If adopted, it could significantly enhance the functionality of EOAs, potentially impacting the ecosystem's approach to account abstraction and smart wallet adoption.</p></article>",
  "EIP-5827": "<article><h1>EIP-5827: Token Bound Accounts</h1>\n\n<p>EIP-5827, also known as Token Bound Accounts (TBA), was proposed to introduce a standard for creating and managing accounts that are bound to specific tokens. This proposal aimed to enhance the functionality of non-fungible tokens (NFTs) by allowing them to own assets and interact with smart contracts, effectively turning them into \"smart NFTs\".</p>\n\n<p>The proposal was initially developed by the Ethereum community to address the growing need for more complex token interactions and ownership structures. It built upon concepts from previous proposals like ERC-721 and ERC-1155, extending their capabilities to create a new paradigm for token-centric account management. The idea gained traction among developers working on gaming, metaverse, and decentralized finance (DeFi) applications.</p>\n\n<p>As of now, EIP-5827 has been moved to the Ethereum ERCs repository, indicating ongoing development and discussion. While the proposal shows promise for enabling innovative use cases, its current status suggests that it may still be undergoing refinement or review. Developers and stakeholders interested in token-bound accounts should follow the latest discussions and potential updates to this standard in the Ethereum ERCs repository.</p>\n</article>",
  "EIP-5850": "<article><h1>EIP-5850: Wallet Permission System</h1>\n\n<p>EIP-5850 proposed a standardized wallet permission system for Ethereum. It aimed to enhance security and user control by allowing dApps to request specific permissions from wallets, similar to how mobile apps request permissions from users. The proposal was authored by Gavin John (@Pandapip1) and moved to the ERCs repository for further development.</p>\n\n<p>The proposal addressed the need for granular control over wallet interactions, potentially reducing the risk of unauthorized transactions or data access. It would have allowed users to grant or revoke specific permissions to dApps, improving the overall security model of Ethereum wallets. However, the proposal did not gain significant traction in its original form.</p>\n\n<p>Currently, EIP-5850 has been moved to the ERCs repository, indicating that it is no longer being considered as an Ethereum Improvement Proposal in its original form. The concept of wallet permissions remains an important topic in the Ethereum ecosystem, but alternative approaches or refinements to this proposal may be under consideration.</p>\n</article>",
  "EIP-5851": "<article><h1>EIP-5851: A Brief Technical Summary</h1>\n\n<p>EIP-5851 was an Ethereum Improvement Proposal that has been moved to the Ethereum Request for Comments (ERC) repository. This relocation suggests that the proposal was more focused on application-level standards rather than core protocol changes. The proposal can now be found at https://github.com/ethereum/ercs/blob/master/ERCS/erc-5851.md.</p>\n\n<p>While the specific details of EIP-5851 are not provided in the given context, its categorization as an ERC indicates that it likely proposed a new token standard or an extension to existing standards like ERC-20 or ERC-721. The move to the ERC repository is part of Ethereum's effort to streamline the proposal process and separate application-level standards from core protocol improvements.</p>\n\n<p>As of now, EIP-5851 has a status of \"Moved,\" which means it is no longer being considered as an EIP but continues to be developed and discussed as an ERC. This change in status and location allows for more focused development and community input within the appropriate ecosystem of Ethereum standards.</p></article>",
  "EIP-5883": "<article><h1>EIP-5883: Moved to ERC Repository</h1>\n\n<p>EIP-5883 was originally proposed as an Ethereum Improvement Proposal (EIP) but has since been moved to the Ethereum Request for Comments (ERC) repository. This transition indicates that the proposal is more specifically related to application-level standards on Ethereum rather than core protocol changes.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-5883.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-5883.md</a>. This move is part of ongoing efforts to better organize and categorize Ethereum-related standards, separating core protocol improvements from application-level standards.</p>\n\n<p>As an ERC, the proposal's current status, details, and any discussions or implementations would be best found by referring to the new location in the ERC repository. This change in categorization may affect how the proposal is considered and potentially adopted by the Ethereum community.</p></article>",
  "EIP-5902": "<article><h1>EIP-5902: Moved</h1>\n\n<p>EIP-5902 was a proposed Ethereum Improvement Proposal that has been moved to the Ethereum Request for Comments (ERC) repository. This change in location suggests that the proposal is more focused on application-level standards rather than core protocol changes.</p>\n\n<p>The proposal can now be found at https://github.com/ethereum/ercs/blob/master/ERCS/erc-5902.md. This move to the ERC repository indicates that it is being considered as a potential standard for Ethereum-based applications or tokens, rather than a change to the Ethereum protocol itself.</p>\n\n<p>As the proposal has been moved, it's likely still under discussion or review within the Ethereum community. For the most up-to-date information on its status and content, interested parties should refer to the new location in the ERC repository.</p></article>",
  "EIP-5920": "<article><h1>EIP-5920: PAY Opcode</h1>\n\n<p>EIP-5920, proposed by Gavin John, Zainan Victor Zhou, and Sam Wilson in March 2022, introduces a new opcode called PAY. This opcode is designed to send Ether to an address without calling any of its functions, addressing several security and efficiency concerns in Ethereum's current design.</p>\n\n<p>The primary motivation behind this proposal is to mitigate reentrancy attacks, prevent potential Denial of Service (DoS) vulnerabilities, and improve gas efficiency for simple Ether transfers. By eliminating the need to transfer execution context to the recipient address, the PAY opcode provides a safer and more cost-effective method for sending Ether.</p>\n\n<p>As of now, EIP-5920 is in the Review status, indicating that it is being actively discussed and evaluated by the Ethereum community. If implemented, this proposal could significantly enhance the security and efficiency of Ether transfers on the Ethereum network, particularly benefiting smart contract developers and users dealing with frequent Ether transactions.</p></article>",
  "EIP-5982": "<article><h1>EIP-5982: Brief Technical Summary</h1>\n\n<p>EIP-5982 was an Ethereum Improvement Proposal that has been moved to the Ethereum Request for Comments (ERC) repository. The proposal's specific details are now maintained at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-5982.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-5982.md</a>. This move indicates that the proposal is now being considered as a potential standard for Ethereum-based applications rather than a core protocol change.</p>\n\n<p>The relocation of EIP-5982 to the ERC repository suggests that it likely pertains to token standards, smart contract interfaces, or application-level functionalities within the Ethereum ecosystem. ERCs are typically focused on application-level standards and best practices, which can be implemented by developers without requiring changes to the core Ethereum protocol.</p>\n\n<p>As of now, the proposal's current status is listed as \"Moved,\" which means it is no longer being tracked in the main EIP repository. For the most up-to-date information on its content, purpose, and status, interested parties should refer to the ERC document linked above.</p></article>",
  "EIP-5988": "<article><h1>EIP-5988: Poseidon Hash Function Precompile</h1>\n\n<p>EIP-5988, proposed in November 2022 by a team including Abdelhamid Bakhta and Eli Ben Sasson, aims to add a precompiled contract for the Poseidon hash function to Ethereum. Poseidon is an arithmetic hash function designed for efficiency in zero-knowledge proof systems, making it particularly valuable for ZK-rollups and other Layer 2 scaling solutions.</p>\n\n<p>The motivation behind this proposal is to improve interoperability between the Ethereum Virtual Machine (EVM) and ZK/Validity rollups. As Ethereum adopts a rollup-centric roadmap, providing efficient cryptographic primitives for Layer 2 solutions becomes crucial. Poseidon's design over prime fields makes it well-suited for building efficient ZK-rollups on Ethereum.</p>\n\n<p>Currently, the proposal's status is listed as \"Stagnant,\" indicating a lack of recent progress or updates. While the EIP highlights Poseidon's efficiency and potential benefits for Ethereum's scaling efforts, its implementation appears to be on hold. The crypto community continues to explore various hash functions and cryptographic primitives to enhance Ethereum's capabilities and support its growing ecosystem of Layer 2 solutions.</p>\n</article>",
  "EIP-6": "<article><h1>EIP-6: Renaming SUICIDE opcode</h1>\n\n<p>EIP-6, proposed by Hudson Jameson in November 2015, aimed to rename the <code>SUICIDE</code> opcode in Ethereum programming languages to <code>SELFDESTRUCT</code>. The primary motivation was to address mental health concerns and make the Ethereum ecosystem more inclusive to developers who may be affected by the term \"suicide\".</p>\n\n<p>The proposal was inspired by a security audit recommendation from Least Authority, which suggested using a less connotative word. The change was seen as a way to demonstrate that the Ethereum project values people over code and is mature enough to recognize the need for such adjustments.</p>\n\n<p>EIP-6 has been implemented and is currently in \"Final\" status. The <code>SELFDESTRUCT</code> opcode is now widely used in Ethereum smart contracts and development tools, reflecting the community's commitment to creating a more sensitive and inclusive environment for developers.</p>\n</article>",
  "EIP-600": "<article><h1>EIP-600: Ethereum Attestation Service</h1>\n\n<p>EIP-600, proposed by Piper Merriam in 2017, aimed to establish a standardized Ethereum Attestation Service. This service would allow for the creation, management, and verification of claims or attestations on the Ethereum blockchain. The primary goal was to provide a decentralized infrastructure for identity and reputation systems.</p>\n\n<p>The proposal outlined a set of smart contracts and interfaces that would enable users to make claims about themselves or others, which could then be verified by third parties. This would have significant implications for decentralized identity management, reputation systems, and various other applications requiring trusted information on the blockchain. However, EIP-600 did not gain widespread adoption in its original form.</p>\n\n<p>Currently, EIP-600 has been moved to the Ethereum ERCs repository, indicating a shift in its categorization from an Ethereum Improvement Proposal to an Ethereum Request for Comment. This change suggests that while the concept remains relevant, it may require further community discussion and refinement before potential implementation. As of now, more recent proposals like EIP-1812 (Ethereum Verifiable Claims) have emerged to address similar needs in the evolving landscape of blockchain-based identity and attestation systems.</p>\n</article>",
  "EIP-601": "<article><h1>EIP-601: Ethereum Improvement Proposal 601</h1>\n\n<p>EIP-601 was an Ethereum Request for Comments (ERC) proposal that has since been moved to the Ethereum ERCs repository. The proposal's specific details and purpose are not immediately clear from the given information, but its categorization as an ERC suggests it was likely related to a standard interface or contract behavior within the Ethereum ecosystem.</p>\n\n<p>The status of \"Moved\" indicates that the proposal's content has been relocated, possibly for organizational or maintenance reasons. This is not uncommon in the evolving landscape of Ethereum's documentation and standards. The new location at https://github.com/ethereum/ercs/blob/master/ERCS/erc-601.md suggests that while the proposal may not have been formally accepted as an Ethereum Improvement Proposal, it remains a part of the broader discussion and development process within the Ethereum community.</p>\n\n<p>For the most up-to-date information on EIP-601's purpose, history, and current status, interested parties should refer to the new location in the Ethereum ERCs repository. This move likely reflects ongoing efforts to streamline and organize Ethereum's vast collection of improvement proposals and standards.</p></article>",
  "EIP-6046": "<article><h1>EIP-6046: Replace SELFDESTRUCT with DEACTIVATE</h1>\n\n<p>EIP-6046, proposed by Alex Beregszaszi in November 2022, aims to address longstanding concerns with the SELFDESTRUCT opcode by changing its behavior and renaming it to DEACTIVATE. The proposal seeks to solve the unbounded gas cost issue of SELFDESTRUCT and make it compatible with future Verkle tree implementations.</p>\n\n<p>The key changes include: not deleting storage keys, using a special nonce value to mark deactivated accounts, and renaming the opcode to DEACTIVATE to reflect its new semantics. This proposal builds on previous EIPs like EIP-2681, EIP-2929, and EIP-3529, which addressed related issues around gas costs and state management.</p>\n\n<p>Currently, the proposal is in a \"Stagnant\" status, indicating that it has not seen recent activity or updates. While it addresses important technical challenges, especially for future Ethereum scaling efforts, its implementation would require significant changes to Ethereum clients and existing smart contracts. As such, careful consideration and further discussion within the Ethereum community would be needed before any potential adoption.</p>\n</article>",
  "EIP-6047": "<article><h1>EIP-6047: Composable NFTs</h1>\n\n<p>EIP-6047 proposes a standard for composable Non-Fungible Tokens (NFTs) on the Ethereum blockchain. The proposal, authored by Zainan Victor Zhou, aims to create a framework for NFTs that can be combined, nested, or interact with each other, enhancing their functionality and value proposition.</p>\n\n<p>The concept of composable NFTs addresses limitations in existing NFT standards like ERC-721 and ERC-1155, which lack native support for complex relationships between tokens. EIP-6047 introduces methods for NFTs to reference and interact with other NFTs, enabling the creation of more sophisticated digital assets and ecosystems.</p>\n\n<p>As of now, EIP-6047 has been moved to the Ethereum ERCs repository, indicating ongoing development and discussion within the community. While not yet finalized or widely implemented, the proposal represents an important step towards more versatile and interconnected NFT ecosystems, potentially opening new avenues for digital ownership and asset management in decentralized applications.</p>\n</article>",
  "EIP-6049": "<article><h1>EIP-6049: Deprecating SELFDESTRUCT</h1>\n\n<p>EIP-6049, authored by William Entriken, proposes the deprecation of the SELFDESTRUCT opcode in Ethereum. This meta-type proposal, which reached final status, aims to discourage the use of SELFDESTRUCT and warn developers about potential future changes to its functionality.</p>\n\n<p>The motivation behind this proposal stems from ongoing discussions about modifying SELFDESTRUCT. While the exact changes are yet to be determined, there is a strong consensus within the Ethereum community that some alteration to this opcode is inevitable. By officially deprecating SELFDESTRUCT, EIP-6049 seeks to mitigate the impact of future breaking changes and prepare developers for potential modifications.</p>\n\n<p>The implementation of this proposal involves updating the documentation of the SELFDESTRUCT opcode to include warnings against its use and notes about possible forthcoming changes. This approach allows for a smooth transition without requiring immediate changes to Ethereum clients. As of now, developers are strongly advised to avoid using SELFDESTRUCT in new smart contracts and to consider alternatives in existing ones.</p>\n</article>",
  "EIP-6051": "<article><h1>EIP-6051: Private Key Encapsulation</h1>\n\n<p>EIP-6051, proposed by Base Labs and Weiji Guo, aims to define a specification for securely encapsulating private keys. This proposal addresses the need to safely transfer private keys between applications without exposing the seed phrase, using a combination of Elliptic Curve Integrated Encryption Scheme (ECIES) and optional signature verification.</p>\n\n<p>The motivation behind this EIP stems from scenarios where users might want to export a specific private key from a secure wallet for purposes such as messaging or to enable more convenient transaction signing on mobile devices. By allowing secure key transfer without exposing the seed, EIP-6051 aims to enhance both security and user experience in various crypto applications.</p>\n\n<p>Currently, the proposal's status is listed as \"Stagnant,\" indicating that it hasn't seen recent activity or updates. While the idea addresses important security and usability concerns, it's unclear whether it will be implemented in its current form or if alternative solutions might be developed to address similar needs in the future.</p>\n</article>",
  "EIP-6059": "<article><h1>EIP-6059: Composable NFTs</h1>\n\n<p>EIP-6059, also known as the Composable NFTs proposal, was designed to address the limitations of existing NFT standards by enabling the creation of more complex and interactive non-fungible tokens. The proposal was initially drafted by Gavin John and Bruno Škvorc in 2022, aiming to extend the functionality of ERC-721 and ERC-1155 tokens.</p>\n\n<p>The primary purpose of EIP-6059 was to introduce a standard for NFTs that could contain other NFTs, allowing for the creation of hierarchical and nested token structures. This would enable more sophisticated use cases in gaming, virtual worlds, and digital asset management. The proposal gained traction among developers working on metaverse projects and blockchain-based games, as it offered a solution for representing complex in-game items and virtual real estate.</p>\n\n<p>As of now, EIP-6059 has been moved to the Ethereum ERCs repository, indicating ongoing development and discussion within the community. While the proposal has not yet been fully implemented or standardized, it continues to be of interest to developers working on advanced NFT applications. The current status suggests that further refinement and consensus-building may be necessary before it can be widely adopted or potentially superseded by alternative proposals addressing similar needs in the evolving NFT ecosystem.</p",
  "EIP-606": "<article><h1>EIP-606: Homestead Hard Fork</h1>\n\n<p>EIP-606, authored by Alex Beregszaszi, is a Meta Ethereum Improvement Proposal that specifies the changes included in the Homestead hard fork. Homestead was the second major version of the Ethereum protocol, activated at block 1,150,000 on the mainnet in March 2016. This proposal bundled three significant improvements: EIP-2 (Homestead Hard-fork Changes), EIP-7 (DELEGATECALL), and EIP-8 (Networking layer: devp2p Forward Compatibility Requirements for Homestead).</p>\n\n<p>The Homestead hard fork was a crucial step in Ethereum's development, introducing important protocol upgrades and new features. EIP-2 removed the \"difficulty bomb\" and made changes to the difficulty adjustment algorithm. EIP-7 added the DELEGATECALL opcode, enabling more complex smart contract interactions. EIP-8 improved the networking layer to ensure forward compatibility.</p>\n\n<p>EIP-606 has a \"Final\" status, indicating that it has been fully implemented and is now an integral part of the Ethereum protocol. As a historical milestone, this proposal remains relevant for understanding Ethereum's evolution but is not subject to further implementation considerations. The Homestead upgrade laid the",
  "EIP-6065": "<article><h1>EIP-6065: Brief Technical Summary</h1>\n\n<p>EIP-6065 is an Ethereum Improvement Proposal that has been moved to the Ethereum Request for Comments (ERC) repository. The proposal's content is now available at https://github.com/ethereum/ercs/blob/master/ERCS/erc-6065.md. This move indicates that the proposal is related to application-level standards and conventions, which are typically handled as ERCs.</p>\n\n<p>The relocation of EIP-6065 to the ERC repository suggests that it may be focused on defining a new token standard, interface, or other application-level protocol within the Ethereum ecosystem. However, without access to the specific content of the ERC, it's challenging to provide details about its purpose, history, or current status.</p>\n\n<p>To learn more about the proposal's specifics, interested parties should refer to the provided GitHub link. The move to the ERC repository implies that the proposal is still under consideration and may be subject to further discussion and potential implementation by the Ethereum community.</p>\n</article>",
  "EIP-6066": "<article><h1>EIP-6066: Tokenized Vault Standard</h1>\n\n<p>EIP-6066, known as the Tokenized Vault Standard, was proposed to create a standardized interface for tokenized vaults in the Ethereum ecosystem. The proposal aimed to establish a common set of functions and events that would allow for better interoperability between different vault implementations and the applications that interact with them. This standard was designed to address the growing need for a unified approach to managing tokenized assets in DeFi protocols.</p>\n\n<p>The proposal was originally authored by Jet Jadeja, Sam Bacha, and Kristian Kho, with contributions from notable figures in the Ethereum community. It was intended to build upon existing token standards like ERC-20 and ERC-4626, incorporating additional functionality specific to vault operations. The standard proposed methods for depositing and withdrawing assets, querying vault balances, and handling asset pricing, among other features.</p>\n\n<p>As of now, EIP-6066 has been moved to the Ethereum ERCs repository, indicating a shift in its development process. This move suggests that while the proposal is still being considered, it may be undergoing further refinement or discussion within the Ethereum community. Developers and stakeholders interested in the latest status of this proposal should refer to the updated location in the ERCs repository for the most current information and any potential",
  "EIP-607": "<article><h1>EIP-607: Spurious Dragon Hardfork</h1>\n\n<p>EIP-607, titled \"Hardfork Meta: Spurious Dragon,\" was a meta-proposal that defined the changes included in Ethereum's Spurious Dragon hard fork. This proposal was authored by Alex Beregszaszi, a prominent Ethereum developer, and was finalized as part of Ethereum's ongoing development and improvement process.</p>\n\n<p>The Spurious Dragon hard fork, also known as the State-clearing fork, was activated at block 2,675,000 on the Ethereum mainnet and block 1,885,000 on the Morden testnet. It included four significant Ethereum Improvement Proposals (EIPs): EIP-155 for simple replay attack protection, EIP-160 to increase the cost of the EXP operation, EIP-161 for state trie clearing, and EIP-170 to implement a contract code size limit.</p>\n\n<p>This hard fork was a crucial step in Ethereum's evolution, addressing security concerns and optimizing network performance. The included EIPs collectively improved Ethereum's resistance to attacks, adjusted gas costs for certain operations, and implemented measures to manage the growth of the state trie. As of now, the proposals included in the Spurious Dragon hard fork have been fully implemented and remain an integral",
  "EIP-608": "<article><h1>EIP-608: Tangerine Whistle Hard Fork</h1>\n\n<p>EIP-608, also known as the Tangerine Whistle hard fork, was a critical upgrade to the Ethereum network implemented in October 2016. This proposal, authored by Alex Beregszaszi, was primarily designed to address denial-of-service (DoS) attacks that had been plaguing the network. The core of this upgrade was EIP-150, which adjusted gas costs for I/O-heavy operations to make such attacks economically unfeasible.</p>\n\n<p>The Tangerine Whistle fork was activated at block 2,463,000 on the Ethereum mainnet. It was a direct response to the series of attacks that had significantly slowed down the network in the preceding weeks. By increasing the gas cost of certain operations that were being exploited by attackers, the fork effectively neutralized the threat and restored normal network functionality.</p>\n\n<p>Today, EIP-608 is considered a successful and necessary upgrade that helped secure the Ethereum network during a critical period. While its specific changes have been superseded by subsequent upgrades, the principles it established – of adapting gas costs to reflect real computational costs and prevent abuse – continue to inform Ethereum's ongoing development and security strategies.</p>\n</article>",
  "EIP-609": "<article><h1>EIP-609: Hardfork Meta: Byzantium</h1>\n\n<p>EIP-609, authored by Alex Beregszaszi, is a meta-proposal that specifies the changes included in the Byzantium hard fork, which was a significant upgrade to the Ethereum network. Implemented in October 2017 at block 4,370,000 on the mainnet, Byzantium was the first part of the larger Metropolis upgrade.</p>\n\n<p>The proposal outlines nine included EIPs that introduced important features and improvements to Ethereum. These include changes to difficulty adjustment (EIP-100), new EVM instructions like REVERT (EIP-140) and STATICCALL (EIP-214), precompiled contracts for cryptographic operations (EIPs 196, 197, 198), and modifications to block rewards and the difficulty bomb (EIP-649). Additionally, it introduced changes to transaction receipts (EIP-658) and new opcodes for handling return data (EIP-211).</p>\n\n<p>EIP-609 has a \"Final\" status, indicating that the Byzantium hard fork has been successfully implemented. This upgrade laid the groundwork for future improvements and was a crucial step in Ethereum's evolution, enhancing the network's functionality and preparing it for subsequent upgrades like Constantinople and Istanbul.</p></article",
  "EIP-6093": "<article><h1>EIP-6093: Custom Errors for ERC-20, ERC-721, and ERC-1155</h1>\n<p>EIP-6093, proposed by Forrest Norris, Gavin John, and Sam Wilson, aimed to standardize error messages for popular Ethereum token standards: ERC-20, ERC-721, and ERC-1155. The proposal sought to improve developer experience and enhance interoperability by providing a consistent set of custom errors for common failure scenarios in token interactions.</p>\n\n<p>The proposal was initially drafted in January 2023 and gained traction within the Ethereum community due to its potential to streamline error handling across different token implementations. It addressed the limitations of the existing practice of using generic revert reasons, which often lacked specificity and made debugging more challenging. By introducing standardized custom errors, EIP-6093 aimed to make token interactions more predictable and easier to troubleshoot.</p>\n\n<p>As of now, EIP-6093 has been moved to the Ethereum ERCs repository, indicating its progression in the standardization process. While not yet finalized, the proposal has received positive feedback and is likely to be implemented in future token standards. Its adoption could significantly improve the development and user experience in the Ethereum ecosystem by providing more informative and consistent error messages across various token implementations.</p></article>",
  "EIP-6105": "<article><h1>EIP-6105: NFT Renting Standard</h1>\n\n<p>EIP-6105, proposed by Zainan Victor Zhou, Yalu Lin, and Acc Labs in December 2022, aims to standardize the renting of Non-Fungible Tokens (NFTs) on the Ethereum blockchain. The proposal introduces a mechanism for time-limited transfer of NFT usage rights without transferring ownership, addressing a growing need in the NFT ecosystem for temporary access to digital assets.</p>\n\n<p>The proposal outlines interfaces for lenders to list their NFTs for rent, allowing renters to temporarily use the NFTs within specified timeframes. It includes functions for initiating and terminating rentals, as well as querying rental status. This standard is particularly relevant for NFT-based games, virtual real estate, and other applications where temporary access to unique digital assets is valuable.</p>\n\n<p>As of now, EIP-6105 has been moved from its original location to the Ethereum ERCs repository, indicating ongoing development and discussion. While not yet finalized, the proposal has garnered attention in the Ethereum community for its potential to unlock new use cases and economic models in the NFT space. Its implementation could significantly impact how NFTs are utilized and monetized in the future.</p></article>",
  "EIP-6110": "<article><h1>EIP-6110: Supply Validator Deposits On Chain</h1>\n\n<p>EIP-6110, proposed by Mikhail Kalinin, Danny Ryan, and Peter Davies in December 2022, aims to improve the validator deposit process in Ethereum's proof-of-stake consensus mechanism. The proposal suggests appending validator deposits directly to the Execution Layer block structure, shifting the responsibility of deposit inclusion and validation from the Consensus Layer to the Execution Layer.</p>\n\n<p>The main motivation behind this EIP is to enhance the security and simplicity of the deposit flow. By eliminating the need for deposit voting on the Consensus Layer, it reduces complexity in client software design and relaxes certain safety assumptions. This change would significantly increase deposit security by replacing the current proposer voting mechanism with an in-protocol process.</p>\n\n<p>As of now, EIP-6110 is in the Review status, indicating that it is still being evaluated by the Ethereum community. If implemented, it would streamline the validator onboarding process and improve overall user experience. However, it's important to note that this EIP requires EIP-7685, suggesting that it builds upon or is dependent on another proposal in the Ethereum ecosystem.</p></article>",
  "EIP-6120": "<article><h1>EIP-6120: Hierarchical Decentralized Autonomous Organizations (hDAOs)</h1>\n\n<p>EIP-6120 proposed a standard for Hierarchical Decentralized Autonomous Organizations (hDAOs) on the Ethereum blockchain. The concept aimed to create a more structured and scalable approach to DAOs by introducing nested organizational hierarchies. This proposal was initially drafted to address the limitations of flat DAO structures and to enable more complex governance models.</p>\n\n<p>The EIP was authored by Yan Michalevsky and introduced in late 2022. It sought to define a standard interface for hDAOs, allowing for the creation of sub-DAOs within a parent DAO structure. This hierarchical model was designed to improve decision-making processes, delegate responsibilities, and enhance overall DAO management efficiency.</p>\n\n<p>As of now, EIP-6120 has been moved to the Ethereum ERCs repository, indicating a shift in its categorization and potentially its development process. The current status and further details can be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-6120.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-6120.md</a>. This move suggests ongoing interest in the concept, though its final implementation",
  "EIP-6122": "<article><h1>EIP-6122: Forkid checks based on timestamps</h1>\n\n<p>EIP-6122 is an important proposal that modifies how Ethereum nodes identify each other on the peer-to-peer network after The Merge. It updates the forkid calculation introduced in EIP-2124 to work with block timestamps instead of block numbers, aligning with Proof-of-Stake's time-based fork scheduling.</p>\n\n<p>Authored by Marius van der Wijden, a prominent Ethereum core developer, EIP-6122 was created in December 2022 to address the shift from Proof-of-Work to Proof-of-Stake consensus. The proposal aims to maintain the efficient peer identification mechanism while adapting to the new consensus model. It allows nodes to quickly determine the configuration of peers and disconnect those that are misconfigured or on different networks.</p>\n\n<p>This proposal has reached Final status, indicating it has been accepted and implemented. It's a crucial update for Ethereum's networking layer, ensuring continued smooth operation of the peer-to-peer network in the post-Merge era. EIP-6122 demonstrates the ongoing evolution and refinement of Ethereum's protocol as it adapts to major architectural changes.</p></article>",
  "EIP-6123": "<article><h1>EIP-6123 Summary</h1>\n\n<p>EIP-6123, originally proposed as an Ethereum Improvement Proposal, has been moved to the Ethereum Request for Comments (ERC) repository. This indicates that it is now being considered as a potential standard for the Ethereum ecosystem rather than a core protocol change.</p>\n\n<p>The proposal's relocation to the ERC repository suggests that it likely pertains to token standards, smart contract interfaces, or application-level functionalities within the Ethereum ecosystem. However, without access to the specific content of ERC-6123, it's challenging to provide detailed information about its purpose, history, or current status.</p>\n\n<p>For the most up-to-date and accurate information about ERC-6123, interested parties should refer to the official ERC repository at https://github.com/ethereum/ercs/blob/master/ERCS/erc-6123.md. This move emphasizes the evolving nature of Ethereum's standardization process and the community's efforts to organize and categorize improvement proposals effectively.</p>\n</article>",
  "EIP-6147": "<article><h1>EIP-6147: Moved to ERC Repository</h1>\n\n<p>EIP-6147 was originally proposed as an Ethereum Improvement Proposal (EIP) but has since been moved to the Ethereum Request for Comments (ERC) repository. This move indicates that the proposal is more specifically related to application-level standards on Ethereum rather than core protocol changes.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-6147.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-6147.md</a>. This relocation suggests that the community or EIP editors determined that the proposal was better suited as an ERC, which typically deals with token standards, name registries, URI schemes, library/package formats, and wallet formats.</p>\n\n<p>For the most up-to-date information on the purpose, history, and current status of this proposal, interested parties should refer to the ERC document in its new location. The move to the ERC repository may impact its visibility and adoption path within the Ethereum ecosystem.</p></article>",
  "EIP-615": "<article><h1>EIP-615: Subroutines and Static Jumps for the EVM</h1>\n\n<p>EIP-615, proposed in 2016 by Greg Colvin, Brooklyn Zelenka, Paweł Bylica, and Christian Reitwiessner, aimed to improve the Ethereum Virtual Machine (EVM) by introducing subroutines and static jumps. The proposal sought to address two key issues: the difficulty of statically analyzing EVM code, which hindered bug prevention, and the lack of performance in existing EVM implementations.</p>\n\n<p>The core of the proposal was to replace dynamic jumps with static jumps and subroutines. This change would make EVM code easier to analyze and optimize, potentially improving security and performance. The authors argued that these modifications were necessary to meet the network's long-term demands and reduce reliance on precompiles.</p>\n\n<p>Despite its potential benefits, EIP-615 has not been implemented and is currently in a \"Stagnant\" status. The proposal faced challenges in achieving consensus, with ongoing discussions about its complexity and potential impact on existing contracts. While the issues it aimed to address remain relevant, other proposals and optimizations have since been explored to improve EVM performance and security.</p>\n</article>",
  "EIP-6150": "<article><h1>EIP-6150: Hierarchical NFTs</h1>\n\n<p>EIP-6150, proposed by Zainan Victor Zhou, Yige Lin, and Tianran Zhang in December 2022, introduces a standard for hierarchical non-fungible tokens (NFTs) on the Ethereum blockchain. The proposal aims to create a more complex and flexible structure for NFTs, allowing them to have parent-child relationships. This hierarchical model enables the representation of real-world scenarios where assets have nested ownership or dependencies.</p>\n\n<p>The proposal gained traction in the NFT community due to its potential to revolutionize how digital assets are structured and managed. It allows for more sophisticated use cases, such as representing organizational structures, family trees, or complex asset ownership. The EIP builds upon the widely adopted ERC-721 standard, extending its functionality to support these hierarchical relationships while maintaining backwards compatibility.</p>\n\n<p>As of now, EIP-6150 has been moved to the Ethereum ERCs repository, indicating progress in its development and review process. While not yet finalized, the proposal continues to be discussed and refined by the Ethereum community. Its implementation could significantly impact the future of NFT projects, enabling more nuanced and realistic representations of digital ownership and relationships in the blockchain space.</p></article>",
  "EIP-616": "<article><h1>EIP-616: SIMD Operations for the EVM</h1>\n\n<p>EIP-616, proposed by Greg Colvin in April 2017, aimed to introduce Single Instruction Multiple Data (SIMD) operations to the Ethereum Virtual Machine (EVM). The proposal sought to leverage the 256-bit wide EVM stack items for parallel vector operations, potentially offering significant performance improvements for both vector and scalar computations.</p>\n\n<p>The motivation behind EIP-616 was to align the EVM with modern CPU architectures that utilize SIMD hardware. By enabling parallel operations on vectors of scalars, the proposal aimed to boost performance for various cryptographic and mathematical operations commonly used in blockchain applications. Examples of potential speedups included up to 7x for SHA-512, 4x for elliptic curve scalar multiplication, and 3x to 4x for BLAKE2b.</p>\n\n<p>Despite its potential benefits, EIP-616 has not been implemented and is currently in a \"Stagnant\" status. The proposal faced challenges in terms of complexity and potential impacts on existing EVM operations. While SIMD operations could offer performance gains, the Ethereum community has focused on other scaling solutions and EVM improvements. As of now, alternative approaches to optimizing EVM performance, such as eWASM (Ethereum WebAssembly) and layer-2 ",
  "EIP-6170": "<article><h1>EIP-6170: Moved</h1>\n\n<p>EIP-6170, originally proposed as an Ethereum Request for Comment (ERC), has been moved to the Ethereum ERCs repository. This relocation suggests that the proposal is still under consideration but has been transferred to a more appropriate place for further development and discussion.</p>\n\n<p>While the specifics of EIP-6170 are not provided in the given context, its categorization as an ERC indicates that it likely pertains to application-level standards or conventions on the Ethereum platform. The move to the dedicated ERCs repository (https://github.com/ethereum/ercs/blob/master/ERCS/erc-6170.md) implies ongoing interest in the proposal and potential for future implementation or integration into the Ethereum ecosystem.</p>\n\n<p>As the proposal has been moved rather than rejected or withdrawn, it suggests that EIP-6170 may still be relevant and under active consideration. However, without access to the full proposal, it's not possible to comment on its specific purpose, potential impact, or current status within the Ethereum community.</p></article>",
  "EIP-6188": "<article><h1>EIP-6188: Nonce Cap</h1>\n\n<p>EIP-6188, proposed by Gavin John in December 2022, aims to cap the nonce at 2^64-2, reserving the highest values for contracts with unusual behavior. The proposal introduces a seemingly minor change to Ethereum's nonce system, but its purpose is to lay groundwork for future improvements.</p>\n\n<p>The main motivation behind this EIP is to enable other proposals that might require special nonce values for contracts with unique properties. By itself, EIP-6188 doesn't provide immediate benefits, but it creates a foundation for potential future enhancements to the Ethereum protocol.</p>\n\n<p>Currently, the proposal's status is \"Stagnant,\" indicating that it hasn't seen recent activity or updates. While the idea has potential, its implementation would require a hard fork, and its utility is largely dependent on other EIPs that would make use of the reserved nonce values. As such, it's unclear whether this proposal will be implemented in its current form or if it will be superseded by a more comprehensive change to the nonce system.</p>\n</article>",
  "EIP-6189": "<article><h1>EIP-6189: Alias Contracts</h1>\n\n<p>EIP-6189 proposes a mechanism for creating \"alias contracts\" that automatically forward calls to other contracts. The proposal was authored by Gavin John and introduced on December 20, 2022. Its primary purpose is to work in conjunction with EIP-6190 to make the SELFDESTRUCT opcode compatible with Verkle trees, a proposed upgrade to Ethereum's state storage.</p>\n\n<p>The core idea of EIP-6189 is to define a special contract state using a magic nonce value of 2^64-1 and contract code of 0x1. When a contract is in this state, all calls to it are automatically forwarded to another address stored in its first storage slot. This forwarding behavior applies to various call opcodes (CALL, CALLCODE, DELEGATECALL, STATICCALL) as well as regular transactions.</p>\n\n<p>As of now, EIP-6189 is in a \"Stagnant\" status, indicating that it has not seen recent activity or progress. While the proposal itself doesn't provide significant benefits on its own, its potential lies in its interaction with other proposed changes to Ethereum's architecture. The implementation of this EIP would require changes to the core protocol and would need to be carefully considered in the context of Ethereum's",
  "EIP-6190": "<article><h1>EIP-6190: Verkle-compatible SELFDESTRUCT</h1>\n\n<p>EIP-6190, proposed by Gavin John in December 2022, aims to modify the SELFDESTRUCT opcode to make it compatible with Verkle trees, a potential future upgrade to Ethereum's state storage structure. The proposal changes SELFDESTRUCT to only cause a finite number of state changes, addressing longstanding concerns about its unbounded nature and fixed gas price.</p>\n\n<p>The main motivation behind this EIP is to prepare for the potential transition to Verkle trees, where accounts and their properties would be organized differently. In the Verkle tree structure, it would not be possible to easily traverse and find all used storage keys, making the current implementation of SELFDESTRUCT challenging to support. This proposal is a step towards maintaining SELFDESTRUCT functionality in a Verkle tree-based Ethereum.</p>\n\n<p>As of now, EIP-6190 is in a \"Stagnant\" status, indicating that it has not seen recent activity or updates. The proposal requires the implementation of EIP-6188 and EIP-6189 as prerequisites. While the idea addresses an important issue for Ethereum's future scalability, its current status suggests that it may need further discussion or refinement before potentially moving forward in the EIP process.</p>",
  "EIP-6206": "<article><h1>EIP-6206: EOF - JUMPF and non-returning functions</h1>\n\n<p>EIP-6206 is a proposal that aims to introduce tail call optimizations in EOF (Ethereum Object Format) functions and extend the format of type sections to declare non-returning code sections. The proposal was authored by Andrei Maiboroda, Alex Beregszaszi, Paweł Bylica, and Matt Garnett, and it builds upon previous proposals EIP-4750 and EIP-5450.</p>\n\n<p>The main feature of this proposal is the introduction of a new instruction called JUMPF (Jump to Function). This instruction allows for more efficient function calls by jumping to a code section without adding a new return stack frame. This optimization is particularly useful for functions that make a call at the end of their routine and then return, a common pattern in smart contract development.</p>\n\n<p>As of its current status (Review), EIP-6206 is still under consideration by the Ethereum community. If implemented, it would provide opportunities for compilers to generate more optimal code, both in terms of code size and gas consumption. This would be especially beneficial for small error handling helpers that end execution with REVERT, as they are commonly reused in multiple branches. The proposal demonstrates the ongoing efforts to improve the efficiency and capabilities of the Ethereum Virtual Machine (EVM) through",
  "EIP-6220": "<article><h1>EIP-6220: Multi-Token Standard for Non-Fungible, Semi-Fungible, and Fungible Tokens</h1>\n\n<p>EIP-6220, also known as the Multi-Token Standard, was proposed to create a unified interface for managing non-fungible, semi-fungible, and fungible tokens within a single smart contract. This proposal aimed to address the limitations of existing token standards like ERC-721 and ERC-1155 by providing a more flexible and efficient approach to token management.</p>\n\n<p>The proposal was originally authored by Guillaume Gonnaud, Nour Haridy, and Pandapip1, with contributions from additional developers in the Ethereum community. It was designed to simplify token interactions, reduce gas costs, and enable more complex token ecosystems. The standard introduced concepts like token attributes and nested tokens, allowing for greater customization and interoperability between different token types.</p>\n\n<p>As of now, EIP-6220 has been moved to the Ethereum ERCs repository, indicating ongoing development and discussion within the community. While it has not yet been fully implemented or adopted as a standard, the concepts introduced in EIP-6220 continue to influence discussions around token standards and may inform future improvements to Ethereum's token ecosystem.</p></article>",
  "EIP-6224": "<article><h1>EIP-6224: NFT Metadata JSON Schema</h1>\n\n<p>EIP-6224 was a proposal to standardize the JSON schema for NFT metadata, aiming to improve interoperability and consistency across different NFT platforms and marketplaces. The proposal was initially drafted by Ethan Frey and Mark Greenslade in late 2022, addressing the lack of a formal specification for NFT metadata structure.</p>\n\n<p>The proposal aimed to define a clear, extensible schema for representing NFT attributes, properties, and related information. This would have facilitated easier integration of NFTs across various applications and potentially improved the user experience. However, the proposal's status has since been moved, indicating that it is no longer actively pursued in its original form.</p>\n\n<p>As of now, the proposal has been relocated to the Ethereum ERCs repository, specifically at https://github.com/ethereum/ercs/blob/master/ERCS/erc-6224.md. This move suggests that while the idea of standardizing NFT metadata remains relevant, the approach or specifics of the proposal may have evolved. Developers and stakeholders interested in NFT metadata standardization should refer to the updated document in its new location for the most current information and discussions on this topic.</p>\n</article>",
  "EIP-6239": "<article><h1>EIP-6239 Summary</h1>\n\n<p>EIP-6239 was a proposal for an Ethereum Request for Comment (ERC) standard. However, it has been moved from its original location in the Ethereum Improvement Proposals (EIPs) repository to the Ethereum Request for Comments (ERCs) repository. This move indicates that the proposal is now being managed as part of the ERC process rather than the broader EIP process.</p>\n\n<p>The specific details of EIP-6239 are not provided in the given information. However, its categorization as an ERC suggests that it likely pertains to a token standard or interface for smart contracts on the Ethereum blockchain. The current status of \"Moved\" implies that the proposal is still under consideration or development within the ERC framework.</p>\n\n<p>For the most up-to-date information and details about this proposal, interested parties should refer to the new location at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-6239.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-6239.md</a>. This move reflects the ongoing evolution and organization of Ethereum standards and improvement proposals.</p>\n</article>",
  "EIP-6268": "<article><h1>EIP-6268: Non-Fungible Token Bound Accounts</h1>\n\n<p>EIP-6268, proposed by the Ethereum community, aimed to introduce Non-Fungible Token Bound Accounts (NFTBAs). This concept sought to create unique Ethereum accounts that are intrinsically linked to specific Non-Fungible Tokens (NFTs). The primary goal was to enhance the functionality and utility of NFTs by allowing them to own assets and interact with smart contracts independently.</p>\n\n<p>The proposal was initially developed to address limitations in existing NFT standards, particularly in areas of composability and interoperability. It aimed to enable NFTs to function more like traditional Ethereum accounts, opening up new possibilities for decentralized applications and digital asset management. However, the proposal has since been moved from its original location in the Ethereum Improvement Proposals (EIPs) repository to the Ethereum Request for Comments (ERCs) repository.</p>\n\n<p>Currently, EIP-6268 can be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-6268.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-6268.md</a>. This relocation suggests that while the concept is still under consideration, it may require further",
  "EIP-627": "<article><h1>EIP-627: Whisper Specification</h1>\n\n<p>EIP-627, authored by Vlad Gluhovsky in 2017, aimed to formalize the specification for Whisper messages within the Ethereum peer-to-peer network protocol. Whisper was an early attempt at a decentralized messaging system built on top of Ethereum, designed to provide secure and anonymous communication.</p>\n\n<p>The proposal defined packet codes and formats for Whisper messages, including status updates, message passing, proof-of-work requirements, and topic filtering. It was intended to standardize Whisper implementations across different Ethereum clients to ensure interoperability. EIP-627 reached \"Final\" status, indicating it was accepted and implemented.</p>\n\n<p>However, Whisper saw limited adoption and development has largely been discontinued in favor of other messaging protocols. While historically significant in Ethereum's early days, EIP-627 is no longer actively used or recommended for implementation today. More modern alternatives like Waku have superseded Whisper for decentralized communication needs in the Ethereum ecosystem.</p>\n\n</article>",
  "EIP-6315": "<article><h1>EIP-6315: A Brief Technical Summary</h1>\n\n<p>EIP-6315 was an Ethereum Improvement Proposal that has since been moved to the Ethereum Request for Comments (ERC) repository. This migration indicates that the proposal was likely focused on application-level standards or conventions rather than core protocol changes. The specific details of the proposal are not immediately available in the given context, but its categorization as an ERC suggests it may have been related to token standards, wallet interfaces, or other application-layer functionalities.</p>\n\n<p>The proposal's current status is listed as \"Moved,\" which means it has been transferred from the main EIPs repository to the dedicated ERCs repository. This move is part of Ethereum's effort to better organize and manage different types of improvement proposals. The new location (https://github.com/ethereum/ercs/blob/master/ERCS/erc-6315.md) suggests that the community can now find the full details of the proposal in the ERCs repository.</p>\n\n<p>Given the limited information available, it's not possible to comment on the proposal's specific purpose, authorship, or implementation status. However, its movement to the ERCs repository indicates that it remains a relevant topic of discussion within the Ethereum community, particularly for developers working on application-layer solutions.</p></article>",
  "EIP-6327": "<article><h1>EIP-6327: Soulbound Token</h1>\n\n<p>EIP-6327 proposes a standard for Soulbound Tokens (SBTs), non-transferable NFTs that represent a user's identity, credentials, or achievements on the Ethereum blockchain. Introduced by Ethereum co-founder Vitalik Buterin and others in May 2022, SBTs aim to create a decentralized identity and reputation system.</p>\n\n<p>The proposal defines a minimal interface for SBTs, including functions for minting, burning, and querying token information. Unlike traditional NFTs, SBTs cannot be transferred between addresses, ensuring their connection to a specific identity. This feature makes them suitable for representing educational degrees, work history, or other non-transferable attributes.</p>\n\n<p>As of now, EIP-6327 has been moved to the Ethereum ERCs repository, indicating ongoing development and discussion within the community. While the concept of SBTs has gained attention, implementation challenges and privacy concerns remain. Alternative proposals and improvements are being explored to address these issues and refine the SBT standard for potential future adoption.</p></article>",
  "EIP-634": "<article><h1>EIP-634: Storage of ENS Name Records in ENS</h1>\n<p>EIP-634, proposed by Nick Johnson in April 2017, aimed to standardize the storage of ENS (Ethereum Name Service) name records directly within the ENS system itself. This proposal was designed to enhance the functionality and flexibility of ENS by allowing it to store arbitrary records associated with domain names, similar to how traditional DNS systems operate.</p>\n<p>The proposal suggested a method for storing and retrieving various types of records, such as email addresses, IPFS content hashes, and other metadata associated with ENS names. This would enable ENS to serve as a more comprehensive naming and identity system for the Ethereum ecosystem, supporting a wide range of use cases beyond simple address resolution.</p>\n<p>As of now, EIP-634 has been moved to the Ethereum ERCs repository, indicating its continued relevance to the Ethereum community. While not formally finalized as an Ethereum standard, the concepts introduced in this proposal have been influential in the ongoing development of ENS and related naming systems in the blockchain space.</p>\n</article>",
  "EIP-6353": "<article><h1>EIP-6353: Moved to ERC Repository</h1>\n\n<p>EIP-6353 was an Ethereum Improvement Proposal that has been moved to the Ethereum Request for Comments (ERC) repository. This move indicates that the proposal is specifically related to application-level standards and conventions, rather than core protocol changes.</p>\n\n<p>The proposal can now be found at https://github.com/ethereum/ercs/blob/master/ERCS/erc-6353.md. This relocation suggests that the Ethereum community deemed it more appropriate as an ERC, which typically deals with token standards, name registries, URI schemes, library/package formats, and wallet formats.</p>\n\n<p>For the most up-to-date information on the purpose, history, and current status of this proposal, interested parties should refer to the new location in the ERC repository. This move also implies that the proposal is still under consideration and may be subject to further discussion and potential implementation within the Ethereum ecosystem.</p>\n</article>",
  "EIP-6357": "<article><h1>EIP-6357: ERC-721 Batch Transfer Extension</h1>\n\n<p>EIP-6357 was proposed to address a limitation in the popular ERC-721 non-fungible token standard. The proposal aimed to introduce a batch transfer function, allowing multiple NFTs to be transferred in a single transaction. This would significantly reduce gas costs and improve efficiency for users and marketplaces dealing with multiple NFT transfers.</p>\n\n<p>The proposal was authored by Gavin John and introduced in February 2023. It gained traction in the Ethereum community due to its potential to streamline NFT operations. However, as of the latest update, the proposal has been moved from its original location in the Ethereum Improvement Proposals repository to the Ethereum Request for Comments (ERCs) repository.</p>\n\n<p>The current status of EIP-6357 is \"Moved,\" indicating that it is no longer being considered as an Ethereum Improvement Proposal. Instead, it is now being tracked as an ERC, which suggests that while it may not be implemented as a core protocol change, it could still be adopted as a community standard for NFT contracts. Developers and projects interested in implementing batch transfer functionality for ERC-721 tokens should refer to the updated document in the ERCs repository for the most current information and specifications.</p></article>",
  "EIP-6358": "<article><h1>EIP-6358: Multichain Address Format</h1>\n<p>EIP-6358 proposed a standardized address format for multichain environments. It aimed to create a unified way to represent addresses across different blockchain networks, enhancing interoperability and user experience. The proposal was initially drafted to address the growing complexity of managing addresses in a multi-blockchain ecosystem.</p>\n<p>The EIP was moved to the Ethereum Request for Comments (ERC) repository, indicating its focus on application-level standards rather than core protocol changes. This move suggests that while the proposal was deemed valuable, it required further discussion and refinement within the community before potential implementation.</p>\n<p>Currently, the proposal's status is \"Moved,\" and it can be found in the ERC repository. This relocation allows for continued development and discussion among developers and stakeholders interested in improving cross-chain compatibility and address standardization in the broader blockchain ecosystem.</p>\n</article>",
  "EIP-6366": "<article><h1>EIP-6366: EVM-compatible Pairing Precompile</h1>\n\n<p>EIP-6366 proposed the introduction of a precompile for pairing operations on EVM-compatible chains. This improvement aimed to enhance the efficiency of cryptographic operations, particularly for zero-knowledge proofs and other advanced cryptographic protocols. The proposal was authored by Antonio Sanso and initially introduced in early 2023.</p>\n\n<p>The primary motivation behind EIP-6366 was to reduce gas costs and improve performance for pairing-based cryptography, which is crucial for various blockchain applications. However, the proposal was moved to the Ethereum Request for Comments (ERC) repository, indicating that it required further discussion and refinement before potential implementation.</p>\n\n<p>As of now, EIP-6366 has been relocated to the ERC repository (https://github.com/ethereum/ercs/blob/master/ERCS/erc-6366.md) for continued development and community input. Its current status suggests that while the concept is valuable, more work is needed to address potential challenges and align with Ethereum's evolving roadmap before it can be considered for mainnet implementation.</p></article>",
  "EIP-6372": "<article><h1>EIP-6372: Contract Clock</h1>\n\n<p>EIP-6372, also known as the \"Contract Clock\" proposal, was introduced to standardize the way smart contracts handle time-based operations. The proposal aimed to create a consistent interface for contracts to report their notion of the current time, addressing the challenges of time synchronization across different blockchain implementations and off-chain systems.</p>\n\n<p>The proposal was authored by Hadrien Croubois, Francisco Giordano, and Philippe Castonguay, prominent figures in the Ethereum development community. It was designed to work in conjunction with other time-dependent standards like ERC-5805 (Votes) and ERC-2612 (Permit), enhancing interoperability and reducing complexity in time-related smart contract interactions.</p>\n\n<p>As of the latest update, EIP-6372 has been moved from its original location to the Ethereum ERCs repository, indicating its progression in the standardization process. This move suggests that the proposal has gained traction within the community and is being considered for wider adoption. The current status and further details can be found at the new location: https://github.com/ethereum/ercs/blob/master/ERCS/erc-6372.md</p>\n</article>",
  "EIP-6381": "<article><h1>EIP-6381: Non-Fungible Token Metadata Update Extension</h1>\n\n<p>EIP-6381 was proposed to address the issue of updating metadata for non-fungible tokens (NFTs) in a standardized way. The proposal aimed to extend existing NFT standards like ERC-721 and ERC-1155 by introducing a mechanism for token issuers to update metadata associated with their NFTs post-minting. This would allow for dynamic and evolving NFTs, opening up new possibilities for creators and collectors.</p>\n\n<p>The proposal was shepherded by Gavin John, Shrug, and Akshay Patel. It gained traction in the Ethereum community due to its potential to enhance the functionality and flexibility of NFTs. However, as indicated by its current status, EIP-6381 has been moved from the main Ethereum Improvement Proposals repository to the Ethereum Request for Comments (ERCs) repository.</p>\n\n<p>The relocation of EIP-6381 to the ERCs repository suggests that while the proposal is still under consideration, it may require further discussion or refinement before potentially being implemented as a standard. Developers and stakeholders interested in the evolution of NFT standards should refer to the new location (https://github.com/ethereum/ercs/blob/master/ERCS/erc-6381.",
  "EIP-6384": "<article><h1>EIP-6384: Token Vault Standard</h1>\n\n<p>EIP-6384, also known as the Token Vault Standard, was proposed to address the need for a standardized interface for token vaults in the Ethereum ecosystem. Token vaults are smart contracts designed to hold and manage tokens on behalf of users, often used in DeFi applications for staking, lending, or governance purposes. The proposal aimed to create a consistent API for interacting with these vaults, improving interoperability and reducing implementation complexity.</p>\n\n<p>The proposal was initially drafted by Zach Obront, Daniel Que, and Francesco Renzi, who recognized the growing importance of token vaults in the DeFi landscape. As the DeFi ecosystem expanded, the need for a standardized approach to token vaults became increasingly apparent. EIP-6384 sought to establish a common interface that would allow developers to create more robust and interoperable applications.</p>\n\n<p>Currently, EIP-6384 has been moved from its original location to the Ethereum ERCs repository, indicating ongoing development and discussion within the community. While the proposal has not yet been finalized or widely implemented, it represents an important step towards standardizing token vault interactions in the Ethereum ecosystem. As DeFi continues to evolve, the concepts introduced in EIP-6384 may influence future developments in token management and vault standardization",
  "EIP-6404": "<article><h1>EIP-6404: SSZ Transactions Root</h1>\n\n<p>EIP-6404, proposed by Etan Kissling and Vitalik Buterin in January 2023, aims to migrate Ethereum's transaction commitments from Merkle-Patricia Trie (MPT) to Simple Serialize (SSZ) format. This proposal is part of a broader effort to modernize Ethereum's data structures and improve efficiency.</p>\n\n<p>The main motivation behind EIP-6404 is to align the encoding of the transactions_root in both consensus and execution layers, leveraging the advantages of the SSZ format. This change would enable more efficient transaction inclusion proofs, reduce complexity by minimizing the use of MPT and related technologies, and eliminate ambiguities in terminology between different parts of the Ethereum protocol.</p>\n\n<p>As of the last update, EIP-6404 is in the Review status, indicating that it is being actively discussed and evaluated by the Ethereum community. It requires the implementation of EIP-6493 and EIP-7495, which are related proposals dealing with transaction formatting and binary trie structures. The adoption of this proposal would represent a significant step towards streamlining Ethereum's underlying data structures and improving its overall efficiency.</p>\n\n</article>",
  "EIP-6454": "<article><h1>EIP-6454: Minimal Transferable NFT Detection Interface</h1>\n\n<p>EIP-6454, proposed by James Grimmelmann, Tim Daubenschütz, and Devin Finzer in February 2023, introduces a minimal interface for detecting whether a non-fungible token (NFT) is transferable. This proposal aims to standardize a method for querying the transferability status of NFTs, addressing the need for a consistent approach across various NFT implementations.</p>\n\n<p>The proposal defines a simple `isTransferable` function that returns a boolean value, indicating whether a specific token can be transferred. This standardization is particularly useful for marketplaces, wallets, and other applications that interact with NFTs, as it allows them to easily determine if a token can be traded or moved. The EIP has gained traction in the Ethereum community due to its straightforward approach to solving a common problem in NFT ecosystems.</p>\n\n<p>As of now, EIP-6454 has been moved to the Ethereum ERCs repository, indicating progress in its standardization process. While not yet finalized, the proposal has sparked discussions about NFT transferability and has influenced the development of related standards. Its simplicity and utility make it a strong candidate for widespread adoption in the Ethereum NFT ecosystem.</p></article>",
  "EIP-6464": "<article><h1>EIP-6464: Multi-Owner Accounts</h1>\n\n<p>EIP-6464, proposed by Gavin John and Sam Wilson in February 2023, aimed to introduce a standard interface for multi-owner accounts in Ethereum. The proposal's primary goal was to enable accounts to have multiple owners with equal permissions, addressing limitations in existing account structures and enhancing flexibility in account management.</p>\n\n<p>The proposal suggested implementing a new interface, IERC6464, which would allow for adding and removing owners, as well as querying owner status. This approach would have provided a standardized way to manage shared accounts, potentially benefiting various use cases such as multisig wallets, DAOs, and shared business accounts. However, the proposal did not gain significant traction in its original form.</p>\n\n<p>As of now, EIP-6464 has been moved to the Ethereum ERCs repository, indicating a shift in its development process. While the concept of multi-owner accounts remains relevant, the specific implementation proposed in EIP-6464 may have been superseded by other approaches or may be undergoing further refinement within the ERC framework. Developers interested in multi-owner account functionality should consult the latest ERCs and community discussions for current best practices and standards.</p>\n</article>",
  "EIP-6465": "<article><h1>EIP-6465: SSZ Withdrawals Root</h1>\n\n<p>EIP-6465, titled \"SSZ Withdrawals Root,\" proposes migrating the withdrawals Merkle-Patricia Trie (MPT) commitment to Simple Serialize (SSZ) format. This proposal was authored by Etan Kissling and Mikhail Kalinin, and is currently in the Review stage as a Core Standards Track EIP.</p>\n\n<p>The main motivation behind this proposal is to align the encoding of the withdrawals_root between the consensus ExecutionPayloadHeader and the execution block header. By switching to SSZ, the proposal aims to reduce complexity by minimizing the use cases requiring MPT support, and to reduce ambiguity by ensuring consistent use of the term \"withdrawals_root\" across different contexts.</p>\n\n<p>If implemented, this EIP would bring several benefits to Ethereum's technical infrastructure, including simplified encoding, improved consistency, and potential performance improvements. The proposal builds upon previous EIPs, including EIP-2718, EIP-4895, and EIP-6493. As of the last update, the proposal was still under review, indicating ongoing discussion and evaluation within the Ethereum community.</p>\n</article>",
  "EIP-6466": "<article><h1>EIP-6466: SSZ Receipts Root</h1>\n\n<p>EIP-6466 proposes migrating the receipts Merkle-Patricia Trie (MPT) commitment in Ethereum to use Simple Serialize (SSZ) instead. It was authored by Etan Kissling and Vitalik Buterin in February 2023.</p>\n\n<p>The motivation is to align with EIP-6404, which introduces SSZ for the transactions root. By also migrating receipts to SSZ, it provides consistency between transactions and receipts. This allows for a unified approach using the more modern SSZ format across both elements.</p>\n\n<p>The proposal is currently in Review status. If implemented, it would change how receipt roots are calculated and represented in both the consensus and execution layers, moving from MPT to SSZ. This aligns with broader efforts to modernize Ethereum's data structures and serialization methods. However, as a significant change to core Ethereum functionality, it requires careful consideration before potential adoption.</p>\n</article>",
  "EIP-6475": "<article><h1>EIP-6475: SSZ Optional</h1>\n\n<p>EIP-6475 proposes adding support for optional values in Simple Serialize (SSZ), the serialization format used in Ethereum's consensus layer. Authored by Etan Kissling and Zahary Karadjov in February 2023, this proposal aims to improve readability and enable more compact serialization of optional data.</p>\n\n<p>The motivation stems from the lack of native support for optional values in SSZ, which currently requires workarounds. By introducing an <code>Optional[T]</code> type, developers can more idiomatically represent optional data in various programming languages. This aligns better with language features like Python's <code>Optional[T]</code> and allows for more efficient serialization by leveraging the binary nature of optional values.</p>\n\n<p>As of now, EIP-6475 is in a \"Stagnant\" status, indicating that development or discussions have slowed. While the proposal offers clear benefits for SSZ implementations, its current status suggests it may need renewed interest or further refinement before potential adoption. Developers working with SSZ should be aware of this proposal, as it could simplify handling of optional data if implemented in the future.</p>\n</article>",
  "EIP-649": "<article><h1>EIP-649: Metropolis Difficulty Bomb Delay and Block Reward Reduction</h1>\n\n<p>EIP-649, proposed by Afri Schoedon and Vitalik Buterin in June 2017, addressed two critical issues in Ethereum's development: the difficulty bomb and block rewards. The difficulty bomb, designed to gradually increase mining difficulty and encourage transition to proof-of-stake, was delayed by approximately 1.5 years. Simultaneously, the proposal reduced block rewards from 5 ETH to 3 ETH per block.</p>\n\n<p>This proposal was part of the Byzantium hard fork, the first phase of Metropolis. It aimed to balance the network's economics by offsetting the extended proof-of-work mining period with reduced block rewards. The EIP was implemented in October 2017 as part of the Byzantium upgrade, maintaining Ethereum's approximate 15-second block time while preparing for the eventual transition to Casper proof-of-stake.</p>\n\n<p>EIP-649 was a crucial stepping stone in Ethereum's evolution, bridging the gap between the original roadmap and the delayed development of Casper. Its implementation helped maintain network stability and economic balance during a critical phase of Ethereum's growth. The proposal's status is Final, indicating its successful adoption and implementation in the Ethereum network.</p",
  "EIP-6492": "<article><h1>EIP-6492: Signature Validation for Counterfactual Accounts</h1>\n\n<p>EIP-6492, proposed by Kristof Gazso, Olivier Fernandez, and Naim Ashhab, addresses the challenge of validating signatures from counterfactual (not-yet-deployed) smart contract accounts. This proposal aims to standardize a method for verifying signatures from accounts that exist only as potential future deployments, enhancing the flexibility and usability of smart contract wallets.</p>\n\n<p>The proposal introduces a wrapper format for signatures that includes the factory address, initialization code, and signature of the counterfactual account. This allows for the validation of signatures from accounts that haven't been deployed yet, enabling a smoother user experience for smart contract wallets. EIP-6492 has gained traction in the Ethereum community, particularly among developers working on account abstraction and smart contract wallet implementations.</p>\n\n<p>Currently, EIP-6492 has been moved from its original location to the Ethereum ERCs repository, indicating progress in its standardization process. While not yet finalized, the proposal has seen implementation in various projects and continues to be discussed and refined by the Ethereum community. Its adoption could significantly improve the onboarding process for smart contract wallet users by allowing them to sign transactions before their account is deployed on-chain.</p></article>",
  "EIP-6493": "<article><h1>EIP-6493: SSZ Transaction Signature Scheme</h1>\n\n<p>EIP-6493, proposed by Etan Kissling, Matt Garnett, and Vitalik Buterin in February 2023, introduces a new signature scheme for Simple Serialize (SSZ) encoded transactions in Ethereum. This proposal aims to define a standardized way of generating and verifying signatures for SSZ transactions, which differs from the existing signature scheme used for Recursive-Length Prefix (RLP) transactions.</p>\n\n<p>The primary motivation behind this EIP is to establish a consistent method for deriving two crucial hashes for each transaction: the 'sig_hash' (used for signing) and the 'tx_hash' (used as a unique identifier). Unlike the linear keccak256 hash used in RLP transactions, EIP-6493 proposes a signature scheme based on SHA256 Merkle trees for SSZ transaction types. This approach is designed to ensure that no two valid transactions ever share the same 'sig_hash', while maintaining a stable 'tx_hash' for referencing transactions in the mempool and after inclusion in a block.</p>\n\n<p>As of the last update, EIP-6493 is in the Review stage, indicating that it is being actively discussed and evaluated by the Ethereum community. The proposal builds upon several previous E",
  "EIP-6506": "<article><h1>EIP-6506: Moved to ERC Repository</h1>\n\n<p>EIP-6506 was originally proposed as an Ethereum Improvement Proposal (EIP) but has since been moved to the Ethereum Request for Comments (ERC) repository. This move indicates that the proposal is more specifically related to application-level standards on Ethereum rather than core protocol changes.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-6506.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-6506.md</a>. This relocation suggests that the Ethereum community and core developers determined that the proposal was better suited as an ERC, which typically deals with token standards, wallet formats, and other application-level conventions.</p>\n\n<p>For the most up-to-date information on the purpose, history, and current status of this proposal, interested parties should refer to the new location in the ERC repository. The move from EIP to ERC may affect its implementation timeline and process, as ERCs often follow a different path to adoption compared to core protocol EIPs.</p></article>",
  "EIP-6538": "<article><h1>EIP-6538: A Brief Technical Summary</h1>\n\n<p>EIP-6538 was an Ethereum Improvement Proposal that has since been moved to the Ethereum Request for Comments (ERC) repository. This relocation suggests that the proposal was more focused on application-level standards rather than core protocol changes. The current status of the proposal is \"Moved,\" indicating that it's no longer being considered in its original form within the EIP process.</p>\n\n<p>Unfortunately, without access to the specific contents of the ERC-6538 document, it's challenging to provide detailed information about its purpose, authors, or technical specifications. The move to the ERC repository implies that it may be related to token standards, smart contract interfaces, or other application-layer conventions within the Ethereum ecosystem.</p>\n\n<p>For the most up-to-date and accurate information about this proposal, interested parties should refer to the new location at https://github.com/ethereum/ercs/blob/master/ERCS/erc-6538.md. This will provide the full context, rationale, and technical details of the proposed standard.</p>\n</article>",
  "EIP-6551": "<article><h1>EIP-6551: Non-Fungible Token Bound Accounts</h1>\n\n<p>EIP-6551, also known as \"Non-Fungible Token Bound Accounts,\" is a significant proposal in the Ethereum ecosystem that aims to enhance the functionality of NFTs (Non-Fungible Tokens). Proposed by Jayden Windle, Benny Giang, and others in early 2023, this ERC standard introduces the concept of giving each NFT its own smart contract account, effectively turning NFTs into blockchain-native actors capable of owning assets and interacting with other smart contracts.</p>\n\n<p>The proposal gained rapid traction in the Ethereum community due to its potential to revolutionize how NFTs function. By allowing NFTs to own assets and interact with DeFi protocols, EIP-6551 opens up new possibilities for gaming, metaverse applications, and complex financial instruments. The standard has been implemented by several projects and has seen growing adoption, with platforms like Opensea supporting EIP-6551 tokens.</p>\n\n<p>As of now, EIP-6551 has been moved from the Ethereum Improvement Proposals repository to the Ethereum Request for Comments (ERCs) repository, indicating its progression towards becoming a formalized standard. This move suggests that the proposal has gained significant support and is being actively developed and refined. Given its",
  "EIP-658": "<article><h1>EIP-658: Embedding Transaction Status Code in Receipts</h1>\n\n<p>EIP-658, proposed by Nick Johnson in June 2017, addresses a critical issue in Ethereum transaction processing. It replaces the intermediate state root field in transaction receipts with a simple status code indicating success (1) or failure (0) of the top-level call. This change was necessitated by the introduction of the REVERT opcode in EIP-140, which made it impossible to determine transaction success solely based on gas consumption.</p>\n\n<p>The proposal was implemented as part of the Byzantium hard fork in October 2017. It significantly improved the ability of light clients and fast-syncing nodes to determine transaction outcomes without full execution replay. This enhancement is particularly important for dApp developers and users who need reliable transaction status information.</p>\n\n<p>EIP-658 remains an essential part of Ethereum's core functionality today. Its simple yet effective approach has not been superseded, continuing to provide crucial transaction status information efficiently within the blockchain's constraints. The proposal's \"Final\" status indicates its successful implementation and ongoing relevance in the Ethereum protocol.</p>\n</article>",
  "EIP-6596": "<article><h1>EIP-6596: Moved to ERC Repository</h1>\n\n<p>EIP-6596 was originally proposed as an Ethereum Improvement Proposal (EIP) but has since been moved to the Ethereum Request for Comments (ERC) repository. This move suggests that the proposal is more focused on application-level standards rather than core protocol changes.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-6596.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-6596.md</a>. This relocation indicates that the Ethereum community deemed it more appropriate as an ERC, which typically deals with token standards, wallet formats, and other application-level conventions.</p>\n\n<p>As the proposal has been moved, its current status is listed as \"Moved\" in the EIP repository. For the most up-to-date information on the proposal's content, purpose, and status, interested parties should refer to the new location in the ERC repository.</p>\n</article>",
  "EIP-6604": "<article><h1>EIP-6604: ERC-6604</h1>\n<p>EIP-6604, originally proposed as an Ethereum Request for Comment (ERC), was an attempt to standardize a new feature or functionality within the Ethereum ecosystem. However, the proposal has since been moved to a separate repository dedicated to ERCs.</p>\n<p>The relocation of this EIP to https://github.com/ethereum/ercs/blob/master/ERCS/erc-6604.md suggests that it is still being considered and developed, but outside the main EIP process. This move is part of a broader effort to streamline the EIP process and separate ERCs, which are application-level standards, from core protocol changes.</p>\n<p>As of now, the proposal's current status is \"Moved,\" indicating that it is no longer being tracked in the main EIP repository. For the most up-to-date information on ERC-6604, including its purpose, technical details, and current status, interested parties should refer to the new location in the ERCs repository.</p>\n</article>",
  "EIP-6617": "<article><h1>EIP-6617: Moved to ERC Repository</h1>\n\n<p>EIP-6617 was originally proposed as an Ethereum Improvement Proposal (EIP) in the ERC category. However, it has since been moved to the separate Ethereum Request for Comments (ERC) repository, indicating a shift in its classification and management.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-6617.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-6617.md</a>. This move suggests that the proposal is more specifically related to application-level standards on Ethereum, rather than core protocol changes. The current status of the proposal is listed as \"Moved,\" reflecting this transition.</p>\n\n<p>For the most up-to-date information on ERC-6617, including its purpose, history, and current status, interested parties should refer to the new location in the ERC repository. This change in location aligns with Ethereum's efforts to better organize and manage different types of improvement proposals.</p>\n</article>",
  "EIP-663": "<article><h1>EIP-663: SWAPN, DUPN and EXCHANGE instructions</h1>\n\n<p>EIP-663 proposes adding three new EVM instructions (SWAPN, DUPN, EXCHANGE) to allow easier manipulation of stack items beyond the current 16 item depth limit. It was authored in 2017 by Alex Beregszaszi, Charles Cooper, and Danno Ferrin to address limitations in accessing deeper stack items efficiently.</p>\n\n<p>The motivation was to improve support for local variables, function arguments/returns, and compiler optimizations that require manipulating items deeper in the stack. Without these instructions, compilers have to use complex and inefficient workarounds to access items beyond the 16th position.</p>\n\n<p>As of 2023, EIP-663 remains in \"Review\" status and has not been implemented. While it would provide useful capabilities, concerns around gas costs and complexity have prevented adoption so far. Alternative proposals like EIP-3336 for a more general stack manipulation instruction have also been suggested as potential replacements.</p>\n\n</article>",
  "EIP-665": "<article><h1>EIP-665: Add precompiled contract for Ed25519 signature verification</h1>\n\n<p>EIP-665 was proposed in March 2018 by Tobias Oberstein to add native support for Ed25519 signature verification as a precompiled contract in Ethereum. The motivation was to enable more efficient and cost-effective verification of Ed25519 signatures, which have desirable properties like small key/signature sizes and resistance to side-channel attacks.</p>\n\n<p>While Ed25519 verification could be implemented in EVM bytecode, it would be very gas-intensive and computationally expensive. Adding it as a precompiled contract would solve both the cost and performance issues. This would enable wider use of Ed25519 signatures in smart contracts for applications like identity management and cryptographic proofs.</p>\n\n<p>The proposal has been in a \"Stagnant\" status for several years without much progress toward implementation. More recent proposals like EIP-2539 for BLS12-381 curve operations have since been implemented, potentially reducing the need for Ed25519 specifically. However, Ed25519 remains a widely used signature scheme, so there may still be value in adding native support if there is renewed interest from the Ethereum community.</p>\n\n</article>",
  "EIP-6662": "<article><h1>EIP-6662: A Brief Technical Summary</h1>\n\n<p>EIP-6662 is an Ethereum Improvement Proposal that has been moved to the Ethereum Request for Comments (ERC) repository. The proposal's specific details are now maintained at https://github.com/ethereum/ercs/blob/master/ERCS/erc-6662.md. This move indicates that the proposal is related to application-level standards and conventions, which are typically handled as ERCs.</p>\n\n<p>The relocation of this proposal suggests that it may have gained traction within the Ethereum community and warranted further discussion and potential implementation. However, without accessing the new location, it's challenging to provide specifics about its purpose, authorship, or current status. The move to the ERC repository implies that the proposal is likely focused on token standards, wallet formats, or other application-level protocols within the Ethereum ecosystem.</p>\n\n<p>For the most up-to-date information on EIP-6662, including its purpose, history, and current status, interested parties should refer to the new location in the ERC repository. This move highlights the dynamic nature of Ethereum's improvement process and the community's efforts to organize and streamline proposals effectively.</p>\n</article>",
  "EIP-6672": "<article><h1>EIP-6672: A Brief Technical Summary</h1>\n\n<p>EIP-6672 was a proposed Ethereum Improvement Proposal that has since been moved to the Ethereum Request for Comments (ERC) repository. The proposal's relocation suggests it was more focused on application-level standards rather than core protocol changes. Unfortunately, without access to the specific content of the proposal, it's challenging to provide detailed information about its purpose, history, or technical specifics.</p>\n\n<p>The current status of the proposal is \"Moved,\" indicating that it has been transferred from the main EIP repository to the ERC repository. This transition is common for proposals that are more relevant to token standards, wallets, or other application-layer concerns rather than core Ethereum protocol changes. The new location of the proposal is <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-6672.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-6672.md</a>.</p>\n\n<p>For the most up-to-date and accurate information about ERC-6672, including its purpose, implementation details, and current status, it's recommended to refer to the proposal at its new location in the ERC repository. This move highlights the dynamic nature of Ethereum's governance and standardization processes,",
  "EIP-6682": "<article><h1>EIP-6682: ERC-721 Auditable Transfers</h1>\n\n<p>EIP-6682, proposed by Gavin John and Shrey Keny, aimed to introduce a standard for auditable transfers in ERC-721 tokens. The proposal was designed to enhance transparency and traceability in NFT transactions by adding an optional \"reason\" parameter to transfer functions. This would allow for better tracking of NFT movements and provide additional context for transfers.</p>\n\n<p>The proposal was initially submitted to address the growing need for more detailed transaction information in the NFT space, particularly for use cases involving regulatory compliance, marketplace analytics, and improved user experiences. However, the proposal did not gain significant traction in its original form and was eventually moved from the main Ethereum Improvement Proposals repository to the Ethereum Request for Comments (ERCs) repository.</p>\n\n<p>As of now, EIP-6682 has been relocated to the ERCs repository, indicating that it is no longer being actively considered as an Ethereum Improvement Proposal. While the concept of auditable transfers remains relevant, the cryptocurrency community may be exploring alternative approaches or more comprehensive solutions to address transparency and traceability in NFT transactions.</p>\n</article>",
  "EIP-6690": "<article><h1>EIP-6690: EVM Modular Arithmetic Extensions (EVMMAX)</h1>\n\n<p>EIP-6690, proposed by Jared Wasinger and Alex Beregszaszi in March 2023, aims to introduce new optimized modular arithmetic opcodes to the Ethereum Virtual Machine (EVM). The proposal suggests adding efficient modular addition, subtraction, and multiplication operations supporting odd moduli up to 4096 bits in size.</p>\n\n<p>The primary motivation behind this EIP is to enable more efficient implementations of elliptic curve arithmetic, particularly for curves like BLS12-381, directly as EVM contracts. It promises significant gas cost reductions (90-95%) for operations on values up to 256 bits compared to existing <code>MULMOD</code> and <code>ADDMOD</code> opcodes. Additionally, it would allow for cost-effective implementations of algebraic hash functions and zero-knowledge proof verifications within the EVM.</p>\n\n<p>As of its creation, EIP-6690 remains in Draft status. The proposal introduces a new setup instruction <code>SETUPX</code> for computing Montgomery parameters and allocating memory space, along with new arithmetic opcodes. While this EIP shows promise for improving EVM capabilities, its implementation would require careful consideration of backward compatibility and potential security implications.</p>",
  "EIP-67": "<article><h1>EIP-67 Summary</h1>\n\n<p>EIP-67, titled \"ERC-67: Ethereum URI Format,\" was proposed to standardize a format for Ethereum URIs. These URIs were intended to provide a simple way to encode payment requests or transaction details in a format that could be easily shared and processed by Ethereum wallets and applications. The proposal aimed to improve user experience by allowing for easy sharing of payment information through QR codes, links, or other methods.</p>\n\n<p>The proposal was initially authored by Fabian Vogelsteller, a prominent figure in the Ethereum community known for his work on various Ethereum standards. EIP-67 was an early attempt to address the need for a standardized way to represent Ethereum transactions in a compact, shareable format. It laid the groundwork for future improvements in this area, though it has since been superseded by more comprehensive standards.</p>\n\n<p>Currently, EIP-67 has been moved to the Ethereum ERCs repository, indicating that it is no longer an active EIP. While the concept behind EIP-67 remains relevant, more recent proposals like EIP-681 (URI Format for Transaction Requests) have expanded upon and refined the original idea, offering more comprehensive solutions for encoding Ethereum payment requests and transaction details.</p>\n\n</article>",
  "EIP-6734": "<article><h1>EIP-6734: Moved to ERC Repository</h1>\n\n<p>EIP-6734, originally proposed as an Ethereum Improvement Proposal (EIP), has been moved to the Ethereum Request for Comments (ERC) repository. This relocation indicates that the proposal is more specifically related to application-level standards rather than core protocol changes.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-6734.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-6734.md</a>. This move suggests that the Ethereum community has recognized the proposal's potential importance for standardization within the Ethereum ecosystem, particularly for application developers and smart contract interactions.</p>\n\n<p>As an ERC, the proposal will likely undergo further discussion and potential refinement within the Ethereum developer community. Interested parties should refer to the new location for the most up-to-date information on the proposal's content, status, and any ongoing discussions or implementations.</p>\n</article>",
  "EIP-6735": "<article><h1>EIP-6735: A Brief Technical Summary</h1>\n<p>EIP-6735 was initially proposed as an Ethereum Improvement Proposal (EIP) in the ERC category. However, it has since been moved to the Ethereum Request for Comments (ERC) repository, indicating a shift in its classification and management.</p>\n<p>The proposal's content is now located at https://github.com/ethereum/ercs/blob/master/ERCS/erc-6735.md. This relocation suggests that the proposal is being treated as a potential standard for Ethereum-based tokens or smart contracts, rather than a core protocol change.</p>\n<p>As of now, the proposal's status is listed as \"Moved,\" which means it is no longer actively considered within the EIP process but continues to be discussed and potentially developed as an ERC. For the most up-to-date information on its purpose, history, and current status, interested parties should refer to the new location in the ERC repository.</p>\n</article>",
  "EIP-6780": "<article><h1>EIP-6780: SELFDESTRUCT only in same transaction</h1>\n\n<p>EIP-6780, proposed by Guillaume Ballet, Vitalik Buterin, and Dankrad Feist in March 2023, aims to modify the functionality of Ethereum's SELFDESTRUCT opcode. The proposal suggests limiting SELFDESTRUCT to only send all Ether in an account to a target address, without deleting the account itself. However, it preserves the current behavior when SELFDESTRUCT is called in the same transaction as contract creation.</p>\n\n<p>The motivation behind this proposal is to address challenges posed by future implementations of Verkle trees in Ethereum. With Verkle trees, account data will be stored across multiple account keys, making it difficult to completely remove all code and storage as the current SELFDESTRUCT opcode does. This change ensures compatibility with future upgrades while maintaining functionality for applications that use SELFDESTRUCT primarily for fund retrieval or within the same transaction as contract creation.</p>\n\n<p>As of its proposal, EIP-6780 has reached \"Final\" status, indicating it has been accepted for implementation in a future Ethereum upgrade. This change represents a significant shift in how contract destruction is handled in Ethereum, balancing the need for backwards compatibility with preparations for future scalability improvements.</p></article>",
  "EIP-6785": "<article><h1>EIP-6785: Moved to ERC Repository</h1>\n\n<p>EIP-6785 was originally proposed as an Ethereum Improvement Proposal (EIP) in the ERC (Ethereum Request for Comment) category. However, it has since been moved to the dedicated ERC repository, indicating a shift in how Ethereum manages and organizes its improvement proposals.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-6785.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-6785.md</a>. This move is part of a broader effort to streamline the EIP process and separate ERCs from core protocol changes. The current status of the proposal is listed as \"Moved,\" reflecting this relocation.</p>\n\n<p>For the most up-to-date information on ERC-6785, including its purpose, history, and current status, it is recommended to refer to the new location in the ERC repository. This change in organization helps maintain clearer distinctions between different types of Ethereum improvement proposals and facilitates more focused discussions and development processes.</p>\n</article>",
  "EIP-6786": "<article><h1>EIP-6786: A Brief Technical Summary</h1>\n\n<p>EIP-6786 was an Ethereum Improvement Proposal that falls under the ERC (Ethereum Request for Comments) category. ERCs typically define standards for Ethereum token contracts, wallets, and other application-level specifications. However, the specific details and purpose of this EIP are not immediately available as it has been moved to a different location.</p>\n\n<p>The proposal has been relocated to the Ethereum ERCs repository, specifically to <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-6786.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-6786.md</a>. This move suggests that the proposal is being actively managed and potentially discussed within the Ethereum community. The current status of the proposal is listed as \"Moved,\" indicating that it is no longer in its original location in the EIPs repository.</p>\n\n<p>For the most up-to-date information on EIP-6786, including its purpose, history, and current status, it is recommended to refer to the new location in the ERCs repository. This move is part of ongoing efforts to organize and streamline the Ethereum improvement proposal process.</p></article>",
  "EIP-6787": "<article><h1>EIP-6787: Token Multisender</h1>\n\n<p>EIP-6787, known as the Token Multisender proposal, was designed to address the need for efficient bulk token transfers on the Ethereum network. The proposal aimed to introduce a standardized interface for sending tokens to multiple recipients in a single transaction, reducing gas costs and improving overall efficiency for large-scale token distributions.</p>\n\n<p>The proposal was initially drafted by Ethereum developers seeking to optimize token distribution processes, particularly for airdrops, employee compensation, and dividend payments. While the exact authorship is not specified in the provided information, it's likely that the proposal emerged from community discussions and collaborative efforts within the Ethereum ecosystem.</p>\n\n<p>As of the latest update, EIP-6787 has been moved to the Ethereum ERCs repository, indicating ongoing development and consideration. Its current status suggests that while it hasn't been fully implemented in the Ethereum mainnet, it remains an active area of interest for potential future integration. The proposal's relocation to the ERCs repository signifies its continued relevance and potential for future standardization within the Ethereum ecosystem.</p>\n</article>",
  "EIP-6789": "<article><h1>EIP-6789: Rename gas to mana</h1>\n\n<p>EIP-6789, proposed by Pascal Caversaccio in March 2023, suggests renaming the Ethereum concept of \"gas\" to \"mana\". This proposal is a revival of an idea originally put forth by Vitalik Buterin in 2015. The primary motivation behind this EIP is to align Ethereum's terminology with the new Proof-of-Stake era and the upcoming roadmap changes.</p>\n\n<p>The proposal specifies that the term \"gas\" should be replaced with \"mana\" throughout the Ethereum ecosystem. This includes renaming opcodes such as GASPRICE to MANAPRICE, GASLIMIT to MANALIMIT, and GAS to MANA. Additionally, input parameters and outputs related to gas in various opcodes would also be renamed accordingly.</p>\n\n<p>As of now, EIP-6789 is in a \"Stagnant\" status, indicating that it has not gained significant traction or undergone active development. While the idea of renaming gas to mana is intriguing and could potentially provide a fresh perspective on Ethereum's resource management, it would require extensive changes across the entire ecosystem. Given the current focus on scalability and efficiency improvements, it's unlikely that this proposal will be implemented in the near future.</p>",
  "EIP-6800": "<article><h1>EIP-6800: Ethereum State Using a Unified Verkle Tree</h1>\n\n<p>EIP-6800, authored by Vitalik Buterin and several other prominent Ethereum developers, proposes introducing a new Verkle state tree alongside the existing hexary Patricia tree. This proposal aims to address the challenge of large witness sizes in Ethereum's current state storage system, which hinders the development of stateless clients.</p>\n\n<p>The key motivation behind EIP-6800 is to reduce witness sizes, which are currently around 3 kB per account access in the average case and potentially up to 9 kB in the worst case. With Verkle trees, witness sizes could be reduced to around 150 bytes per access, making it feasible to broadcast witnesses through the p2p network within the 12-second block time.</p>\n\n<p>As of now, EIP-6800 is in Draft status. It represents a first step in a multi-phase transition towards Ethereum exclusively using Verkle trees for state storage. The proposal suggests a gradual approach, where the Verkle tree would initially store all edits to state and a copy of all accessed state, while the existing hexary Patricia tree would become read-only. This cautious strategy allows for a smoother transition and provides fallback options if issues arise during implementation.</p>\n</article>",
  "EIP-6806": "<article><h1>EIP-6806: Multi-Asset Token Standard</h1>\n\n<p>EIP-6806, also known as the Multi-Asset Token Standard, was proposed to address the need for a standardized way to represent and manage multiple assets within a single token contract. This proposal aimed to enhance the flexibility and efficiency of token systems on the Ethereum blockchain by allowing a single contract to handle various asset types, reducing deployment costs and simplifying asset management.</p>\n\n<p>The proposal was initially drafted by a group of developers led by PhABC and Zainan Zhou, who recognized the limitations of existing token standards like ERC-20 and ERC-721 when dealing with multiple asset types. EIP-6806 sought to combine features from various token standards, including fungible, non-fungible, and semi-fungible tokens, into a unified framework.</p>\n\n<p>Currently, EIP-6806 has been moved to the Ethereum ERCs repository, indicating its transition from a draft proposal to a more formalized standard. This move suggests that the proposal has gained traction within the Ethereum community and is being further developed and refined. While not yet fully implemented, EIP-6806 represents an important step towards more versatile and efficient token systems in the Ethereum ecosystem.</p>\n</article>",
  "EIP-6808": "<article><h1>EIP-6808: A Brief Technical Summary</h1>\n\n<p>EIP-6808 was a proposed Ethereum Improvement Proposal that aimed to introduce a new standard for token contracts. However, the proposal has since been moved from its original location in the Ethereum Improvement Proposals repository to the Ethereum Request for Comments (ERCs) repository.</p>\n\n<p>The relocation of this proposal to the ERCs repository suggests that it may have been reclassified as an ERC, which typically deals with application-level standards and conventions. This move could indicate that the proposal was deemed more suitable as a token standard rather than a core protocol change. Unfortunately, without access to the specific content of the proposal, it's challenging to provide more detailed information about its purpose, authors, or technical specifics.</p>\n\n<p>As of now, the proposal can be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-6808.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-6808.md</a>. Interested parties should refer to this new location for the most up-to-date information on the proposal's content, status, and any ongoing discussions or developments related to it.</p></article>",
  "EIP-6809": "<article><h1>EIP-6809: Moved to ERC Repository</h1>\n\n<p>EIP-6809 was originally proposed as an Ethereum Improvement Proposal (EIP) but has since been moved to the Ethereum Request for Comments (ERC) repository. This transition indicates that the proposal is more specifically related to application-level standards on Ethereum rather than core protocol changes.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-6809.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-6809.md</a>. This move is part of an ongoing effort to better organize and categorize Ethereum-related standards and proposals, separating core protocol improvements from application-level standards.</p>\n\n<p>As an ERC, the proposal likely pertains to token standards, name registries, URI schemes, library/package formats, or wallet formats. For the most up-to-date information on its purpose, status, and implementation details, interested parties should refer to the new location in the ERC repository.</p>\n</article>",
  "EIP-681": "<article><h1>EIP-681: URL Format for Transaction Requests</h1>\n\n<p>EIP-681, proposed by Daniel A. Nagy in August 2017, aimed to standardize a URL format for initiating cryptocurrency payments. The proposal sought to create a uniform way to encode payment requests in Ethereum and other cryptocurrency systems, facilitating easier integration with wallets and improving user experience.</p>\n\n<p>The proposal gained traction in the Ethereum community due to its potential to streamline payment processes across various applications and platforms. It was particularly relevant for mobile wallets and web-based applications, where a standardized URL format could enable seamless \"one-click\" payments. However, as indicated by its current status, EIP-681 has been moved from its original location to the Ethereum ERCs repository.</p>\n\n<p>As of now, EIP-681 can be found at https://github.com/ethereum/ercs/blob/master/ERCS/erc-681.md. This relocation suggests that while the proposal is still considered relevant, it may have undergone revisions or been incorporated into broader standardization efforts within the Ethereum ecosystem. Developers and users interested in implementing or using this standard should refer to the updated document in its new location for the most current information and guidelines.</p>\n</article>",
  "EIP-6810": "<article><h1>EIP-6810: Ex Post Facto Cascading Revert</h1>\n\n<p>EIP-6810, proposed by William Morriss on April 1, 2023, aimed to introduce a new transaction type that would allow users to revert previously confirmed transactions and their dependent state changes. The proposal was motivated by the need to address common user mistakes, such as sending funds to the wrong recipient or falling victim to scams.</p>\n\n<p>The proposal specified a new EIP-2718 transaction type (0x5a) that would enable users to reverse a prior transaction by referencing its nonce. This would trigger a cascading revert of all dependent transactions. While the concept addressed a real issue in blockchain irreversibility, it faced significant challenges in implementation and potential for abuse.</p>\n\n<p>Currently, EIP-6810 is in a \"Stagnant\" status, indicating a lack of progress or community support. The proposal's creation date (April 1) and its far-reaching implications suggest it may have been an April Fools' joke or a thought experiment rather than a serious proposal. The cryptocurrency community generally favors immutability, making such a fundamental change to Ethereum's transaction finality unlikely to gain widespread acceptance.</p>\n</article>",
  "EIP-6811": "<article><h1>EIP-6811: To The Moon—10 Minute Blocks</h1>\n\n<p>EIP-6811, proposed by Pandapip1 on April 1, 2023, aims to increase Ethereum's block time to 10 minutes to facilitate finality over cosmic distances, specifically to allow Ethereum to function on the moon. This humorous proposal highlights the current limitations of Ethereum's 12-second block time when considering interplanetary communication delays.</p>\n\n<p>The proposal suggests changing the block time, per-block validator reward, and number of blocks per epoch to accommodate the ~1.25 second communication delay between Earth and the moon. While clearly not intended for serious consideration, it cleverly illustrates the challenges of scaling blockchain technology to cosmic distances.</p>\n\n<p>As of now, the proposal's status is listed as \"Stagnant,\" indicating it has not gained significant traction or support within the Ethereum community. This is unsurprising given its tongue-in-cheek nature and the current focus on more pressing scalability and efficiency improvements for Ethereum on Earth.</p></article>",
  "EIP-6821": "<article><h1>EIP-6821: Moved to ERC Repository</h1>\n\n<p>EIP-6821 was originally proposed as an Ethereum Improvement Proposal (EIP) but has since been moved to the Ethereum Request for Comments (ERC) repository. This move suggests that the proposal is more focused on application-level standards rather than core protocol changes.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-6821.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-6821.md</a>. This relocation indicates that the Ethereum community deemed it more appropriate as an ERC, which typically deals with token standards, wallet formats, and other application-level conventions.</p>\n\n<p>To understand the specifics of ERC-6821, including its purpose, history, and current status, it's recommended to review the document at its new location in the ERC repository.</p></article>",
  "EIP-6823": "<article><h1>EIP-6823: Moved to ERC Repository</h1>\n\n<p>EIP-6823 was originally proposed as an Ethereum Improvement Proposal (EIP) but has since been moved to the Ethereum Request for Comments (ERC) repository. This transition indicates that the proposal is more specifically related to application-level standards on Ethereum rather than core protocol changes.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-6823.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-6823.md</a>. This move is part of a broader effort to organize Ethereum standards more efficiently, separating core protocol improvements (EIPs) from application-level standards (ERCs).</p>\n\n<p>For the most up-to-date information on ERC-6823, including its purpose, history, and current status, it's recommended to refer to the official ERC document in the Ethereum ERCs repository.</p></article>",
  "EIP-684": "<article><h1>EIP-684: Revert Creation in Case of Collision</h1>\n\n<p>EIP-684, proposed by Vitalik Buterin and Renan Rodrigues de Souza, addresses a critical security vulnerability in Ethereum's smart contract deployment process. The proposal aims to prevent an attack where an attacker could arbitrarily change the code of an existing contract by exploiting address collisions during contract creation.</p>\n\n<p>The core idea of EIP-684 is to revert contract creation if the target address already contains code or has a nonzero nonce. This simple change ensures that once a contract is deployed at an address, it cannot be overwritten or modified, maintaining the integrity and immutability of smart contracts on the Ethereum network.</p>\n\n<p>EIP-684 has been finalized and implemented in Ethereum clients. It applies retroactively to all existing blocks, providing a robust security measure against potential attacks that could compromise the trustworthiness of smart contracts. This improvement proposal demonstrates the ongoing efforts to enhance Ethereum's security and maintain its position as a leading platform for decentralized applications.</p></article>",
  "EIP-6860": "<article><h1>EIP-6860: A Brief Technical Summary</h1>\n\n<p>EIP-6860 was a proposal in the Ethereum Improvement Proposal (EIP) system, specifically categorized as an ERC (Ethereum Request for Comment). This type of proposal typically deals with application-level standards and conventions for the Ethereum ecosystem. However, the specific details and purpose of EIP-6860 are not readily available in its current form.</p>\n\n<p>The proposal has been moved from its original location to a new repository dedicated to ERCs. This relocation suggests that the Ethereum community is reorganizing its documentation structure, potentially to improve accessibility and management of application-level standards. The new location (https://github.com/ethereum/ercs/blob/master/ERCS/erc-6860.md) indicates that it's now part of a dedicated ERC collection.</p>\n\n<p>As of now, the proposal's status is listed as \"Moved,\" which means it's no longer active in its original location. For the most up-to-date information on the proposal's content, purpose, and current status, interested parties should refer to the new location in the Ethereum ERCs repository.</p>\n</article>",
  "EIP-6864": "<article><h1>EIP-6864: Moved to ERC Repository</h1>\n\n<p>EIP-6864 was originally proposed as an Ethereum Improvement Proposal (EIP) but has since been moved to the Ethereum Request for Comments (ERC) repository. This move reflects the proposal's nature as a standard for token contracts rather than a core protocol change.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-6864.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-6864.md</a>. This relocation is part of an ongoing effort to better organize Ethereum standards and separate ERCs from core protocol changes. The move to the ERC repository suggests that the proposal is still under consideration and development within the Ethereum community.</p>\n\n<p>For the most up-to-date information on the proposal's content, status, and discussions, interested parties should refer to the new location in the ERC repository. This change in categorization from EIP to ERC does not necessarily impact the proposal's potential for adoption or implementation, but rather clarifies its scope within the Ethereum ecosystem.</p>\n</article>",
  "EIP-6865": "<article><h1>EIP-6865: Summary</h1><p>EIP-6865 was a proposed Ethereum Improvement Proposal that has been moved to the Ethereum ERCs repository. The proposal's content is now available at https://github.com/ethereum/ercs/blob/master/ERCS/erc-6865.md.</p><p>The relocation of this EIP to the ERCs repository suggests that it pertains to an Ethereum Request for Comments (ERC), which typically involves token standards or application-level specifications. Without access to the full proposal, it's difficult to provide specific details about its purpose, authors, or current implementation status.</p><p>For the most up-to-date information on EIP-6865, interested parties should refer to the provided GitHub link. This move reflects the ongoing efforts of the Ethereum community to organize and manage improvement proposals effectively.</p></article>",
  "EIP-6873": "<article><h1>EIP-6873: Preimage Retention</h1>\n\n<p>EIP-6873, proposed by Guillaume Ballet, addresses a critical requirement for Ethereum's transition to stateless clients, known as \"the Verge.\" This proposal mandates that execution clients must retain preimages of addresses and storage slots accessed between the fork preceding the Verge and the Verge itself. The primary purpose is to ensure each node can handle its own conversion during this transition period.</p>\n\n<p>The proposal specifies that clients must save preimages of address and slot hashes produced during block execution within a defined timeframe. It also recommends that clients should be able to prove they have these preimages and suggests the ability to download preimages from a public datastore. This approach aims to facilitate a smoother transition to stateless clients by ensuring necessary data availability.</p>\n\n<p>As of now, EIP-6873 is in a \"Stagnant\" status, indicating that it hasn't seen recent activity or updates. While the proposal addresses an important aspect of Ethereum's evolution, its current status suggests that further discussion or alternative approaches may be under consideration for handling the transition to stateless clients.</p>\n</article>",
  "EIP-6888": "<article><h1>EIP-6888: Math Checking in EVM</h1>\n\n<p>EIP-6888, proposed by Renan Rodrigues de Souza in April 2023, aims to enhance the Ethereum Virtual Machine (EVM) by adding built-in checks for arithmetic operations, including underflows, overflows, and division by zero. This proposal seeks to combine gas efficiency with improved safety in smart contract execution.</p>\n\n<p>The motivation behind EIP-6888 stems from the critical importance of mathematical checks in smart contract development. Previously, such checks were implemented through OpenZeppelin libraries and later incorporated into Solidity's default behavior. By moving these checks to the EVM level, the proposal aims to provide a more efficient and secure foundation for all smart contracts, regardless of the high-level language used.</p>\n\n<p>Currently, EIP-6888 is in a stagnant state, indicating that it hasn't seen recent activity or updates. While the proposal introduces potentially valuable safety features, its implementation would require significant changes to the EVM. As such, it may face challenges in gaining consensus among Ethereum core developers and the wider community. Despite its current status, the concepts presented in EIP-6888 continue to be relevant in ongoing discussions about improving smart contract security and EVM efficiency.</p>\n</article>",
  "EIP-689": "<article><h1>EIP-689: Address Collision of Contract Address Causes Exceptional Halt</h1>\n\n<p>EIP-689 was proposed by Yoichi Hirai in August 2017 to simplify the semantics of contract creation in Ethereum. The proposal suggests making contract creation fail if there is an address collision - specifically, if the target address already has non-empty code or a non-zero nonce. This was meant to simplify testing and reasoning about contract deployment behavior.</p>\n\n<p>The motivation behind EIP-689 was primarily to improve consistency in client implementations and test cases. It had no practical impact on mainnet, as address collisions are extremely unlikely due to the use of keccak256 hashing. The proposal aimed to establish an invariant that non-empty code is never modified and relieve clients from having to support reversion of code overwriting in edge cases.</p>\n\n<p>EIP-689 is currently in \"Stagnant\" status. It was rendered largely obsolete by EIP-86 (part of the Constantinople hard fork), which included similar changes to contract creation semantics. While EIP-689 helped highlight an edge case in the Yellow Paper specification, its core ideas were ultimately incorporated into broader protocol upgrades rather than being implemented as a standalone proposal.</p></article>",
  "EIP-6900": "<article><h1>EIP-6900: Modular Smart Contract Accounts</h1>\n<p>EIP-6900, proposed by Yoav Weiss, Kristof Gazso, and Oisín Kyne, aims to standardize a framework for modular smart contract accounts. This proposal addresses the growing need for more flexible and upgradeable account structures in Ethereum, especially in light of the increasing adoption of account abstraction (EIP-4337).</p>\n<p>The proposal defines interfaces for modular components within smart contract accounts, allowing for easier upgrades and customization. It builds upon previous work in account abstraction and modular smart contracts, incorporating lessons learned from implementations like Safe (formerly Gnosis Safe) and other account systems.</p>\n<p>As of now, EIP-6900 has been moved to the Ethereum ERCs repository, indicating ongoing development and discussion within the community. While not yet finalized, this proposal represents an important step towards more versatile and user-friendly account systems in Ethereum, potentially improving security and functionality for end-users and developers alike.</p>\n</article>",
  "EIP-6909": "<article><h1>EIP-6909: Minimal Multi-Token Interface</h1>\n\n<p>EIP-6909, proposed by Guillaume Ballet, Jacob Nolan, and Gavin John, aimed to create a minimal and gas-efficient standard for multi-token contracts. This proposal was designed to address the limitations of existing token standards like ERC-20 and ERC-1155, particularly in terms of gas efficiency and simplicity.</p>\n\n<p>The proposal introduced a streamlined interface for multi-token contracts, focusing on essential functions like balance checking, transfers, and approvals. It aimed to reduce gas costs and simplify implementation compared to more complex standards. EIP-6909 gained attention in the Ethereum community for its potential to improve efficiency in token interactions, especially for projects dealing with multiple token types.</p>\n\n<p>As of now, EIP-6909 has been moved to the Ethereum ERCs repository, indicating ongoing development and discussion. While not yet finalized, the proposal continues to be of interest to developers seeking more efficient multi-token solutions. Its current status suggests that it is still under consideration and may evolve further before potential implementation or integration into the Ethereum ecosystem.</p>\n</article>",
  "EIP-6913": "<article><h1>EIP-6913: SETCODE Instruction</h1>\n\n<p>EIP-6913, proposed by William Morriss in April 2023, introduces a new Ethereum Virtual Machine (EVM) instruction called SETCODE. This instruction is designed to replace the code of the executing account with new code stored in memory, providing a more efficient and secure method for contract upgradeability.</p>\n\n<p>The proposal aims to address limitations in existing upgradeability methods, such as those using CALL, DELEGATECALL, or the SELFDESTRUCT and CREATE2 combination. SETCODE offers a direct way to update contract code without the need for external calls or the removal of internal state. This is particularly relevant given the planned deprecation of SELFDESTRUCT, which has been a key component in some upgradeability patterns.</p>\n\n<p>As of its creation, EIP-6913 is in Draft status, indicating it is still under discussion and development. The Ethereum community is evaluating its potential impact and implementation details through the Ethereum Magicians forum. If implemented, SETCODE could significantly improve the flexibility and security of upgradeable smart contracts on the Ethereum network.</p></article>",
  "EIP-6914": "<article><h1>EIP-6914: Reuse Withdrawn Validator Indices</h1>\n\n<p>EIP-6914 proposes a solution to address the unbounded growth of the Ethereum beacon chain validator list. Authored by Lion and Danny Ryan, two prominent Ethereum researchers, this proposal aims to reuse fully withdrawn validator indices after a safe period has passed. This would help manage the size of the validator list as validators enter and exit the system over time.</p>\n\n<p>The motivation behind this proposal stems from the current mechanism where new deposits for validators only append to the list, rather than reusing previously withdrawn indices. This approach leads to unbounded growth of both the validator list and associated balance list. By allowing index reuse when safe, EIP-6914 seeks to mitigate concerns around the ever-expanding validator set.</p>\n\n<p>As of its creation in April 2023, EIP-6914 remains in Draft status. The proposal includes specific configuration values and mechanics detailed in the Consensus Layer specifications. While not yet implemented, this EIP represents an important step towards optimizing Ethereum's long-term scalability and efficiency in managing its validator set.</p></article>",
  "EIP-6916": "<article><h1>EIP-6916: Automatically Reset Testnet</h1>\n\n<p>EIP-6916, proposed in April 2023 by a group of Ethereum developers including Mário Havel and Holly Atkinson, introduces the concept of an automatically resetting testnet. This innovative approach aims to address common issues with long-running testnets, such as state bloat and lack of testnet funds, by periodically resetting the network to its genesis state.</p>\n\n<p>The proposal specifies a mechanism for creating ephemeral networks with deterministic parameters. These networks would automatically reset after a predefined time period, generating a new genesis state and discarding the old one. This approach provides a clean slate for testing applications, validators, and client implementations, while maintaining a manageable network size for easy bootstrapping.</p>\n\n<p>As of its creation, EIP-6916 is in the Review status, indicating that it is being actively discussed and considered by the Ethereum community. If implemented, this proposal could significantly improve the testing infrastructure for Ethereum developers, offering a more efficient and reliable environment for short-term testing scenarios. However, it's important to note that this EIP is still under review and may undergo changes or face challenges before potential implementation.</p></article>",
  "EIP-6944": "<article><h1>EIP-6944: Moved to ERC Repository</h1>\n\n<p>EIP-6944 was originally proposed as an Ethereum Improvement Proposal (EIP) but has since been moved to the Ethereum Request for Comments (ERC) repository. This relocation indicates that the proposal is specifically related to application-level standards and conventions, rather than core protocol changes.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-6944.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-6944.md</a>. This move is part of an ongoing effort to better organize Ethereum standards and separate core protocol changes from application-level standards.</p>\n\n<p>As an ERC, this proposal is likely focused on token standards, wallet interfaces, or other application-level conventions within the Ethereum ecosystem. For the most up-to-date information on the proposal's content, status, and discussions, interested parties should refer to the new location in the ERC repository.</p>\n</article>",
  "EIP-695": "<article><h1>EIP-695: Create eth_chainId method for JSON-RPC</h1>\n\n<p>EIP-695, proposed by Isaac Ardis, Wei Tang, Fan Torchz, and Erik Marks, introduces the <code>eth_chainId</code> method to the Ethereum JSON-RPC interface. This proposal addresses the need for a standardized way to query the chain ID, which is crucial for replay-protected transaction signing as introduced by EIP-155.</p>\n\n<p>The motivation behind EIP-695 was the lack of a specific RPC method to retrieve the chain ID, making it difficult to determine the current blockchain through RPC calls. While <code>net_version</code> could be used to get the network ID, it didn't provide the chain ID information. The <code>eth_chainId</code> method returns a single string result in hexadecimal format, representing the currently configured CHAIN_ID value.</p>\n\n<p>EIP-695 has been finalized and implemented in major Ethereum clients. It has become an essential part of the Ethereum ecosystem, particularly for wallet developers and dApp creators who need to ensure they're interacting with the correct blockchain. The proposal's success has led to its widespread adoption and integration into various Ethereum-related tools and libraries.</p>\n</article>",
  "EIP-6953": "<article><h1>EIP-6953: Network Upgrade Activation Triggers</h1>\n\n<p>EIP-6953 is an informational proposal that provides a comprehensive overview of the different network upgrade activation mechanisms used throughout Ethereum's history. Authored by Tim Beiko, a core Ethereum developer, this EIP serves as a valuable reference for understanding how protocol upgrades have been implemented over time.</p>\n\n<p>The proposal outlines activation triggers from the early proof-of-work era, where upgrades were activated at specific block numbers, through the transition to proof-of-stake with the Merge, and into the current post-Merge era. It covers both execution and consensus layer upgrades, providing a holistic view of Ethereum's evolutionary process. Key upgrades like Frontier, Homestead, the DAO Fork, and more recent ones like Shanghai/Capella are documented with their respective activation mechanisms.</p>\n\n<p>EIP-6953 was finalized in 2023 and serves as the authoritative source on this topic. While it doesn't aim to be an ongoing record of all future upgrades, it establishes the expectation that post-Merge upgrades will follow the mechanism described in its \"Post Merge Upgrades\" section unless superseded by a future EIP. This proposal is particularly useful for developers, researchers, and anyone seeking to understand the technical history of Ethereum's upgrade",
  "EIP-6956": "<article><h1>EIP-6956: Token Bound Accounts</h1>\n\n<p>EIP-6956, also known as Token Bound Accounts (TBA), was proposed to create a standard for non-custodial smart contract wallets that are bound to specific tokens. This proposal aimed to enable NFTs to own assets and interact with applications, effectively giving them their own on-chain identity and functionality. The concept was developed by the Ethereum community to extend the utility of NFTs beyond simple ownership.</p>\n\n<p>The proposal was initially drafted by Jayden Windle, with contributions from other prominent Ethereum developers. It gained traction due to its potential to revolutionize how NFTs interact with the broader ecosystem. However, as indicated by its current status, EIP-6956 has been moved from the main Ethereum Improvement Proposals repository to the Ethereum Request for Comments (ERCs) repository.</p>\n\n<p>The current status of \"Moved\" suggests that while the proposal is still being considered and developed, it may undergo further refinement or changes before potentially being implemented. Interested parties can now find the latest version and discussions related to this proposal in the ERCs repository, where it continues to evolve based on community feedback and technical considerations.</p></article>",
  "EIP-6960": "<article><h1>EIP-6960: Moved to ERC Repository</h1>\n\n<p>EIP-6960 was originally proposed as an Ethereum Improvement Proposal (EIP) but has since been moved to the Ethereum Request for Comments (ERC) repository. This transition indicates that the proposal is more focused on application-level standards rather than core protocol changes.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-6960.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-6960.md</a>. This move suggests that the Ethereum community deemed it more appropriate as an ERC, which typically deals with token standards, wallet formats, and other application-level conventions.</p>\n\n<p>For the most up-to-date information on ERC-6960, including its purpose, history, and current status, interested parties should refer to the linked document in the ERC repository. This relocation emphasizes the dynamic nature of Ethereum's standardization process and the community's efforts to categorize proposals accurately.</p></article>",
  "EIP-6963": "<article><h1>EIP-6963: Multi Injected Provider Discovery</h1>\n\n<p>EIP-6963, titled \"Multi Injected Provider Discovery,\" was proposed to address a significant issue in the Ethereum ecosystem: the conflict that arises when multiple wallet extensions are installed in a browser. The proposal, authored by a group of prominent developers including Pedro Gomes, Kosala Hemachandra, and Richard Moore, aimed to create a standardized method for discovering multiple injected Ethereum providers using JavaScript's window events.</p>\n\n<p>The motivation behind this proposal stemmed from the limitations of the existing method, where wallet providers would inject their Ethereum providers into the <code>window.ethereum</code> object. This approach led to race conditions and unpredictable behavior when multiple wallet extensions were present. EIP-6963 sought to improve user experience and reduce barriers to entry for new wallet providers by allowing multiple wallets to coexist without conflict.</p>\n\n<p>As of its finalization, EIP-6963 has been widely adopted by major wallet providers and dApp developers. It has successfully addressed the issues it set out to solve, allowing for a more seamless multi-wallet experience in the Ethereum ecosystem. The proposal's status is \"Final,\" indicating its acceptance and implementation in the Ethereum community.</p>\n</article>",
  "EIP-6968": "<article><h1>EIP-6968: Contract Secured Revenue on EVM-based L2s</h1>\n\n<p>EIP-6968 proposes introducing Contract Secured Revenue (CSR) on EVM-based Layer 2 networks. The core idea is to allow smart contract developers to claim a percentage of transaction fees paid when users interact with their contracts. This would create a new revenue stream for developers and potentially fund public goods.</p>\n\n<p>The proposal was authored by Zak Cole and Kevin Owocki in May 2023. It builds on previous discussions around CSR for Ethereum, but importantly does not advocate for changes to the Ethereum L1. Instead, it suggests L2 networks could experiment with CSR as a way to incentivize development and deployment on their platforms.</p>\n\n<p>As of now, the proposal's status is listed as \"Stagnant\", indicating it has not seen recent activity or updates. While the concept is interesting, implementing CSR would require significant changes to fee mechanisms on L2s. Further discussion and development would be needed before any L2 networks seriously consider adopting this model.</p></article>",
  "EIP-698": "<article><h1>EIP-698: OPCODE 0x46 BLOCKREWARD</h1>\n\n<p>EIP-698 proposed adding a new opcode (0x46 BLOCKREWARD) to the Ethereum Virtual Machine to return the finalized block reward for any given block. The proposal was authored by Cody Burns in August 2017 with the goal of making block reward information easily accessible at the EVM level.</p>\n\n<p>The motivation behind this EIP was to support decentralized mining pools and contracts that could benefit from knowing precise block reward payouts, especially in light of planned changes to Ethereum's monetary policy. It would have provided a standardized way to query block rewards, including base rewards, uncle payments, and gas fees.</p>\n\n<p>However, this proposal never gained significant traction and is currently marked as \"Stagnant\" in the EIPs repository. While the idea had merit, other approaches like off-chain indexing have generally been used to track block rewards instead of adding a dedicated opcode. As Ethereum transitions away from proof-of-work mining, the original use case has also become less relevant.</p>\n\n</article>",
  "EIP-6981": "<article><h1>EIP-6981: A Brief Technical Summary</h1>\n\n<p>EIP-6981 was initially proposed as an Ethereum Improvement Proposal (EIP) in the ERC category. However, it has since been moved to the Ethereum Request for Comments (ERC) repository, specifically to https://github.com/ethereum/ercs/blob/master/ERCS/erc-6981.md. This move suggests that the proposal is now being considered as a potential standard for the Ethereum ecosystem rather than a core protocol change.</p>\n\n<p>The relocation of this proposal to the ERC repository indicates that it likely deals with application-level standards or token improvements, which are typically handled as ERCs. Without access to the specific content of ERC-6981, it's challenging to provide details on its purpose or technical specifications. However, its placement in the ERC repository suggests it may relate to token standards, smart contract interfaces, or other application-layer protocols within the Ethereum ecosystem.</p>\n\n<p>As of now, the proposal's status is listed as \"Moved,\" which means it's no longer being tracked in the original EIP repository. For the most up-to-date information on this proposal, including its current status, technical details, and any discussions or implementations, interested parties should refer to the new location in the ERC repository.</p>\n</article>",
  "EIP-6982": "<article><h1>EIP-6982: NFT Vault Standard</h1>\n\n<p>EIP-6982, also known as the NFT Vault Standard, was proposed to address the need for a standardized way to lock NFTs (Non-Fungible Tokens) into a vault contract. This proposal aimed to enhance the functionality and interoperability of NFTs across various platforms and applications. The primary authors of this EIP were Emo Tilt and 0xMartian, who recognized the growing importance of NFT utility beyond simple ownership.</p>\n\n<p>The proposal introduced a set of interfaces and methods that would allow NFT owners to deposit their tokens into a vault, effectively locking them for a specified period or until certain conditions are met. This functionality could be particularly useful for staking, collateralization, or creating time-locked rewards in NFT-based games and ecosystems. While the initial proposal gained some traction in the Ethereum community, its development and adoption were not as widespread as some other NFT-related standards like ERC-721 or ERC-1155.</p>\n\n<p>As of now, EIP-6982 has been moved to the Ethereum ERCs repository, indicating a shift in its categorization and potentially its status. This move suggests that while the proposal is still considered valuable, it may require further refinement or community consensus before potential implementation. Developers and projects intereste",
  "EIP-6988": "<article><h1>EIP-6988: Elected Block Proposer Has Not Been Slashed</h1>\n\n<p>EIP-6988, proposed by Mikhail Kalinin in May 2023, aims to prevent slashed validators from being elected as block proposers in Ethereum's consensus layer. This proposal addresses a contradiction in the existing specification where slashed validators could be elected as proposers, leading to missed blocks.</p>\n\n<p>The motivation behind this EIP stems from the current behavior where a block proposed by a slashed validator is rejected, but the validator selection process doesn't exclude slashed validators. While the impact of this issue is minimal for single slashings, it becomes significant in cases of correlated slashings, potentially causing a proportional number of missed blocks.</p>\n\n<p>As of now, EIP-6988 is in a \"Stagnant\" status, indicating that it hasn't seen recent activity or updates. The proposal suggests modifying the <code>compute_proposer_index</code> function to exclude slashed validators from consideration, thus ensuring a more reliable block proposal process. While this change would improve consensus layer efficiency, its implementation status remains uncertain given its current stagnant state.</p>\n</article>",
  "EIP-6997": "<article><h1>EIP-6997: NFT User Consent for Third-Party Use</h1>\n\n<p>EIP-6997, proposed by Olivier Fernandez and others, aimed to introduce a standardized method for NFT owners to grant or revoke consent for third-party platforms to use their NFTs. This proposal addressed the growing concern of unauthorized use of NFT artwork and metadata by various platforms without the explicit permission of the token holders.</p>\n\n<p>The proposal suggested implementing a consent mechanism directly into the NFT smart contract, allowing owners to manage permissions for their tokens. This would have provided a more transparent and decentralized approach to content usage rights in the NFT ecosystem, potentially reducing disputes and unauthorized exploitations of NFT-associated content.</p>\n\n<p>As of now, EIP-6997 has been moved to the Ethereum ERCs repository, indicating a shift in its categorization from a general Ethereum Improvement Proposal to a more specific Ethereum Request for Comment. This move suggests that while the proposal is still considered valuable, it may require further discussion and refinement within the community before potential implementation.</p>\n</article>",
  "EIP-7": "<article><h1>EIP-7: DELEGATECALL</h1>\n\n<p>EIP-7, authored by Vitalik Buterin, introduced the DELEGATECALL opcode to Ethereum. This proposal was finalized and implemented in the Homestead hard fork, activating at block 1,150,000 on the Ethereum mainnet. DELEGATECALL is similar to the existing CALLCODE opcode but with a crucial difference: it preserves the sender and value context from the calling contract.</p>\n\n<p>The primary purpose of DELEGATECALL is to enable more flexible and powerful smart contract architectures, particularly for implementing upgradeable contracts and library patterns. By preserving the original caller's context, it allows for the creation of reusable code libraries that can operate on the state of the calling contract, effectively separating logic from storage.</p>\n\n<p>Since its implementation, DELEGATECALL has become a fundamental building block in Ethereum smart contract development, enabling advanced patterns like the proxy upgrade pattern. However, its power also comes with risks, as improper use can lead to security vulnerabilities. As such, while DELEGATECALL remains an essential part of the Ethereum toolkit, developers are advised to use it carefully and in conjunction with well-audited patterns and libraries.</p></article>",
  "EIP-7002": "<article><h1>EIP-7002: Execution Layer Triggerable Withdrawals</h1>\n\n<p>EIP-7002, proposed by Danny Ryan, Mikhail Kalinin, Ansgar Dietrichs, Hsiao-Wei Wang, and lightclient, aims to enhance Ethereum's validator withdrawal process. The proposal introduces a mechanism allowing validators to trigger exits and partial withdrawals using their execution layer (0x01) withdrawal credentials, rather than relying solely on the active BLS key.</p>\n\n<p>The primary motivation behind this EIP is to improve security and flexibility for validators. Currently, only the active key can initiate a validator exit, which may pose risks in certain custody scenarios. By enabling withdrawals through the execution layer credentials, validators can maintain better separation between their \"hot\" active keys and \"cold\" withdrawal credentials, enhancing overall security.</p>\n\n<p>As of its last update, EIP-7002 is in the Review status, indicating it's being actively discussed and refined by the Ethereum community. If implemented, this proposal would significantly change how validator exits are managed, potentially offering more robust security options for stakers. However, it's important to note that the proposal is still under consideration and may undergo further changes before any potential implementation.</p>\n</article>",
  "EIP-7007": "<article><h1>EIP-7007: Fungible Entangled Pair</h1>\n\n<p>EIP-7007, also known as the Fungible Entangled Pair proposal, was moved from the main Ethereum Improvement Proposals (EIPs) repository to the Ethereum Request for Comments (ERCs) repository. This proposal aimed to introduce a new token standard for creating pairs of fungible tokens that are entangled, meaning they share a relationship where actions on one token affect the other.</p>\n\n<p>The proposal was authored by Guillaume Gonnaud and moved to the ERCs repository, which suggests it is still under consideration but not actively pursued as a core Ethereum improvement. The concept of entangled tokens could potentially allow for innovative financial instruments or game mechanics in decentralized applications, but its specific use cases and implementation details would need further development and community discussion.</p>\n\n<p>As of now, EIP-7007 is not implemented in the Ethereum mainnet. Its current status as \"Moved\" indicates that while the idea may have merit, it requires more refinement or may be more suitable as an application-level standard rather than a core protocol change. Developers interested in this concept should refer to the ERC repository for the most up-to-date information on the proposal's status and details.</p></article>",
  "EIP-7015": "<article><h1>EIP-7015: Moved to ERC Repository</h1>\n\n<p>EIP-7015, originally proposed as an Ethereum Improvement Proposal (EIP), has been moved to the Ethereum Request for Comments (ERC) repository. This transition reflects a shift in the categorization and management of Ethereum standards.</p>\n\n<p>The proposal is now accessible at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-7015.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-7015.md</a>. This move is part of a broader effort to streamline the EIP process and separate application-layer standards (ERCs) from core protocol changes (EIPs).</p>\n\n<p>As the proposal is now an ERC, it likely focuses on application-level standards or token improvements rather than core protocol changes. For the most up-to-date information on its purpose, status, and implementation details, readers should refer to the new location in the ERC repository.</p>\n</article>",
  "EIP-7039": "<article><h1>EIP-7039: Scheme-Handler Discovery Option for Wallets (SHADOW)</h1>\n\n<p>EIP-7039, also known as SHADOW (Scheme-Handler Discovery Option for Wallets), was proposed by Sam Wilson in May 2023 as an alternative to EIP-1193 for wallet discovery in web browsers. The proposal aims to improve upon existing wallet discovery methods by allowing multiple active wallets and reducing the need for broad permissions in browser extensions.</p>\n\n<p>The core idea of SHADOW is to use custom protocol handlers to initiate connections between web pages and wallets. This is achieved by injecting an iframe tag pointing to a well-known scheme, with communication between the page and the wallet handled via the postMessage API. This approach eliminates the need for browser extensions to request broad permissions to modify web pages, which is a significant improvement in terms of security and user control.</p>\n\n<p>As of the last update, EIP-7039 is still in Draft status. While it offers potential advantages over current methods, including improved user experience and lower barriers to entry for new wallet extensions, its adoption and implementation remain to be seen. The proposal is part of ongoing efforts to enhance the interaction between web applications and cryptocurrency wallets in the Ethereum ecosystem.</p></article>",
  "EIP-7044": "<article><h1>EIP-7044: Perpetually Valid Signed Voluntary Exits</h1>\n\n<p>EIP-7044, proposed by Lion (@dapplion) in May 2023, aims to enhance the Ethereum staking ecosystem by making validator voluntary exits perpetually valid. This proposal addresses a limitation in the current system where signed voluntary exits are only valid for two upgrades, which complicates staking operations, especially when the staking operator and fund owner are separate entities.</p>\n\n<p>The motivation behind this EIP stems from the need to simplify the process of exiting validators, particularly in scenarios where the active key holder (staking operator) differs from the withdrawal credential holder (fund owner). By locking the voluntary exit signature domain on Capella, the proposal ensures that signed exits remain valid indefinitely, eliminating the need for frequent re-signing of exit messages across multiple forks.</p>\n\n<p>EIP-7044 has been finalized and implemented in the Ethereum network. It effectively balances the original security considerations of limited-validity exits with improved user experience. While the proposal acknowledges the potential for exit replays in the case of hard forks, it argues that the benefits of perpetual validity outweigh this concern, as no funds are at risk and validators can easily re-stake on their preferred chain if necessary.</p></article>",
  "EIP-7045": "<article><h1>EIP-7045: Increase max attestation inclusion slot</h1>\n\n<p>EIP-7045, proposed by Danny Ryan, aims to increase the maximum attestation inclusion slot in Ethereum's consensus layer. This proposal extends the window for including attestations from the current one-epoch limit to the end of the following epoch. The change is crucial for enhancing the security of the LMD-GHOST fork choice rule and implementing a new, faster block confirmation mechanism.</p>\n\n<p>The motivation behind this EIP stems from the realization that the initial \"fair\" one-epoch inclusion window, established during Ethereum's Phase 0, is insufficient for current security proofs and optimizations. By extending the inclusion window, EIP-7045 allows for more flexible attestation inclusion, which is particularly beneficial for attestations created early in an epoch.</p>\n\n<p>As of its creation in May 2023, EIP-7045 has reached \"Final\" status, indicating its acceptance and readiness for implementation. This change is expected to significantly improve Ethereum's consensus layer security and efficiency, enabling faster block confirmations (approximately 3-4 slots under normal mainnet conditions) while maintaining the integrity of the network's fork choice rule.</p></article>",
  "EIP-7053": "<article><h1>EIP-7053: Moved to ERCs Repository</h1>\n\n<p>EIP-7053, which falls under the ERC (Ethereum Request for Comments) category, has been moved from its original location to the dedicated ERCs repository. This move is part of an ongoing effort to better organize and manage Ethereum Improvement Proposals, particularly those related to standards and interfaces.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-7053.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-7053.md</a>. This relocation suggests that the proposal is still active and under consideration within the Ethereum community. However, without access to the specific content of ERC-7053, it's not possible to provide details about its purpose, authors, or current implementation status.</p>\n\n<p>The move to a dedicated ERCs repository indicates the Ethereum community's commitment to streamlining the proposal process and improving accessibility for developers and stakeholders interested in Ethereum standards. This organizational change may help facilitate easier tracking and implementation of ERCs in the future.</p></article>",
  "EIP-706": "<article><h1>EIP-706: DEVp2p Snappy Compression</h1>\n\n<p>EIP-706, proposed by Péter Szilágyi in September 2017, aimed to introduce Snappy compression to the DEVp2p networking protocol used by Ethereum. The goal was to significantly reduce bandwidth usage across the Ethereum network, particularly during initial sync and normal operations.</p>\n\n<p>The proposal suggested compressing all message payloads after the initial handshake using Snappy, a fast compression algorithm developed by Google. Benchmarks showed impressive results, with data traffic reduced by 60-80% for initial sync. For example, syncing the Ethereum mainnet could see download bandwidth usage drop from 33.59GB to 13.46GB.</p>\n\n<p>EIP-706 was ultimately accepted and implemented, with its \"Final\" status indicating widespread adoption. By implementing compression at the DEVp2p level rather than in individual subprotocols, it provided a seamless solution that benefited all Ethereum subprotocols (eth, les, bzz) without adding complexity to each one individually. This improvement has helped make Ethereum network operations more efficient and less bandwidth-intensive.</p></article>",
  "EIP-7066": "<article><h1>EIP-7066: Moved to ERCs Repository</h1>\n\n<p>EIP-7066 was initially proposed as an Ethereum Improvement Proposal (EIP) in the ERC category. However, it has since been moved to the Ethereum Request for Comments (ERCs) repository, indicating a shift in its classification and management.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-7066.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-7066.md</a>. This move suggests that the community or EIP editors determined that the proposal was better suited as an ERC rather than a full EIP. ERCs typically focus on application-level standards and conventions, while EIPs can encompass broader protocol-level changes.</p>\n\n<p>As of now, the proposal's current status, specific contents, and the reasons for its reclassification are not immediately apparent from the limited information provided. Interested parties should refer to the new location in the ERCs repository for the most up-to-date information on ERC-7066's purpose, specifications, and current status in the Ethereum ecosystem.</p></article>",
  "EIP-7069": "<article><h1>EIP-7069: Revamped CALL Instructions</h1>\n\n<p>EIP-7069 proposes introducing new simplified call instructions (EXTCALL, EXTDELEGATECALL, EXTSTATICCALL) and a RETURNDATALOAD instruction to improve Ethereum's smart contract functionality. Authored by several prominent Ethereum developers including Alex Beregszaszi and Paweł Bylica, this proposal aims to streamline gas handling and simplify output management for contract calls.</p>\n\n<p>The key changes include removing manual gas limit specification in favor of the \"63/64th rule\", simplifying gas stipend rules, and eliminating the output buffer address parameter. Instead, developers would use RETURNDATACOPY or the new RETURNDATALOAD instruction to access return data. These changes could potentially reduce complexity and gas costs for many common contract interactions.</p>\n\n<p>As of May 2023, EIP-7069 is in Review status. While it offers clear improvements in call semantics, it would require significant changes to existing contracts and development practices if implemented. The proposal builds on several previous EIPs and demonstrates ongoing efforts to refine Ethereum's core functionality. However, given its current status and the scope of changes, widespread adoption is not imminent without further review and community consensus.</p></article>",
  "EIP-7085": "<article><h1>EIP-7085: Moved to ERC Repository</h1>\n\n<p>EIP-7085 was originally proposed as an Ethereum Improvement Proposal (EIP) but has since been moved to the Ethereum Request for Comments (ERC) repository. This move indicates that the proposal is more specifically focused on application-level standards or conventions, rather than core protocol changes.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-7085.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-7085.md</a>. This relocation suggests that the Ethereum community determined it was more appropriate as an ERC, which typically deals with token standards, wallet formats, and other application-layer specifications.</p>\n\n<p>For the most up-to-date information on the proposal's content, purpose, and current status, interested parties should refer to the new location in the ERC repository. This move also implies that the proposal is still under consideration and may be subject to further discussion and potential implementation within the Ethereum ecosystem.</p>\n</article>",
  "EIP-7092": "<article><h1>EIP-7092: A Brief Technical Summary</h1>\n\n<p>EIP-7092 is an Ethereum Improvement Proposal that has been moved to the Ethereum Request for Comments (ERC) repository. While the specific details of this proposal are not available in the provided content, its relocation to the ERC repository suggests that it is likely a standard for tokens, interfaces, or other application-level concerns within the Ethereum ecosystem.</p>\n\n<p>The proposal's current status is listed as \"Moved,\" indicating that it has been transferred from its original location in the EIP repository to a dedicated ERC repository. This move is part of an ongoing effort to better organize and categorize Ethereum-related proposals, separating core protocol changes (EIPs) from application-level standards (ERCs).</p>\n\n<p>For the most up-to-date information on EIP-7092, including its purpose, history, and current status, interested parties should refer to the new location at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-7092.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-7092.md</a>. This relocation ensures that the proposal is properly categorized and can be more easily found and referenced by developers and researchers working on Ethereum",
  "EIP-7093": "<article><h1>EIP-7093: A Brief Technical Summary</h1>\n\n<p>EIP-7093 was an Ethereum Improvement Proposal that has been moved to the Ethereum Request for Comments (ERC) repository. This indicates that it was likely a proposal for a new token standard or interface within the Ethereum ecosystem. The relocation suggests that it was deemed more appropriate as an ERC rather than a core protocol change.</p>\n\n<p>Unfortunately, without access to the content of the proposal, it's challenging to provide specific details about its purpose, authorship, or technical specifications. The move to the ERC repository implies that it may be related to application-level standards on Ethereum, such as token interfaces or smart contract patterns.</p>\n\n<p>For the most up-to-date information and details about this proposal, interested parties should refer to the new location at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-7093.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-7093.md</a>. This move reflects the dynamic nature of Ethereum's development process and the community's efforts to organize proposals effectively.</p></article>",
  "EIP-712": "<article><h1>EIP-712: Typed Structured Data Hashing and Signing</h1>\n\n<p>EIP-712, proposed in 2017 by Remco Bloemen, Leonid Logvinov, and Jacob Evans, addresses the challenge of securely hashing and signing structured data in Ethereum. Prior to this, signing was primarily focused on raw bytestrings, which posed difficulties when dealing with complex, meaningful messages in real-world applications.</p>\n\n<p>The proposal introduces a standardized method for hashing and signing typed structured data, compatible with Solidity structs. It includes a theoretical framework, a safe hashing algorithm, and mechanisms for domain separation. EIP-712 also introduces a new RPC call, <code>eth_signTypedData</code>, and provides an optimized implementation of the hashing algorithm in EVM.</p>\n\n<p>Currently, EIP-712 has a \"Final\" status, indicating its widespread adoption and implementation. It has become a crucial standard in the Ethereum ecosystem, particularly for decentralized applications (dApps) and smart contracts that require secure, human-readable message signing. The proposal has significantly improved the user experience and security of Ethereum-based applications by enabling clear, structured data signing.</p></article>",
  "EIP-7144": "<article><h1>EIP-7144: A Brief Technical Summary</h1>\n<p>EIP-7144 was originally proposed as an Ethereum Improvement Proposal (EIP) but has since been moved to the Ethereum Request for Comments (ERC) repository. This move suggests that the proposal is more focused on application-level standards rather than core protocol changes. The current location of the proposal is https://github.com/ethereum/ercs/blob/master/ERCS/erc-7144.md.</p>\n<p>While the specific details of EIP-7144 are not provided in the given context, its categorization as an ERC indicates that it likely proposes a standard interface or set of rules for Ethereum-based tokens or smart contracts. ERCs often define how certain types of tokens should behave or how specific functionalities should be implemented across different projects to ensure interoperability and consistency within the Ethereum ecosystem.</p>\n<p>The status of \"Moved\" implies that the proposal is still under consideration but has been transferred to a more appropriate repository for further discussion and potential implementation. This transfer process is not uncommon for proposals that are determined to be better suited as ERCs rather than core EIPs. To get more detailed information about the purpose, history, and current status of this specific proposal, one would need to refer to the updated document in the ERC repository.</p></article>",
  "EIP-7160": "<article><h1>EIP-7160: ERC-7160 - ERC-721 Non-Fungible Token Metadata JSON Schema</h1>\n\n<p>EIP-7160, proposed by Mark Muskardin, aimed to standardize the metadata JSON schema for ERC-721 Non-Fungible Tokens (NFTs). The proposal sought to address the lack of a formal specification for NFT metadata, which had led to inconsistencies and compatibility issues across different platforms and marketplaces.</p>\n\n<p>The proposal defined a clear structure for NFT metadata, including fields like name, description, image, and additional properties. It also introduced optional fields for animation_url and youtube_url to support rich media content. This standardization effort was intended to improve interoperability and enhance the user experience across various NFT ecosystems.</p>\n\n<p>As of now, EIP-7160 has been moved to the Ethereum ERCs repository, indicating ongoing development and discussion within the community. While not yet finalized, the proposal represents an important step towards creating a more cohesive and standardized approach to NFT metadata in the Ethereum ecosystem.</p>\n</article>",
  "EIP-7199": "<article><h1>EIP-7199: Linter Scope</h1>\n\n<p>EIP-7199, titled \"Linter Scope,\" was proposed by Zainan Victor Zhou on June 20, 2023. The proposal aimed to relax the policy for updating Ethereum Improvement Proposals (EIPs) by suggesting that linter errors in untouched lines should be considered ignorable, except when changing an EIP's status. This proposal was intended to facilitate micro-contributions and make it easier for contributors to fix typos or make small changes to existing EIPs without being blocked by pre-existing linter errors.</p>\n\n<p>The proposal was a response to the practice of EIP linter tools, such as EIPW, blocking Pull Requests due to lint errors that were not introduced in that specific PR. EIP-7199 sought to make it explicit that such errors in untouched lines should be ignorable, thus allowing for more streamlined contributions to the Ethereum ecosystem.</p>\n\n<p>However, EIP-7199 was ultimately withdrawn. The withdrawal reason states that the policy is already documented in EIP-1 and EIP-5069, indicating that the proposed changes were deemed unnecessary or redundant with existing guidelines. This outcome highlights the importance of thoroughly reviewing existing documentation before proposing new policies in the Ethereum development process.</p>\n</article>",
  "EIP-7201": "<article><h1>EIP-7201: Namespaced Storage</h1>\n\n<p>EIP-7201, also known as \"Namespaced Storage,\" was proposed to address the challenge of storage collision in smart contracts. This proposal aimed to introduce a standardized method for organizing contract storage, allowing multiple modules within a contract to manage their storage independently without risking conflicts.</p>\n\n<p>The proposal was authored by Hadrien Croubois, Francisco Giordano, and Kristof Gazso, and gained traction due to its potential to improve code modularity and reduce the risk of storage-related vulnerabilities. It was particularly relevant for contracts implementing upgradeable patterns or using delegate calls, where storage layout becomes critical.</p>\n\n<p>As of now, EIP-7201 has been moved from its original location to the Ethereum ERCs repository, indicating ongoing development and discussion within the community. While not yet finalized, the proposal continues to be relevant in addressing storage management challenges in Ethereum smart contracts.</p>\n</article>",
  "EIP-721": "<article><h1>EIP-721: Non-Fungible Token Standard</h1>\n\n<p>EIP-721, proposed by William Entriken, Dieter Shirley, Jacob Evans, and Nastassia Sachs in January 2018, introduced the Non-Fungible Token (NFT) standard for Ethereum. This proposal defined a set of standard interfaces for tokens that are unique and not interchangeable, unlike fungible tokens such as those following the ERC-20 standard. The primary purpose was to create a framework for representing ownership of distinct digital assets on the Ethereum blockchain.</p>\n\n<p>The proposal gained rapid adoption and became the foundation for the NFT boom in 2021. It enabled the creation of various digital collectibles, artwork, and other unique assets on Ethereum. Notable projects like CryptoKitties, which predated but later adopted ERC-721, helped popularize the standard. subsequent improvements and extensions were proposed, such as ERC-1155 for semi-fungible tokens and ERC-2981 for royalty standards.</p>\n\n<p>As of now, ERC-721 remains a fundamental standard in the Ethereum ecosystem, widely implemented and supported. While newer proposals have built upon it, ERC-721 continues to be relevant for pure non-fungible token use cases. The proposal's status is listed as \"Final,\" indicating its stable",
  "EIP-7212": "<article><h1>EIP-7212: Precompile for secp256r1 Curve Support</h1>\n\n<p>EIP-7212, proposed by Ulaş Erdoğan, Doğan Alpaslan, DC Posch, and Nalin Bhardwaj in June 2023, aims to add a precompiled contract for signature verification using the secp256r1 elliptic curve. This proposal is significant because it would enable Ethereum and other EVM-compatible chains to natively support a widely used cryptographic standard, potentially expanding interoperability with existing systems and hardware security modules.</p>\n\n<p>The motivation behind this EIP stems from the widespread adoption of secp256r1 in various technological domains, including Apple's Secure Enclave, WebAuthn, and Android Keystore. By implementing this precompile, Ethereum could more easily integrate with these systems, potentially opening up new use cases and improving security for certain applications. The proposal argues that the security properties of secp256r1 are comparable to the currently used secp256k1 curve.</p>\n\n<p>As of the last update, EIP-7212 is in the Review status, indicating that it is being actively discussed and evaluated by the Ethereum community. The implementation of this EIP could have far-reaching implications for Ethereum's ecosystem, particularly in",
  "EIP-7231": "<article><h1>EIP-7231: Cross-Chain Fungible Token Standard</h1>\n\n<p>EIP-7231, proposed as an ERC (Ethereum Request for Comment), aimed to establish a standard for cross-chain fungible tokens. The proposal was initially submitted by Weiwu Zhang and Victor Hogrefe in July 2023. Its primary goal was to create a unified interface for tokens that could seamlessly operate across multiple blockchain networks, addressing the growing need for interoperability in the increasingly fragmented blockchain ecosystem.</p>\n\n<p>The proposal outlined methods for cross-chain token transfers, balance checks, and event emission, which would allow for consistent token behavior across different chains. This standardization effort was seen as a crucial step towards facilitating smoother cross-chain DeFi operations and enhancing the overall user experience in multi-chain environments.</p>\n\n<p>As of now, EIP-7231 has been moved to the Ethereum ERCs repository, indicating a shift in its development process. This move suggests that while the proposal is still under consideration, it may require further refinement or community discussion before potential implementation. The current status and ongoing developments can be tracked in the ERCs repository, where it continues to evolve based on feedback and technological advancements in the cross-chain domain.</p></article>",
  "EIP-725": "<article><h1>EIP-725: Proxy Account</h1>\n\n<p>EIP-725, proposed by Fabian Vogelsteller in 2017, introduced a standard for proxy accounts on Ethereum. Its primary purpose was to create a more flexible and upgradeable identity system for both humans and machines. The proposal aimed to separate the identity from its management logic, allowing for easier upgrades and enhanced functionality over time.</p>\n\n<p>Initially, EIP-725 gained traction within the Ethereum community, particularly among those working on identity solutions. It laid the groundwork for related proposals like EIP-734 (Key Manager) and EIP-735 (Claim Holder). However, as the ecosystem evolved, alternative approaches to digital identity emerged, leading to a shift in focus away from EIP-725.</p>\n\n<p>Currently, EIP-725 has been moved to the Ethereum ERCs repository, indicating it's no longer actively pursued as an Ethereum Improvement Proposal. While its concepts influenced subsequent identity-related standards, it's generally not recommended for implementation in its original form today. More recent proposals and standards, such as ERC-1056 (Lightweight Identity) and the broader ecosystem of decentralized identifiers (DIDs), have largely superseded EIP-725 in addressing digital identity challenges on Ethereum.</p>\n</article>",
  "EIP-7251": "<article><h1>EIP-7251: Increase the MAX_EFFECTIVE_BALANCE</h1>\n\n<p>EIP-7251 proposes increasing the MAX_EFFECTIVE_BALANCE constant for Ethereum validators while maintaining the 32 ETH minimum staking requirement. This improvement was authored by a group of prominent Ethereum developers and researchers, including Mike Neuder, Francesco D'Amato, and Justin Drake. The proposal aims to address the growing number of \"redundant validators\" controlled by large staking entities, which has led to an unnecessarily large validator set.</p>\n\n<p>The motivation behind this EIP stems from the current limitation of 32 ETH per validator, which was originally implemented as part of Ethereum's sharding design. This constraint has resulted in large staking operators running multiple validators on the same node, increasing network overhead without providing additional security benefits. By allowing validators to have larger effective balances, EIP-7251 would enable consolidation of validators, potentially reducing the total validator count while maintaining network security.</p>\n\n<p>As of October 2023, EIP-7251 is in the Review status, indicating it is being actively discussed and evaluated by the Ethereum community. The proposal requires the implementation of EIP-7002 (Execution layer withdrawals) and EIP-7685 (Validator withdrawals) to function properly. If implemented, this change could significantly",
  "EIP-7266": "<article><h1>EIP-7266: Remove BLAKE2 Compression Precompile</h1>\n\n<p>EIP-7266, proposed by Pascal Caversaccio in July 2023, aims to remove the BLAKE2 compression function precompile (address 0x09) from Ethereum. This precompile was originally introduced by EIP-152 as part of the Istanbul hard fork in December 2019. The proposal suggests changing the precompile's behavior to result in an exceptional abort, effectively removing it from use.</p>\n\n<p>The primary motivation for this removal is the lack of real-world usage since its implementation. According to the proposal, the precompile had only been called 22,131 times since going live, with the most recent call occurring in October 2022. This low usage suggests that the initial use cases envisioned for the BLAKE2 precompile were not properly validated before its inclusion.</p>\n\n<p>As of the time of writing, EIP-7266 is in a \"Stagnant\" status, indicating that it has not seen recent activity or updates. The proposal is part of a broader discussion about removing underutilized precompiles, including RIPEMD-160. While the removal could potentially simplify the Ethereum protocol, it would require careful consideration of backward compatibility and any potential impact on existing contracts or applications that might rely",
  "EIP-7303": "<article><h1>EIP-7303: A Brief Technical Summary</h1>\n\n<p>EIP-7303 was an Ethereum Improvement Proposal that has since been moved to the Ethereum Request for Comments (ERC) repository. This relocation suggests that the proposal is more focused on application-level standards rather than core protocol changes. The proposal can now be found at https://github.com/ethereum/ercs/blob/master/ERCS/erc-7303.md.</p>\n\n<p>While the specific details of EIP-7303 are not provided in the given context, its categorization as an ERC indicates that it likely deals with token standards, wallet formats, name registries, or other application-level conventions within the Ethereum ecosystem. The move to the ERC repository reflects the Ethereum community's effort to better organize and manage proposals that are more relevant to developers building on top of Ethereum rather than changes to the core protocol itself.</p>\n\n<p>Given its current status as \"Moved,\" it's clear that EIP-7303 is still a work in progress and may be undergoing further discussion and refinement within the ERC framework. Developers and stakeholders interested in the specifics of this proposal should refer to the new location in the ERC repository for the most up-to-date information and to participate in any ongoing discussions or implementations related to this standard.</p></article>",
  "EIP-7329": "<article><h1>EIP-7329: ERC/EIP Repository Split</h1>\n\n<p>EIP-7329, proposed by Lightclient and Danno Ferrin, is a meta-improvement proposal aimed at separating Ethereum Request for Comments (ERCs) from Ethereum Improvement Proposals (EIPs). This separation would create two distinct repositories: one for core protocol EIPs and another for application-layer ERCs. The proposal was created in July 2023 and has since been finalized.</p>\n\n<p>The motivation behind this split stems from the evolution of the Ethereum ecosystem. Initially, when the EIP repository was created, it served as a unified hub for all Ethereum-related standards. However, as the community grew and diversified, the gap between application development and core protocol development widened. This separation aims to allow both ERCs and EIPs to evolve more independently, catering to their specific audiences and requirements.</p>\n\n<p>The proposal has been a topic of discussion for years, but previous attempts to implement it were hindered by debates over migration details. With the Consensus Layer now established, the timing seems appropriate for this significant change. The current status of the proposal is \"Final,\" indicating its acceptance and readiness for implementation. This split is expected to streamline the standards process for both core protocol changes and application-layer specifications, potentially leading to more focused and efficient development in",
  "EIP-7377": "<article><h1>EIP-7377: Migration Transaction</h1>\n\n<p>EIP-7377 proposes a new transaction type to allow Externally Owned Accounts (EOAs) to deploy smart contract code at their existing address. This would enable EOA users to migrate to smart contract wallets without having to transfer all their assets to a new address. The proposal was authored by lightclient, Sam Wilson, and Ansgar Dietrichs in July 2023.</p>\n\n<p>The motivation behind this EIP is to improve Ethereum's user experience and promote wider adoption of smart contract wallets. While smart contract wallets have been seen as a solution to UX issues for years, adoption has been limited. This proposal aims to make it easier for existing EOA users with accumulated assets to upgrade to smart contract functionality.</p>\n\n<p>As of early 2024, EIP-7377 remains in Draft status. It has generated significant discussion in the Ethereum community, with debates around security implications and potential alternatives. While account abstraction remains an important goal for Ethereum, there is not yet consensus on whether this specific migration mechanism should be implemented. Further refinement and security analysis will likely be needed before this proposal could move forward in the EIP process.</p>\n</article>",
  "EIP-7378": "<article><h1>EIP-7378: Add Time-Weighted Averaging to the Base Fee</h1>\n\n<p>EIP-7378, proposed by Guy Goren in July 2023, aims to improve Ethereum's base fee calculation mechanism introduced in EIP-1559. The proposal suggests using a geometric weighted average of past block sizes instead of only considering the most recent block. This change is intended to reduce fee manipulation and provide more stable fee pricing.</p>\n\n<p>The primary motivation behind EIP-7378 is to address potential vulnerabilities in the current base fee mechanism, which could incentivize block proposers to collude with users to manipulate fees. By incorporating a time-weighted average of block sizes, the proposal aims to create a more robust and manipulation-resistant fee calculation system.</p>\n\n<p>Currently, EIP-7378 is in a \"Stagnant\" status, indicating that it has not seen significant development or discussion recently. While the proposal presents an interesting approach to improving Ethereum's fee mechanism, it has not yet gained widespread adoption or implementation. As the Ethereum ecosystem continues to evolve, proposals like EIP-7378 may be revisited or inspire new approaches to address fee stability and manipulation concerns.</p></article>",
  "EIP-7401": "<article><h1>EIP-7401: A Brief Technical Summary</h1>\n\n<p>EIP-7401 is an Ethereum Improvement Proposal that has been moved to the Ethereum Request for Comments (ERC) repository. This relocation suggests that the proposal is related to application-level standards or conventions, rather than core protocol changes. The specific details of EIP-7401 are not provided in the given information, but its categorization as an ERC indicates it likely deals with token standards, wallet formats, name registries, or other application-layer concerns.</p>\n\n<p>The current status of EIP-7401 is \"Moved,\" which means it has been transferred from the main EIP repository to the dedicated ERC repository. This move is part of an ongoing effort to better organize Ethereum-related proposals and separate application-level standards from core protocol changes. The new location of the proposal is <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-7401.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-7401.md</a>, where interested parties can find the full details of the proposal.</p>\n\n<p>Without access to the full content of ERC-7401, it's not possible to provide specific information about its purpose, authors, or current implementation status. However",
  "EIP-7405": "<article><h1>EIP-7405: Dynamic NFT Metadata Standard</h1>\n\n<p>EIP-7405, proposed by Jad Wahab and Adam Stokes, aimed to create a standard for dynamic NFT metadata. This proposal addressed the need for NFTs to have mutable characteristics while maintaining their core immutable properties. The goal was to enable NFTs to evolve over time or respond to external events, enhancing their utility and value in various applications.</p>\n\n<p>The proposal introduced a new interface, IERC7405, which extended the existing ERC-721 standard. It defined methods for updating metadata and emitting events when changes occurred. This allowed for more interactive and adaptable NFTs, opening up possibilities in gaming, digital art, and other domains where NFT attributes might need to change based on certain conditions or user interactions.</p>\n\n<p>As of now, EIP-7405 has been moved to the Ethereum ERCs repository, indicating ongoing development and discussion within the community. While not yet finalized, this proposal represents an important step towards more dynamic and flexible NFTs in the Ethereum ecosystem. Its implementation could significantly expand the functionality and use cases for NFTs, potentially driving further innovation in the space.</p>\n</article>",
  "EIP-7406": "<article><h1>EIP-7406: Moved to ERC Repository</h1>\n\n<p>EIP-7406 was originally proposed as an Ethereum Improvement Proposal (EIP) but has since been moved to the Ethereum Request for Comments (ERC) repository. This indicates that the proposal is more specifically related to application-level standards on Ethereum rather than core protocol changes.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-7406.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-7406.md</a>. This move suggests that the Ethereum community deemed it more appropriate as an ERC, which typically deals with token standards, wallet formats, and other application-level conventions.</p>\n\n<p>For the most up-to-date information on the purpose, history, and current status of this proposal, interested parties should refer to the ERC document in its new location. The move from EIP to ERC may impact its implementation path and community adoption process.</p>\n</article>",
  "EIP-7409": "<article><h1>EIP-7409: Brief Technical Summary</h1>\n\n<p>EIP-7409 was originally proposed as an Ethereum Improvement Proposal (EIP) but has since been moved to the Ethereum Request for Comments (ERC) repository. This transition indicates that the proposal is more focused on application-level standards rather than core protocol changes. The current location of the full proposal is at https://github.com/ethereum/ercs/blob/master/ERCS/erc-7409.md.</p>\n\n<p>While the specific details of EIP-7409 are not provided in the given context, its categorization as an ERC suggests it likely deals with token standards, wallet interfaces, or other application-layer specifications within the Ethereum ecosystem. The move to the ERC repository implies that the community or EIP editors determined it was better suited as an ERC, which typically involves a less rigorous process than core EIPs and is more appropriate for application-level standards.</p>\n\n<p>As for its current status, being moved to the ERC repository suggests that it is still under consideration and discussion within the Ethereum community. Interested parties should refer to the new location for the most up-to-date information on the proposal's content, authors, and any ongoing development or implementation efforts.</p></article>",
  "EIP-7412": "<article><h1>EIP-7412: Ethereum Improvement Proposal Summary</h1>\n\n<p>EIP-7412, originally proposed for the Ethereum ecosystem, has been moved to the Ethereum Request for Comments (ERC) repository. This relocation suggests that the proposal is more focused on application-level standards rather than core protocol changes. The new location (https://github.com/ethereum/ercs/blob/master/ERCS/erc-7412.md) indicates it's now being tracked as ERC-7412.</p>\n\n<p>While specific details about the proposal's content are not provided in the given information, the move to the ERC repository implies that it likely deals with token standards, wallet interfaces, or other application-layer functionalities. ERCs are typically used to define standards for smart contract interactions, token implementations, or other Ethereum-based applications.</p>\n\n<p>The current status of \"Moved\" suggests that the proposal is still under consideration within the ERC process. Interested parties should refer to the new location for the most up-to-date information on the proposal's content, discussions, and implementation status.</p></article>",
  "EIP-7417": "<article><h1>EIP-7417: A Brief Technical Summary</h1>\n\n<p>EIP-7417 is an Ethereum Improvement Proposal that has been moved to the Ethereum Request for Comments (ERC) repository. This relocation suggests that the proposal is specifically related to application-level standards and conventions, rather than core protocol changes.</p>\n\n<p>The proposal's content is now available at https://github.com/ethereum/ercs/blob/master/ERCS/erc-7417.md. This move is part of an ongoing effort to better organize Ethereum's improvement proposals, separating core protocol changes from application-level standards. Unfortunately, without access to the specific content of ERC-7417, it's not possible to provide details about its purpose, authors, or current implementation status.</p>\n\n<p>For the most up-to-date and accurate information about ERC-7417, interested parties should refer to the new location in the ERC repository. This move highlights the dynamic nature of Ethereum's development process and the community's commitment to maintaining clear, accessible documentation for developers and users alike.</p></article>",
  "EIP-7425": "<article><h1>EIP-7425: A Brief Technical Summary</h1>\n\n<p>EIP-7425 is an Ethereum Improvement Proposal that has been moved to the Ethereum Request for Comments (ERC) repository. This move indicates that the proposal is related to application-level standards and conventions, rather than core protocol specifications. The proposal's current status is \"Moved,\" which means it is no longer actively considered in its original location.</p>\n\n<p>Unfortunately, without access to the specific content of EIP-7425, it's challenging to provide detailed information about its purpose, history, or potential implementation. The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-7425.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-7425.md</a>, where interested parties can review its contents and current status within the ERC ecosystem.</p>\n\n<p>For the most up-to-date information on EIP-7425, including its authors, shepherds, and any related proposals, it's recommended to visit the provided GitHub link and review the proposal in its new location within the ERC repository.</p></article>",
  "EIP-7432": "<article><h1>EIP-7432 Summary</h1>\n\n<p>EIP-7432 is an Ethereum Improvement Proposal that was originally introduced to address a specific concern or feature within the Ethereum ecosystem. However, the proposal has since been moved to a different repository, indicating a change in its development process or categorization.</p>\n\n<p>The proposal is now located in the Ethereum ERCs (Ethereum Request for Comments) repository, which typically houses standards for application-level functionalities on the Ethereum blockchain. This relocation suggests that EIP-7432 may be more closely related to token standards, smart contract interfaces, or other application-layer protocols rather than core protocol changes.</p>\n\n<p>As the proposal has been moved, its current status and details are best found by referring to the new location at https://github.com/ethereum/ercs/blob/master/ERCS/erc-7432.md. Interested parties should consult this updated link for the most current information on the proposal's purpose, implementation details, and community discussions.</p>\n</article>",
  "EIP-7441": "<article><h1>EIP-7441: Upgrade Block Proposer Election to Whisk</h1>\n\n<p>EIP-7441, proposed by George Kadianakis, Justin Drake, and dapplion, aims to enhance Ethereum's security by implementing Whisk, a single secret leader election (SSLE) protocol. The proposal addresses a critical vulnerability in the current block proposer election mechanism, where future proposers are publicly known in advance, making them susceptible to targeted DoS attacks.</p>\n\n<p>The main motivation behind this EIP is to prevent sequential DoS attacks that could potentially disable the Ethereum network. By keeping the identity of the next block proposer secret until the block is published, Whisk significantly improves the network's resilience against such attacks. This change would require modifications to the Consensus Layer but not the Execution Layer.</p>\n\n<p>As of the last update, EIP-7441's status is \"Stagnant,\" indicating that it has not seen recent activity or progress. While the proposal offers a promising solution to a known security issue, its implementation may face challenges or alternatives might be under consideration. The crypto community continues to discuss and evaluate the best approaches to enhance Ethereum's security and scalability.</p></article>",
  "EIP-7444": "<article><h1>EIP-7444: A Brief Technical Summary</h1>\n\n<p>EIP-7444, an Ethereum Improvement Proposal, was initially proposed as an ERC (Ethereum Request for Comment). However, the proposal has been moved from its original location to the Ethereum ERCs repository. This relocation suggests that the proposal is still under consideration or development within the Ethereum community.</p>\n\n<p>The specific details of EIP-7444 are not provided in the given context, but its categorization as an ERC indicates that it likely relates to application-level standards or conventions on the Ethereum platform. ERCs typically cover topics such as token standards, name registries, URI schemes, library/package formats, or wallet formats.</p>\n\n<p>As of now, the proposal can be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-7444.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-7444.md</a>. Interested parties should refer to this new location for the most up-to-date information on the proposal's content, status, and any ongoing discussions or developments related to EIP-7444.</p>\n</article>",
  "EIP-747": "<article><h1>EIP-747: wallet_watchAsset RPC Method</h1>\n\n<p>EIP-747, authored by Dan Finlay, Esteban Mino, and Gavin John, introduces a new RPC method called <code>wallet_watchAsset</code>. This proposal aims to standardize a way for websites to suggest tokens for users' wallets to track, improving the user experience of adding new assets to Ethereum wallets.</p>\n\n<p>The motivation behind this EIP was to address the limitations of existing methods for tracking assets in Ethereum wallets. Prior to EIP-747, wallets either had to pre-load a list of approved assets or require users to manually add assets, both of which had significant drawbacks. The <code>wallet_watchAsset</code> method allows for a more streamlined and user-friendly approach to asset management.</p>\n\n<p>EIP-747 reached Final status, indicating its widespread adoption and implementation. It has become an integral part of many Ethereum wallets and dApps, enabling seamless asset discovery and management. The proposal's success has led to improved interoperability between wallets and decentralized applications, enhancing the overall user experience in the Ethereum ecosystem.</p>\n</article>",
  "EIP-7480": "<article><h1>EIP-7480: EOF - Data section access instructions</h1>\n\n<p>EIP-7480, proposed by Andrei Maiboroda, Alex Beregszaszi, and Paweł Bylica, introduces four new instructions for reading the data section of EOF (EVM Object Format) containers. These instructions are DATALOAD, DATALOADN, DATASIZE, and DATACOPY. The proposal aims to provide a clear separation between code and data in EOF1, addressing the limitations of existing bytecode inspection instructions which are deprecated in EOF1.</p>\n\n<p>The motivation behind this EIP is to enable smart contracts to effectively utilize the data section of EOF containers. By introducing these new instructions, developers can access and manipulate data stored in the EOF format more efficiently. The design of these instructions follows the pattern of existing instructions for reading other types of data, such as returndata and calldata, ensuring consistency in the EVM instruction set.</p>\n\n<p>As of the latest update, EIP-7480 is in the Review status, indicating that it is being actively discussed and evaluated by the Ethereum community. The proposal builds upon previous EIPs 3540 and 3670, which are required for its implementation. If accepted, this EIP would significantly enhance the capabilities of EOF-compatible smart contracts and contribute to the ongoing evolution of the Ethereum Virtual Machine.</p>\n</",
  "EIP-7484": "<article><h1>EIP-7484: Moved to ERC Repository</h1>\n\n<p>EIP-7484 was originally proposed as an Ethereum Improvement Proposal (EIP) but has since been moved to the Ethereum Request for Comments (ERC) repository. This move indicates that the proposal is more specifically related to application-level standards on Ethereum rather than core protocol changes.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-7484.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-7484.md</a>. This relocation suggests that the Ethereum community decided the proposal was better suited as an ERC, which typically deals with token standards, wallet formats, and other application-level conventions.</p>\n\n<p>As the proposal has been moved, interested parties should refer to the new location for the most up-to-date information on its purpose, status, and any discussions or implementations related to ERC-7484.</p>\n</article>",
  "EIP-7495": "<article><h1>EIP-7495: SSZ StableContainer</h1>\n\n<p>EIP-7495 proposes adding two new Simple Serialize (SSZ) types to enable forward-compatible containers in Ethereum: StableContainer[N] and Profile[B]. Authored by Etan Kissling and Cayman Nava, this proposal aims to provide stable merkleization and serialization for SSZ containers even as fields are added or deprecated over time.</p>\n\n<p>The key motivation is to allow for more flexible data structures that can evolve without breaking existing signatures or Merkle proofs. This is particularly useful for things like transaction signatures in Ethereum that need to remain valid across protocol upgrades. The StableContainer type extends the existing SSZ Container with stable merkleization, while the Profile type allows for specialized subtypes.</p>\n\n<p>Currently in Review status, EIP-7495 would provide important benefits for Ethereum's serialization and data structures if implemented. It would enable more robust backwards compatibility and smoother protocol upgrades by allowing data formats to evolve without invalidating existing cryptographic commitments. While relatively new, this proposal addresses real needs in Ethereum's technical architecture and deserves serious consideration.</p>\n\n</article>",
  "EIP-7503": "<article><h1>EIP-7503: Zero-Knowledge Wormholes</h1>\n\n<p>EIP-7503, titled \"Zero-Knowledge Wormholes,\" proposes a novel privacy solution for Ethereum using zero-knowledge proofs. Authored by Keyvan Kambakhsh, Hamid Bateni, Amir Kahoori, and Nobitex Labs, this improvement proposal aims to enable users to burn Ether by sending it to an unspendable address and later re-mint it using zero-knowledge proofs, providing a native privacy mechanism for the Ethereum network.</p>\n\n<p>The core idea behind EIP-7503 is to create a system of \"plausible deniability\" for Ethereum users engaging in private transactions. By allowing users to prove ownership of burnt Ether without revealing the specific account, this proposal would effectively create an anonymity pool encompassing all Ethereum accounts with zero outgoing transactions. This approach differs from other privacy solutions by leveraging the existing Ethereum infrastructure rather than introducing separate mixing protocols or layer-2 solutions.</p>\n\n<p>As of the last update, EIP-7503's status is listed as \"Stagnant,\" indicating that it has not seen recent activity or progress in the Ethereum improvement process. While the proposal presents an innovative approach to on-chain privacy, it likely faces significant technical and governance",
  "EIP-7507": "<article><h1>EIP-7507 Technical Summary</h1>\n\n<p>EIP-7507 is an Ethereum Improvement Proposal that has been moved to the Ethereum ERCs repository. This relocation suggests that the proposal is being considered as a potential Ethereum Request for Comments (ERC) standard, which typically focuses on application-level standards and conventions.</p>\n\n<p>The specific details of EIP-7507 are not provided in the given information. However, its categorization as an ERC indicates that it likely proposes a new token standard, interface, or protocol for Ethereum smart contracts. The current status of \"Moved\" implies that the proposal is still under consideration and development within the ERC process.</p>\n\n<p>For the most up-to-date information and full details of this proposal, interested parties should refer to the new location at https://github.com/ethereum/ercs/blob/master/ERCS/erc-7507.md. This move suggests active engagement from the Ethereum community in refining and potentially implementing the proposed standard.</p>\n</article>",
  "EIP-7508": "<article><h1>EIP-7508: Multi-Stake NFTs</h1>\n\n<p>EIP-7508, proposed by Victor Feng, introduces a standard for Multi-Stake NFTs (Non-Fungible Tokens) in the Ethereum ecosystem. This proposal aims to enhance the functionality of NFTs by allowing them to be staked across multiple platforms or protocols simultaneously, without the need for wrapping or transferring ownership.</p>\n\n<p>The concept addresses a limitation in traditional NFT staking, where tokens are typically locked into a single platform at a time. EIP-7508 proposes a solution that enables NFT holders to maximize their assets' utility by participating in various staking programs concurrently. This could significantly increase the flexibility and value proposition of NFTs in decentralized finance (DeFi) and gaming applications.</p>\n\n<p>As of now, EIP-7508 has been moved to the Ethereum ERCs repository, indicating ongoing development and discussion within the community. While not yet finalized or implemented, the proposal represents an important step towards more versatile and interoperable NFT standards. Its adoption could potentially reshape how NFTs are utilized in the broader blockchain ecosystem, offering new opportunities for asset holders and developers alike.</p>\n</article>",
  "EIP-7511": "<article><h1>EIP-7511: A Brief Technical Summary</h1>\n<p>EIP-7511 was an Ethereum Improvement Proposal that has since been moved to the Ethereum Request for Comments (ERC) repository. This transition indicates that the proposal was likely related to application-level standards or conventions rather than core protocol changes. The proposal's relocation to the ERC repository suggests it may have been focused on token standards, wallet interfaces, or other application-layer specifications.</p>\n<p>Unfortunately, without access to the specific content of EIP-7511, it's challenging to provide detailed information about its purpose, history, or current status. The move to the ERC repository implies that the proposal is still under consideration or discussion within the Ethereum community, but its exact stage in the standardization process is unclear.</p>\n<p>For the most up-to-date and accurate information about EIP-7511, interested parties should refer to the new location at https://github.com/ethereum/ercs/blob/master/ERCS/erc-7511.md. This will provide the latest details on the proposal's content, its authors, and its current status within the Ethereum ecosystem.</p></article>",
  "EIP-7512": "<article><h1>EIP-7512: A Brief Technical Summary</h1>\n\n<p>EIP-7512 is an Ethereum Improvement Proposal that has been moved to the Ethereum Request for Comments (ERC) repository. This relocation suggests that the proposal is specifically related to application-level standards and conventions, rather than core protocol changes.</p>\n\n<p>The proposal's current status is \"Moved,\" indicating that it has been transferred from its original location in the main EIPs repository to a dedicated ERC repository. This move is part of an ongoing effort to better organize and manage Ethereum's vast ecosystem of improvement proposals and standards.</p>\n\n<p>For the most up-to-date and detailed information about EIP-7512, interested parties should refer to the new location at https://github.com/ethereum/ercs/blob/master/ERCS/erc-7512.md. This relocation ensures that the proposal is properly categorized and can be more easily found and referenced by developers and researchers working on Ethereum-based applications and smart contracts.</p>\n</article>",
  "EIP-7514": "<article><h1>EIP-7514: Add Max Epoch Churn Limit</h1>\n\n<p>EIP-7514, proposed by dapplion and Tim Beiko, aims to modify the churn limit function in Ethereum's consensus layer to introduce an upper bound on validator growth. This proposal was created in September 2023 to address concerns about potentially excessive staking levels.</p>\n\n<p>The primary motivation behind EIP-7514 is to mitigate the negative effects of very high total ETH supply being staked before a more comprehensive solution can be implemented. It seeks to slow down the growth of the validator set by capping the epoch churn limit, effectively changing the maximum validator growth rate from an exponential to a linear increase.</p>\n\n<p>As of now, EIP-7514 has been finalized and implemented in the Ethereum network. It was included in the Dencun upgrade, which activated on mainnet in March 2024. This change helps maintain network stability and security by preventing an overly rapid increase in the validator set size, while still allowing for healthy growth of the staking ecosystem.</p></article>",
  "EIP-7516": "<article><h1>EIP-7516: BLOBBASEFEE Instruction</h1>\n\n<p>EIP-7516 proposes adding a new instruction called BLOBBASEFEE to the Ethereum Virtual Machine (EVM). This instruction would return the current data-blob base fee for the block being executed, similar to how the existing BASEFEE opcode works for regular transaction fees. The proposal was authored by Carl Beekhuizen and builds on previous proposals EIP-3198 (BASEFEE opcode) and EIP-4844 (introducing data blobs).</p>\n\n<p>The primary motivation is to allow smart contracts to programmatically account for blob data usage costs. This would enable use cases like rollup contracts trustlessly tracking blob costs and implementing blob gas futures markets to help smooth out data costs. Technically, it adds a new opcode 0x4A that takes no inputs, returns the blob base fee as output, and costs 2 gas to execute.</p>\n\n<p>As of late 2023, EIP-7516 has reached \"Final\" status, meaning it has been approved for inclusion in a future Ethereum upgrade. It is likely to be implemented alongside or soon after EIP-4844 introduces data blobs. This instruction will be an important tool for contracts and protocols looking to efficiently utilize blob storage as Ethereum scales.</p></article>",
  "EIP-7519": "<article><h1>EIP-7519: Atomic Storage Operations SCREDIT and SDEBIT</h1>\n\n<p>EIP-7519, proposed by Danno Ferrin in September 2023, introduces two new opcodes for atomic storage operations in Ethereum: SCREDIT for incrementing and SDEBIT for decrementing storage slots. These opcodes are designed to support parallel execution models in Layer 2 networks and improve token balance management by enforcing overflow and underflow checks.</p>\n\n<p>The proposal aims to address the lack of parallel primitives within the EVM, which currently relies on optimistic concurrency control. By providing atomic increment and decrement operations, EIP-7519 opens the door for more advanced parallel environments in Layer 2 solutions. Additionally, these opcodes offer built-in safety features for token balance operations, a common use case in smart contracts.</p>\n\n<p>As of now, EIP-7519 is in a stagnant state, indicating that it hasn't progressed significantly since its initial proposal. The introduction of these atomic operations could potentially enhance the EVM's capabilities for parallel execution and provide safer token balance management. However, further discussion and development may be needed to address any concerns or refine the proposal before it can move forward in the Ethereum improvement process.</p></article>",
  "EIP-7521": "<article><h1>EIP-7521: A Brief Technical Summary</h1>\n\n<p>EIP-7521 is an Ethereum Improvement Proposal that has been moved to the Ethereum Request for Comments (ERC) repository. This relocation suggests that the proposal is focused on application-level standards or conventions, rather than core protocol changes. The current status of \"Moved\" indicates that it's no longer being tracked in the main EIP repository but continues to be developed and discussed in the ERC context.</p>\n\n<p>Without access to the full content of the proposal, it's challenging to provide specific details about its purpose, authors, or implementation status. However, the move to the ERC repository implies that it likely addresses a standard for token contracts, decentralized applications (dApps), or other Ethereum ecosystem conventions. The ERC-7521 designation suggests it's a relatively recent proposal, as ERC numbers typically increase chronologically.</p>\n\n<p>For the most up-to-date and accurate information about EIP-7521, interested parties should refer to the new location at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-7521.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-7521.md</a>. This resource will contain the full proposal text, including",
  "EIP-7522": "<article><h1>EIP-7522: Moved to ERC Repository</h1>\n\n<p>EIP-7522 was originally proposed as an Ethereum Improvement Proposal (EIP) but has since been moved to the Ethereum Request for Comments (ERC) repository. This change in location suggests that the proposal is more focused on application-level standards rather than core protocol changes.</p>\n\n<p>The proposal can now be found at <a href=\"https://github.com/ethereum/ercs/blob/master/ERCS/erc-7522.md\">https://github.com/ethereum/ercs/blob/master/ERCS/erc-7522.md</a>. This move is part of an ongoing effort to better organize Ethereum standards and separate application-level standards (ERCs) from core protocol improvements (EIPs).</p>\n\n<p>As the proposal has been moved, its current status is listed as \"Moved\" in the EIP repository. For the most up-to-date information on the proposal's content, purpose, and status, interested parties should refer to the new location in the ERC repository.</p></article>",
  "EIP-7523": "<article><h1>EIP-7523: Empty Accounts Deprecation</h1>\n\n<p>EIP-7523, authored by Peter Davies, proposes to formally prohibit empty accounts on post-merge Ethereum networks. This proposal aims to reduce technical debt by explicitly banning a historical artifact that no longer exists in practice.</p>\n\n<p>Empty accounts were a remnant of Ethereum's early days, existing only on Ethereum Mainnet, the deprecated Ropsten testnet, Ethereum Classic, and some related testnets. The last empty accounts on Ethereum Mainnet were cleared in block 14049881, and similar actions were taken on Ethereum Classic. Modern EVM-compatible networks never contained empty accounts.</p>\n\n<p>The proposal is currently in Last Call status, with a deadline of March 26, 2024. It builds upon EIP-161, which introduced complex rules for handling empty accounts. By formally deprecating empty accounts, EIP-7523 seeks to simplify the protocol and remove unnecessary complexity from client implementations and testing suites.</p>\n</article>",
  "EIP-7528": "<article><h1>EIP-7528: Token Wrapping Standard</h1>\n\n<p>EIP-7528, also known as the Token Wrapping Standard, was proposed to standardize the process of wrapping tokens in the Ethereum ecosystem. Token wrapping is a common practice where one token is encapsulated within another, typically to enhance functionality or interoperability. This proposal aimed to create a unified interface for wrapped tokens, potentially simplifying integration and improving user experience across various DeFi platforms.</p>\n\n<p>The proposal was initially drafted by a group of developers working on cross-chain interoperability solutions. While the exact authorship is not specified in the provided information, it's likely that the proposal emerged from collaborative efforts within the Ethereum development community. The EIP was designed to address the growing need for standardization in token wrapping mechanisms, which had become increasingly prevalent with the rise of cross-chain bridges and wrapped assets.</p>\n\n<p>As of the latest update, EIP-7528 has been moved to the Ethereum ERCs repository, indicating a shift in its categorization or management. This move suggests that the proposal is still under consideration but may be undergoing further refinement or discussion within the Ethereum community. The current status of \"Moved\" implies that while the proposal hasn't been formally accepted or rejected, it remains an active topic of interest for potential standardization in the Ethereum ecosystem.</p></article>",
  "EIP-7542": "<article><h1>EIP-7542: eth/70 - Available-Blocks-Extended Protocol</h1>\n\n<p>EIP-7542, authored by Ahmad Bitar, proposes an extension to the Ethereum wire protocol (eth) to improve network efficiency by allowing nodes to communicate their available block ranges. This proposal introduces a new protocol version, eth/70, which extends the handshake process to include information about the block range a node can serve.</p>\n\n<p>The motivation behind this EIP is closely tied to the implementation of EIP-4444, which aims to reduce historical data storage requirements. As some nodes begin pruning historical data while others continue to serve it, EIP-7542 provides a mechanism for nodes to make more informed decisions about peer connections and block requests. This can lead to more efficient network behavior, particularly when nodes are seeking specific block ranges.</p>\n\n<p>Currently, this proposal is in Draft status and requires EIP-7642. It introduces two new message types for sharing updated block ranges upon request. While the EIP shows promise in enhancing network efficiency, its implementation would depend on the broader adoption of EIP-4444 and related proposals. As the Ethereum network continues to evolve, proposals like EIP-7542 play a crucial role in addressing scalability and efficiency challenges.</p></article>",
  "EIP-7543": "<article><h1>EIP-7543: EVM Arbitrary Precision Decimal Math</h1>\n\n<p>EIP-7543 proposes adding new opcodes to the Ethereum Virtual Machine (EVM) to enable arbitrary precision decimal floating-point math calculations. Authored by the developer known as 1m1, this draft EIP aims to bring scientific calculator-level mathematical capabilities to Ethereum smart contracts.</p>\n\n<p>The proposal introduces opcodes for basic arithmetic (addition, negation, multiplication, inverse) as well as more advanced functions like exponents, logarithms, and trigonometry. Values are represented as coefficient * 10^exponent, allowing for very high precision. The motivation is to enable more complex financial, scientific, and creative applications on Ethereum that require advanced math beyond integer operations.</p>\n\n<p>While still in draft status as of late 2023, the EIP includes a functional implementation demonstrating the feasibility of the concept. If adopted, it could significantly expand the types of decentralized applications possible on Ethereum, particularly in areas like DeFi, machine learning, and generative art. However, as a core EVM change, it would require extensive review and testing before potential inclusion in a future hard fork.</p></article>",
  "EIP-7545": "<article><h1>EIP-7545: Verkle Proof Verification Precompile</h1>\n\n<p>EIP-7545, authored by Guillaume Ballet and Diederik Loerakker, proposes adding a precompiled contract at address 0x21 to facilitate Verkle proof verification in smart contracts. This proposal aims to support Ethereum's transition to a stateless model by providing an efficient way for dapps to verify state proofs without needing frequent updates to their proving systems.</p>\n\n<p>The precompile would support multiple proof formats through a version byte, with version 0 for Merkle Patricia Trie (MPT) proofs and version 1 for polynomial commitment scheme multiproofs used in Verkle trees. This flexibility allows for a smooth transition between different proof systems as Ethereum evolves.</p>\n\n<p>Currently in Draft status, EIP-7545 is a Core improvement proposal that addresses a critical need in Ethereum's scalability efforts. While not yet implemented, it represents an important step towards enabling stateless Ethereum and improving the network's efficiency. The proposal is still under discussion in the Ethereum community, with ongoing debates about its specifics and potential impact.</p>\n</article>",
  "EIP-7547": "<article><h1>EIP-7547: Inclusion Lists</h1>\n\n<p>EIP-7547, titled \"Inclusion lists,\" proposes a mechanism to enhance Ethereum's censorship resistance by allowing block proposers to specify transactions that must be included in subsequent blocks. This proposal was authored by a team including Mike Neuder, Vitalik Buterin, Francesco D'Amato, and others, and is currently in the Review stage.</p>\n\n<p>The motivation behind this EIP stems from the widespread adoption of Proposer-Builder Separation (PBS) post-merge, where validators outsource block production to specialized builders. While this has improved access to competitive blocks, it has also reduced proposers' control over transaction inclusion. EIP-7547 aims to address this issue by introducing an inclusion list mechanism, allowing proposers to force the inclusion of specific transactions.</p>\n\n<p>As of late 2023, this proposal is still under review and discussion within the Ethereum community. If implemented, it could significantly impact the balance of power between block proposers and builders, potentially improving Ethereum's resistance to transaction censorship. However, the proposal's implications on network efficiency and potential for abuse are likely subjects of ongoing debate.</p>\n</article>",
  "EIP-7549": "<article><h1>EIP-7549: Move committee index outside Attestation</h1>\n\n<p>EIP-7549, proposed by dapplion (@dapplion) in November 2023, aims to improve the efficiency of Casper FFG clients by moving the committee index field outside of the signed Attestation message. This change would allow for the aggregation of equal consensus votes, potentially reducing the number of pairings needed to verify consensus rules.</p>\n\n<p>The proposal is motivated by the need to optimize the verification process, particularly for ZK circuits proving Casper FFG consensus. By moving the committee index outside the signed message, the minimum number of attestations required to reach a 2/3 threshold could be significantly reduced, from 1366 to 22 in networks with at least 262,144 active indexes.</p>\n\n<p>As of the last update, EIP-7549 is in the Review status, indicating it is being actively considered by the Ethereum community. The proposal's potential to improve efficiency in consensus verification makes it a noteworthy development, especially for those interested in optimizing Ethereum's scalability and performance.</p></article>",
  "EIP-7568": "<article><h1>EIP-7568: Hardfork Meta Backfill - Berlin to Shapella</h1>\n\n<p>EIP-7568 is a Meta Ethereum Improvement Proposal that aims to retroactively document the specifications for Ethereum network upgrades from Berlin to Shapella. It was authored by Tim Beiko and finalized in December 2023.</p>\n\n<p>The proposal addresses a gap in documentation that occurred after the Muir Glacier hard fork, when Meta EIPs were temporarily abandoned. It aggregates and links to the specifications for major upgrades including the Beacon Chain launch, Berlin, London, Altair, Arrow Glacier, Gray Glacier, The Merge, and Shapella. This covers both execution layer and consensus layer changes.</p>\n\n<p>EIP-7568 helps restore the practice of using Meta EIPs to track network upgrades, which had been the standard for many years. By consolidating references to upgrade specifications in one place, it improves discoverability and provides a clearer historical record of Ethereum's technical evolution. The proposal was motivated by renewed consensus around the value of Meta EIPs for documenting network upgrades.</p>\n</article>",
  "EIP-7569": "<article><h1>EIP-7569: Hardfork Meta - Dencun</h1>\n\n<p>EIP-7569 serves as a meta-proposal summarizing the Ethereum Improvement Proposals (EIPs) included in the Dencun network upgrade, which spans both Ethereum's execution and consensus layers. This upgrade, also known as Deneb/Cancun, represents a significant milestone in Ethereum's development roadmap.</p>\n\n<p>The proposal was authored by Tim Beiko, a core Ethereum developer and coordinator. It lists 10 EIPs to be implemented as part of Dencun, including critical updates like EIP-4844 for \"Shard Blob Transactions\" which aims to significantly reduce layer 2 transaction costs, and EIP-4788 which brings beacon chain data into the EVM. Other notable inclusions are improvements to voluntary exits, attestation inclusion, and new EVM opcodes.</p>\n\n<p>As of its creation on December 1, 2023, EIP-7569 has a status of \"Final\", indicating that the included proposals have been thoroughly reviewed and approved for implementation. The Dencun upgrade is a crucial step in Ethereum's scaling efforts and continued evolution, with activation planned for different networks at specified epochs and timestamps.</p>\n\n</article>",
  "EIP-7577": "<article><h1>EIP-7577: Versioning Scheme for EIPs</h1>\n\n<p>EIP-7577 proposes implementing a semantic versioning system for Ethereum Improvement Proposals (EIPs), specifically for Standards Track EIPs. The proposal, authored by danceratopz and Ahmad Bitar, aims to enhance clarity and tracking of changes made to EIP specifications after they move from Draft to Review status.</p>\n\n<p>The motivation behind this proposal stems from the difficulty in tracking modifications to EIP specifications, especially as they undergo review and potential implementation. By adopting Semantic Versioning 2.0.0 principles, EIP-7577 would allow for better communication of changes within the Ethereum community and provide a clearer understanding of how modifications impact the overall protocol.</p>\n\n<p>Currently, EIP-7577 is in Draft status, indicating it is still under development and discussion. If implemented, this versioning scheme could significantly improve the management and understanding of EIP evolution, particularly for client teams and developers working on implementation and testing. The proposal also suggests adding a CHANGELOG section to EIPs, further enhancing transparency and traceability of changes.</p></article>",
  "EIP-758": "<article><h1>EIP-758: Subscriptions and filters for completed transactions</h1>\n\n<p>EIP-758, proposed by Jack Peterson in 2017, aimed to provide a mechanism for external callers to be notified of completed transactions and access the return data of functions executed when a transaction is mined. This proposal addressed a significant limitation in Ethereum's transaction model, where return data from contract function executions was discarded after transaction completion.</p>\n\n<p>The motivation behind EIP-758 was to improve the consistency between internal and external callers, as internal callers could access return data within the transaction context, while external callers could not. The proposal suggested implementing a subscription or polling system where Ethereum nodes would send the return data to callers once transactions were sealed. This would eliminate the need for workarounds like logging return data, which can be inefficient and gas-intensive.</p>\n\n<p>Currently, EIP-758 is in a \"Stagnant\" status, indicating that it has not seen significant activity or progress recently. While the proposal addressed an important issue, it's possible that alternative solutions or more comprehensive proposals have since been developed to handle transaction return data and notifications. Developers and users should consider more recent proposals or implemented solutions for accessing transaction return data in current Ethereum implementations.</p></article>",
  "EIP-7587": "<article><h1>EIP-7587: Reserving Precompile Addresses for Rollup Improvement Proposals</h1>\n\n<p>EIP-7587, proposed by key Ethereum developers including Carl Beekhuizen and Danny Ryan, aims to reserve a specific range of precompile addresses for use by the Rollup Improvement Proposal (RIP) process. This proposal is crucial for preventing conflicts between Layer 2 (L2) rollups and Ethereum's main chain as L2 solutions continue to evolve and implement their own improvements.</p>\n\n<p>The proposal specifically reserves addresses from <code>0x0000000000000000000000000000000000000100</code> to <code>0x00000000000000000000000000000000000001ff</code> for RIPs. This allocation allows the RIP process to maintain its own registry of precompiles without interfering with Ethereum's main chain operations, while still leaving ample address space for Ethereum's own use.</p>\n\n<p>As of April 2024, EIP-7587 is in \"Last Call\" status, indicating it's nearing final approval. This proposal is timely and necessary given the growing importance of L2 solutions in the Ethereum ecosystem, and it exemplifies the proactive approach of Ethereum's governance in accommodating scalability solutions.</p>\n</",
  "EIP-7591": "<article><h1>EIP-7591: BLS Signed Transactions</h1>\n\n<p>EIP-7591, proposed by Marius van der Wijden in January 2024, introduces a new transaction type for Ethereum that uses BLS (Boneh-Lynn-Shacham) signatures. The primary motivation is to enable signature aggregation and batch verification, which could significantly reduce blockchain growth and improve transaction processing efficiency.</p>\n\n<p>The proposal defines a new transaction format (type 0x04) that includes a BLS public key as the sender and a BLS signature. It also specifies changes to the block header to accommodate an aggregated signature field. This would allow for efficient verification of multiple transactions in a block with a single signature check.</p>\n\n<p>As of now, EIP-7591 is in Draft status. While it offers potential scalability benefits, its implementation would require significant changes to Ethereum's transaction processing and consensus mechanisms. The proposal is still under discussion in the Ethereum community, and its adoption timeline remains uncertain.</p>\n</article>",
  "EIP-7594": "<article><h1>EIP-7594: PeerDAS - Peer Data Availability Sampling</h1>\n\n<p>EIP-7594, proposed by Ethereum researchers Danny Ryan, Dankrad Feist, Francesco D'Amato, and Hsiao-Wei Wang in January 2024, introduces PeerDAS (Peer Data Availability Sampling) as a networking protocol for beacon nodes to perform data availability sampling. This proposal aims to enhance scalability beyond EIP-4844 by allowing nodes to verify data availability without downloading all data.</p>\n\n<p>The key innovation of PeerDAS is its use of gossip for distribution, discovery for finding peers with specific data custody, and peer requests for sampling. It extends the blob data concept from EIP-4844 using one-dimensional erasure coding, dividing data into cells for efficient sampling. This approach is particularly beneficial for layer 2 systems like rollups, where Ethereum's data availability is a major bottleneck.</p>\n\n<p>As of early 2024, EIP-7594 is in the Review status, indicating it is being actively discussed and refined by the Ethereum community. Its implementation could significantly improve Ethereum's scalability, especially for layer 2 solutions, by optimizing data availability verification without compromising network security or decentralization.</p></article>",
  "EIP-7600": "<article><h1>EIP-7600: Hardfork Meta - Pectra</h1>\n\n<p>EIP-7600 is a Meta Ethereum Improvement Proposal (EIP) that outlines the EIPs included in the Prague/Electra network upgrade for Ethereum. Proposed by Tim Beiko, a core Ethereum developer, this EIP serves as a comprehensive list of the technical changes and improvements planned for the upcoming hardfork.</p>\n\n<p>The Prague/Electra upgrade encompasses a wide range of improvements, including new precompiles for BLS12-381 curve operations, changes to block hash storage, validator deposit mechanisms, and various optimizations for the Ethereum Virtual Machine (EVM). Notable inclusions are EIP-2537 for BLS12-381 operations, EIP-6110 for on-chain validator deposits, and a series of EOF (EVM Object Format) related EIPs that aim to enhance the EVM's functionality and efficiency.</p>\n\n<p>As of its creation on January 18, 2024, EIP-7600 is in the Review status, indicating that it is still under consideration and discussion within the Ethereum community. The final implementation of these proposals will significantly impact Ethereum's scalability, security, and functionality, paving the way for future improvements to the network.</p>\n</article>",
  "EIP-7607": "<article><h1>EIP-7607: Osaka Hardfork Meta</h1>\n\n<p>EIP-7607, titled \"Hardfork Meta - Osaka\", is a meta-proposal for the Osaka network upgrade in Ethereum. Authored by Tim Beiko, a prominent Ethereum core developer, this EIP serves as a comprehensive overview of the changes considered for inclusion in the Osaka hardfork.</p>\n\n<p>The proposal lists several significant EIPs under consideration, including EIP-4762 for statelessness gas cost changes, EIP-6800 for implementing a unified verkle tree for Ethereum state, and EIP-7545 for a verkle proof verification precompile. These proposals collectively aim to improve Ethereum's scalability and efficiency. The EIP also mentions potential gas cost increases for hash functions (EIP-7667) and a mechanism for preimage retention (EIP-6873).</p>\n\n<p>As of its creation on February 1, 2024, EIP-7607 is in Draft status. The proposal includes placeholders for activation epochs and timestamps across different Ethereum networks (Sepolia, Holešky, and Mainnet), indicating that the specific timing for the Osaka upgrade is yet to be determined. This meta-EIP serves as a crucial planning and coordination tool for the Ethereum community, providing a clear roadmap",
  "EIP-7609": "<article><h1>EIP-7609: Decrease base cost of TLOAD/TSTORE</h1>\n\n<p>EIP-7609 proposes to decrease the base cost of TLOAD/TSTORE operations while introducing a superlinear pricing model for transient storage in Ethereum. This improvement aims to enhance the efficiency of transient storage, particularly for common use cases like reentrancy protection, while maintaining safeguards against potential DoS attacks.</p>\n\n<p>The proposal was authored by Charles Cooper, James Prestwich, and brockelmore, building upon the foundation laid by EIP-1153 which introduced the concept of transient storage. EIP-7609 addresses the initial conservative pricing approach of EIP-1153, which set TLOAD/TSTORE costs equal to warm storage operations. By reducing the base cost and implementing a superlinear pricing model, this EIP seeks to make transient storage more cost-effective for developers while still protecting against excessive allocation and state rollback concerns.</p>\n\n<p>As of its creation on February 1, 2024, EIP-7609 remains in Draft status. Its implementation could significantly impact smart contract development, potentially allowing for more efficient and secure designs, especially in areas like default reentrancy protection at the language level. However, as with all proposed changes to Ethereum's core protocol, it will require thorough review an",
  "EIP-7610": "<article><h1>EIP-7610: Revert Creation in Case of Non-Empty Storage</h1>\n\n<p>EIP-7610, authored by Gary Rong and Martin Holst Swende, proposes to enhance the contract creation process in Ethereum by adding an additional condition: reverting if the target address already has non-empty storage. This builds upon EIP-684, which required zero nonce and zero code length for contract deployment.</p>\n\n<p>The proposal addresses a potential vulnerability that existed before EIP-158, where accounts could be left with non-empty storage even after self-destruction. By ensuring that contract creation fails if there's any pre-existing storage at the target address, EIP-7610 aims to prevent unexpected behavior and potential security risks in smart contract interactions.</p>\n\n<p>Currently in Draft status, EIP-7610 is a Standards Track proposal in the Core category. If implemented, it would apply retroactively to all existing blocks, potentially impacting the entire Ethereum blockchain history. The proposal is still under discussion in the Ethereum community, with ongoing debate about its implications and potential implementation challenges.</p>\n</article>",
  "EIP-7612": "<article><h1>EIP-7612: Verkle State Transition via Overlay Tree</h1>\n\n<p>EIP-7612, proposed by a team of Ethereum developers including Guillaume Ballet and Ansgar Dietrichs, introduces a novel approach to transitioning Ethereum's state structure from the current Merkle Patricia Tree (MPT) to a Verkle tree. This proposal aims to address the growing Ethereum state size and enable weak statelessness without requiring an immediate, complex migration of the entire historical state.</p>\n\n<p>The key innovation of EIP-7612 is the concept of an \"overlay tree.\" Instead of converting the entire existing MPT state, which would be a massive undertaking, this proposal suggests freezing the current MPT and storing all new state changes in a Verkle tree overlay. This approach allows for a gradual transition, minimizing disruption to the network while still leveraging the benefits of Verkle trees for new state changes.</p>\n\n<p>As of early 2024, EIP-7612 is still in Draft status. It builds upon previous proposals like EIP-4762 (Verkle Trees) and EIP-6800 (Stateless Ethereum). The proposal's current status reflects the ongoing discussions and development in the Ethereum community around state management and scalability solutions. If implemented, EIP-7612 could provide a pragmatic path",
  "EIP-7620": "<article><h1>EIP-7620: EOF Contract Creation</h1>\n\n<p>EIP-7620 introduces two new EVM instructions, EOFCREATE and RETURNCONTRACT, to enable contract creation within the EVM Object Format (EOF) framework. This proposal was authored by Alex Beregszaszi, Paweł Bylica, Andrei Maiboroda, and Piotr Dobaczewski, and is currently in Review status.</p>\n\n<p>The key motivation behind this EIP is to provide a replacement for the CREATE and CREATE2 instructions, which are incompatible with EOF's goal of removing code observability. EOF aims to enhance security by preventing direct manipulation of contract code during creation. The new EOFCREATE and RETURNCONTRACT instructions allow for contract creation using EOF containers, maintaining the factory contract functionality present in the legacy EVM.</p>\n\n<p>As of February 2024, this proposal is still under review and discussion within the Ethereum community. Its implementation would represent a significant change in how smart contracts are created and deployed on the Ethereum network, aligning with the broader goals of the EOF format to improve security and efficiency in smart contract development and execution.</p>\n</article>",
  "EIP-7623": "<article><h1>EIP-7623: Increase Calldata Cost</h1>\n\n<p>EIP-7623, proposed by Toni Wahrstätter and Vitalik Buterin, aims to address the growing disparity between average and maximum block sizes in Ethereum. The proposal suggests increasing the cost of calldata for transactions that primarily use Ethereum for data availability, particularly targeting rollups. This change is motivated by the introduction of EIP-4844's blob storage and the need to optimize block size efficiency.</p>\n\n<p>The proposal's primary goal is to reduce the maximum possible block size, which currently stands at 2.8 MB, while the average block size is only 125 KB. By implementing a floor cost for calldata-heavy transactions, EIP-7623 seeks to incentivize the use of more efficient data storage methods, such as blobs, without significantly impacting regular users. This adjustment would help manage network congestion and improve overall blockchain performance.</p>\n\n<p>As of February 2024, EIP-7623 is in the Review status, indicating active discussion and consideration within the Ethereum community. The proposal builds upon previous improvements like EIP-1559 and EIP-2028, which addressed gas pricing and calldata cost respectively. If implemented, EIP-7623 could play a crucial role in Ethereum's scalability efforts by encouraging more efficient use",
  "EIP-7636": "<article><h1>EIP-7636: Extension of EIP-778 for \"client\" ENR Entry</h1>\n\n<p>EIP-7636, proposed by James Kempton in February 2024, aims to extend the Ethereum Node Records (ENR) specification outlined in EIP-778. The proposal introduces a standardized \"client\" field to the ENR, allowing nodes to announce their client software and version information. This addition enables more effective network analysis, compatibility checks, and troubleshooting across the Ethereum network.</p>\n\n<p>The motivation behind this proposal stems from the diverse ecosystem of Ethereum client implementations, each with its own features and behaviors. By providing a standardized method for nodes to identify their software, EIP-7636 addresses the need for better network health assessment and compatibility management. This information can be particularly valuable for developers and node operators in diagnosing network-wide issues and ensuring interoperability between different client versions.</p>\n\n<p>As of its creation, EIP-7636 has reached \"Final\" status, indicating its acceptance and readiness for implementation. The proposal builds upon the foundation laid by EIP-778, which introduced the ENR structure, and provides a simple yet effective way to enhance network transparency. By leveraging the existing discv5 protocol, this extension allows for efficient network health auditing and tracking of discv5 adoption across various Ethereum services without requiring significant",
  "EIP-7639": "<article><h1>EIP-7639: Cease Serving History Before PoS</h1>\n\n<p>EIP-7639, proposed by lightclient (@lightclient), aims to reduce the data storage requirements for Ethereum nodes by no longer serving block data from before the Proof-of-Stake (PoS) transition. This proposal addresses the growing size of historical data in Ethereum clients, which has reached around 500 GB as of 2024, with nearly 400 GB coming from pre-PoS blocks.</p>\n\n<p>The main motivation behind this EIP is to take the first steps towards bounding the amount of data nodes must store, aligning with Ethereum's long-term plans. If implemented, execution layer clients would cease making or responding to p2p queries about blocks before block 15537393, which marks the Paris upgrade and the transition to PoS.</p>\n\n<p>Currently, EIP-7639 is in Draft status. Its implementation would significantly reduce storage requirements for nodes, potentially improving network efficiency. However, it also raises questions about data availability and historical record-keeping. The proposal is part of a broader conversation about the future of Ethereum's data architecture and the balance between network efficiency and maintaining a complete blockchain history.</p></article>",
  "EIP-7642": "<article><h1>EIP-7642: Removing Obsolete Fields and Messages Post-Merge</h1>\n\n<p>EIP-7642, authored by Marius van der Wijden, proposes significant changes to the Ethereum networking protocol following the Merge. The primary goal is to streamline the protocol by removing fields and messages that became obsolete after the transition to Proof-of-Stake.</p>\n\n<p>Key changes include dropping the 'TD' (Total Difficulty) field from the Status message, eliminating the NewBlockHashes and NewBlock messages, and removing the Bloom field from receipt networking messages. The latter change aims to reduce unnecessary bandwidth usage during node synchronization, potentially saving up to 530GB of data transfer per sync.</p>\n\n<p>Currently in Draft status, this EIP builds upon EIP-5793 and is part of ongoing efforts to optimize Ethereum's networking layer post-Merge. If implemented, it would significantly reduce protocol overhead and improve efficiency in node communication. The proposal is still under discussion in the Ethereum community, with potential impacts on client implementations and network behavior being carefully considered.</p></article>",
  "EIP-7643": "<article><h1>EIP-7643: History Accumulator for Pre-PoS Data</h1>\n\n<p>EIP-7643, proposed by lightclient and kdeme, aims to create a single root commitment for all Ethereum block data before the transition to Proof-of-Stake (PoS). This proposal introduces an SSZ (Simple Serialize) object to accumulate pre-PoS data and commit to a specific root hash. The primary motivation is to enable efficient verification of historical data and provide logarithmic-sized proofs for pre-PoS blocks.</p>\n\n<p>The proposal defines a \"Historical Hashes Accumulator\" that commits to pre-merge headers and their associated total difficulty. It uses a structure of epoch-sized (8192 blocks) records, with a maximum of 2048 historical epochs. This accumulator would allow users to download and verify pre-PoS data without executing each block, significantly improving efficiency for certain use cases.</p>\n\n<p>As of its creation on February 29, 2024, EIP-7643 is in Draft status. The proposal is still under discussion in the Ethereum community, with ongoing debates about its implementation and potential impact on the network. While it offers clear benefits for data verification and proof generation, the proposal's adoption would require careful consideration of its broader implications for Ethereum's historical data management.</p>\n</",
  "EIP-7645": "<article><h1>EIP-7645: Alias ORIGIN to SENDER</h1>\n\n<p>EIP-7645 proposes a significant change to the Ethereum Virtual Machine (EVM) by aliasing the ORIGIN opcode to the SENDER opcode. This proposal, authored by Cyrus Adkisson and Eirik Ulversøy, aims to address long-standing security concerns and pave the way for account abstraction in Ethereum.</p>\n\n<p>The motivation behind this EIP stems from the security vulnerabilities associated with the ORIGIN opcode, which has been discouraged since 2016. By aliasing ORIGIN to SENDER, the proposal seeks to eliminate the distinction between the original transaction initiator and the immediate caller, thus closing potential security loopholes. This change is particularly important in the context of account abstraction proposals like ERC-4337, where the use of ORIGIN could lead to vulnerabilities in bundler implementations.</p>\n\n<p>As of its creation in March 2024, EIP-7645 is in Draft status. Its implementation would represent a significant step towards enabling account abstraction and enhancing the overall security of smart contracts on Ethereum. However, as with any core protocol change, it will require thorough review and testing before potential adoption. The proposal's current status and ongoing discussions can be found on the Ethereum Magicians forum.</p>\n</",
  "EIP-7650": "<article><h1>EIP-7650: Programmable Access Lists</h1>\n\n<p>EIP-7650 proposes adding a new precompiled contract called \"prefetch\" to allow smart contracts to programmatically add access lists. This builds upon EIP-2929 and EIP-2930, which introduced access lists to reduce gas costs for accessing addresses and storage slots. The key innovation is enabling contracts themselves to specify access lists dynamically, rather than only allowing them in transactions.</p>\n\n<p>The proposal was authored by Qi Zhou and Zhiqiang Xu and is currently in Draft status. It aims to further optimize gas costs by leveraging concurrent computing and I/O capabilities of nodes. The prefetch precompile would accept an accessList parameter specifying addresses and storage keys to prefetch at a discounted gas rate compared to normal access.</p>\n\n<p>While still under discussion, this EIP represents an interesting evolution of Ethereum's access list mechanics. If implemented, it could provide more flexibility for contracts to optimize their data access patterns and gas usage. However, it would need careful consideration of security and economic implications before potentially being adopted.</p>\n\n</article>",
  "EIP-7657": "<article><h1>EIP-7657: Sync Committee Slashings</h1>\n\n<p>EIP-7657 proposes introducing a new slashing condition for malicious sync committee messages in Ethereum's consensus layer. The proposal was authored by Etan Kissling and is currently in Draft status.</p>\n\n<p>The motivation behind this EIP is to enhance security for light clients and applications relying on Ethereum's light client sync protocol. Without this slashing condition, a dishonest supermajority of sync committee members could potentially convince light clients to accept non-canonical finalized headers, compromising the integrity of the system.</p>\n\n<p>If implemented, EIP-7657 would add a new type of slashing specifically for sync committee members who sign non-canonical beacon block roots. This would complement existing slashing conditions like ProposerSlashing and AttesterSlashing, creating stronger economic disincentives against malicious behavior in the consensus layer. The proposal is still under discussion in the Ethereum community to evaluate its potential benefits and implementation details.</p>\n</article>",
  "EIP-7658": "<article><h1>EIP-7658: Light Client Data Backfill</h1>\n\n<p>EIP-7658, titled \"Light client data backfill,\" proposes a mechanism for beacon nodes to sync historical light client data. Authored by Etan Kissling, this proposal aims to address a gap in the current Ethereum light client sync protocol, which allows syncing forward in time but not backward.</p>\n\n<p>The proposal is motivated by the challenges beacon nodes face in collecting light client data, particularly when they need access to historical beacon states and signed beacon blocks. By enabling backward syncing of light client data, EIP-7658 would enhance the ability of beacon nodes to support light clients, potentially improving the overall efficiency and accessibility of the Ethereum network.</p>\n\n<p>As of its creation on March 21, 2024, EIP-7658 is in the Review status, indicating it is being actively discussed and evaluated by the Ethereum community. The proposal is categorized as a Core Standards Track EIP, suggesting it could have significant implications for the Ethereum protocol if implemented. However, as it is still under review, its ultimate fate and potential implementation timeline remain uncertain.</p>\n</article>",
  "EIP-7664": "<article><h1>EIP-7664: Access-Key Opcode</h1>\n\n<p>EIP-7664 proposed adding a new opcode to Ethereum that would allow smart contracts to read inputs declared in transaction access lists. The proposal was authored by Diederik Loerakker, a prominent Ethereum researcher and developer.</p>\n\n<p>The motivation behind this EIP was to provide an alternative to using <code>tx.origin</code> for detecting top-level calls and enforcing static declaration of contract inputs. This would enable more flexible patterns for account abstraction and improve gas efficiency. The opcode would have allowed contracts to reliably enforce static declaration of inputs without relying on problematic patterns.</p>\n\n<p>However, EIP-7664 was ultimately withdrawn by the author. The withdrawal reason states that it addressed a niche use case that could be better implemented through EIP-7702. The current status is \"Withdrawn\", indicating it is no longer being pursued for implementation. While innovative, the proposal was likely deemed too specialized compared to other approaches for achieving similar goals.</p>\n\n</article>",
  "EIP-7666": "<article><h1>EIP-7666: EVM-ify the Identity Precompile</h1>\n\n<p>EIP-7666, proposed by Vitalik Buterin, aims to remove the identity precompile at address 0x04 and replace it with equivalent EVM code. The identity precompile, which simply returns its input data unchanged, was originally introduced to facilitate memory copying when no direct opcode was available for this operation.</p>\n\n<p>This proposal is part of a broader effort to reduce the number of precompiles in Ethereum, many of which see little use but contribute to maintenance costs, potential consensus bugs, and increased development complexity for new Ethereum clients. The introduction of the MCOPY opcode through EIP-5656 has made the identity precompile largely obsolete.</p>\n\n<p>Currently in draft status, EIP-7666 represents a first step in gracefully phasing out underutilized precompiles. If implemented, it would demonstrate a path forward for simplifying Ethereum's architecture while maintaining backward compatibility. This approach could potentially be applied to other rarely used precompiles in the future, streamlining the Ethereum protocol and reducing its attack surface.</p>\n</article>",
  "EIP-7667": "<article><h1>EIP-7667: Raising Gas Costs for Hash Functions</h1>\n\n<p>EIP-7667, authored by Ethereum co-founder Vitalik Buterin, proposes increasing the gas costs for hash function opcodes and precompiles in the Ethereum Virtual Machine (EVM). This proposal aims to address the disparity between CPU-based execution and Zero-Knowledge (ZK) SNARK proving, which has become increasingly important with the rise of ZK-rollups and other Layer 2 scaling solutions.</p>\n\n<p>The motivation behind this EIP stems from the fact that hash functions, while relatively inexpensive to execute on CPUs, are significantly more resource-intensive in ZK-SNARK systems. This discrepancy has led to challenges for Layer 2 protocols, which often resort to centralized workarounds to manage block execution times. By increasing gas costs for hash functions, EIP-7667 seeks to align the EVM's pricing model more closely with the computational demands of ZK-SNARK proving.</p>\n\n<p>As of its creation on March 31, 2024, EIP-7667 remains in Draft status. Its implementation would have far-reaching implications for Ethereum's scalability and security, particularly in preparing for potential future upgrades that could involve ZK-SNARK proofs for Layer 1 block validation.",
  "EIP-7668": "<article><h1>EIP-7668: Remove Bloom Filters</h1>\n\n<p>EIP-7668, proposed by Vitalik Buterin, aims to remove bloom filters from Ethereum's execution blocks. This proposal recognizes that the original purpose of bloom filters—to help dApps efficiently query on-chain events—has been largely superseded by centralized indexing services due to performance limitations.</p>\n\n<p>Historically, bloom filters were introduced to allow decentralized applications to quickly identify blocks and transactions containing relevant logs. However, in practice, this mechanism proved too slow for most use cases. As a result, dApps typically rely on off-chain indexing services rather than querying Ethereum nodes directly.</p>\n\n<p>The proposal suggests replacing bloom filters with more advanced, decentralized protocols using zero-knowledge proofs or incrementally-verifiable computation for log indexing. Currently in Draft status, EIP-7668 represents a significant shift in Ethereum's approach to event querying and data accessibility, potentially streamlining the protocol while encouraging the development of more efficient, decentralized indexing solutions.</p>\n</article>",
  "EIP-7675": "<article><h1>EIP-7675: Retroactively Included EIPs</h1>\n\n<p>EIP-7675, authored by Tim Beiko, introduces a meta-proposal to track Core EIPs that were activated independently of Ethereum hard forks due to their backward-compatible nature. These EIPs typically clarify underspecified protocol rules or address edge cases without requiring network-wide synchronization.</p>\n\n<p>The proposal aims to improve transparency and recordkeeping for changes that don't necessitate traditional hard fork coordination. By listing these retroactively included EIPs, it provides a clear history of protocol refinements that may have otherwise gone unnoticed. This approach allows for more agile protocol improvements while maintaining consensus across the network.</p>\n\n<p>Currently in Draft status, EIP-7675 requires several other EIPs (2681, 3607, 7523, 7610) and is being discussed in the Ethereum Magicians forum. If implemented, it would serve as a valuable reference for developers and researchers tracking Ethereum's evolutionary changes outside of major network upgrades.</p>\n\n</article>",
  "EIP-7676": "<article><h1>EIP-7676: EOF - Prepare for Address Space Extension</h1>\n\n<p>EIP-7676 proposes updating EOF (EVM Object Format) opcodes to handle full 256-bit addresses without trimming, in preparation for potential future address space expansion. Authored by Danno Ferrin, this draft proposal aims to remove the current 160-bit address limitation baked into legacy EVM opcodes.</p>\n\n<p>The proposal stems from discussions around extending Ethereum addresses from 20 to 32 bytes, particularly for potential use cases like state expiry. Currently, EVM opcodes that accept address operands trim off the top 12 bytes before processing. EIP-7676 suggests modifying this behavior in EOF contracts to raise an exception if the top 12 bytes are non-zero, effectively preserving full 256-bit addresses.</p>\n\n<p>While still in draft status, EIP-7676 builds upon previous EOF-related proposals (EIP-3540, EIP-3670, EIP-7069) and addresses a critical roadblock in expanding Ethereum's address space. If implemented, it would enable smoother transitions to larger address formats in the future, while maintaining backwards compatibility through the EOF framework.</p>\n\n</article>",
  "EIP-7684": "<article><h1>EIP-7684: Return Deposits for Distinct Credentials</h1>\n\n<p>EIP-7684, authored by Lion (@dapplion), proposes an automatic withdrawal mechanism for existing validator deposits with distinct execution withdrawal credentials. This proposal aims to address a security vulnerability in staking operations involving separate funding and validating entities.</p>\n\n<p>The primary motivation behind EIP-7684 is to prevent front-running attacks in staking scenarios where the funding entity delegates control of stake operation but needs to maintain ultimate control of funds. The current system allows a potential exploit where the validating entity can front-run a larger deposit with a smaller deposit using their own withdrawal credentials, effectively gaining control over the full stake amount.</p>\n\n<p>As of now, EIP-7684 is in Draft status and is undergoing discussion in the Ethereum community. While it presents a novel solution to a real security concern, its implementation would require careful consideration of potential impacts on existing staking operations and the broader Ethereum ecosystem. The proposal's future adoption will depend on community consensus and further technical review.</p></article>",
  "EIP-7685": "<article><h1>EIP-7685: General Purpose Execution Layer Requests</h1>\n\n<p>EIP-7685, proposed by lightclient in April 2024, aims to create a framework for storing and processing contract-triggered requests in Ethereum. This proposal introduces a mechanism to extend the execution layer (EL) block header and body with fields to store request information, making it accessible to the consensus layer (CL) for processing.</p>\n\n<p>The motivation behind this EIP stems from the growing popularity of smart contract-controlled validators, which require additional EL-triggered behaviors. By allowing these systems to delegate administrative operations to their governing smart contracts, EIP-7685 aims to enhance safety for end users by eliminating the need for intermediaries to ensure certain operations occur.</p>\n\n<p>As of its proposal, EIP-7685 is in the Review status. If implemented, it would introduce a new \"request\" data structure consisting of a request type and opaque byte array. These requests would be stored in a list within each block, ordered by type. The proposal's current form leaves room for future expansion, allowing different request types to be defined and processed according to their specific requirements.</p>\n</article>",
  "EIP-7686": "<article><h1>EIP-7686: Linear EVM Memory Limits</h1>\n\n<p>EIP-7686, proposed by Vitalik Buterin, aims to simplify and linearize Ethereum Virtual Machine (EVM) memory limits. The proposal suggests adding a hard memory limit equal to the gas limit of the current context and adjusting the maximum gas cost of sub-calls based on memory usage. These changes would ensure that a transaction with N gas can use at most N bytes of memory, creating a clear linear bound on total memory consumption.</p>\n\n<p>The motivation behind this proposal is to address the current complexity of memory pricing rules in the EVM, which include quadratic costs for expanding memory and the 63/64 rule for child call gas allocation. These existing rules make it challenging to calculate the maximum possible memory required for a given EVM execution. By simplifying these rules and introducing a hard limit, EIP-7686 aims to make memory usage more predictable and easier to reason about.</p>\n\n<p>As of its creation on April 15, 2024, EIP-7686 is in Draft status. The proposal is still under discussion in the Ethereum community, with ongoing debate about its potential benefits and implementation challenges. If implemented, this change would significantly impact how developers approach memory management in smart contracts and could lead to more efficient gas usage across the Ethereum network.</p></article>",
  "EIP-7688": "<article><h1>EIP-7688: Forward Compatible Consensus Data Structures</h1>\n\n<p>EIP-7688, titled \"Forward compatible consensus data structures,\" proposes a transition of Ethereum's consensus SSZ (Simple Serialize) data structures to use StableContainer, as defined in EIP-7495. This proposal was authored by Etan Kissling and Cayman, and is currently in the Review status.</p>\n\n<p>The primary motivation behind this EIP is to address the issue of merkleization changes in SSZ Container across different Ethereum forks. These changes often require updates to existing verifier implementations to continue processing proofs correctly. By adopting StableContainer, the proposal aims to create more stable and forward-compatible data structures for Ethereum's consensus layer.</p>\n\n<p>As of now, EIP-7688 is still under review and has not been implemented. It builds upon several other EIPs, including EIP-6110, EIP-7002, EIP-7251, EIP-7495, EIP-7549, and EIP-7569. The adoption of this proposal could significantly improve the long-term stability and compatibility of Ethereum's consensus layer data structures, potentially reducing the need for frequent updates to verifier implementations.</p>\n</article>",
  "EIP-7692": "<article><h1>EIP-7692: EVM Object Format (EOFv1) Meta</h1>\n\n<p>EIP-7692 is a meta-proposal that consolidates several Ethereum Improvement Proposals (EIPs) related to the EVM Object Format (EOF) version 1, also known as \"Mega EOF\". This proposal, authored by Alex Beregszaszi, Paweł Bylica, Andrei Maiboroda, Piotr Dobaczewski, and Danno Ferrin, aims to standardize and improve the Ethereum Virtual Machine (EVM) bytecode format.</p>\n\n<p>The EOFv1 proposal includes several key improvements to the EVM, such as code validation (EIP-3670), static relative jumps (EIP-4200), functions (EIP-4750), stack validation (EIP-5450), and data section access instructions (EIP-7480). These changes are designed to enhance the efficiency, security, and functionality of smart contracts on the Ethereum network.</p>\n\n<p>As of its creation in April 2024, EIP-7692 is in the Review status, indicating that it is being actively discussed and evaluated by the Ethereum community. The proposal requires the implementation of 11 other EIPs, showcasing the comprehensive nature of the EOFv1 initiative. If",
  "EIP-7698": "<article><h1>EIP-7698: EOF - Creation transaction</h1>\n\n<p>EIP-7698 proposes allowing creation transactions to deploy EOF (EVM Object Format) contracts by providing the EOF initcontainer concatenated with calldata in the transaction's data field. This enables deploying EOF contracts directly through transactions, rather than only through contract creation instructions.</p>\n\n<p>The proposal was authored by Piotr Dobaczewski, Andrei Maiboroda, Paweł Bylica, and Alex Beregszaszi in April 2024. It builds on EIP-3540 which introduced the EOF format. The motivation is to provide a way to get the first EOF contracts deployed on-chain, since legacy creation instructions cannot deploy EOF code.</p>\n\n<p>As of its proposal, EIP-7698 was in Review status. If implemented, it would allow existing deployment tooling to deploy EOF contracts with minimal changes, as the mechanism for providing constructor arguments remains the same as for legacy contracts. This provides an important bridge for adopting the new EOF format.</p>\n</article>",
  "EIP-7701": "<article><h1>EIP-7701: Native Account Abstraction with EOF</h1>\n\n<p>EIP-7701 is a proposal for implementing Native Account Abstraction (AA) in Ethereum, building upon the concepts introduced in RIP-7560 but with a key difference in how it separates validation and execution code for Smart Contract Accounts. This proposal was authored by notable Ethereum figures including Vitalik Buterin and Yoav Weiss, demonstrating its significance in the ecosystem.</p>\n\n<p>The primary motivation behind EIP-7701 is to address a fundamental challenge in Native AA: distinguishing between validation and execution code sections in Smart Contract Accounts. Unlike RIP-7560, which relies on Solidity method selectors for this separation, EIP-7701 leverages the EVM Object Format (EOF) to achieve this distinction. This approach aims to avoid \"leaking\" programming language-specific concepts into the core Ethereum protocol design.</p>\n\n<p>As of its creation in May 2024, EIP-7701 is in Draft status. It requires EIP-3540 (EOF - EVM Object Format v1) to be implemented. The proposal's reliance on EOF suggests a more protocol-native approach to AA, potentially offering a cleaner and more future-proof solution. However, its adoption and implementation would depend on the broader acceptance of EOF",
  "EIP-7702": "<article><h1>EIP-7702: Set EOA Account Code</h1>\n\n<p>EIP-7702, proposed by Vitalik Buterin, Sam Wilson, Ansgar Dietrichs, and Matt Garnett in May 2023, aims to introduce a new transaction type that allows Externally Owned Accounts (EOAs) to temporarily set account code during execution. This proposal addresses the growing interest in enhancing EOA functionality without fundamentally changing their nature.</p>\n\n<p>The proposal's main feature is the ability to add a list of authorization tuples to a transaction, which would write a delegation designator to the signing account's code. This mechanism enables several key improvements, including transaction batching, sponsorship, and account abstraction features. These enhancements could significantly improve user experience and security in various blockchain applications, such as decentralized exchanges (DEXes) and smart contract wallets.</p>\n\n<p>Currently, EIP-7702 is in the Review status, indicating ongoing discussions and potential refinements. While it offers promising advancements for EOA functionality, it's important to note that this proposal is still under consideration and may evolve further before potential implementation. The Ethereum community continues to evaluate its implications and potential integration with other improvement proposals in the ecosystem.</p>\n</article>",
  "EIP-7703": "<article><h1>EIP-7703: Increase Calldata Cost</h1>\n\n<p>EIP-7703, proposed by William Morriss in May 2024, aims to increase the calldata cost in Ethereum to decrease the maximum block size. This proposal is currently in Draft status and falls under the Core category of Ethereum Improvement Proposals.</p>\n\n<p>The primary motivation behind EIP-7703 is to allow for a higher block gas limit by reducing the maximum possible block size. Larger blocks take longer to propagate through the network, which constrains the block gas limit. By tripling the gas cost of calldata, the proposal seeks to reduce the maximum block size by a factor of three, potentially enabling safer increases to the block gas limit.</p>\n\n<p>The proposal specifies increasing G_CALLDATAZERO from 4 to 12 and G_CALLDATANONZERO from 16 to 48. While this change could cause some transactions to revert due to increased gas costs, the proposal suggests that eth_estimateGas could be calculated using the new parameters ahead of activation to avoid out-of-gas reverts. As of now, no security issues have been identified with this proposal, but it remains in the discussion phase and has not been implemented.</p>\n</article>",
  "EIP-7705": "<article><h1>EIP-7705: NONREENTRANT and REENTRANT opcodes</h1>\n\n<p>EIP-7705, proposed by Charles Cooper in May 2023, introduces two new opcodes, NONREENTRANT and REENTRANT, to help prevent reentrancy attacks in Ethereum smart contracts. This proposal aims to provide a more efficient and cost-effective way to implement reentrancy protection at the EVM level, addressing a significant security concern in the blockchain ecosystem.</p>\n\n<p>The proposal is motivated by the high cost of implementing reentrancy protection in application code, which often leads developers to forgo such safeguards. While improvements like EIP-1153 (transient storage) have reduced these costs, they are still not low enough to be universally adopted. EIP-7705 seeks to make reentrancy protection a \"no-brainer\" by introducing native opcodes that are cheaper to use.</p>\n\n<p>As of now, EIP-7705 is in Draft status, indicating it is still under discussion and development. The Ethereum community is actively debating its merits and potential implementation details through the Ethereum Magicians forum. If implemented, this proposal could significantly enhance the security of smart contracts on Ethereum and EVM-compatible chains, potentially preventing future incidents similar to the infamous DAO hack.</p>\n</article>",
  "EIP-7706": "<article><h1>EIP-7706: Separate Gas Type for Calldata</h1>\n\n<p>EIP-7706, proposed by Vitalik Buterin in May 2024, aims to create a separate basefee and gas limit for calldata in Ethereum transactions. This proposal builds upon the concepts introduced in EIP-1559 (fee market change) and EIP-4844 (blob transactions), applying similar principles to calldata gas management.</p>\n\n<p>The primary motivation behind EIP-7706 is to address the inefficiency in block size utilization. While the theoretical maximum block size (excluding blobs) is around 1.87 MB, the average block size is only about 100 kB. This proposal seeks to allow for more flexible calldata usage without increasing the maximum block size, which is a concern for network scalability and data availability.</p>\n\n<p>Currently, EIP-7706 is in Draft status. If implemented, it would introduce a new transaction type with separate fee parameters for execution gas, blob gas, and calldata gas. This change could potentially enable more efficient use of block space and improve the overall flexibility of the Ethereum network. However, as with any significant change to the Ethereum protocol, thorough testing and community consensus would be required before implementation.</p>\n</article>",
  "EIP-7707": "<article><h1>EIP-7707: Incentivize Access List Provisioning</h1>\n\n<p>EIP-7707 aims to improve Ethereum transaction efficiency by adjusting gas costs to encourage more widespread use of access lists. Proposed by Ben Adams and Oleg Iakushkin in May 2024, this draft EIP builds upon EIP-2930, which introduced access lists as a way to pre-warm storage slots and reduce gas costs.</p>\n\n<p>The key change in EIP-7707 is reducing the gas cost for including items in access lists. Currently, the economics rarely favor using access lists due to high penalties for unused entries and the large number of storage keys needed to break even. By lowering these costs, the proposal seeks to make access lists more appealing for typical transactions, potentially leading to more efficient execution across the Ethereum network.</p>\n\n<p>As of now, EIP-7707 remains in draft status. Its implementation could significantly impact transaction optimization strategies and gas usage patterns on Ethereum. However, it will need to progress through further review and testing before potentially being adopted. The proposal's success in incentivizing access list usage could lead to improved overall network performance and reduced transaction costs for users.</p>\n</article>",
  "EIP-7708": "<article><h1>EIP-7708: ETH Transfers Emit a Log</h1>\n\n<p>EIP-7708, proposed by Ethereum co-founder Vitalik Buterin and Peter Davies, aims to standardize logging for all ETH transfers on the Ethereum network. The proposal suggests emitting a log for every ETH transfer, including transactions, CALL operations, and SELFDESTRUCT operations. This would create a unified mechanism for tracking ETH movements, addressing a long-standing inconsistency between ETH and ERC-20 token transfers.</p>\n\n<p>The motivation behind this proposal stems from historical challenges in tracking ETH transfers, particularly those originating from smart contract wallets. Unlike ERC-20 tokens, which emit logs for transfers, ETH transfers have lacked a standardized logging mechanism. This has led to issues such as exchanges struggling to support deposits from smart contract wallets efficiently. By implementing EIP-7708, all ETH transfers would emit a log with a specific format, making it easier for applications to track and verify ETH movements consistently.</p>\n\n<p>As of its creation in May 2024, EIP-7708 remains in Draft status. The proposal's implementation would involve adding a LOG3-type log emission for every nonzero-value ETH transfer, with specific topics including a magic number, sender address, and recipient address. While this change would increase",
  "EIP-7709": "<article><h1>EIP-7709: Read BLOCKHASH from Storage and Update Cost</h1>\n\n<p>EIP-7709, proposed by a team of prominent Ethereum developers including Vitalik Buterin and Tomasz Stanczak, aims to modify the BLOCKHASH opcode to read from system contract storage instead of assuming client knowledge of previous blocks. This change is crucial for enabling stateless execution in the context of Verkle trees (EIP-6800).</p>\n\n<p>The proposal builds upon EIP-2935, which introduced a system contract for storing block hashes. By updating the BLOCKHASH opcode to fetch data from this storage, EIP-7709 allows Verkle blocks to include a storage access witness, facilitating stateless execution. Additionally, the proposal adjusts the gas cost of the BLOCKHASH operation to reflect the new storage access mechanism.</p>\n\n<p>Currently in Draft status, EIP-7709 is a Standards Track proposal in the Core category. If implemented, it would significantly contribute to Ethereum's scalability efforts by supporting stateless clients. The proposal's authors have provided a detailed specification, including parameters like FORK_TIMESTAMP and HISTORY_STORAGE_ADDRESS, which are yet to be determined.</p></article>",
  "EIP-7713": "<article><h1>EIP-7713: Box Type for EIP-712 Messages</h1>\n\n<p>EIP-7713 proposes adding a new \"box\" type to EIP-712 messages, which allows for arbitrary struct types to be included in signed messages while maintaining type safety and user transparency. Authored by Francisco Giordano, this proposal aims to enhance the flexibility and extensibility of EIP-712 signatures, which have become a crucial tool for off-chain authorization in Ethereum applications.</p>\n\n<p>The motivation behind EIP-7713 is to allow for more complex and varied message structures within the EIP-712 framework. By introducing the \"box\" type, developers can include parameters of any struct type in their messages, while still enabling wallets to fully inspect and display these values to users before signing. This maintains the security and transparency that EIP-712 provides, while opening up new possibilities for message composition.</p>\n\n<p>Currently, EIP-7713 is in Draft status, indicating it is still under discussion and development. The Ethereum community is likely evaluating its potential impact and implementation details through the designated discussion forum. If adopted, this proposal could significantly expand the capabilities of EIP-712 messages, potentially leading to more sophisticated off-chain authorization schemes and improved user experiences in decentralized applications.</p>\n</article>",
  "EIP-7716": "<article><h1>EIP-7716: Anti-correlation Attestation Penalties</h1>\n\n<p>EIP-7716 proposes adjusting penalties for missed attestations in Ethereum's proof-of-stake consensus mechanism. Authored by dapplion, Toni Wahrstätter, and Vitalik Buterin, this proposal aims to incentivize validator diversification and improve network fault tolerance.</p>\n\n<p>The core idea is to scale attestation penalties based on the correlation of missed attestations across validators. Validators with highly correlated misses (suggesting shared infrastructure or single points of failure) would face higher penalties, while those with more diversified setups would incur lower penalties. This approach seeks to encourage operators to use multiple clients, geographic locations, and service providers, enhancing the overall robustness of the Ethereum network.</p>\n\n<p>As of its creation in May 2024, EIP-7716 is in Draft status. While it addresses important concerns about validator centralization and network resilience, its implementation would require careful consideration of potential side effects and practical challenges in measuring correlation accurately. The proposal is still under discussion in the Ethereum community, with ongoing debate about its effectiveness and potential alternatives for achieving similar goals.</p>\n</article>",
  "EIP-7723": "<article><h1>EIP-7723: Network Upgrade Inclusion Stages</h1>\n\n<p>EIP-7723, authored by Tim Beiko, proposes a formal process for tracking the progress of Core EIPs through various stages before their activation in Ethereum network upgrades. This meta-proposal aims to bring clarity and structure to the often complex process of implementing changes to the Ethereum protocol.</p>\n\n<p>The EIP defines four key stages: \"Proposed for Inclusion\", \"Considered for Inclusion\", \"Scheduled for Inclusion\", and \"Included\". These stages provide a clear pathway for EIPs to progress from community proposals to final implementation. The proposal also outlines guidelines for moving EIPs between stages, ensuring a transparent and collaborative process for network upgrades.</p>\n\n<p>Currently in Draft status, EIP-7723 addresses a crucial need in the Ethereum ecosystem for a standardized approach to managing protocol changes. If implemented, it would significantly improve the coordination and communication around network upgrades, benefiting both developers and the wider Ethereum community. The proposal is still under discussion, with ongoing debate in the Ethereum Magicians forum about its potential impact and implementation details.</p>\n</article>",
  "EIP-7727": "<article><h1>EIP-7727: EVM Transaction Bundles</h1>\n<p>EIP-7727, proposed by Lily Johnson in June 2024, introduces a mechanism for creating transaction bundles within the Ethereum Virtual Machine (EVM). This proposal aims to enable smart contracts and transactions to delegate their local sequencing rights to off-chain entities, creating a system similar to but less powerful than the Proposer-Builder Separation (PBS) bundles used by builders and searchers.</p>\n<p>The proposal introduces two new EIP-2718 transaction types and a new opcode. One transaction type extends normal transactions to specify who can include it in a bundle and an optional valid block number. The other is a 'meta' transaction that orders other transactions without executing itself. The new opcode reveals the entity that placed a transaction in a bundle.</p>\n<p>As of its creation, EIP-7727 is in Draft status. It builds upon EIP-2718 (Typed Transaction Envelope) and addresses concerns about block builders' control over transaction sequencing. While it offers a novel approach to transaction ordering, its implementation and potential impacts on the Ethereum ecosystem are still under discussion in the Ethereum community.</p></article>",
  "EIP-7732": "<article><h1>EIP-7732: Enshrined Proposer-Builder Separation</h1>\n\n<p>EIP-7732, titled \"Enshrined Proposer-Builder Separation\" (EPBS), is a significant proposal aimed at improving Ethereum's block production process. Authored by a team including Francesco D'Amato, Barnabé Monnot, Michael Neuder, Potuz, and Terence Tsao, this proposal seeks to decouple the execution validation from the consensus validation in Ethereum blocks, both logically and temporally.</p>\n\n<p>The core idea of EPBS is to introduce a new optional role for Ethereum validators called \"builders\" and a new duty of submitting \"payload timeliness attestations.\" The proposal removes the `ExecutionPayload` field from the `BeaconBlockBody` and replaces it with a signed commitment from a builder to reveal the corresponding execution payload later. This commitment includes the blockhash of the execution block and a value to be paid to the beacon block proposer.</p>\n\n<p>Currently, EIP-7732 is in Draft status. It represents a significant architectural change to Ethereum's consensus layer and has sparked considerable discussion in the Ethereum community. The proposal aims to address concerns about centralization in block production and potentially improve the efficiency of the network. However, its implementation would require careful",
  "EIP-7736": "<article><h1>EIP-7736: Leaf-level State Expiry in Verkle Trees</h1>\n\n<p>EIP-7736, proposed by Guillaume Ballet and Wei Han Ng in July 2023, introduces a simple state expiry scheme for Ethereum using Verkle trees. The proposal aims to address the growing state size issue by allowing the expiration and deletion of leaf-level nodes in the Verkle tree structure, while leaving the rest of the tree intact.</p>\n\n<p>The key innovation is adding an \"update epoch\" to Verkle tree extension nodes. When an epoch expires, the associated extension node and its suffix nodes can be deleted. To reactivate expired state, a new transaction type with a Verkle proof is introduced, which covers the costs of reactivating nodes and updating the epoch counter. This approach offers a simpler alternative to previous, more complex state expiry proposals that required significant changes to Ethereum's structure.</p>\n\n<p>Currently in Draft status, EIP-7736 builds upon EIP-6800 (Verkle Trees) and aims to provide a more straightforward implementation of state expiry. While not exhaustive, this proposal seeks to balance the need for state management with minimal disruption to user and developer experience. The Ethereum community continues to discuss and refine this proposal through the Ethereum Magicians forum.</p>\n</article>",
  "EIP-7742": "<article><h1>EIP-7742: Uncouple blob count between CL and EL</h1>\n\n<p>EIP-7742 proposes updates to blob maximum and target verification from EIP-4844, which introduced data blobs to Ethereum to support layer 2 scalability. The key change is removing blob maximum verification from the execution layer (EL) and having the EL receive the target dynamically from the consensus layer (CL).</p>\n\n<p>Authored by Alex Stokes, this proposal aims to eliminate redundant verification and provide more flexibility in managing blob parameters. It decouples the development and deployment of CL and EL, allowing for easier adjustments to blob target values. The proposal is currently in Draft status and requires EIP-4844 as a prerequisite.</p>\n\n<p>While EIP-7742 is still under discussion, it represents an effort to optimize and streamline the blob-related processes introduced by EIP-4844. By shifting more control to the consensus layer, it potentially enables more agile responses to network needs without compromising security. The proposal's implementation timeline (FORK_TIMESTAMP) is yet to be determined.</p></article>",
  "EIP-777": "<article><h1>EIP-777: A New Token Standard for Ethereum</h1>\n\n<p>EIP-777, proposed by Jacques Dafflon, Jordi Baylina, and Thomas Shababi in 2017, aimed to improve upon the widely-used ERC-20 token standard. It introduced features like hooks for better control over token transfers, operator functionality for authorized third-party transfers, and backward compatibility with ERC-20. The proposal sought to address limitations in ERC-20, such as the lack of transaction handling mechanisms and the potential for token loss when sent to contracts not designed to receive them.</p>\n\n<p>Despite initial enthusiasm and adoption by some projects, EIP-777 faced challenges. Security concerns were raised, particularly regarding potential vulnerabilities in its hook system that could lead to reentrancy attacks. These issues led to debates within the Ethereum community about the proposal's safety and practicality. As a result, adoption remained limited, with many developers opting to stick with the battle-tested ERC-20 standard or explore other alternatives.</p>\n\n<p>Currently, EIP-777 has been moved to the Ethereum ERCs repository, indicating a shift in its status. While it's still recognized, it's generally not recommended for new implementations due to the security concerns and the emergence of other token standards. Developers today are more likely to use ERC-20 for simple",
  "EIP-778": "<article><h1>EIP-778: Ethereum Node Records (ENR)</h1>\n\n<p>EIP-778, authored by Felix Lange, introduced Ethereum Node Records (ENR) as a flexible format for storing and sharing node connectivity information in Ethereum's peer-to-peer network. This proposal aimed to address limitations in the existing node discovery protocol by allowing for more diverse and extensible data to be shared between nodes.</p>\n\n<p>The ENR format allows nodes to include various types of information beyond just IP addresses and port numbers, such as supported protocols, public keys for different cryptographic schemes, and other metadata. This flexibility enables better support for protocol upgrades and improved cryptographic agility. The proposal also introduced a sequence number and signature mechanism to ensure the authenticity and freshness of node records.</p>\n\n<p>EIP-778 was finalized and has been widely adopted in Ethereum client implementations. It has become a fundamental part of Ethereum's networking layer, enabling more robust and feature-rich peer discovery and connectivity. The ENR format has also been used in other blockchain projects and has influenced subsequent proposals for improving Ethereum's peer-to-peer networking capabilities.</p></article>",
  "EIP-779": "<article><h1>EIP-779: DAO Fork</h1>\n\n<p>EIP-779, titled \"Hardfork Meta: DAO Fork\", was a controversial and unique proposal in Ethereum's history. Authored by Casey Detrio, it documented the changes implemented in the hard fork known as the \"DAO Fork\". Unlike typical protocol upgrades, this fork didn't alter Ethereum's core functionality. Instead, it performed an \"irregular state change\" to address the infamous DAO hack of 2016.</p>\n\n<p>The DAO Fork transferred ether balances from a list of compromised \"child DAO\" contracts to a new \"WithdrawDAO\" contract. This action was taken to recover funds stolen in the DAO hack, which had exploited a vulnerability in The DAO's smart contract. The fork was activated at block 1,920,000 on the Ethereum mainnet, affecting a predefined list of accounts encoded at block 1,880,000.</p>\n\n<p>This proposal remains a significant and contentious moment in Ethereum's history, leading to the creation of Ethereum Classic by those who opposed the fork. While the DAO Fork successfully recovered the stolen funds, it raised important questions about immutability and governance in blockchain systems. Today, EIP-779 serves primarily as a historical document, with its implementation complete and its effects still resonating in discussions about blockchain ethics and intervention",
  "EIP-8": "<article><h1>EIP-8: devp2p Forward Compatibility Requirements for Homestead</h1>\n\n<p>EIP-8 was proposed by Felix Lange in December 2015 to improve forward compatibility of several Ethereum networking protocols. The proposal introduced more lenient parsing rules for the devp2p Wire Protocol, RLPx Discovery Protocol, and RLPx TCP Transport Protocol. This allows clients to be \"liberal in what they accept\" from other nodes, improving interoperability as the protocols evolve.</p>\n\n<p>For the devp2p Wire Protocol, EIP-8 specified that clients should ignore the version number in hello packets and any extra list elements. The RLPx Discovery Protocol was updated to ignore ping packet versions, additional list elements, and data after the first RLP value. The RLPx TCP Transport protocol was modified to accept a new encrypted handshake packet format.</p>\n\n<p>EIP-8 was implemented in major Ethereum clients like geth and Parity in early 2016 as part of the Homestead hard fork. Its changes helped enable smoother protocol upgrades and improved compatibility between different client implementations. The proposal is considered final and remains an important part of Ethereum's networking layer today.</p></article>",
  "EIP-801": "<article><h1>EIP-801: Canary Standard</h1>\n<p>EIP-801, known as the Canary Standard, was proposed by Stefan George in 2017. Its primary purpose was to establish a standardized method for Ethereum smart contracts to signal their operational status, particularly in emergency situations. The proposal aimed to provide a simple, gas-efficient way for contracts to communicate whether they are functioning normally or if they've encountered critical issues.</p>\n\n<p>The core of EIP-801 was a single function, <code>isActive()</code>, which would return a boolean value indicating the contract's status. This allowed other contracts, dapps, or interfaces to quickly check if a contract was operating as expected. The proposal gained some traction in the Ethereum community, particularly among developers concerned with contract security and transparency.</p>\n\n<p>However, EIP-801 has since been moved to the Ethereum ERCs repository, indicating a shift in its categorization. While the Canary Standard introduced an important concept for contract health monitoring, it hasn't seen widespread adoption. Today, more comprehensive standards and practices for contract security and status reporting have emerged, potentially superseding the need for this specific proposal. The current status of EIP-801 is \"Moved,\" reflecting its transfer to a different repository rather than active development within the main EIPs process.</p>\n</article>",
  "EIP-820": "<article><h1>EIP-820: Pseudo-introspection Registry Contract</h1>\n\n<p>EIP-820, proposed by Jordi Baylina, Jacques Dafflon, and Thomas Shababi in January 2018, aimed to create a standard for implementing a registry of interfaces for smart contracts. The proposal sought to address limitations in ERC-165 by allowing contracts to publish which interfaces they support and for other contracts or external accounts to query this information.</p>\n\n<p>The proposal gained traction in the Ethereum community due to its potential to enhance contract interoperability and simplify the process of checking interface support. It was designed to be backwards compatible with ERC-165 and introduced the concept of a central registry contract to manage interface implementations.</p>\n\n<p>As of now, EIP-820 has been moved to the Ethereum ERCs repository and is no longer active as an EIP. It has been superseded by <a href=\"https://eips.ethereum.org/EIPS/eip-1820\">EIP-1820</a>, which builds upon the ideas of EIP-820 and provides a more refined implementation of the pseudo-introspection registry concept.</p>\n</article>",
  "EIP-823": "<article><h1>EIP-823: Token Exchange Standard</h1>\n\n<p>EIP-823, proposed by Kashish Khullar in 2018, aimed to standardize token exchange interfaces on the Ethereum blockchain. The proposal sought to create a common framework for decentralized exchanges (DEXs) to interact with various token types, including ERC-20 and ERC-721 tokens. By establishing a unified interface, EIP-823 intended to improve interoperability and reduce fragmentation in the nascent DEX ecosystem.</p>\n\n<p>While EIP-823 garnered initial interest from the community, it did not gain widespread adoption. The proposal's development coincided with the emergence of more specialized DEX protocols, such as Uniswap's Automated Market Maker (AMM) model, which addressed specific use cases more effectively. As a result, EIP-823 was eventually moved to the Ethereum ERCs repository, indicating a shift in focus away from its original goals.</p>\n\n<p>Currently, EIP-823 is considered \"Moved\" and is not actively pursued for implementation. The DEX landscape has evolved significantly since its proposal, with protocols like Uniswap, SushiSwap, and 0x gaining prominence. These platforms have developed their own specialized interfaces and mechanisms for token exchange, reducing the need for a universal standard as originally envisioned by",
  "EIP-831": "<article><h1>EIP-831: URI Format for Ethereum</h1>\n\n<p>EIP-831, proposed by ligi in May 2018, aimed to standardize a URI format for Ethereum. The purpose was to create a universal way to represent Ethereum addresses and function calls in a string format, making it easier for wallets and dApps to interact. This proposal was inspired by the Bitcoin URI scheme (BIP21) and sought to extend its functionality for the Ethereum ecosystem.</p>\n\n<p>The proposal gained traction in the Ethereum community due to its potential to simplify user interactions and improve interoperability between different Ethereum applications. It was particularly relevant for mobile wallets and QR code implementations. However, as the Ethereum ecosystem evolved, other proposals and standards emerged that addressed similar concerns in more comprehensive ways.</p>\n\n<p>Currently, EIP-831 has been moved to the Ethereum ERCs repository, indicating that it is no longer actively pursued as an Ethereum Improvement Proposal. While the concept remains valuable, newer standards like EIP-681 (URL Format for Transaction Requests) have largely superseded it by offering more detailed specifications for encoding Ethereum interactions in URL format.</p>\n</article>",
  "EIP-858": "<article><h1>EIP-858: Reduce Block Reward and Delay Difficulty Bomb</h1>\n\n<p>EIP-858, proposed by Carl Larson in January 2018, aimed to address two critical issues in Ethereum: high energy consumption due to mining and the impending difficulty bomb. The proposal suggested reducing the block reward from 3 ETH to 1 ETH and delaying the difficulty bomb to mitigate these concerns.</p>\n\n<p>The primary motivation behind this proposal was the significant environmental impact of Ethereum's proof-of-work mining. At the time, Ethereum's hashrate corresponded to approximately 1 TW of power usage and 8.8 TWh of yearly energy consumption. By reducing the block reward, the proposal aimed to decrease the financial incentive for mining, potentially lowering the network's overall energy consumption.</p>\n\n<p>Despite its noble intentions, EIP-858 did not gain widespread adoption and is currently listed as \"Stagnant\" in the EIP repository. The Ethereum community ultimately chose different approaches to address these issues, such as the implementation of EIP-1234 (Constantinople/St. Petersburg upgrade) which reduced block rewards to 2 ETH, and the eventual transition to Proof-of-Stake with the Merge in September 2022. These developments have largely superseded the need for EIP-858's",
  "EIP-86": "<article><h1>EIP-86: Abstraction of Transaction Origin and Signature</h1>\n\n<p>EIP-86, proposed by Ethereum co-founder Vitalik Buterin in February 2017, aimed to abstract signature verification and nonce checking from the core protocol. This proposal would allow users to create \"account contracts\" that perform custom signature and nonce checks, rather than relying on the hard-coded mechanism in transaction processing.</p>\n\n<p>The proposal introduced several key changes, including a new transaction type with a null sender, a new CREATE2 opcode for deterministic contract creation, and modifications to contract creation rules. These changes were intended to enhance Ethereum's flexibility and enable more complex account management schemes, potentially improving security and usability.</p>\n\n<p>Although EIP-86 was initially planned for the Metropolis hard fork, it was not implemented and is currently in a \"Stagnant\" status. The core ideas behind this proposal have influenced subsequent Ethereum improvements, particularly in the realm of account abstraction. While EIP-86 itself is unlikely to be implemented in its original form, its concepts continue to shape discussions around enhancing Ethereum's account model and transaction processing.</p>\n</article>",
  "EIP-867": "<article><h1>EIP-867: Standardized Ethereum Recovery Proposals</h1>\n\n<p>EIP-867 was proposed in February 2018 by Dan Phifer, James Levy, and Reuben Youngblom to create a standardized format for Ethereum Recovery Proposals (ERPs). The goal was to establish a process for recovering lost funds in certain situations where affected parties agreed on the outcome. This controversial proposal aimed to address issues like smart contract bugs or user errors that resulted in inaccessible funds.</p>\n\n<p>The EIP faced significant pushback from the Ethereum community, with concerns about setting a dangerous precedent for blockchain immutability and centralized decision-making. Critics argued it could undermine Ethereum's core principles and open the door to contentious recovery attempts. As a result, EIP-867 never gained widespread support and its status remains \"Stagnant\" in the EIP process.</p>\n\n<p>While EIP-867 itself was not implemented, the discussion it sparked highlighted the ongoing tension between immutability and error recovery in blockchain systems. Today, most recovery efforts focus on improving smart contract security and user education rather than retroactive fixes. The proposal's legacy lies in prompting important debates about governance and the philosophical underpinnings of decentralized networks.</p>\n\n</article>",
  "EIP-868": "<article><h1>EIP-868: Node Discovery v4 ENR Extension</h1>\n\n<p>EIP-868 was proposed by Felix Lange in February 2018 to extend the Ethereum Node Discovery Protocol v4 with support for Ethereum Node Records (ENR). The proposal aimed to enable authoritative resolution of ENRs within the existing discovery network, bridging current and future discovery mechanisms.</p>\n\n<p>The EIP specifies modifications to the existing ping and pong packets to include an ENR sequence number field. It also defines a new ENRRequest packet type to explicitly request a node's latest ENR. This allows nodes to efficiently retrieve up-to-date node records without relying solely on DNS or other external systems.</p>\n\n<p>EIP-868 reached Final status and has been implemented in major Ethereum clients. It laid important groundwork for transitioning to more robust node discovery and networking protocols like discv5. The proposal demonstrates the Ethereum network's ongoing evolution to improve scalability, security and efficiency of peer-to-peer communications.</p>\n\n</article>",
  "EIP-875": "<article><h1>EIP-875: Non-Fungible Token Standard</h1>\n\n<p>EIP-875, proposed by Weiwu Zhang, James Sangalli, and Caleb Yeoh in 2018, aimed to establish a standard for non-fungible tokens (NFTs) on the Ethereum blockchain. The proposal focused on creating a more gas-efficient method for transferring multiple NFTs in a single transaction, addressing limitations in existing standards like ERC-721.</p>\n\n<p>The proposal introduced the concept of \"tickets\" as a representation of NFTs, allowing for batch transfers and improved scalability. While EIP-875 gained some attention in the Ethereum community, it did not achieve widespread adoption. Instead, ERC-721 remained the dominant standard for NFTs, with subsequent improvements like ERC-1155 addressing similar concerns about efficiency and batch transfers.</p>\n\n<p>Currently, EIP-875 has been moved to the Ethereum ERCs repository, indicating that it is no longer actively pursued as an Ethereum Improvement Proposal. The crypto community has largely focused on other standards and improvements for NFTs, making EIP-875 less relevant in today's ecosystem.</p></article>",
  "EIP-884": "<article><h1>EIP-884: DGCL Token</h1>\n\n<p>EIP-884, also known as the DGCL (Delaware General Corporation Law) Token, was proposed by Dave Sag in 2018. The purpose of this ERC was to create a standard for tokenized shares of Delaware corporations, allowing for compliant on-chain representation of stock ownership. It aimed to bridge the gap between traditional corporate structures and blockchain technology.</p>\n\n<p>The proposal introduced features like identity verification, transfer restrictions, and the ability to forcibly transfer tokens, addressing regulatory requirements for stock issuance. While initially gaining attention for its potential to revolutionize corporate governance, EIP-884 faced challenges in widespread adoption due to the complexity of integrating with existing legal frameworks.</p>\n\n<p>As of now, EIP-884 has been moved to the Ethereum ERCs repository, indicating a shift in its status. While the concept remains relevant, the cryptocurrency space has since seen the emergence of more generalized security token standards like ERC-1400, which have gained broader traction. The current applicability of EIP-884 is limited, with newer proposals better addressing the evolving regulatory landscape of tokenized securities.</p>\n</article>",
  "EIP-897": "<article><h1>EIP-897: ERC DelegateProxy</h1>\n\n<p>EIP-897, also known as ERC DelegateProxy, was proposed to standardize a mechanism for upgradeable smart contracts on the Ethereum blockchain. The proposal aimed to address the immutability challenge of deployed contracts by introducing a proxy pattern that would allow for contract logic upgrades without changing the contract's address or stored data.</p>\n\n<p>The proposal was originally authored by Jorge Izquierdo and Manuel Araoz in February 2018. It gained traction in the Ethereum community as a potential solution for contract upgradeability, which is crucial for long-term maintenance and improvement of decentralized applications. However, EIP-897 has since been moved to the Ethereum ERCs repository, indicating a shift in its development and standardization process.</p>\n\n<p>While EIP-897 provided a foundation for proxy patterns, it has been largely superseded by more advanced proposals like EIP-1822 (Universal Upgradeable Proxy Standard) and EIP-1967 (Standard Proxy Storage Slots). These later proposals offer more comprehensive and flexible approaches to contract upgradeability, addressing some of the limitations and potential security concerns of the original ERC DelegateProxy concept.</p>\n</article>",
  "EIP-900": "<article><h1>EIP-900: Simple Staking Interface</h1>\n\n<p>EIP-900, also known as the Simple Staking Interface, was proposed by Dean Eigenmann and Jorge Izquierdo in March 2018. This ERC aimed to standardize a basic interface for staking contracts in Ethereum, providing a common set of functions for depositing, withdrawing, and checking balances of staked tokens. The proposal was motivated by the growing popularity of staking mechanisms in various Ethereum projects and the need for a unified approach.</p>\n\n<p>While EIP-900 gained some initial traction and discussion within the Ethereum community, it did not achieve widespread adoption. The proposal remained in draft status for an extended period, reflecting the ongoing evolution of staking concepts and implementations in the ecosystem. As the Ethereum network itself moved towards Proof-of-Stake with ETH 2.0, more specialized staking standards and implementations emerged.</p>\n\n<p>Currently, EIP-900 has been moved to the Ethereum ERCs repository, indicating that it is no longer actively considered for implementation as an Ethereum Improvement Proposal. The relocation suggests that while the concept of a simple staking interface remains relevant, the specific implementation proposed in EIP-900 may have been superseded by more recent developments or alternative approaches in the rapidly evolving field of cryptocurrency staking.</p>\n</",
  "EIP-902": "<article><h1>EIP-902: Token Validation</h1>\n<p>EIP-902, proposed by Julien Marchand and originally submitted in February 2018, aimed to establish a standard interface for token validation in Ethereum smart contracts. The proposal sought to address the need for a consistent method to verify the validity of tokens, particularly in scenarios involving token transfers or interactions between different contracts.</p>\n<p>The core of EIP-902 was the introduction of a <code>tokenValidation()</code> function that would return a boolean value indicating whether a token was valid or not. This proposal was particularly relevant in the context of increasing token complexity and the emergence of various token standards beyond ERC-20. However, EIP-902 did not gain widespread adoption and has since been moved to the Ethereum ERCs repository.</p>\n<p>As of now, EIP-902 is considered \"Moved\" and is no longer actively pursued within the main EIPs process. While the concept of token validation remains important, the Ethereum community has explored other approaches and standards to address similar concerns. Developers looking into token validation mechanisms should consider more recent proposals or established practices in the ecosystem.</p>\n</article>",
  "EIP-908": "<article><h1>EIP-908: Reward clients for a sustainable network</h1>\n\n<p>EIP-908, proposed in 2018 by James Ray and Micah Zoltu, aimed to incentivize running full nodes and clients to maintain a sustainable Ethereum network. The proposal recognized that while miners (and future validators) were incentivized, there was a lack of rewards for nodes relaying blocks and storing data.</p>\n\n<p>The proposal generated significant discussion but was ultimately withdrawn. It highlighted important issues around network sustainability, but alternative solutions emerged. Projects like Pocket Network, Rocket Pool, and VIPnode began developing separate mechanisms to incentivize network participation without requiring changes to the Ethereum protocol itself.</p>\n\n<p>While the original full node reward concept was deprecated, the core idea of incentivizing critical network functions remains relevant. The proposal helped spark ongoing discussions about how to ensure long-term network health and resource allocation in decentralized systems. Its withdrawal reflects the Ethereum community's preference for modular, external solutions rather than protocol-level changes for these types of incentives.</p>\n</article>",
  "EIP-918": "<article><h1>EIP-918: Mineable Token Standard</h1>\n\n<p>EIP-918, also known as the Mineable Token Standard, was proposed by Jay Logelin, Infernal_toast, Michael Seiler, and Brandon Grill in 2018. The proposal aimed to standardize mineable tokens on the Ethereum blockchain, similar to how Bitcoin operates. It introduced a set of functions and interfaces that allowed tokens to be minted through a Proof of Work (PoW) mining process, rather than being pre-mined or distributed through an ICO.</p>\n\n<p>The proposal gained significant attention in the Ethereum community, as it offered a novel way to distribute tokens fairly and create scarcity. It was implemented in several projects, most notably 0xBitcoin, which became the first mineable ERC20 token. However, despite initial enthusiasm, EIP-918 faced challenges in widespread adoption due to concerns about energy consumption and the evolving Ethereum ecosystem moving towards Proof of Stake.</p>\n\n<p>Currently, EIP-918 has been moved to the Ethereum ERCs repository, indicating that it is no longer actively considered for core protocol implementation. While the concept of mineable tokens remains interesting, the Ethereum community has largely shifted focus to more energy-efficient and scalable solutions. Today, implementing EIP-918 is generally not recommended for new",
  "EIP-926": "<article><h1>EIP-926: Address Metadata Registry</h1>\n\n<p>EIP-926, proposed by Nick Johnson in April 2018, aimed to establish a standardized registry for address metadata on the Ethereum blockchain. The primary purpose was to allow addresses (both externally owned accounts and contracts) to associate arbitrary metadata with themselves, improving discoverability and providing additional context for interactions.</p>\n\n<p>The proposal suggested using a central registry contract where addresses could set and retrieve metadata using ENS-style namehashes. This approach would enable applications to easily access and utilize metadata for various purposes, such as displaying human-readable names, verifying ownership, or associating off-chain resources with on-chain addresses.</p>\n\n<p>As of now, EIP-926 has been moved to the Ethereum ERCs repository, indicating a shift in its categorization. While the idea of an address metadata registry remains relevant, the Ethereum community has since explored other approaches to similar problems, such as ERC-1056 (Lightweight Identity) and various developments in the broader decentralized identity space. The current status suggests that while the concept is valuable, alternative implementations or standards may have gained more traction in addressing the need for on-chain metadata association.</p>\n</article>",
  "EIP-927": "<article><h1>EIP-927: Ethereum Name Service Governance</h1>\n\n<p>EIP-927, proposed by Nick Johnson in 2018, aimed to establish a governance structure for the Ethereum Name Service (ENS). The ENS is a decentralized naming system for Ethereum addresses, smart contracts, and other resources. This proposal sought to create a framework for managing the ENS root and implementing future upgrades.</p>\n\n<p>The proposal suggested a multisig contract to control the ENS root, with signers elected by ENS stakeholders. It also outlined processes for adding and removing signers, as well as mechanisms for implementing protocol changes. While EIP-927 provided a foundation for ENS governance, it has since been superseded by more comprehensive governance models.</p>\n\n<p>Currently, EIP-927 has been moved to the Ethereum ERCs repository, indicating its historical significance but also suggesting that it is no longer actively pursued in its original form. ENS governance has evolved, with the introduction of the ENS DAO and token-based voting system, which now play a central role in decision-making for the Ethereum Name Service ecosystem.</p></article>",
  "EIP-969": "<article><h1>EIP-969: Modifications to Ethash to Invalidate Existing Dedicated Hardware</h1>\n\n<p>EIP-969 was proposed in April 2018 by David Stanfill to modify the Ethereum mining algorithm Ethash in order to break ASIC miners that had been developed for Ethereum. The motivation was to prevent centralization of mining power by making GPU mining competitive again compared to ASICs. The proposal aimed to make small changes to Ethash that would render existing ASIC hardware ineffective while having minimal impact on GPU miners.</p>\n\n<p>The proposal generated significant discussion in the Ethereum community about the merits of ASIC-resistance and potential unintended consequences. However, it ultimately did not gain enough traction to be implemented. As Ethereum moved towards Proof of Stake, the urgency around ASIC-resistance decreased. The EIP is currently marked as \"Stagnant\" in the Ethereum Improvement Proposals repository.</p>\n\n<p>While EIP-969 was not adopted, it highlighted important debates around decentralization and mining algorithms that remain relevant. Ethereum's transition to Proof of Stake with the Merge in 2022 has now made the original proposal obsolete for Ethereum. However, the concepts continue to be discussed for other PoW cryptocurrencies grappling with ASIC centralization concerns",
  "EIP-998": "<article><h1>EIP-998: Composable Non-Fungible Tokens (NFTs)</h1>\n\n<p>EIP-998, proposed by Matt Lockyer in 2018, introduced the concept of composable NFTs, allowing one NFT to own other NFTs or fungible tokens. This proposal aimed to create a standard for hierarchical ownership structures within the Ethereum ecosystem, enabling more complex and versatile digital asset management.</p>\n\n<p>The proposal gained traction in the NFT community, with early implementations exploring use cases such as bundled game items, digital art collections, and virtual real estate. However, as the NFT space evolved, alternative approaches to composability emerged, including wrapper contracts and other custom solutions. While EIP-998 provided a foundation for thinking about NFT composability, it hasn't seen widespread adoption in its original form.</p>\n\n<p>Currently, EIP-998 has been moved to the Ethereum ERCs repository, indicating a shift in its status. While the concept of composable NFTs remains relevant, developers today often implement composability through other means, tailored to specific use cases. The proposal's legacy lies in sparking discussions about complex ownership structures in the world of digital assets.</p></article>",
  "EIP-999": "<article><h1>EIP-999: Restore Contract Code at 0x863DF6BFa4469f3ead0bE8f9F2AAE51c91A907b4</h1>\n\n<p>EIP-999, proposed by Afri Schoedon in April 2018, aimed to restore the contract code of the WalletLibrary used by Parity Wallet. This library was accidentally self-destructed in November 2017, rendering a significant amount of Ether inaccessible. The proposal suggested implementing a patched version of the contract to allow wallet owners to regain access to their assets.</p>\n\n<p>The proposal was highly controversial, as it would have required a hard fork to implement and raised concerns about the immutability of the Ethereum blockchain. It sparked intense debate within the Ethereum community about the appropriate response to such incidents and the role of governance in blockchain networks.</p>\n\n<p>Ultimately, EIP-999 was withdrawn due to lack of consensus. The incident highlighted the challenges of addressing accidental code execution in smart contracts and led to increased focus on formal verification and auditing practices in Ethereum development. Today, alternative solutions like social recovery wallets have emerged to mitigate similar risks without requiring protocol-level interventions.</p>\n\n</article>",
  "ERC-1046": "<article><h1>ERC-1046: tokenURI Interoperability</h1>\n\n<p>ERC-1046 was proposed in 2018 to extend ERC-20 tokens with metadata functionality similar to ERC-721's tokenURI, while also improving interoperability between ERC-20, ERC-721, and ERC-1155 tokens. The proposal aimed to standardize how token metadata like images, descriptions, and properties could be accessed across different token standards.</p>\n\n<p>Authored by Tommy Nicholas, Matt Russo, John Zettler, Matt Condon, and Gavin John, ERC-1046 reached Final status, indicating broad acceptance. It added a tokenURI function to ERC-20 and specified how ERC-721 and ERC-1155 should implement tokenURI for consistency. This allowed wallets, exchanges, and dapps to more easily display rich metadata for different token types.</p>\n\n<p>While ERC-1046 provided a useful extension for ERC-20 metadata, other proposals like ERC-721 Metadata JSON Schema have also emerged to further standardize token metadata. Today, ERC-1046 remains a viable option for adding metadata to ERC-20 tokens, though developers should also consider newer metadata standards depending on their specific use case.</p></article>",
  "ERC-1056": "<article><h1>ERC-1056: Ethereum Lightweight Identity</h1>\n\n<p>ERC-1056, proposed by Pelle Braendgaard and Joel Torstensson of ConsenSys in May 2018, introduces a lightweight identity management system for Ethereum. The proposal aims to address the high gas costs associated with identity creation in previous standards like ERC-725. ERC-1056 allows for free identity creation by leveraging existing Ethereum accounts as valid identities, making it suitable for offline environments and scenarios with limited resources.</p>\n\n<p>The standard defines a registry for managing keys and attributes of blockchain identities. It supports an unlimited number of delegates and attributes for each identity, providing flexibility for various use cases. The proposal is fully compliant with the Decentralized Identifier (DID) specification, ensuring interoperability with other identity systems. ERC-1056 also allows for key rotation without changing the primary identifier, enhancing security and longevity of identities.</p>\n\n<p>As of now, ERC-1056 is in a \"Stagnant\" status, indicating that development has slowed or stopped. While the proposal offers significant advantages in terms of cost-efficiency and offline usability, its current status suggests that it may not be actively considered for implementation. However, the concepts introduced in ERC-1056 have influenced subsequent identity-related proposals an",
  "ERC-1062": "<article><h1>ERC-1062: IPFS Hash in ENS Resolver</h1>\n\n<p>ERC-1062, proposed by Phyrex Tsai and the Portal Network team in May 2018, aimed to formalize the integration of IPFS (InterPlanetary File System) hashes into the Ethereum Name Service (ENS) resolver. This proposal sought to create a standard mapping between IPFS-stored resources and human-readable ENS names, potentially facilitating easier access to decentralized content.</p>\n\n<p>The motivation behind ERC-1062 was to leverage IPFS's advantages in addressing large amounts of data with unique cryptographic hashes, its peer-to-peer nature for efficient content delivery, and its decentralized storage capabilities. By combining these features with ENS's user-friendly naming system, the proposal aimed to enhance the infrastructure for Web3 services and improve user adoption of decentralized resources.</p>\n\n<p>Currently, ERC-1062 is in a \"Stagnant\" status, indicating a lack of recent progress or updates. While the idea of integrating IPFS with ENS remains relevant, the specific implementation proposed in this ERC may have been superseded by other developments or approaches in the rapidly evolving decentralized web ecosystem. Developers interested in similar functionality should investigate more recent proposals or existing implementations that may have addressed this use",
  "ERC-1066": "<article><h1>ERC-1066: Status Codes for Ethereum Smart Contracts</h1>\n\n<p>ERC-1066, proposed by Brooklyn Zelenka, Tom Carchrae, and Gleb Naumenko in May 2018, aimed to introduce standardized status codes for Ethereum smart contracts, similar to HTTP status codes. The proposal sought to improve contract-to-contract communication, error handling, and user feedback by providing a common set of signals for various contract states and outcomes.</p>\n\n<p>The proposal suggested a system of status codes that could be used alongside or instead of the traditional boolean return values or revert statements. These codes were designed to offer more granular information about contract execution results, allowing for better automation, debugging, and localized error messages for end-users. The status codes were intended to be compatible with both regular and reason-based reverts, providing flexibility in implementation.</p>\n\n<p>Despite its potential benefits, ERC-1066 has not gained widespread adoption in the Ethereum ecosystem. As of now, the proposal's status is listed as \"Stagnant,\" indicating that it has not progressed significantly since its introduction. While the idea of standardized status codes remains relevant, the Ethereum community has largely continued to use traditional error handling methods and custom error codes within individual projects.</p></article>",
  "ERC-1077": "<article><h1>ERC-1077: Gas Relay for Contract Calls</h1>\n\n<p>ERC-1077, proposed by Alex Van de Sande and Ricardo Guilherme Schmidt in 2018, aimed to standardize gas abstraction for smart contracts. The proposal's main goal was to allow users to pay for transaction gas fees using ERC-20 tokens instead of ETH, reducing a significant barrier to DApp adoption.</p>\n\n<p>The proposal introduced an <code>executeGasRelay</code> function that would execute signed messages and compensate relayers with ERC-20 tokens for covering the gas costs. This approach would allow users to interact with smart contracts without holding ETH, potentially simplifying the user experience for blockchain applications.</p>\n\n<p>Despite its innovative approach to gas abstraction, ERC-1077 is currently in a \"Stagnant\" status. While the proposal generated discussion and influenced thinking around meta-transactions, it has not been widely adopted in its original form. More recent proposals and implementations, such as EIP-1559 and various Layer 2 solutions, have addressed gas fee issues in different ways. However, the core idea of abstracting gas costs away from end-users remains an active area of development in the Ethereum ecosystem.</p>\n</article>",
  "ERC-1078": "<article><h1>ERC-1078: Universal Login/Signup Using ENS Subdomains</h1>\n\n<p>ERC-1078, proposed by Alex Van de Sande in May 2018, aimed to create a password-less, Ethereum-native login system using ENS subdomains. The proposal sought to simplify user onboarding and improve security by eliminating the need for traditional passwords or seed phrases. Instead, it leveraged smart contracts implementing both Identity and Executable Signed Messages standards.</p>\n\n<p>The core idea was to use a contract address as the user's unique identifier, accessible via an ENS name. Users would generate private keys locally on their devices and request authorization to add these keys as signers for their identity contract. This approach aimed to provide a familiar second-factor authentication experience without relying on centralized servers, while also introducing a new paradigm for handling Ethereum transactions.</p>\n\n<p>Despite its innovative approach, ERC-1078 has not gained widespread adoption and is currently marked as \"Stagnant\" in the EIP process. While the proposal offered potential improvements in user experience and security, the complexity of implementation and the emergence of alternative solutions may have contributed to its limited traction in the Ethereum ecosystem.</p></article>",
  "ERC-1080": "<article><h1>ERC-1080: Recoverable Token</h1>\n\n<p>ERC-1080 was proposed in May 2018 by Bradley Leatherwood to create a standard interface for tokens that support chargebacks, theft prevention, and lost &amp; found resolutions. It aimed to extend ERC-20 or ERC-721 tokens with functionality to recover stolen or lost accounts and enable chargebacks.</p>\n\n<p>The proposal introduced methods like <code>claimLost()</code> to report lost accounts and <code>cancelLostClaim()</code> to undo such claims. It also specified events like <code>AccountClaimedLost</code> and <code>AccountRecovered</code> to track these actions. The motivation was to provide mechanisms to mitigate provable token loss or theft without modifying Ethereum's core protocol.</p>\n\n<p>Currently, ERC-1080 has a \"Stagnant\" status, indicating lack of progress or adoption. While its goals of improving asset recovery remain relevant, other approaches like social recovery wallets have gained more traction in addressing similar concerns. The proposal serves as an interesting historical artifact in early attempts to standardize token recovery mechanisms.</p></article>",
  "ERC-1081": "<article><h1>ERC-1081: Standard Bounties</h1>\n\n<p>ERC-1081, proposed in May 2018 by Mark Beylin, Kevin Owocki, and Ricardo Guilherme Schmidt, aimed to establish a standard contract and interface for issuing bounties on Ethereum. The proposal sought to enable cross-platform interoperability and easier reputation tracking for bounty systems, supporting any task type and payment in ETH or ERC20 tokens.</p>\n\n<p>The motivation behind ERC-1081 was to avoid recreating the siloed ecosystems of Web2.0 task outsourcing platforms in the blockchain space. By standardizing bounty interactions, the proposal aimed to facilitate collaboration between platforms and simplify the tracking of reputational metrics like payout frequency and work acceptance rates.</p>\n\n<p>Currently, ERC-1081 is in a \"Stagnant\" status, indicating a lack of recent progress or updates. While the proposal offered a comprehensive framework for bounty systems, including issuance, fulfillment, and acceptance stages, it appears that other bounty standards or implementations may have gained more traction in the ecosystem. Developers interested in blockchain-based bounty systems should investigate more recent proposals or established practices in the field.</p></article>",
  "ERC-1123": "<article><h1>ERC-1123: Revised Ethereum Smart Contract Packaging Standard</h1>\n\n<p>ERC-1123 was proposed in June 2018 as a standard for packaging and distributing Ethereum smart contracts. It aimed to define a JSON-based manifest format for describing smart contract packages, including source code, deployed instances, and metadata. The proposal was authored by prominent Ethereum developers including Piper Merriam and Danny Ryan.</p>\n\n<p>The motivation was to encourage code reuse and best practices in Ethereum development by providing a standardized package format. This would enable better package management tools and processes. As version 2 of the packaging spec, it sought to improve on earlier efforts based on community feedback and observed practices.</p>\n\n<p>However, ERC-1123 was ultimately withdrawn in favor of ERC-2678, which defines the EthPM v3 smart contract packaging standard. While ERC-1123 was an important step in the evolution of Ethereum packaging standards, ERC-2678 is now the recommended approach for smart contract packaging and distribution.</p>\n</article>",
  "ERC-1129": "<article><h1>ERC-1129: Standardised DAPP Announcements</h1>\n\n<p>ERC-1129 was proposed in 2018 by Jan Turk to standardize how decentralized applications (DApps) on Ethereum communicate announcements and status updates to users. The proposal aimed to improve quality of service by providing a framework for developers to post announcements about service transitions, freezes, or other important updates in a consistent format.</p>\n\n<p>The proposal defined structures for storing announcer information and permissions, as well as methods for posting and removing announcements. It also specified a human-friendly interface for displaying announcements to users. While the idea had merit for improving DApp communication, the proposal did not gain significant traction in the community.</p>\n\n<p>Currently, ERC-1129 is in \"Stagnant\" status, indicating a lack of progress or updates. While standardized announcements could still be useful, most DApps have implemented their own custom solutions for user communication. The core ideas may be worth revisiting, but a new proposal would likely be needed to modernize the approach for today's DApp ecosystem.</p>\n</article>",
  "ERC-1132": "<article><h1>ERC-1132: Extending ERC20 with Token Locking Capability</h1>\n\n<p>EIP-1132, proposed by Nitika Goel in June 2018, aimed to extend the ERC-20 standard with methods for time-locking tokens within the contract itself. This proposal addressed the limitations of using external escrow contracts for token locking, which often led to increased complexity, gas costs, and trust requirements.</p>\n\n<p>The proposal introduced functions to lock tokens for a specified time, unlock tokens after the lock period, and query locked and transferable token balances. This approach allowed for more seamless integration of token locking functionality within ERC-20 contracts, improving user experience and reducing operational costs. It was particularly relevant for applications requiring vesting schedules or staking mechanisms.</p>\n\n<p>While EIP-1132 offered valuable improvements, its current status is \"Stagnant,\" indicating limited recent activity or adoption. Other proposals, such as EIP-900 (staking), have addressed similar concerns in different ways. Despite its innovative approach, the crypto community has not widely implemented EIP-1132, possibly due to the emergence of alternative solutions or changes in market needs since its proposal.</p></article>",
  "ERC-1154": "<article><h1>ERC-1154: Oracle Interface</h1>\n\n<p>ERC-1154, proposed by Alan Lu in June 2018, aimed to standardize the interface for oracles in Ethereum. Oracles are crucial for smart contracts to interact with off-chain data, allowing them to respond to real-world events. The proposal sought to create a unified interface for different oracle implementations, enabling interchangeability and reducing the need for custom adapters.</p>\n\n<p>The proposal addressed the dichotomy between push and pull-based oracle systems, acknowledging the different semantics and potential inefficiencies when adapting between them. It aimed to provide a standard that could accommodate both approaches, focusing on the value of underlying resolution mechanics rather than specific implementation details.</p>\n\n<p>Although ERC-1154 raised important points about oracle standardization, it was ultimately withdrawn. The current status suggests that the Ethereum community might have found alternative solutions or that the proposal didn't gain sufficient traction. Despite its withdrawal, the issues it addressed remain relevant in the ongoing development of oracle systems in the Ethereum ecosystem.</p></article>",
  "ERC-1155": "<article><h1>ERC-1155: Multi Token Standard</h1>\n\n<p>ERC-1155, proposed in June 2018 by a team led by Witek Radomski of Enjin, is a significant advancement in Ethereum token standards. It addresses limitations of earlier standards like ERC-20 and ERC-721 by allowing a single smart contract to manage multiple token types, both fungible and non-fungible. This efficiency reduces gas costs and simplifies token management.</p>\n\n<p>The proposal quickly gained traction in the gaming and collectibles sectors. It enables developers to create more complex and diverse token ecosystems within a single contract. Notable early adopters included Enjin's gaming platform and The Sandbox's virtual world. The standard was finalized in June 2019, cementing its place in the Ethereum ecosystem.</p>\n\n<p>Today, ERC-1155 remains highly relevant and widely used, especially in NFT marketplaces and blockchain games. It has not been superseded, though complementary standards like ERC-2981 (NFT Royalty Standard) have emerged to extend its functionality. The proposal's status is \"Final,\" indicating its stability and broad acceptance in the Ethereum community.</p>\n</article>",
  "ERC-1167": "<article><h1>ERC-1167: Minimal Proxy Contract</h1>\n\n<p>ERC-1167, proposed in 2018 by Peter Murray, Nate Welch, and Joe Messerman, introduces the concept of a Minimal Proxy Contract. This proposal aims to provide a standardized, gas-efficient way to create clones of existing contracts on the Ethereum blockchain. The primary motivation was to enable the deployment of multiple instances of a contract with minimal gas costs, while ensuring that all instances behave identically to the original implementation.</p>\n\n<p>The Minimal Proxy Contract works by implementing a small, fixed bytecode that delegates all calls to a known, fixed address where the actual implementation resides. This approach allows for the creation of many proxy contracts that all point to the same implementation, significantly reducing deployment costs and simplifying contract upgrades. The proposal gained popularity quickly due to its efficiency and simplicity, leading to widespread adoption in various Ethereum projects and protocols.</p>\n\n<p>As of 2023, ERC-1167 maintains a \"Final\" status, indicating its acceptance and implementation in the Ethereum ecosystem. It has become a fundamental building block for many smart contract systems, particularly those involving factory patterns or requiring multiple instances of similar contracts. While other proxy patterns have emerged since its introduction, ERC-1167 remains relevant for its minimal gas consumption and straightforward implementation, making it a go-",
  "ERC-1175": "<article><h1>ERC-1175: Wallet &amp; Shop Standard for ERC-20 Tokens</h1>\n\n<p>ERC-1175 was proposed in June 2018 by Jet Lim as a way to simplify the use of ERC-20 tokens for commerce. The proposal aimed to create standardized wallet and shop contracts that could interact seamlessly to enable easier token payments.</p>\n\n<p>The core idea was to establish mutual trust between certified wallet and shop contracts, allowing for simplified payment flows. Instead of requiring separate approve and transferFrom calls for ERC-20 transfers, ERC-1175 proposed a single paySafe function to complete a transaction. This was meant to improve the user experience for spending tokens at shops.</p>\n\n<p>While an interesting concept, ERC-1175 did not gain significant traction or adoption. Its current status is listed as \"Stagnant\" in the Ethereum Improvement Proposals repository. Other token standards like ERC-777 and ERC-1363 have since emerged to address similar commerce use cases for tokens, likely superseding the need for ERC-1175. As such, implementation of this specific proposal is not recommended today.</p>\n</article>",
  "ERC-1178": "<article><h1>ERC-1178: Multi-class Token Standard</h1>\n\n<p>ERC-1178 was proposed in June 2018 by Albert Chon as a standard for multi-class fungible tokens on Ethereum. The motivation was to enable tokens with distinct classes within a single contract, addressing use cases like different share classes for a company that weren't well-served by existing token standards like ERC-20 or ERC-721.</p>\n\n<p>The proposal aimed to provide basic functionality for tracking and transferring ownership of multi-class fungible tokens (MCFTs). It specified partial ERC-20 compatibility along with new functions specific to managing token classes. However, the proposal has been in a \"Stagnant\" status for some time, indicating a lack of recent activity or adoption.</p>\n\n<p>While the concept of multi-class tokens remains relevant, ERC-1178 does not appear to have gained significant traction in the years since its proposal. More recent token standards like ERC-1155 have emerged to handle multi-token scenarios in a different way. For current implementations, developers would likely look to more actively maintained standards rather than ERC-1178 specifically.</p></article>",
  "ERC-1185": "<article><h1>ERC-1185: Storage of DNS Records in ENS</h1>\n\n<p>ERC-1185 was proposed in June 2018 by Jim McDonald to define a resolver profile for storing and retrieving DNS records within the Ethereum Name Service (ENS) contract. The motivation was to leverage ENS as a decentralized, owner-controlled store for authoritative DNS information.</p>\n\n<p>The proposal specifies a resolver interface that works with DNS record sets, identified by domain, name, and resource record type. This approach aimed to balance gas costs with the traditional zone-based DNS model. The resolver would support setting, retrieving, and checking the existence of DNS records in ENS.</p>\n\n<p>While ERC-1185 provided a comprehensive spec for DNS-in-ENS, its adoption has been limited. The proposal remains in \"Review\" status and has not been widely implemented. More recent ENS developments have focused on other use cases, though the core idea of decentralized DNS storage remains relevant to ongoing discussions around Web3 naming and identity systems.</p>\n</article>",
  "ERC-1191": "<article><h1>ERC-1191: Add Chain ID to Mixed-Case Checksum Address Encoding</h1>\n\n<p>ERC-1191, proposed by Juliano Rizzo in March 2018, extends EIP-55's mixed-case checksum address encoding by incorporating the chain ID defined in EIP-155. This improvement aims to prevent users from accidentally sending funds to addresses on different Ethereum-based networks.</p>\n\n<p>The proposal builds upon EIP-55's checksum algorithm by including the chain ID in the hash function input when generating the checksum. This modification allows wallets and other software to distinguish between addresses from different networks, such as Ethereum Mainnet and various testnets. The ERC's primary goal is to enhance user safety by providing visual cues and warnings when attempting cross-network transactions.</p>\n\n<p>As of its last update, ERC-1191 was in \"Last Call\" status, indicating it was nearing final approval. The proposal has gained traction in the Ethereum community due to its potential to reduce user errors and improve overall network security. While not universally implemented, several wallet providers and Ethereum clients have adopted or considered adopting this standard to enhance user protection across multiple Ethereum-based networks.</p></article>",
  "ERC-1202": "<article><h1>ERC-1202: Voting Interface</h1>\n\n<p>ERC-1202 was proposed in July 2018 by Zainan Victor Zhou, Evan, and Yin Xu to create a standardized interface for on-chain voting in Ethereum smart contracts. The proposal aims to establish a common API for implementing voting mechanisms, allowing for greater interoperability and easier integration of voting systems in decentralized applications (dApps) and decentralized autonomous organizations (DAOs).</p>\n\n<p>The motivation behind ERC-1202 was to address the growing need for standardized governance processes in blockchain-based organizations. By providing a unified interface for voting, the proposal sought to enable the development of general-purpose user interfaces, facilitate delegate and smart contract voting, and allow for on-chain recording of voting results in a consistent manner. This standardization would make it easier for DAOs and dApps to implement and honor voting outcomes programmatically.</p>\n\n<p>Currently, ERC-1202 remains in Draft status. While it has not been widely adopted or implemented, the proposal has contributed to ongoing discussions about on-chain governance and voting mechanisms in the Ethereum ecosystem. As the field of decentralized governance continues to evolve, ERC-1202 serves as a valuable reference point for developers and researchers working on blockchain-based voting systems.</p>\n</article>",
  "ERC-1203": "<article><h1>ERC-1203: Multi-Class Token Standard</h1>\n\n<p>ERC-1203, proposed in July 2018 by Jeff Huang and Min Zu, aimed to establish a standard interface for multi-class tokens (MCTs) as an extension of the popular ERC-20 standard. The proposal sought to create a hybrid between fungible and non-fungible tokens, where tokens would be fungible within the same class but non-fungible across different classes.</p>\n\n<p>The motivation behind ERC-1203 was to represent complex structures with heterogeneous components, such as different classes of company stocks or game items with varying attributes. It proposed functionality for tracking, transferring, and converting MCTs, potentially allowing for more nuanced token ecosystems in decentralized applications.</p>\n\n<p>Despite its innovative approach, ERC-1203 has not gained widespread adoption and is currently in a \"Stagnant\" status. While the concept of multi-class tokens remains relevant, other standards and implementations have since emerged to address similar use cases, such as ERC-1155 for multi-token contracts. As of now, ERC-1203 is not widely implemented, and developers typically opt for more established or flexible token standards for complex token structures.</p></article>",
  "ERC-1207": "<article><h1>ERC-1207: DAuth Access Delegation Standard</h1>\n\n<p>ERC-1207, proposed by Xiaoyu Wang and Bicong Wang in July 2018, aimed to create a standard interface for delegating access authorization between smart contracts and users on Ethereum. Inspired by OAuth for web applications, DAuth (Decentralized Authentication) sought to provide a distributed alternative for identity delegation without requiring users' private keys.</p>\n\n<p>The proposal defined structures and functions to allow contracts to request and grant access to specific functions in other contracts on behalf of users. This would enable more seamless integrations between dApps while maintaining user control. Key components included an AuthInfo struct to specify permitted functions and expiration, along with methods for granting, revoking and checking authorizations.</p>\n\n<p>While an interesting concept, ERC-1207 did not gain significant traction in the Ethereum community. The proposal is currently in \"Stagnant\" status, indicating a lack of progress or adoption. More recent standards like ERC-4337 (account abstraction) have since emerged to address similar delegation and permission management needs in potentially more comprehensive ways. As such, ERC-1207 is unlikely to see widespread implementation in its current form.</p></article>",
  "ERC-1261": "<article><h1>ERC-1261: Membership Verification Token (MVT)</h1>\n\n<p>ERC-1261, proposed by Chaitanya Potti and Partha Bhattacharya in July 2018, introduced the concept of Membership Verification Tokens (MVTs). These non-transferable, revocable tokens were designed to represent abstract concepts like membership, voting rights, or recognition on the Ethereum blockchain. The proposal aimed to standardize the interface for tracking membership in on-chain organizations, enabling use cases such as automated compliance and various governance structures.</p>\n\n<p>The proposal garnered attention for its potential applications in permissioned voting systems, passport issuance, social benefit distribution, and other scenarios where membership or authorization needed to be verifiable on-chain. It built upon existing standards like ERC-165 and ERC-173, incorporating features for interface detection and contract ownership. Despite its innovative approach, ERC-1261 has not seen widespread adoption and is currently in a \"Stagnant\" status.</p>\n\n<p>While the core ideas behind ERC-1261 remain relevant, the proposal has been largely superseded by more recent developments in the field of decentralized identity and soulbound tokens. Projects like ERC-725 (Identity) and ERC-4973 (Account-bound Tokens) have gained more traction in addressing similar",
  "ERC-1271": "<article><h1>ERC-1271: Standard Signature Validation Method for Contracts</h1>\n\n<p>ERC-1271, proposed in July 2018 by a group of prominent Ethereum developers including Francisco Giordano and Matt Condon, addresses a crucial limitation in Ethereum's signature validation system. While Externally Owned Accounts (EOAs) can easily sign messages with their private keys, smart contracts lacked a standardized way to validate signatures. This proposal introduces a standard method for contracts to verify signatures on their behalf, enabling a more flexible and powerful signature validation system across the Ethereum ecosystem.</p>\n\n<p>The core of ERC-1271 is the implementation of an <code>isValidSignature(hash, signature)</code> function within contracts. This function allows other contracts or external systems to query whether a given signature is valid for that contract. This capability is particularly valuable for applications like decentralized exchanges with off-chain orderbooks, where buy/sell orders are represented as signed messages. By implementing ERC-1271, contract-based accounts can participate in these systems alongside traditional EOAs, greatly expanding their functionality and use cases.</p>\n\n<p>ERC-1271 has been widely adopted and is now considered a final standard. Its implementation has become a common practice in many smart contract wallets and multi-signature contracts. The proposal has paved the way for more complex on-chain",
  "ERC-1319": "<article><h1>ERC-1319: Smart Contract Package Registry Interface</h1>\n\n<p>ERC-1319, proposed in August 2018 by Piper Merriam, Christopher Gewecke, and others, aimed to establish a standard interface for smart contract package registries. The proposal sought to create a framework allowing smart contract publishers to design and deploy code registries with custom logic while exposing common endpoints for asset retrieval. This would enable a decentralized multi-registry system, potentially integrated with ENS for familiar package installation conventions.</p>\n\n<p>The proposal was designed as a companion to ERC-1123, which defined a standard for smart contract package manifests. Together, these proposals aimed to improve the ecosystem for smart contract development and deployment. ERC-1319 specified methods for releasing package versions, fetching package data, and managing package names within registries.</p>\n\n<p>Currently, ERC-1319 is in a \"Stagnant\" status, indicating that it has not seen significant activity or updates recently. While the proposal offered valuable ideas for standardizing smart contract package management, it appears that the Ethereum community has not widely adopted or implemented this standard. As of now, other approaches or evolving practices in smart contract development may have superseded the specific interface proposed in ERC-1319.</p></article>",
  "ERC-1328": "<article><h1>ERC-1328: WalletConnect URI Format</h1>\n\n<p>ERC-1328, proposed by ligi and Pedro Gomes in August 2018, defines a standardized URI format for initiating connections between applications and wallets in the Ethereum ecosystem. This proposal aimed to create a consistent way to encode connection data, which could be displayed as a QR code or shared as a link, facilitating seamless interactions between dApps and wallets.</p>\n\n<p>The proposal specifies the syntax and semantics for WalletConnect URIs, accommodating both version 1.0 and 2.0 of the WalletConnect protocol. For v1.0, the URI includes a topic, version, symmetric key, and bridge URL. Version 2.0 expanded on this, adding support for additional parameters like supported JSON-RPC methods, relay protocol, and expiration timestamp.</p>\n\n<p>ERC-1328 has been widely adopted and implemented across various wallets and dApps, becoming a cornerstone of the WalletConnect ecosystem. Its status is now \"Final,\" indicating its successful integration into the Ethereum standards. While the proposal itself hasn't been superseded, the WalletConnect protocol has continued to evolve, with v2.0 building upon and expanding the capabilities defined in this ERC.</p></article>",
  "ERC-1337": "<article><h1>ERC-1337: Subscriptions on the Blockchain</h1>\n\n<p>ERC-1337, proposed in August 2018 by a group of developers led by Kevin Owocki, aimed to bring subscription-based models to the Ethereum blockchain. The proposal sought to replicate the success of recurring payment systems in traditional web services, offering benefits such as predictable revenue for service providers and easy-to-understand payment terms for users.</p>\n\n<p>The proposal outlined a standard interface for subscription smart contracts, allowing for automated, recurring payments on the Ethereum network. It aimed to provide a more sustainable monetization model for decentralized applications (dApps) compared to token-based systems or advertising models. The standard would enable users to subscribe to services with regular payments, with the ability to cancel at any time, mirroring familiar Web2 subscription models.</p>\n\n<p>Despite initial interest, ERC-1337 has not seen widespread adoption and is currently in a \"Stagnant\" status. While the concept of blockchain-based subscriptions remains relevant, the implementation challenges and the emergence of alternative payment models in the DeFi space may have contributed to its limited traction. As of now, no major updates or revisions to the proposal have been made, and it has not been superseded by a more recent standard specifically addressing subscription models on Ethereum.</p>\n\n</article>",
  "ERC-1363": "<article><h1>ERC-1363: Payable Token</h1>\n\n<p>ERC-1363, proposed by Vittorio Minacori in 2018, introduces a standardized interface for ERC-20 tokens that enables executing recipient code after transfers or spender code after approvals. This improvement aims to streamline token-based transactions by combining the transfer/approval and subsequent actions into a single operation, reducing gas costs and improving user experience.</p>\n\n<p>The proposal defines new functions like <code>transferAndCall</code>, <code>transferFromAndCall</code>, and <code>approveAndCall</code>, which trigger corresponding callbacks on recipient or spender contracts. This functionality is particularly useful for scenarios such as token-based crowdsales, service payments, invoice settlements, and subscription models, earning it the moniker \"Payable Token\".</p>\n\n<p>ERC-1363 has been finalized and is now part of the Ethereum standards. While it hasn't seen widespread adoption compared to some other token standards, it remains a valuable option for projects requiring seamless token-based interactions. Its implementation can significantly enhance the efficiency of token-centric smart contracts and dApps, although developers should carefully consider their specific use case before choosing this standard.</p></article>",
  "ERC-137": "<article><h1>ERC-137: Ethereum Domain Name Service</h1>\n\n<p>ERC-137, proposed by Nick Johnson in 2016, defines the Ethereum Name Service (ENS) - a protocol for resolving human-readable names to Ethereum addresses and resources. The key motivation was to allow users to interact with memorable names like \"vitalik.eth\" instead of long hexadecimal addresses.</p>\n\n<p>The proposal specifies the technical details of how ENS should work, including the registry contract structure, resolvers, and record types. It laid the groundwork for ENS to become a core part of the Ethereum ecosystem, enabling easier-to-use addresses for wallets, websites, and other resources on Ethereum.</p>\n\n<p>ENS launched in 2017 based on this specification and has seen widespread adoption. The proposal is considered Final and implemented. ENS continues to evolve with additional features and integrations, but ERC-137 remains the foundational spec that defines its core functionality and purpose.</p>\n\n</article>",
  "ERC-1386": "<article><h1>ERC-1386: Attestation Management Contract</h1>\n\n<p>ERC-1386, proposed by Weiwu Zhang and James Sangalli in September 2018, aimed to create a standard interface for managing off-chain attestations within smart contracts. The proposal addressed the need for privacy-preserving, revocable attestations on the Ethereum blockchain, such as verifying a user's age or residence without exposing sensitive data.</p>\n\n<p>The proposal outlined methods for issuers to manage attestation signing keys, revoke attestations using bloom filters for efficiency, and provide custom validation logic. This flexibility allowed issuers to update their attestation formats independently. Despite its potential utility in identity management and compliance scenarios, ERC-1386 has not gained widespread adoption.</p>\n\n<p>Currently, the proposal's status is \"Stagnant,\" indicating a lack of recent activity or interest from the community. While the core ideas remain relevant, newer standards like ERC-725 (Identity) and ERC-735 (Claim Holder) have emerged to address similar use cases, potentially superseding ERC-1386 in terms of community focus and development efforts.</p>\n</article>",
  "ERC-1387": "<article><h1>ERC-1387: Merkle Tree Attestations with Privacy enabled</h1>\n\n<p>ERC-1387 was proposed in 2018 by Weiwu Zhang and James Sangalli to enable privacy-preserving attestations on Ethereum using Merkle trees. The key innovation is allowing users to selectively reveal parts of an off-chain Merkle tree attestation when interacting with smart contracts, preserving privacy while still providing verifiable claims.</p>\n\n<p>The proposal aims to solve privacy issues with on-chain attestations by keeping the full attestation data off-chain in a Merkle tree format. Users can then reveal only the necessary parts of the tree when needed. It also suggests using multiple signed trees for the same claim to prevent transaction linking. The ERC provides an interface and reference implementation for smart contracts to validate these Merkle tree attestations.</p>\n\n<p>While an interesting approach to privacy-preserving attestations, ERC-1387 has not seen widespread adoption or further development. Its status remains stagnant as of 2023. More recent proposals like ERC-735 (Claim Holder) and zk-SNARKs based solutions have gained more traction for handling identity and attestation use cases. However, the core idea of using Merkle trees for selective disclosure remains relevant in blockchain privacy research.</p></article>",
  "ERC-1388": "<article><h1>ERC-1388: Attestation Issuers Management List</h1>\n\n<p>ERC-1388, proposed by Weiwu Zhang and James Sangalli in September 2018, aims to standardize the management of attestation issuers in smart contracts. The proposal addresses the need for a flexible system to handle cryptographic attestations for user identities or capabilities, particularly in scenarios where legal or regulatory requirements necessitate verification of user attributes.</p>\n\n<p>The core idea is to create a smart contract interface that allows for the management of lists of trusted attestation issuers. Instead of hardcoding trust in specific issuers, contracts can rely on these curated lists, enabling a more dynamic and scalable approach to attestation verification. This model allows for the delegation of issuer management to specialized entities, potentially improving the overall security and adaptability of attestation-dependent systems.</p>\n\n<p>Currently, the proposal's status is listed as \"Stagnant,\" indicating that it has not seen significant development or discussion recently. While the concept addresses a valid concern in the blockchain identity and verification space, it's possible that alternative solutions or more comprehensive identity standards have gained more traction since its proposal. Developers working on attestation-related projects should consider the principles outlined in ERC-1388, but also explore more recent developments in the field of decentralized identity and verifiable credentials.</p></article",
  "ERC-1417": "<article><h1>ERC-1417: Poll Standard</h1>\n\n<p>ERC-1417 proposed a standard interface for implementing polls on Ethereum, designed to work with ERC-1261 (Membership Verification Token). It was authored by Chaitanya Potti and Partha Bhattacharya in September 2018. The proposal aimed to modularize blockchain voting by defining four key components: voter qualification, vote weight calculation, vote consequences, and vote tallying.</p>\n\n<p>The standard specified functions for basic poll operations like voting, unvoting, tallying votes, and checking voter turnout. It was intended to enable interoperable front-end applications that could easily interact with poll contracts implementing this interface. The authors provided sample implementations demonstrating various use cases.</p>\n\n<p>While ERC-1417 offered a structured approach to on-chain voting, it has not gained widespread adoption. The proposal's status is currently \"Stagnant\", indicating limited recent development or community interest. More recent voting standards like ERC-4824 (Common Interfaces for DAOs) have emerged to address on-chain governance needs in a broader context.</p></article>",
  "ERC-1438": "<article><h1>ERC-1438: dApp Components (Avatar) & Universal Wallet</h1>\n\n<p>ERC-1438, proposed by Jet Lim in September 2018, aimed to create a more interconnected and modular ecosystem for Ethereum dApps. The proposal suggested developing component-ready dApps and contracts that could be easily integrated into other services, as well as a universal wallet for ERC-20 tokens. The main motivation was to shift away from project-oriented centralized development and promote a more decentralized and reusable approach to dApp creation.</p>\n\n<p>The proposal introduced the concept of an avatar system and social badge system that could be created, saved, and immediately used across different services. This aimed to improve user experience and data portability in the Ethereum ecosystem. Additionally, the universal wallet concept was proposed to increase the utility of existing ERC-20 tokens by allowing them to be used more broadly across various dApps and services.</p>\n\n<p>Currently, ERC-1438 is in a \"Stagnant\" status, indicating that it has not seen significant development or adoption since its proposal. While the ideas presented in this ERC were innovative, they have not gained widespread traction in the Ethereum community. The concepts of modular dApp components and universal wallets have been explored in other forms, but not necessarily as outlined in this specific proposal. As",
  "ERC-1444": "<article><h1>ERC-1444: Localized Messaging with Signal-to-Text</h1>\n\n<p>ERC-1444, proposed by Brooklyn Zelenka and Jennifer Cooper in September 2018, aimed to create an on-chain system for converting machine codes into human-readable text in any language. The proposal was motivated by the need for better user experience and developer experience in Ethereum, especially for non-English speakers. It sought to enable smart contracts to provide feedback and instructions in a culturally and linguistically diverse manner.</p>\n\n<p>The proposal suggested a decentralized approach where users could create, register, share, and use translations for various machine codes. This would allow for more flexible and inclusive messaging compared to hard-coded English strings. The system was designed to be language-agnostic, letting users choose their preferred localization.</p>\n\n<p>As of now, ERC-1444 is in a \"Stagnant\" status, indicating that it has not seen significant development or adoption since its proposal. While the idea of localized messaging remains relevant, especially as Ethereum aims for global adoption, this specific proposal has not gained traction in the community. It's possible that other solutions or approaches to localization have been explored or implemented in the meantime.</p></article>",
  "ERC-1450": "<article><h1>ERC-1450: A Security Token Standard for SEC-Compliant Securities</h1>\n\n<p>ERC-1450 was proposed in September 2018 by John Shiple, Howard Marks, and David Zhang as a standard for issuing and trading SEC-compliant securities on the Ethereum blockchain. The proposal aimed to create an ERC-20 compatible token that could represent securities compliant with SEC regulations like Regulation Crowdfunding, Regulation D, and Regulation A.</p>\n\n<p>The key innovation of ERC-1450 was restricting token issuance and transfers to authorized parties like the issuer and registered transfer agent (RTA). This was intended to enable proper regulatory compliance and oversight of security token offerings and trading. The standard defined specific roles and permissions to enforce these restrictions.</p>\n\n<p>While ERC-1450 represented an important early attempt to standardize compliant security tokens, its current status is stagnant. More recent security token standards like ERC-1400 have gained wider adoption. However, ERC-1450 helped pave the way for ongoing efforts to bring traditional securities onto the blockchain in a regulatory-compliant manner.</p></article>",
  "ERC-1462": "<article><h1>ERC-1462: Base Security Token</h1>\n\n<p>ERC-1462 was proposed in October 2018 by Maxim Kupriianov and Julian Svirsky as an extension to the ERC-20 token standard to enable compliance with securities regulations. The proposal aimed to add minimal functionality for KYC/AML checks, token locking, and attaching legal documentation while keeping the scope narrow to allow flexibility in implementation.</p>\n\n<p>The motivation behind ERC-1462 was to address perceived shortcomings in other security token standards like ERC-1400 and ERC-1450, which the authors felt were overly complex or restrictive. By defining a base set of compliance features, ERC-1462 sought to provide a foundation for security tokens that could be extended as needed for specific use cases.</p>\n\n<p>Currently, ERC-1462 is in \"Stagnant\" status, indicating a lack of recent activity or updates. While it introduced some useful concepts for regulatory compliance, other more comprehensive security token standards have since gained more traction in the industry. Developers looking to implement compliant security tokens today would likely reference more recent proposals or established frameworks rather than ERC-1462 directly.</p></article>",
  "ERC-1484": "<article><h1>ERC-1484: Digital Identity Aggregator</h1>\n\n<p>ERC-1484, proposed in 2018 by Anurag Angara, Andy Chorlian, Shane Hampton, and Noah Zinsmeister, aimed to create a standardized framework for digital identity management on Ethereum. The proposal introduced the concept of a singular Identity Registry smart contract that would allow entities to claim an Identity and associate it with Ethereum addresses in various ways. This approach was designed to be interoperable with existing and future digital identity standards.</p>\n\n<p>The proposal offered several key features, including self-sovereignty, native support for ERC-725 and ERC-1056 identities, DID compliance, and the ability to be powered by meta-transactions. These capabilities made ERC-1484 a potentially powerful tool for identity management in the Ethereum ecosystem, allowing for complex identity-related functionality while maintaining flexibility and compatibility.</p>\n\n<p>Despite its ambitious goals, ERC-1484 is currently in a \"Stagnant\" status. This suggests that while the proposal generated initial interest and discussion, it has not seen significant development or adoption in recent years. The crypto community has continued to explore various approaches to digital identity, and it's possible that other standards or solutions have gained more traction. As of now, there isn't a clear consensus on a single, widely-adopted identity",
  "ERC-1491": "<article><h1>ERC-1491: Human Cost Accounting Standard</h1>\n\n<p>ERC-1491, proposed by Iamnot Chris in October 2018, aimed to create a standard interface for Human Capital Accounting tokens on Ethereum. The proposal sought to establish a way to measure and tokenize human capabilities, knowledge, and output within the blockchain ecosystem. This innovative concept attempted to bridge the gap between the deterministic nature of blockchain technology and the unpredictable human factor in real-world applications.</p>\n\n<p>The proposal's core idea was to create a system that could discover, track, and transfer the \"motivational hierarchy\" of human resources. By doing so, it aimed to reduce market search costs and foster the integration of human innovation into blockchain systems. However, despite its ambitious goals, ERC-1491 did not gain significant traction in the Ethereum community.</p>\n\n<p>Currently, the proposal's status is listed as \"Stagnant,\" indicating that it has not progressed through the Ethereum Improvement Proposal (EIP) process. While the concept of tokenizing human capital remains intriguing, the challenges of quantifying and standardizing human capabilities have likely contributed to the proposal's lack of adoption. As of now, no widely accepted standard for human capital accounting exists in the Ethereum ecosystem, and ERC-1491 has not been implemented in its proposed form.</p>\n</article",
  "ERC-1504": "<article><h1>ERC-1504: Upgradable Smart Contracts</h1>\n\n<p>ERC-1504 was proposed in October 2018 by a team of researchers from Peking University and Bucknell University to address the challenge of upgrading deployed smart contracts. The proposal aimed to create a standard interface for making smart contracts upgradable, allowing developers to fix bugs or security vulnerabilities without having to destroy and redeploy contracts.</p>\n\n<p>The key innovation of ERC-1504 was to separate a contract's logic from its storage, enabling the logic to be upgraded while preserving existing data. It also included a voting mechanism to govern upgrades in a decentralized manner. This approach was motivated by costly incidents like The DAO hack, which required a contentious hard fork to resolve.</p>\n\n<p>While ERC-1504 offered an important conceptual framework for upgradable contracts, it has not gained widespread adoption. The proposal's status is currently \"Stagnant\", indicating a lack of recent activity or updates. More recent approaches like the proxy pattern have become more common for implementing upgradable contracts in practice. However, ERC-1504 remains an interesting early attempt at standardizing contract upgradeability that influenced later work in this area.</p></article>",
  "ERC-1523": "<article><h1>ERC-1523: Standard for Insurance Policies as ERC-721 Non-Fungible Tokens</h1>\n\n<p>EIP-1523, proposed by Christoph Mussenbrock in October 2018, aimed to establish a standard interface for representing insurance policies as ERC-721 non-fungible tokens (NFTs) on the Ethereum blockchain. The proposal sought to define a minimum metadata structure with common properties for insurance policies, enabling them to be treated as tradable digital assets while maintaining their unique characteristics.</p>\n\n<p>The motivation behind EIP-1523 was to create interoperability within decentralized insurance protocols, allowing policies to be bundled, securitized, and traded uniformly by various actors in the insurance industry. By leveraging the ERC-721 standard, the proposal aimed to provide a framework for handling insurance policies as a specific class of NFTs, complete with standardized properties such as customer information, risk details, premiums, and policy periods.</p>\n\n<p>Currently, EIP-1523 is in a \"Stagnant\" status, indicating that it has not seen significant activity or updates since its initial proposal. While the idea of tokenizing insurance policies remains relevant, the specific implementation outlined in this EIP has not gained widespread adoption. As the DeFi and blockchain insurance sectors continue to evolve, newer proposals or alternative approaches may have supers",
  "ERC-1538": "<article><h1>ERC-1538: Transparent Contract Standard</h1>\n\n<p>ERC-1538, proposed by Nick Mudge in October 2018, aimed to create a standard for upgradeable and transparent smart contracts. The proposal addressed limitations in contract size and provided a framework for adding, replacing, and removing functions atomically while maintaining a public record of changes.</p>\n\n<p>The key features of ERC-1538 included standardized events for reporting contract modifications, a query mechanism for function discovery, and the ability to overcome the 24KB contract size limit. It also allowed contracts to transition from upgradeable to immutable, enhancing trust and flexibility.</p>\n\n<p>However, ERC-1538 was ultimately withdrawn and replaced by EIP-2535, known as the Diamond Standard. EIP-2535, also authored by Nick Mudge, built upon the concepts of ERC-1538 and provided a more comprehensive and refined approach to modular smart contract systems. The Diamond Standard has since gained traction in the Ethereum community as a solution for creating large, upgradeable smart contract systems.</p>\n</article>",
  "ERC-1577": "<article><h1>ERC-1577: contenthash field for ENS</h1>\n\n<p>EIP-1577, proposed by Dean Eigenmann and Nick Johnson in November 2018, introduced the 'contenthash' field for ENS (Ethereum Name Service) resolvers. This improvement aimed to provide a more standardized way of mapping ENS names to content hosted on distributed systems like IPFS and Swarm.</p>\n\n<p>The proposal addressed the growing need for a consistent method to resolve ENS names to decentralized content, as applications like Metamask and Status were already implementing such functionality. By introducing the 'contenthash' field and deprecating the existing 'content' and 'multihash' fields, EIP-1577 sought to create a unified approach for specifying network and content addresses in ENS.</p>\n\n<p>While EIP-1577 provided a clear specification for implementing the 'contenthash' field using multicodec encoding, its current status is listed as 'Stagnant'. This suggests that while the proposal offered a valuable solution, it may not have gained widespread adoption or further development. However, the concepts introduced in this EIP have likely influenced subsequent improvements in ENS and content addressing within the Ethereum ecosystem.</p></article>",
  "ERC-1581": "<article><h1>ERC-1581: Non-wallet usage of keys derived from BIP-32 trees</h1>\n\n<p>ERC-1581 was proposed in 2018 by Michele Balistreri to define a derivation path structure for generating key pairs from BIP-32 hierarchical deterministic wallets that are not intended for holding cryptocurrency assets. The motivation was to allow blockchain applications to derive separate keys for privacy-sensitive functions, while still maintaining the convenience of a single seed phrase for backup and recovery.</p>\n\n<p>The proposal builds on BIP-32 and BIP-44, which define hierarchical deterministic wallets for cryptocurrency use. ERC-1581 specifies a separate derivation branch that can coexist with BIP-44 wallets, allowing applications to generate keys for non-wallet purposes that are still tied to the same master seed. This provides better security isolation compared to reusing wallet keys, while avoiding the need to manage multiple independent seeds.</p>\n\n<p>The current status of ERC-1581 is \"Stagnant\", indicating it has not seen recent activity or updates. While the concept addresses a valid use case, it does not appear to have gained widespread adoption or implementation in Ethereum wallets and applications. Developers working on blockchain applications requiring separate key derivation may still find the proposal informative, but should investigate more recent standards or best practices for key",
  "ERC-1592": "<article><h1>ERC-1592: Address and ERC20-compliant transfer rules</h1>\n\n<p>ERC-1592 was proposed in November 2018 by Cyril Lapinte and Laurent Aapro to standardize transfer rules for ERC20 tokens. The goal was to enable more flexible control over token transfers based on sender, recipient, and amount. It aimed to improve reusability, gas costs, and transparency around transfer restrictions.</p>\n\n<p>The proposal defined interfaces for transfer rules and a rule engine to compose multiple rules. This was intended to address needs around transfer restrictions that had been raised in other EIPs like ERC-902, ERC-1066, and ERC-1175. By externalizing rule logic, it sought to make restrictions more modular and easier to update.</p>\n\n<p>However, ERC-1592 appears to have stagnated and was not widely adopted. More recent token standards like ERC-1404 and ERC-1462 have since emerged to handle transfer restrictions in different ways. While the goals were valid, the proposal did not gain enough traction to become a formal standard. Its current status remains stagnant in the EIP process.</p></article>",
  "ERC-1613": "<article><h1>ERC-1613: Gas Stations Network</h1>\n\n<p>ERC-1613, proposed by Yoav Weiss, Dror Tirosh, and Alex Forshtat in November 2018, aimed to make smart contracts accessible to users without Ether by allowing contracts to pay for incoming calls. This \"collect-call\" model would enable dapps to cover gas costs for users, potentially increasing adoption. The proposal suggested creating a network of incentivized \"gas stations\" to facilitate these gasless transactions.</p>\n\n<p>The Gas Stations Network was designed to be compatible with ERC-1077 (Meta Transactions) and required no changes to the Ethereum network itself. It aimed to abstract implementation details from both dapp developers and users, making it easier to integrate into existing dapps. The proposal also included provisions for third-party subsidization of gas costs for specific contracts.</p>\n\n<p>Despite its innovative approach to solving the onboarding problem for new crypto users, ERC-1613 is currently in a \"Stagnant\" status. While the concept of meta transactions has gained traction in various forms, including through layer-2 solutions and account abstraction proposals, this specific implementation has not seen widespread adoption. The core idea of gasless transactions, however, remains relevant in ongoing discussions about improving Ethereum's user experience.</p>\n</article>",
  "ERC-1616": "<article><h1>ERC-1616: Attribute Registry Standard</h1>\n\n<p>ERC-1616, proposed in November 2018 by a team including 0age and Santiago Palladino, aimed to standardize a registry for attribute metadata assigned to Ethereum accounts. The proposal introduced the concept of an \"Attribute Registry,\" which acts as a trusted claims aggregator, simplifying the verification process for parties needing to check account attributes.</p>\n\n<p>The core idea was to abstract claims as standard attributes, represented as key-value pairs for each account. This approach allowed for composability and advanced attribute formation. The proposal also included a method for determining available attribute keys in the registry, enhancing its flexibility and usability.</p>\n\n<p>Currently, ERC-1616 is in a \"Stagnant\" status, indicating that it hasn't seen significant development or discussion recently. While the proposal offered a novel approach to handling account metadata, it appears that other standards or methods may have gained more traction in addressing similar needs within the Ethereum ecosystem.</p>\n</article>",
  "ERC-162": "<article><h1>ERC-162: Initial ENS Hash Registrar</h1>\n\n<p>ERC-162, proposed by Maurelian, Nick Johnson, and Alex Van de Sande in 2016, defined the initial registrar contract for allocating names in the Ethereum Name Service (ENS). This proposal was crucial for launching ENS on the Ethereum mainnet in May 2017.</p>\n\n<p>The ERC specified a temporary registrar using a Vickrey auction system to distribute ENS names. It included restrictions like only allowing names 7 characters or longer and limiting registrations to the .eth TLD. The goal was to provide a fair initial distribution mechanism while leaving room for future improvements to the ENS system.</p>\n\n<p>ERC-162 was successfully implemented and deployed, serving as the initial ENS registrar for several years. However, it has since been superseded by newer registrar contracts that address limitations and add new capabilities. The current ENS system uses a different registration process, but ERC-162 played a critical role in bootstrapping the ENS ecosystem.</p>\n\n</article>",
  "ERC-1620": "<article><h1>ERC-1620: Money Streaming</h1>\n\n<p>ERC-1620, proposed by Paul Berg in November 2018, introduced the concept of \"money streaming\" to Ethereum. This improvement proposal aimed to enable continuous payments over a finite period, using block numbers as a proxy for time to update balances. The proposal's core idea was to allow for more granular, real-time financial transactions, moving away from traditional chunked payments like monthly salaries.</p>\n\n<p>The proposal outlined a system where a provider sets up a money streaming contract, and a payer can start the stream by depositing funds for a chosen period. The payee can then withdraw money based on the ongoing solvency of the stream, calculated using the payment rate and the number of blocks that have passed. ERC-1620 also included provisions for updating stream terms with mutual consent and allowing either party to stop the stream at any time.</p>\n\n<p>While ERC-1620 presented an innovative approach to financial transactions on Ethereum, its current status is \"Stagnant\". This suggests that while the proposal gained initial interest, it hasn't seen significant development or adoption. It's possible that other similar proposals or implementations have since emerged, potentially superseding ERC-1620. However, the core concept of continuous, granular payments remains relevant in the evolving DeFi landscape.</p></article>",
  "ERC-1633": "<article><h1>ERC-1633: Re-Fungible Token Standard (RFT)</h1>\n\n<p>ERC-1633, proposed in 2018 by Billy Rennekamp, Dan Long, Kiryl Yermakou, and Nate van der Ende, aimed to create a standard for shared ownership of ERC-721 non-fungible tokens (NFTs) using ERC-20 fungible tokens. The proposal extended the ERC-20 standard and utilized ERC-165 for interface detection, allowing for proportional ownership of NFTs while maintaining compatibility with existing ERC-20 infrastructure.</p>\n\n<p>The RFT standard was designed to be minimalistic, focusing on essential commonalities to enable flexibility for future extensions. It allowed for contract-level and external verification of whether a fungible token represents shared ownership of an NFT. This approach opened up possibilities for fractional ownership of valuable digital assets, potentially increasing liquidity and accessibility in the NFT market.</p>\n\n<p>Currently, ERC-1633 is in a \"Stagnant\" status, indicating that development and adoption have slowed. While the concept of fractionalized NFTs remains relevant, other proposals and implementations have emerged to address similar use cases. For example, ERC-1155 (Multi Token Standard) has gained significant traction for representing both fungible and non-fungible tokens",
  "ERC-165": "<article><h1>ERC-165: Standard Interface Detection</h1>\n\n<p>ERC-165 was proposed in January 2018 to create a standard way for smart contracts to publish and detect which interfaces they implement. It was authored by several prominent Ethereum developers including Christian Reitwießner, Nick Johnson, and Fabian Vogelsteller.</p>\n\n<p>The proposal defines how interfaces are identified using function selectors, how contracts can publish supported interfaces, and how to detect if a contract implements ERC-165 or any other interface. This allows for better interoperability between contracts by providing a standard discovery mechanism.</p>\n\n<p>ERC-165 achieved Final status and has been widely adopted in the Ethereum ecosystem, particularly for NFT standards like ERC-721. It remains an important building block for smart contract interoperability, though some newer standards like ERC-1820 have expanded on its capabilities for more complex interface detection scenarios.</p>\n</article>",
  "ERC-1710": "<article><h1>ERC-1710: URL Format for Web3 Browsers</h1>\n\n<p>ERC-1710, proposed by Bruno Barbieri in January 2019, aimed to standardize URL formats for Web3 browsers, addressing the growing need for seamless interaction with decentralized applications (dApps) on mobile devices. The proposal sought to differentiate Web3 URLs from standard web addresses, enabling automatic opening in compatible Web3 browsers.</p>\n\n<p>The motivation behind ERC-1710 stemmed from the challenges faced by dApps in improving mobile user experience. At the time, many were using proprietary deep-linking schemes to specific mobile Web3 browsers. The proposal aimed to create a universal standard that would allow dApps to recommend specific browsers while ensuring compatibility with any installed Web3 browser supporting the standard.</p>\n\n<p>Despite its potential benefits, ERC-1710 has not gained widespread adoption and is currently in a \"Stagnant\" status. The proposal's lack of progress may be attributed to the rapid evolution of Web3 technologies and the emergence of alternative solutions for mobile dApp interactions. While the idea behind ERC-1710 remains relevant, the cryptocurrency community has likely explored other avenues to address the challenges of Web3 browsing on mobile devices.</p></article>",
  "ERC-173": "<article><h1>ERC-173: Contract Ownership Standard</h1>\n\n<p>ERC-173, proposed by Nick Mudge and Dan Finlay in June 2018, standardizes the interface for contract ownership in Ethereum. This proposal addresses the common need for contracts to have an owner with special privileges, such as withdrawing funds or performing administrative actions. The standard defines three key elements: a function to read the current owner, a function to transfer ownership, and an event emitted when ownership changes.</p>\n\n<p>The motivation behind ERC-173 was to improve interoperability between contracts and user interfaces that manage contract ownership. This standardization enables the development of more sophisticated tools and applications, such as exchanges for buying and selling Ethereum contracts, contract wallets that can hold and transfer ownership of other contracts, and contract registries that require owner verification. The proposal quickly gained traction in the Ethereum community due to its simplicity and utility.</p>\n\n<p>ERC-173 has been widely adopted and is now considered a fundamental building block in many Ethereum projects. Its status is \"Final,\" indicating that it has been thoroughly reviewed and accepted by the community. While there have been no significant updates or competing proposals, the standard's simplicity and effectiveness have ensured its continued relevance. Today, implementing ERC-173 is considered best practice for contracts that require ownership functionality, providing a clear and consistent way to manage contract control",
  "ERC-1753": "<article><h1>ERC-1753: Smart Contract Interface for Licenses</h1>\n\n<p>ERC-1753, proposed in 2019 by a team led by Lucas Cullen, aimed to create a standardized Ethereum interface for issuing and managing licenses, permits, and grants. This proposal sought to bring the concept of government-issued licenses onto the blockchain, potentially streamlining the process and improving transparency.</p>\n\n<p>The proposal defined a license as a temporary authority granted to a person or entity, allowing them to perform actions that would otherwise be unlawful. It outlined key properties of licenses, such as being personally granted, temporary, and potentially transferrable. While the idea was innovative, combining traditional regulatory concepts with blockchain technology, the proposal has remained in a stagnant state since its introduction.</p>\n\n<p>As of now, ERC-1753 has not been widely adopted or implemented. The cryptocurrency community has focused on other areas of development, such as decentralized finance (DeFi) and non-fungible tokens (NFTs). While the concept of blockchain-based licensing remains relevant, especially in the context of digital identity and credentials, this specific proposal has not gained significant traction in the Ethereum ecosystem.</p>\n</article>",
  "ERC-1761": "<article><h1>ERC-1761: Scoped Approval Interface</h1>\n\n<p>ERC-1761, proposed in February 2019 by Witek Radomski, Andrew Cooke, James Therien, and Eric Binet, introduced the concept of \"scoped approvals\" for token contracts with ID domains like ERC-1155 and ERC-721. This proposal aimed to enhance token management by allowing restricted approvals for specific token IDs or groups of IDs, defined as \"scopes\".</p>\n\n<p>The proposal addressed a growing need for more granular control over token approvals, particularly in complex ecosystems where multiple parties might manage different sets of tokens within a single contract. Use cases included managing vehicle fleets, game development with shared contracts, and separating high and low-value tokens for different approval levels.</p>\n\n<p>Currently, ERC-1761 is in a \"Stagnant\" status, indicating that it hasn't seen significant development or adoption since its proposal. While the concept of scoped approvals remains relevant, especially for large-scale token management systems, it appears that the crypto community has not widely implemented this standard. Developers working on complex token systems may still find value in the concepts presented in ERC-1761, but should be aware of its current status and consider more recent or widely adopted standards for token approval mechanisms.</p></article>",
  "ERC-1775": "<article><h1>ERC-1775: App Keys for Application-Specific Wallet Accounts</h1>\n<p>ERC-1775, proposed by Vincent Eli and Dan Finlay in February 2019, aimed to address scalability and privacy challenges in Ethereum by introducing \"app keys\" - application-specific wallet accounts. The proposal was designed to improve user experience, security, and privacy for decentralized applications (dApps) by allowing wallets to derive separate accounts for each application.</p>\n<p>The main benefits of app keys included isolating accounts for enhanced privacy, giving dApp developers more control over account management, and enabling wallets to implement more permissive security levels for these secondary accounts while maintaining strict security for primary accounts. This approach would allow for automatic signing of transactions or state updates without compromising the main account's security.</p>\n<p>Despite its potential benefits, ERC-1775 has not gained widespread adoption and is currently in a \"Stagnant\" status. While the proposal offered interesting solutions to important challenges in the Ethereum ecosystem, it appears that other approaches or proposals may have taken precedence in addressing these issues. As of now, there hasn't been significant momentum to implement this proposal, and developers may want to explore more recent standards or solutions for similar functionality.</p>\n</article>",
  "ERC-181": "<article><h1>ERC-181: ENS Reverse Resolution for Ethereum Addresses</h1>\n\n<p>EIP-181, proposed by Nick Johnson in December 2016, introduced a standard for reverse resolution of Ethereum addresses using the Ethereum Name Service (ENS). This proposal aimed to allow the association of human-readable names with Ethereum addresses, enhancing usability and metadata attachment for blockchain interactions.</p>\n\n<p>The EIP specified a top-level domain (.reverse), a registrar, and a resolver interface for reverse resolution. It enabled address owners to claim authoritative names for their addresses, providing a way to verify that reverse records were published by the actual address owners. This proposal was particularly useful for applications displaying account names instead of addresses and for attaching metadata to addresses.</p>\n\n<p>EIP-181 has been implemented and is currently in \"Final\" status, indicating its adoption and integration into the Ethereum ecosystem. It has become a fundamental part of ENS functionality, widely used in wallets, block explorers, and other Ethereum-based applications to improve user experience and provide more context for blockchain addresses.</p></article>",
  "ERC-1812": "<article><h1>ERC-1812: Ethereum Verifiable Claims</h1>\n\n<p>ERC-1812, proposed by Pelle Braendgaard in March 2019, aimed to establish a standard for reusable off-chain verifiable claims using EIP-712 Signed Typed Data. The proposal sought to address the need for integrating smart contracts with real-world organizational requirements, such as KYC, GDPR, and accredited investor rules, while maintaining privacy and regulatory compliance.</p>\n\n<p>Unlike on-chain claim systems like ERC-735 and ERC-780, ERC-1812 proposed an off-chain solution to avoid storing personally identifiable information (PII) on the immutable Ethereum blockchain. This approach aligned with GDPR requirements and offered better privacy protection. The proposal built upon the W3C Verifiable Claims Data Model, adapting it for Ethereum's ecosystem.</p>\n\n<p>Currently, ERC-1812 is in a \"Stagnant\" status, indicating limited development activity since its proposal. While the concept of off-chain verifiable claims remains relevant, the Ethereum community has explored various alternatives and improvements in the realm of decentralized identity and verifiable credentials. Developers interested in implementing similar functionality may want to investigate more recent proposals or established standards in the evolving decentralized identity space.</p></article>",
  "ERC-1820": "<article><h1>ERC-1820: Pseudo-introspection Registry Contract</h1>\n\n<p>ERC-1820, proposed by Jordi Baylina and Jacques Dafflon in March 2019, defines a universal registry smart contract for Ethereum addresses to register and query interface implementations. It supersedes ERC-820, fixing an incompatibility with ERC-165 introduced by Solidity 0.5. The proposal's status is Final.</p>\n\n<p>The standard allows any address (contract or regular account) to register which interfaces it supports and which smart contract is responsible for the implementation. This enables a form of pseudo-introspection, where contracts can query the registry to determine if an address supports a specific interface. ERC-1820 maintains backward compatibility with ERC-165 and is designed to be deployed with the same address on all chains.</p>\n\n<p>ERC-1820 has been widely adopted and is considered a crucial standard for interface detection in Ethereum. It solves the problem of interface discovery without requiring changes to the Ethereum protocol itself. The proposal's authors actively maintained and promoted the standard, contributing to its widespread adoption in the Ethereum ecosystem.</p>\n</article>",
  "ERC-1822": "<article><h1>ERC-1822: Universal Upgradeable Proxy Standard (UUPS)</h1>\n\n<p>EIP-1822 was proposed in March 2019 by Gabriel Barros and Patrick Gallagher to standardize upgradeable proxy contracts. The motivation was to improve upon existing proxy implementations and create a universal standard that would be compatible with all contracts without introducing conflicts between proxy and business logic.</p>\n\n<p>The key innovation of UUPS is using a unique storage position in the proxy contract to store the logic contract's address, along with a compatibility check to ensure successful upgrades. This allows for unlimited upgrades as determined by custom logic. It also provides a method for selecting multiple constructors without inhibiting bytecode verification.</p> \n\n<p>While UUPS offered some improvements over earlier proxy patterns, it has been largely superseded by newer standards like EIP-1967 and EIP-2535. The proposal is currently in \"Stagnant\" status, indicating lack of recent activity or adoption. However, the concepts introduced in UUPS influenced later proxy standards and upgrade patterns in Ethereum smart contract development.</p></article>",
  "ERC-1844": "<article><h1>ERC-1844: ENS Interface Discovery</h1>\n\n<p>EIP-1844 was proposed by Nick Johnson in March 2019 to enable discovery of interfaces associated with ENS names and Ethereum addresses. The proposal aimed to extend EIP-165's interface discovery capabilities by allowing interfaces to be implemented by contracts other than the target contract.</p>\n\n<p>The motivation was to enable exposing related functionality, like atomic swaps for tokens, that may be implemented in separate contracts. EIP-1844 defined a new ENS resolver profile with an <code>interfaceImplementer</code> function to return the address implementing a given interface for an ENS name or address.</p>\n\n<p>While the proposal provided a useful mechanism for interface discovery, it has remained in \"Stagnant\" status and has not been widely adopted. More recent ENS improvements like EIP-6821 (Name Resolution for Smart Contracts) have continued to evolve ENS capabilities, potentially superseding aspects of EIP-1844.</p>\n</article>",
  "ERC-190": "<article><h1>ERC-190: Ethereum Smart Contract Packaging Standard</h1>\n\n<p>ERC-190, proposed in January 2017, aimed to establish a standard for packaging Ethereum smart contracts. This proposal was collaboratively developed by maintainers of prominent Ethereum development frameworks, including Tim Coulter (Truffle), Denis Erfurt (Dapple), Piper Merriam (Populus), RJ Catalano (Eris PM), and Iuri Matias (Embark). The primary motivation was to address the lack of a packaging system in the Ethereum ecosystem, which hindered code reuse and negatively impacted both productivity and security.</p>\n\n<p>The proposal sought to enable easier sharing and reuse of well-audited smart contract implementations, such as ERC20 tokens. By establishing a packaging standard, developers could more easily find and integrate existing code, potentially increasing overall productivity and security in smart contract development. Additionally, the standard aimed to benefit end-users by allowing wallet software to more easily consume and interact with standardized contract packages.</p>\n\n<p>ERC-190 has a status of \"Final,\" indicating it has been accepted and implemented. However, in practice, it has been largely superseded by more recent packaging standards and tools in the Ethereum ecosystem, such as the Ethereum Package Registry (EPR) and NPM-based solutions.",
  "ERC-1900": "<article><h1>ERC-1900: Decentralized Type System for EVM</h1>\n\n<p>ERC-1900, proposed by Loredana Cirstea and Christian Tzurcanu in March 2019, aimed to establish a decentralized type system for Ethereum to improve data standardization and interoperability between protocols. The proposal introduced an on-chain Type Registry called \"dType\" and a common interface for creating types based on Solidity structs.</p>\n\n<p>The motivation behind ERC-1900 was to enable better analysis of blockchain data, facilitate smart contract development tools, and lay the groundwork for a more comprehensive decentralized type system with data storage. This proposal was meant to be the first step towards creating a \"Singleton Operating System\" or \"World Computer\" vision for Ethereum.</p>\n\n<p>Currently, ERC-1900 is in a \"Stagnant\" status, indicating that it has not seen significant activity or updates recently. While the proposal offered an interesting approach to improving Ethereum's type system, it has not gained widespread adoption or implementation. Developers interested in type systems for Ethereum may want to explore more recent alternatives or wait for further developments in this area.</p>\n</article>",
  "ERC-191": "<article><h1>ERC-191: Signed Data Standard</h1>\n\n<p>ERC-191, proposed in 2016 by Martin Holst Swende and Nick Johnson, aimed to standardize how signed data is handled in Ethereum contracts. The proposal was motivated by issues with presigned transactions in multisignature wallets, including potential security vulnerabilities and lack of wallet-specific binding.</p>\n\n<p>The EIP introduced a structured format for signed messages, incorporating a version byte, signer address, and intended validator contract address. This approach helped prevent cross-wallet transaction reuse and improved the overall security of presigned transactions. The proposal gained traction in the Ethereum community and influenced the development of subsequent standards like EIP-712.</p>\n\n<p>Currently, ERC-191 has a \"Final\" status, indicating its widespread acceptance and implementation. While it remains a fundamental standard for signed data in Ethereum, more advanced alternatives like EIP-712 have since been developed to provide enhanced typed structured data signing capabilities. Developers should consider using EIP-712 for new projects, while still being aware of ERC-191's historical importance and continued relevance in existing systems.</p>\n</article>",
  "ERC-1921": "<article><h1>ERC-1921: dType Functions Extension</h1>\n\n<p>ERC-1921 was proposed in 2019 as an extension to ERC-1900, which defined a Decentralized Type System (dType) for Ethereum. The key purpose was to enable registering individual smart contract functions, particularly pure and view functions, in the dType Registry. This would allow for easier discovery, addressing, and automated execution of contract functions within the EVM ecosystem.</p>\n\n<p>The proposal was authored by Loredana Cirstea and Christian Tzurcanu as part of a series of EIPs focused on expanding the dType concept. It aimed to define the data structures and interfaces needed to register function metadata in a decentralized registry. This would enable tools like block explorers, smart contract IDEs, and security analysis tools to more easily work with contract functions across the Ethereum ecosystem.</p>\n\n<p>Currently, ERC-1921 has a status of \"Stagnant\", indicating it has not seen recent activity or updates. While the core ideas around decentralized type systems and function registries remain relevant, other proposals and standards have likely emerged to address similar needs in the years since. The Ethereum ecosystem continues to evolve rapidly, so developers should research the latest standards and best practices around smart contract interoperability and discoverability.</p></article>",
  "ERC-1922": "<article><h1>ERC-1922: zk-SNARK Verifier Standard</h1>\n\n<p>ERC-1922 proposed a standard interface for Ethereum smart contracts that verify zk-SNARKs (Zero-Knowledge Succinct Non-Interactive Arguments of Knowledge). It was authored by Michael Connor, Chaitanya Konda, and Duncan Westland from Ernst &amp; Young in 2018. The proposal aimed to standardize how verifier contracts load parameters and verify zk-SNARK proofs, returning a simple true/false result.</p>\n\n<p>The motivation behind ERC-1922 was to make it easier for developers to implement private transactions, private computations, and scaling solutions using zk-SNARKs. By providing a common interface, the proposal sought to simplify the integration of zk-SNARK verification across different Ethereum applications and encourage wider adoption of zero-knowledge proofs.</p>\n\n<p>Currently, ERC-1922 is in \"Stagnant\" status, meaning it has not seen much activity or progress recently. While the proposal highlighted an important need in the ecosystem, other approaches and standards for zk-SNARK verification have since emerged. Developers working with zero-knowledge proofs today may want to consider more recent standards or libraries that have gained wider adoption in the Ethereum community.</p></article>",
  "ERC-1923": "<article><h1>ERC-1923: zk-SNARK Verifier Registry Standard</h1>\n\n<p>ERC-1923 proposed a standardized interface for registering zk-SNARK verifications on Ethereum. It was authored in 2018 by Michael Connor, Chaitanya Konda, and Duncan Westland from Ernst & Young. The proposal aimed to create a common registry for tracking zk-SNARK proof verifications to support privacy and scaling applications.</p>\n\n<p>The motivation behind ERC-1923 was to enable easier implementation of private transactions, private computations, and scaling solutions using zk-SNARKs. By standardizing the registration process, it would allow applications to more easily track and interpret zk-SNARK verifications on-chain. However, the proposal lacked some key details on the specific functionality and benefits of the registry approach.</p>\n\n<p>Currently, ERC-1923 is in \"Stagnant\" status, indicating lack of progress or adoption. While zk-SNARKs remain an active area of research and development in Ethereum, this particular registry standard did not gain traction. More recent zk-SNARK implementations tend to use custom approaches rather than a standardized registry. The core idea of tracking verifications may still have merit, but would likely need to be updated and expanded to align with the latest z",
  "ERC-1948": "<article><h1>ERC-1948: Non-fungible Data Token</h1>\n\n<p>ERC-1948 was proposed in April 2019 by Johann Barbie, Ben Bollen, and pinkiebell to extend non-fungible tokens (NFTs) with dynamic data storage capabilities. The proposal aimed to address limitations of existing NFT standards like ERC-721, which only allowed static metadata to be set at minting time. ERC-1948 added a 32-byte data field to NFTs that could be updated by the token owner, enabling use cases like evolving game assets, updatable IP rights tokens, and cross-chain data transport.</p>\n\n<p>The proposal specified adding read and write functions for the data field, as well as an event emitted on data updates. This would allow NFTs to store mutable state that could change over their lifetime. Early discussions highlighted potential applications in blockchain gaming, intellectual property management, and cross-chain bridges. However, the proposal did not gain widespread adoption or implementation.</p>\n\n<p>Currently, ERC-1948 has a \"Stagnant\" status, indicating lack of progress or community interest in standardization. While the core idea of mutable NFT data remains relevant, other approaches like ERC-1155 multi-tokens have become more prominent for flexible token designs. Given its inactive status, ERC-1948 is unlikely",
  "ERC-1967": "<article><h1>ERC-1967: Proxy Storage Slots</h1>\n\n<p>EIP-1967, proposed by Santiago Palladino, Francisco Giordano, and Hadrien Croubois in April 2019, standardizes storage slots for proxy contracts in Ethereum. The proposal aims to improve interoperability and transparency for proxy contracts, which are commonly used for upgradeability and gas optimization in smart contract development.</p>\n\n<p>The core idea of EIP-1967 is to define specific storage slots where proxy contracts store critical information, such as the address of the logic contract they delegate to. This standardization allows tools like block explorers to easily extract and display this information, enhancing transparency for users. It also enables logic contracts to interact with these standardized slots if needed.</p>\n\n<p>EIP-1967 has been widely adopted and is considered a final standard. It has become an essential part of proxy contract implementations, such as those in the OpenZeppelin library. The proposal's success has led to improved consistency across proxy implementations and better tooling support in the Ethereum ecosystem.</p>\n</article>",
  "ERC-1973": "<article><h1>ERC-1973: Scalable Rewards</h1>\n\n<p>ERC-1973, proposed by Lee Raj and Qin Jian in April 2019, aimed to address the scalability issues in token reward distribution for decentralized applications (DApps). The proposal introduced a mintable token rewards interface that would mint a configurable number of tokens per block, distributing them equally among active participants in a DApp's ecosystem.</p>\n\n<p>The key innovation of ERP-1973 was its solution to the gas limit problem faced by push-based reward systems. As DApps scale to thousands of users, distributing small rewards to each becomes prohibitively expensive due to Ethereum's block gas limit. ERC-1973 proposed a pull-based system where any active participant could initiate the minting process, allowing for more efficient and scalable reward distribution.</p>\n\n<p>Despite its potential benefits, ERC-1973 has not gained significant traction in the Ethereum community. Its current status is listed as \"Stagnant,\" indicating that development and discussion have largely ceased. While the proposal offered an interesting approach to scalable rewards, it appears that other solutions or priorities have taken precedence in the evolving DeFi landscape.</p></article>",
  "ERC-1996": "<article><h1>ERC-1996: Holdable Token</h1>\n\n<p>ERC-1996, proposed in April 2019 by Julio Faura, Fernando Paris, and Daniel Lehrner, introduces an extension to the ERC-20 standard that enables tokens to be put on hold. This proposal aimed to provide a mechanism for guaranteeing future transfers while making held tokens temporarily unavailable for other transactions.</p>\n\n<p>The core concept of ERC-1996 is the introduction of a \"hold\" feature, which is similar to an escrow. A hold specifies a payer, payee, maximum amount, notary, and expiration time. When created, the specified token balance is locked, and can only be released or executed by the designated notary. This mechanism allows for more complex token interactions, particularly in scenarios requiring conditional transfers or temporary asset freezing.</p>\n\n<p>Currently, ERC-1996 is in a \"Stagnant\" status, indicating that it has not seen significant development or adoption since its proposal. While the concept of holdable tokens remains relevant for certain use cases, particularly in financial applications, the broader Ethereum community has not widely implemented this standard. Other token standards and Layer 2 solutions have emerged to address similar needs for conditional transfers and temporary freezing of assets, potentially superseding the need for ERC-1996 in its current form.</p",
  "ERC-20": "<article><h1>ERC-20: Token Standard</h1>\n\n<p>ERC-20, proposed by Fabian Vogelsteller and Vitalik Buterin in November 2015, is a fundamental standard for fungible tokens on the Ethereum blockchain. It defines a common set of rules for tokens to follow, enabling seamless interaction between various tokens and decentralized applications. The proposal outlines six mandatory functions and two optional ones, which together create a standardized API for token implementation.</p>\n\n<p>The ERC-20 standard quickly gained widespread adoption and became the de facto token standard in the Ethereum ecosystem. It paved the way for the ICO boom of 2017-2018 and remains crucial for DeFi applications. While ERC-20 has been immensely successful, it does have limitations, such as the lack of built-in protection against accidental token burns. This has led to the development of other token standards like ERC-223 and ERC-777, which aim to address some of these issues.</p>\n\n<p>Currently, ERC-20 maintains its \"Final\" status and continues to be widely used. However, developers should be aware of newer standards that may offer additional features or improved safety mechanisms. Despite its age, ERC-20's simplicity and widespread support make it a still-relevant choice for many token implementations today.</p></article>",
  "ERC-2009": "<article><h1>ERC-2009: Compliance Service for Regulated Tokens</h1>\n\n<p>ERC-2009, proposed by Daniel Lehrner in May 2019, aimed to create a decentralized compliance service for regulated tokens. The proposal sought to address the need for on-chain KYC (Know Your Customer) and AML (Anti-Money Laundering) checks without compromising the decentralized nature of token transfers.</p>\n\n<p>The proposal defined three key actors: Operators (approved accounts for updating token accumulations), Tokens (smart contracts using the Compliance Service), and Token holders (accounts subject to compliance checks). It aimed to eliminate the need for off-chain confirmations, which could slow down transfers and introduce centralization.</p>\n\n<p>Currently, ERC-2009 is in a \"Stagnant\" status, indicating a lack of recent activity or progress. While it addressed an important issue in the regulated token space, the proposal has not gained significant traction. The cryptocurrency community continues to explore various approaches to on-chain compliance, balancing regulatory requirements with decentralization principles.</p>\n</article>",
  "ERC-2018": "<article><h1>ERC-2018: Clearable Token</h1>\n\n<p>ERC-2018, the Clearable Token proposal, was introduced in April 2019 by Julio Faura, Fernando Paris, and Daniel Lehrner. It aims to add a clearing process to ERC tokens, allowing for regulatory compliance in token transfers. This proposal is particularly relevant for tokens that need to adhere to KYC (Know Your Customer) and AML (Anti-Money Laundering) regulations.</p>\n\n<p>The key innovation of ERC-2018 is the introduction of a \"Clearing Agent\" role, which can process, execute, or reject token transfers. This allows for off-chain compliance checks before finalizing transactions. The proposal also defines \"Operators\" who can initiate transfers on behalf of token holders, adding flexibility to the token's usage.</p>\n\n<p>Currently, ERC-2018 is in a \"Stagnant\" status, indicating that development has slowed or stopped. While the proposal addresses important regulatory concerns, its complexity and potential centralization issues may have limited its adoption. More recent proposals focusing on on-chain compliance mechanisms might have superseded ERC-2018 in addressing similar concerns.</p></article>",
  "ERC-2019": "<article><h1>ERC-2019: Fundable Token</h1>\n\n<p>ERC-2019, proposed in May 2019 by Fernando Paris, Julio Faura, and Daniel Lehrner, aimed to extend the ERC-20 standard to allow token holders to request funding directly through the smart contract. The proposal introduced new functions like <code>orderFund</code> and <code>orderFundFrom</code>, enabling users to initiate tokenization requests with attached funding instructions.</p>\n\n<p>The proposal was designed to streamline the process of funding token wallets, particularly for scenarios where off-chain payments needed to be correlated with on-chain token minting. It introduced roles like Token Wallet Owners, Token Contract Owners/Agents, and Orderers to manage the funding workflow. This approach could potentially reduce friction in tokenization processes for various financial applications.</p>\n\n<p>Currently, ERC-2019 has a \"Stagnant\" status, indicating limited activity or adoption since its proposal. While the concept addresses a specific use case, it hasn't gained widespread traction in the Ethereum community. More generalized approaches to handling off-chain to on-chain interactions, such as oracles and bridge protocols, have become more prevalent for similar functionalities.</p></article>",
  "ERC-2020": "<article><h1>ERC-2020: E-Money Standard Token</h1>\n\n<p>ERC-2020, proposed in 2019 by Julio Faura, Fernando Paris, and Daniel Lehrner, aimed to establish a standard for regulated electronic money tokens on Ethereum. The proposal sought to bridge traditional financial regulations with blockchain technology, allowing licensed institutions to issue compliant e-money tokens.</p>\n\n<p>The standard built upon several existing ERCs, including ERC-20, and introduced concepts like operators and compliance checks. It defined interfaces for issuance, redemption, and transfers of e-money tokens, with built-in regulatory controls. The goal was to enable real-world financial applications while maintaining regulatory compliance.</p>\n\n<p>Despite its ambitious goals, ERC-2020 has not gained widespread adoption and is currently in \"Stagnant\" status. While the need for compliant digital money remains relevant, other approaches and standards have emerged to address similar use cases in the evolving regulatory landscape for cryptocurrencies and stablecoins.</p>\n</article>",
  "ERC-2021": "<article><h1>ERC-2021: Payoutable Token</h1>\n\n<p>ERC-2021, proposed in 2019 by Fernando Paris, Julio Faura, and Daniel Lehrner, aimed to extend the ERC-20 token standard to allow token holders to request payouts directly through the smart contract. This proposal introduced methods like <code>orderPayoutFrom</code> that would initiate a workflow for the token contract operator to process or reject payout requests based on attached instructions.</p>\n\n<p>The proposal was motivated by the need for more seamless integration between on-chain tokens and off-chain payment systems, particularly for tokenized fiat currencies or stablecoins. It defined roles like Token Wallet Owners, Token Contract Owners, and Orderers to manage the payout process. However, ERC-2021 faced challenges in gaining widespread adoption, likely due to concerns about the complexity it added to token contracts and potential security implications of including payment instructions on-chain.</p>\n\n<p>Currently, ERC-2021 has a \"Stagnant\" status, indicating lack of progress or community interest in implementing it as a standard. While the core idea of improving token-fiat integration remains relevant, other approaches like decentralized exchanges and fiat on/off ramps have emerged as more popular solutions. For modern implementations, developers would likely look to more recent standards",
  "ERC-205": "<article><h1>ERC-205: ENS support for contract ABIs</h1>\n\n<p>ERC-205, proposed by Nick Johnson in 2017, aimed to enhance Ethereum Name Service (ENS) by enabling the storage of Application Binary Interfaces (ABIs) for smart contracts. This improvement would allow easy lookup of contract interfaces, streamlining interactions with contracts, especially for one-off uses or when ABIs might be updated over time.</p>\n\n<p>The proposal suggested storing ABIs directly in ENS, leveraging their typically small size. It defined a resolver profile for retrieving contract ABIs and established encoding standards for storing ABIs in different formats, allowing users to choose between compact representations and those suitable for on-chain access. This approach would simplify the process of interacting with contracts by combining name lookup and ABI discovery.</p>\n\n<p>Despite its potential benefits, ERC-205 is currently marked as \"Stagnant\" in the Ethereum Improvement Proposals repository. This status suggests that while the idea was valuable, it hasn't seen significant development or adoption since its proposal. The concept of standardized ABI storage and retrieval remains relevant, but alternative solutions or more recent proposals may have superseded this specific implementation approach.</p></article>",
  "ERC-2098": "<article><h1>ERC-2098: Compact Signature Representation</h1>\n\n<p>ERC-2098, proposed by Richard Moore and Nick Johnson in March 2019, introduces a compact representation for Ethereum signatures. The proposal aims to reduce the size of secp256k1 signatures from 65 bytes to 64 bytes, offering benefits in terms of gas costs, transaction sizes, and simplified handling in client code.</p>\n\n<p>The key innovation of ERC-2098 is encoding the yParity bit (used to determine the correct y-coordinate of the public key) into the most significant bit of the 's' value of the signature. This allows the signature to be represented in just two 256-bit words (r and s) instead of the previous three components (r, s, and v). The proposal was well-received and quickly gained traction in the Ethereum community.</p>\n\n<p>ERC-2098 achieved \"Final\" status, indicating its widespread acceptance and implementation. It has been incorporated into many Ethereum clients and libraries, becoming the de facto standard for compact signature representation. The proposal's success led to its inclusion in the broader Ethereum Typed Transaction Envelope (EIP-2718) and is now an integral part of how Ethereum transactions are handled.</p>\n</article>",
  "ERC-2135": "<article><h1>ERC-2135: Consumable Interface (Tickets, etc)</h1>\n\n<p>ERC-2135 is a proposed Ethereum improvement that defines a standard interface for \"consumable\" digital assets, such as event tickets. Authored by Zainan Victor Zhou in June 2019, this EIP extends ERC-721 (Non-Fungible Tokens) and ERC-1155 (Multi Token Standard) to add functionality for marking assets as consumed.</p>\n\n<p>The proposal introduces a <code>consume</code> function that allows tokens to be \"used up\" or marked as consumed, typically by an authorized entity. This addresses common use cases like concert tickets, where the asset loses its utility after being used for entry. By standardizing this concept, ERC-2135 enables greater interoperability for services and applications dealing with consumable digital assets.</p>\n\n<p>While ERC-2135 reached \"Final\" status, indicating its completeness and readiness for implementation, it has not seen widespread adoption compared to its parent standards ERC-721 and ERC-1155. However, the concept remains relevant for specific use cases where digital asset consumption needs to be tracked on-chain. Developers working on ticketing systems or similar consumable asset platforms may still find value in implementing this interface alongside more widely-adopted token standards.</p></article>",
  "ERC-2157": "<article><h1>ERC-2157: dType Storage Extension</h1>\n\n<p>ERC-2157 proposes an optional storage extension for the dType decentralized type system introduced in ERC-1900. Authored by Loredana Cirstea and Christian Tzurcanu in 2019, this proposal aims to standardize the ABI of dType storage contracts to enable deterministic addressing and retrieval of public type instance data on Ethereum.</p>\n\n<p>The key motivation behind ERC-2157 is to improve data addressability and interoperability in the Ethereum ecosystem. While ERC-1900 started standardizing data types, ERC-2157 takes it further by enabling deterministic paths to type instance records. This standardization would allow developers to more easily build applications on top of shared public data sets, both on-chain and off-chain.</p>\n\n<p>Currently, the proposal status is listed as \"Stagnant\", indicating it has not seen recent activity or updates. However, the concepts it introduces around standardized storage and addressing of typed data remain relevant for improving interoperability between Ethereum projects and enabling more sophisticated decentralized applications built on shared data. Further development or alternative proposals may be needed to fully realize the vision of a standardized decentralized type system with deterministic storage.</p></article>",
  "ERC-2193": "<article><h1>ERC-2193: dType Alias Extension - Decentralized Type System</h1>\n\n<p>ERC-2193 was proposed in 2019 by Loredana Cirstea and Christian Tzurcanu as part of the broader dType decentralized type system. It aims to create a semantic standard for human-readable identifiers of on-chain resources, supporting any data type. The proposal suggests using a root-to-leaf format (e.g. object.property) rather than the leaf-to-root format used in DNS and ENS.</p>\n\n<p>The dType Alias system would use identifiers based on the data type (from EIP-1900) and data content (from EIP-2157 storage contracts). This was intended to provide a more intuitive and universal way of addressing on-chain content compared to existing standards like EIP-137 for Ethereum Name Service.</p>\n\n<p>Currently, the proposal is listed as \"Stagnant\", indicating it has not seen recent activity or updates. While the ideas around decentralized type systems and resource identification remain relevant, this specific proposal does not appear to have gained significant traction or implementation. Newer approaches to on-chain data organization and naming may have superseded aspects of this proposal.</p>\n</article>",
  "ERC-223": "<article><h1>ERC-223: Token with Transaction Handling Model</h1>\n\n<p>ERC-223 was proposed in 2017 by Dexaran as an improvement over the popular ERC-20 token standard. The key innovation was adding a <code>tokenReceived</code> callback to notify contract recipients when tokens are received, making tokens behave more like native ether. This addressed issues with ERC-20 where tokens could be lost if sent to unprepared contracts.</p>\n\n<p>The proposal aimed to improve gas efficiency for token deposits to contracts and allow attaching data to transfers. It gained some traction in the Ethereum community, with several projects implementing it. However, it was not widely adopted and remains in \"Final\" status rather than becoming an accepted standard. Critics argued it broke backwards compatibility with existing ERC-20 infrastructure.</p>\n\n<p>Today, ERC-223 is largely superseded by newer token standards like ERC-777 and ERC-1155 which incorporate similar safety mechanisms. While ERC-223 highlighted important issues, the Ethereum ecosystem has generally moved in other directions for addressing them. The proposal served an important role in driving discussion around token standard improvements, even if not widely implemented itself.</p></article>",
  "ERC-2266": "<article><h1>ERC-2266: Atomic Swap-based American Call Option Contract Standard</h1>\n\n<p>ERC-2266 proposes a standard for implementing atomic swap-based American call options on Ethereum. It was authored by Runchao Han, Haoyu Lin, and Jiangshan Yu in August 2019. The proposal aims to formalize and standardize the optionality inherent in Hashed Time-Locked Contract (HTLC) based atomic swaps.</p>\n\n<p>The key insight is that HTLC atomic swaps have an embedded optionality, where the swap initiator can choose to proceed or abort within a time window. This mirrors the behavior of an American call option in traditional finance. ERC-2266 defines interfaces and provides reference implementations to enable consistent development of these option-like atomic swap contracts.</p>\n\n<p>As of December 2020, ERC-2266 was in \"Last Call\" status, soliciting final comments before potential approval. While an interesting formalization of atomic swap optionality, it does not appear to have gained widespread adoption or implementation. More recent developments in decentralized options trading may have superseded aspects of this proposal, though it remains a notable exploration of atomic swap mechanics.</p></article>",
  "ERC-2304": "<article><h1>ERC-2304: Multichain Address Resolution for ENS</h1>\n\n<p>EIP-2304, proposed by Nick Johnson of ENS Domains in September 2019, aimed to extend Ethereum Name Service (ENS) functionality to support address resolution for multiple blockchains. This proposal introduced a new resolver function, <code>addr(bytes32 node, uint coinType)</code>, allowing ENS to return addresses for non-Ethereum chains using SLIP44 coin type indices.</p>\n\n<p>The motivation behind this proposal was the increasing adoption of ENS by multi-coin wallets, whose developers requested the ability to resolve addresses for various blockchains through ENS. EIP-2304 standardized a cross-client method for entering and retrieving these addresses, enhancing ENS's utility in the multi-chain ecosystem.</p>\n\n<p>Currently, the status of EIP-2304 is listed as \"Stagnant,\" suggesting that while it addressed a relevant need, it may not have gained sufficient traction for full implementation. However, the concept of multi-chain support in ENS remains important, and similar functionality may have been implemented through other means or proposals as the blockchain landscape continues to evolve.</p></article>",
  "ERC-2309": "<article><h1>ERC-2309: ERC-721 Consecutive Transfer Extension</h1>\n\n<p>ERC-2309, proposed by Sean Papanikolas in October 2019, introduces a standardized event for creating or transferring multiple consecutive non-fungible tokens (NFTs) in a single transaction. This proposal aims to improve the scalability of ERC-721 by allowing batch operations on NFTs with consecutive token identifiers.</p>\n\n<p>The main motivation behind ERC-2309 was to address the limitations of the original ERC-721 specification, which required emitting individual Transfer events for each token creation or transfer. This became impractical for large-scale operations involving thousands or millions of tokens. ERC-2309 introduces a new ConsecutiveTransfer event that can represent the creation or transfer of a range of consecutive token IDs in a single event, significantly reducing gas costs and improving efficiency.</p>\n\n<p>Currently, ERC-2309 has a \"Final\" status, indicating it has been accepted and implemented by various projects. While it provides a valuable optimization for certain use cases, it's worth noting that other proposals like ERC-1155 (Multi Token Standard) have also gained traction for handling multiple token types and batch transfers. Developers should consider their specific needs when choosing between these standards for NFT projects involving large-scale token operations.</p>\n\n</article",
  "ERC-2333": "<article><h1>ERC-2333: BLS12-381 Key Generation</h1>\n\n<p>EIP-2333, proposed by Carl Beekhuizen in September 2019, defines a method for generating BLS12-381 private keys from a single source of entropy using a tree structure. This proposal aimed to provide a standardized approach for key derivation in Ethereum 2.0 and other systems using BLS signatures on the BLS12-381 curve.</p>\n\n<p>The proposal outlines a hierarchical key derivation scheme that allows for practically unlimited key generation from a single seed. This approach enables different keys or key families to be provisioned for various purposes while only requiring knowledge of a single ancestor key. Additionally, the proposal includes a post-quantum cryptographic fallback for each key, enhancing long-term security.</p>\n\n<p>As of now, EIP-2333 is in \"Stagnant\" status, indicating that it has not seen recent activity or updates. While the proposal offered a robust solution for BLS key generation, its adoption and implementation status in Ethereum and other blockchain systems remains unclear. The broader cryptographic community continues to work on standardizing BLS signatures and related key management approaches.</p></article>",
  "ERC-2334": "<article><h1>ERC-2334: BLS12-381 Deterministic Account Hierarchy</h1>\n\n<p>ERC-2334 was proposed in 2019 by Carl Beekhuizen to define a standard for allocating BLS12-381 keys generated via ERC-2333 to specific purposes. It introduces the concept of a \"path\" string that can be parsed into indices for traversing the tree of keys generated by ERC-2333. This allows deterministic derivation of key pairs for different uses from a single seed.</p>\n\n<p>The proposal was designed to be broadly applicable beyond just Ethereum, aiming to be adopted by the wider community using BLS signatures over BLS12-381. It builds on ERC-2333 for key generation and was intended to eventually migrate to a more neutral repository. The motivation was to support Ethereum 2.0 and other projects using BLS signatures by enabling deterministic, purpose-specific key derivation.</p>\n\n<p>Currently, ERC-2334 has a status of \"Stagnant\", indicating it has not seen much recent activity or progress towards finalization. While it laid important groundwork for BLS key management, competing approaches may have superseded it for Ethereum's needs. Its broader applicability beyond Ethereum remains relevant for projects using BLS signatures, but formal standardization appears to have stalled.</p>",
  "ERC-2335": "<article><h1>ERC-2335: BLS12-381 Keystore</h1>\n\n<p>ERC-2335 was proposed in September 2019 by Carl Beekhuizen to define a JSON format for storing and exchanging BLS12-381 private keys used in Ethereum 2.0. It aimed to provide a secure way to store and transfer these keys between devices, only accessible with a user's password.</p>\n\n<p>This proposal built on previous work like ERC-2333 and ERC-2334 which defined key derivation and signing for BLS12-381 keys. ERC-2335 was designed to be adoptable beyond just Ethereum, considering the wider blockchain industry using BLS signatures. It addressed limitations of Ethereum 1.0's Web3 Secret Storage Definition for the new key type.</p> \n\n<p>The current status of ERC-2335 is \"Stagnant\", meaning development has stalled. However, its concepts likely influenced keystore implementations for Ethereum 2.0 clients and wallets supporting BLS keys. For current best practices around BLS key storage, the latest Ethereum specifications or client documentation should be consulted.</p></article>",
  "ERC-2386": "<article><h1>ERC-2386: Ethereum 2 Hierarchical Deterministic Walletstore</h1>\n\n<p>ERC-2386 was proposed in 2019 by Jim McDonald to create a standard JSON format for storing and retrieving Ethereum 2.0 hierarchical deterministic (HD) wallet definitions. The motivation was to promote interoperability between wallets by standardizing how HD wallet seeds, derivation paths, and metadata are stored securely.</p>\n\n<p>The proposal built on existing standards like EIP-2335 for keystores, adding the concept of \"walletstores\" to define how keys in a wallet are created and managed. It specified JSON formats for storing wallet metadata, encrypted seeds, derivation paths, and other wallet information.</p>\n\n<p>While ERC-2386 addressed an important need for standardizing HD wallet storage in Ethereum 2.0, the proposal is currently marked as \"Stagnant\" and has not seen significant development or adoption since its initial proposal. More recent standards and implementations have likely superseded it for Ethereum 2.0 wallet management. However, its concepts helped inform later work on standardizing HD wallet storage in the Ethereum ecosystem.</p></article>",
  "ERC-2390": "<article><h1>ERC-2390: Geo-ENS</h1>\n\n<p>ERC-2390, titled \"Geo-ENS\", was proposed by James Choncholas in November 2019 to bring geographic split horizon capabilities to the Ethereum Name Service (ENS). The proposal aimed to enable location-aware ENS resolution, similar to GeoDNS systems used in traditional web infrastructure. This would allow ENS resolvers to return different resource records based on the geographic location of the query, enabling use cases like proximity-based load balancing and serving location-specific content.</p>\n\n<p>The proposal built on several existing ENS-related EIPs, including EIP-1185 for DNS record support in ENS and EIP-1062 for IPFS content hash storage. It defined a new resolver interface to support geographic resolution of ENS names. While the idea had merit for improving ENS functionality, the proposal did not gain significant traction in the Ethereum community. As of 2023, the EIP remains in \"Stagnant\" status, indicating a lack of progress or adoption.</p>\n\n<p>Though ERC-2390 has not been implemented, the core concept of adding geographic awareness to ENS remains relevant. Future proposals may revisit this idea as ENS continues to evolve and expand its capabilities. However, any implementation would need to carefully consider privacy implications an",
  "ERC-2400": "<article><h1>ERC-2400: Transaction Receipt URI</h1>\n\n<p>ERC-2400, proposed by Ricardo Guilherme Schmidt and Eric Dvorsak in November 2019, aims to standardize a URI format for submitted Ethereum transactions. The proposal's primary goal is to provide a comprehensive way to represent transaction information, including the chain ID, method signature, and emitted events, enhancing interoperability between Ethereum clients and applications.</p>\n\n<p>The motivation behind ERC-2400 stems from the limited utility of transaction hashes alone. By incorporating additional details, the standard enables easier transaction decoding and improved user experience across various platforms. Use cases include embedding transaction information in QR codes, hyperlinks, and messaging applications, allowing for seamless integration with users' preferred transaction explorers.</p>\n\n<p>Currently, the proposal's status is listed as \"Stagnant,\" indicating that it has not seen significant development or discussion recently. While the idea addresses a valid concern in the Ethereum ecosystem, it's unclear whether this specific proposal will be implemented or if alternative solutions have superseded it. The proposal builds upon EIP-155 (Simple replay attack protection) and EIP-681 (URL Format for Transaction Requests), demonstrating its integration with existing Ethereum standards.</p></article>",
  "ERC-2470": "<article><h1>ERC-2470: Singleton Factory</h1>\n\n<p>ERC-2470 proposes a standardized factory contract for deploying singleton contracts with deterministic addresses across different Ethereum chains. It was authored by Ricardo Guilherme Schmidt in January 2020.</p>\n\n<p>The proposal aims to solve the problem of deploying contracts that need to have the same address on any Ethereum chain, such as registries or other singleton contracts. It utilizes CREATE2 opcode to deploy contracts to predictable addresses based on their bytecode and a salt value. This allows the same contract to be deployed to the same address on any chain.</p>\n\n<p>While the proposal provided a useful standardized approach for deterministic contract deployment, it has remained in \"Stagnant\" status and has not been formally adopted as an ERC standard. However, the concept and implementation have been used by some projects needing cross-chain singleton contracts. Alternative approaches like ERC-1820 have also been developed for similar use cases of universal registries.</p>\n</article>",
  "ERC-2477": "<article><h1>ERC-2477: Token Metadata Integrity</h1>\n\n<p>ERC-2477 was proposed in January 2020 to address integrity concerns with off-chain token metadata in standards like ERC-721 and ERC-1155. The proposal defines an interface for smart contracts to provide integrity checks for token metadata URIs and schemas.</p>\n\n<p>The key motivation was to allow clients to verify that token metadata hadn't been manipulated when fetched from off-chain sources. It specifies two new functions - <code>tokenURIIntegrity</code> and <code>tokenURISchemaIntegrity</code> - that contracts can implement to provide cryptographic hashes for metadata validation. This aims to bring Web3 capabilities similar to W3C's Subresource Integrity standard.</p>\n\n<p>While the proposal addresses an important issue, it has remained in \"Stagnant\" status since 2020 without further development. More recent approaches like on-chain metadata or decentralized storage may have reduced the need for this specific proposal. However, the core concept of verifiable off-chain data remains relevant for many blockchain applications.</p>\n</article>",
  "ERC-2494": "<article><h1>ERC-2494: Baby Jubjub Elliptic Curve</h1>\n\n<p>ERC-2494, proposed by Barry WhiteHat, Marta Bellés, and Jordi Baylina in January 2020, defines the Baby Jubjub elliptic curve. This curve was designed specifically for use within zk-SNARK circuits on Ethereum, addressing scalability and privacy concerns in blockchain technology.</p>\n\n<p>Baby Jubjub is defined over the finite field F_r, where r is the prime order of the alt_bn128 (BN254) curve used in Ethereum for zk-SNARK proof verification. This design allows for efficient implementation of elliptic curve cryptography within zk-SNARK circuits, enabling more complex zero-knowledge proofs on the Ethereum platform.</p>\n\n<p>As of now, the proposal's status is listed as \"Stagnant,\" indicating that it has not seen recent activity or updates. While the Baby Jubjub curve has been used in some projects, it's unclear whether it will be officially adopted as an Ethereum standard. Developers working on zero-knowledge proof systems for Ethereum should be aware of this curve as a potential tool, but should also consider more recent developments in the field.</p>\n</article>",
  "ERC-2520": "<article><h1>ERC-2520: Multiple contenthash records for ENS</h1>\n\n<p>ERC-2520, proposed by Filip Štamcar in February 2020, aimed to allow Ethereum Name Service (ENS) domains to store multiple contenthash records. This would enable domain owners to specify content hosted on different distributed systems (e.g. IPFS, Swarm, Onion) simultaneously.</p>\n\n<p>The proposal was motivated by the increasing number of ENS-compatible hosting systems and the limitation of ENS domains to only one contenthash record. ERC-2520 specified extensions to the existing setContenthash and getContenthash functions to support multiple records, while maintaining backwards compatibility with EIP-1577.</p>\n\n<p>Currently, ERC-2520 has a \"Stagnant\" status, indicating lack of progress or interest. While the idea had merit, it appears the ENS ecosystem has not widely adopted this approach. ENS continues to use a single contenthash record per domain, with users typically choosing IPFS as the primary content system.</p>\n</article>",
  "ERC-2525": "<article><h1>ERC-2525: ENSLogin</h1>\n\n<p>ERC-2525, titled \"ENSLogin\", was proposed by Hadrien Croubois in February 2020 as a way to create a universal login method for Ethereum using ENS (Ethereum Name Service) metadata. The proposal aimed to standardize how users authenticate and interact with dapps, regardless of which wallet or provider they use.</p>\n\n<p>The motivation behind ENSLogin was to address the fragmented landscape of Ethereum wallet solutions. While some wallets like MetaMask provided a seamless experience, others required custom integrations by dapp developers. ENSLogin sought to create a unified login flow that would work across different wallet types - browser extensions, hardware wallets, smart contract wallets etc.</p>\n\n<p>Despite its potential benefits, ERC-2525 has not gained widespread adoption and is currently in \"Stagnant\" status. Other solutions like Sign-In with Ethereum (EIP-4361) have since emerged to tackle similar authentication challenges. While ENSLogin remains an interesting approach leveraging ENS, the Ethereum ecosystem has largely moved in other directions for standardizing wallet connections and user authentication.</p>\n\n</article>",
  "ERC-2535": "<article><h1>ERC-2535: Diamond Standard</h1>\n\n<p>ERC-2535, also known as the Diamond Standard, was proposed by Nick Mudge in February 2020. This proposal introduced a novel approach to smart contract architecture, allowing for modular and upgradeable contracts that can overcome Ethereum's 24KB size limit for individual contracts.</p>\n\n<p>The core concept of ERC-2535 is the \"diamond\" contract, which acts as a proxy that can delegate calls to multiple \"facet\" contracts. This structure enables developers to build large, complex systems that can be upgraded or extended after deployment. The proposal gained traction in the Ethereum community due to its flexibility and potential for creating more maintainable smart contract systems.</p>\n\n<p>Currently, ERC-2535 has a \"Final\" status, indicating its acceptance as a standard. While it has seen adoption in various projects, particularly those requiring complex on-chain systems, it's not universally implemented. The Diamond Standard remains a valuable tool for specific use cases, though simpler proxy patterns are often sufficient for many applications. Developers should carefully consider their project's requirements when deciding whether to implement ERC-2535 or alternative upgrade patterns.</p></article>",
  "ERC-2544": "<article><h1>ERC-2544: ENS Wildcard Resolution</h1>\n\n<p>EIP-2544, proposed by Nick Johnson and 0age in February 2020, aimed to add support for \"wildcard\" resolution of subdomains in the Ethereum Name Service (ENS). The proposal sought to extend the ENS resolution process by allowing resolvers to handle subdomains that weren't explicitly registered, similar to DNS wildcard records.</p>\n\n<p>The proposal introduced a recursive lookup process for resolving ENS names. If a resolver wasn't set for a specific subdomain, the system would strip off the leftmost label and try again with the parent domain. This process would continue until a resolver was found or the root was reached. Additionally, it proposed a new unified <code>resolve()</code> method for resolvers, enabling more flexible name resolution.</p>\n\n<p>Despite its potential to enhance ENS functionality, EIP-2544 is currently in a \"Stagnant\" status. This suggests that while the idea was interesting, it hasn't gained enough traction or ongoing development to move forward in the standardization process. The ENS ecosystem has continued to evolve, and other proposals or implementations may have addressed similar needs in different ways.</p></article>",
  "ERC-2569": "<article><h1>ERC-2569: Saving and Displaying Image Onchain for Universal Tokens</h1>\n\n<p>ERC-2569, proposed in March 2020 by Hua Zhang, Yuefei Tan, Derek Zhou, and Ran Xing, aimed to standardize the storage and retrieval of SVG images on-chain for various token types. The proposal was motivated by the need for a consistent method to associate images with tokens, particularly for NFTs like CryptoKitties, where visual representation is crucial.</p>\n\n<p>The proposal defined two key interfaces: one for saving SVG images to Ethereum and another for retrieving them. This approach would allow for on-chain storage of token icons, potentially improving decentralization and permanence compared to off-chain storage methods. The proposal aimed to be universal, applicable to fungible tokens, non-fungible tokens, and future token standards.</p>\n\n<p>Despite its potential utility, ERC-2569 has not gained significant traction and is currently in a \"Stagnant\" status. This may be due to the emergence of alternative solutions or concerns about the cost and scalability of storing images on-chain. While on-chain image storage remains an interesting concept, most projects continue to use off-chain storage or data URIs for token images.</p>\n</article>",
  "ERC-2612": "<article><h1>ERC-2612: Permit Extension for EIP-20 Signed Approvals</h1>\n\n<p>ERC-2612, proposed by Martin Lundfall in April 2020, introduces the \"permit\" function to ERC-20 tokens. This improvement allows users to modify token allowances using off-chain signatures, eliminating the need for a separate \"approve\" transaction before transferring tokens. The proposal aims to enhance user experience and reduce gas costs by enabling single-transaction token transfers and contract interactions.</p>\n\n<p>The permit function leverages EIP-712 for structured data signing, improving security and readability of signature requests. Early adopters of ERC-2612 include major DeFi projects like Uniswap V2 and Aave. The proposal has gained significant traction in the Ethereum ecosystem, with many new token implementations incorporating the permit functionality.</p>\n\n<p>As of 2023, ERC-2612 has reached \"Final\" status, indicating widespread acceptance and implementation. While it doesn't replace the standard ERC-20 approve function, it offers a valuable alternative for developers seeking to streamline token interactions. The proposal continues to be relevant and widely used, with no major competing standards having superseded it.</p></article>",
  "ERC-2615": "<article><h1>ERC-2615: Non-Fungible Token with Mortgage and Rental Functions</h1>\n\n<p>ERC-2615, proposed by Kohshi Shiba in April 2020, aimed to extend the ERC-721 Non-Fungible Token standard to support rental and mortgage functions. The proposal introduced new roles and rights, including tenant rights for rentals and lien rights for mortgages, to allow NFTs to more closely emulate real-world property.</p>\n\n<p>The motivation behind ERC-2615 was to address limitations in the ERC-721 standard, which only defined an owner role. This made it challenging to implement rental and mortgage functionality for NFTs representing virtual items, physical assets, intellectual property, or DAO membership tokens. The proposal aimed to make these features easier to implement while maintaining backwards compatibility with ERC-721.</p>\n\n<p>Despite its potential utility, ERC-2615 has not gained significant traction in the Ethereum community. Its current status is \"Stagnant,\" indicating a lack of recent activity or updates. While the concept of NFT rentals and mortgages remains relevant, other proposals or implementations may have emerged to address similar use cases in the evolving NFT ecosystem.</p>\n</article>",
  "ERC-2645": "<article><h1>ERC-2645: Hierarchical Deterministic Wallet for Layer-2</h1>\n\n<p>ERC-2645, proposed by Tom Brand and Louis Guthmann of StarkWare in May 2020, aimed to establish a standard for hierarchical deterministic (HD) wallets in Layer-2 solutions, particularly for ZK-Rollups. The proposal leveraged existing Bitcoin Improvement Proposals (BIPs) for key derivation to create a secure method for generating private keys for Layer-2 applications.</p>\n\n<p>The core of ERC-2645 was a new derivation path structure:\n<code>m / purpose' / layer' / application' / eth_address_1' / eth_address_2' / index</code>\nThis structure allowed for domain separation between different Layer-2 applications and provided a way to link derived keys to Ethereum addresses. The proposal also included a method for \"grinding\" private keys to ensure proper distribution within the curve domain.</p>\n\n<p>Despite its potential utility for Layer-2 scaling solutions, ERC-2645 has a status of \"Stagnant\" as of 2023. This suggests that while the proposal addressed an important need in the evolving Ethereum ecosystem, it may have been superseded by other approaches or lost momentum in the rapidly changing landscape of Layer-2 technologies.",
  "ERC-2678": "<article><h1>ERC-2678: Revised Ethereum Smart Contract Packaging Standard (EthPM v3)</h1>\n\n<p>ERC-2678 proposes a standardized data format for packaging and distributing Ethereum smart contract code and related artifacts. The proposal was authored in 2020 by several prominent Ethereum developers including Nick Gheorghita and Piper Merriam. It builds on earlier EthPM standards to define a JSON-based \"package manifest\" format for describing smart contract packages.</p>\n\n<p>The key motivations were to encourage code reuse and best practices around packaging in Ethereum development. By standardizing how contract code, ABIs, deployment information and other artifacts are bundled and distributed, it aimed to enable better package management tools and workflows. The manifest format allows packages to be published to on-chain registries and distributed via content-addressable storage like IPFS.</p>\n\n<p>ERC-2678 reached final status and has been implemented in some Ethereum development tools. However, adoption has been somewhat limited compared to more lightweight approaches like importing GitHub repositories. The detailed manifest format may be overkill for many simple use cases. Nonetheless, it remains a well-specified standard for formal contract packaging when needed.</p>\n</article>",
  "ERC-2680": "<article><h1>ERC-2680: Ethereum 2 Wallet Layout</h1>\n\n<p>ERC-2680, proposed by Jim McDonald in May 2020, aimed to standardize the layout and naming format for Ethereum 2.0 walletstores and keystores. The proposal sought to improve interoperability between different validator implementations, allowing users to switch between validator software without the risky process of moving key files.</p>\n\n<p>The proposal specified a standard structure for storing wallet data, including definitions for base locations on different operating systems, wallet names, and account names. It aimed to support both hierarchical (e.g., filesystem, Amazon S3) and non-hierarchical (key/value) storage systems.</p>\n\n<p>Despite its potential benefits for user experience and security, ERC-2680 has not gained significant traction. As of 2023, its status remains \"Stagnant\" in the Ethereum Improvement Proposals repository. While the idea of standardizing wallet layouts remains relevant, the Ethereum ecosystem has evolved in different directions, with other solutions emerging to address interoperability and key management challenges.</p>\n</article>",
  "ERC-2746": "<article><h1>ERC-2746: Rules Engine Standard</h1>\n\n<p>ERC-2746, proposed by Aaron Kendall and Juan Blanco in June 2020, aimed to establish a standard interface for using smart contracts as rules engines on Ethereum. The proposal sought to enable the creation of hierarchical rule sets (RuleTrees) that could evaluate and manipulate registered data domains within a single deployed contract, reducing the need for multiple contract deployments for different functionalities.</p>\n\n<p>The motivation behind ERC-2746 was to simplify smart contract development and reduce gas costs by allowing developers to create and invoke pipelines of commands within a single contract. This approach would potentially streamline the process of adding new functionalities to the blockchain without requiring the deployment of separate contracts for each new feature.</p>\n\n<p>As of now, ERC-2746 is in a \"Stagnant\" status, indicating that it has not seen significant development or community interest since its proposal. While the concept of a standardized rules engine interface could have potential benefits for smart contract development, it appears that the Ethereum community has not widely adopted or implemented this proposal. Developers continue to rely on traditional smart contract development practices, and other proposals or solutions may have emerged to address similar concerns in different ways.</p></article>",
  "ERC-2767": "<article><h1>ERC-2767: Contract Ownership Governance</h1>\n\n<p>ERC-2767, proposed by Soham Zemse and Nick Mudge in July 2020, aimed to standardize governance contracts for managing administrative ownership of smart contracts using ERC-20 tokens for voting power. This proposal sought to enhance transparency and decentralization in contract administration by replacing single-wallet ownership (as in ERC-173) with a more distributed governance model.</p>\n\n<p>The proposal introduced a standard API for governance contracts, allowing existing ERC-173 compatible contracts to upgrade from private key wallet ownership to a token-based governance system. This approach would enable general tools to aggregate and display governance information across various projects, potentially increasing transparency in the ecosystem.</p>\n\n<p>Currently, ERC-2767 is in a \"Stagnant\" status, indicating that it has not seen significant development or adoption since its proposal. While the idea of standardizing governance contracts remains relevant, the Ethereum community has explored various other governance models and standards since then, which may have superseded or complemented this specific proposal.</p>\n</article>",
  "ERC-2770": "<article><h1>ERC-2770: Meta-Transactions Forwarder Contract</h1>\n\n<p>ERC-2770, proposed by Alex Forshtat and Dror Tirosh in July 2020, aims to standardize the contract interface for extensible meta-transaction forwarding. Meta-transactions allow users without ETH to interact with Ethereum contracts by having their transactions signed and submitted by a separate account that pays for gas.</p>\n\n<p>The proposal defines an external API for a Forwarder contract that validates transaction signatures on-chain and exposes the signer to the destination contract. It builds upon ERC-712 and ERC-2771, allowing for extensible forwarding request structures that can be displayed readably by wallets. This approach aims to accommodate various use-cases for meta-transactions while maintaining a standardized interface.</p>\n\n<p>As of now, the proposal's status is \"Stagnant,\" indicating that it hasn't seen significant development or discussion recently. While the concept of meta-transactions remains relevant for improving user onboarding and experience in the Ethereum ecosystem, other solutions and proposals may have gained more traction in addressing similar issues.</p>\n</article>",
  "ERC-2771": "<article><h1>ERC-2771: Secure Protocol for Native Meta Transactions</h1>\n\n<p>ERC-2771, proposed in July 2020, aims to standardize a contract-level protocol for executing meta transactions on Ethereum. Meta transactions allow users to interact with smart contracts without holding ETH for gas, improving user experience and onboarding. The proposal defines a trusted \"Forwarder\" contract that relays transactions and a \"Recipient\" contract that processes them.</p>\n\n<p>The proposal was authored by a group of prominent Ethereum developers, including Ronan Sandford, Yoav Weiss, and Fabian Vogelsteller. It builds on earlier meta transaction implementations and addresses security concerns by using a trusted forwarder model. The EIP reached \"Final\" status, indicating broad consensus and adoption within the Ethereum community.</p>\n\n<p>ERC-2771 remains relevant today, with many projects implementing it for gasless transactions. However, newer proposals like ERC-4337 (Account Abstraction) aim to provide more comprehensive solutions for similar use cases. While ERC-2771 is still widely used, developers should consider more recent standards for new projects depending on their specific requirements.</p>\n</article>",
  "ERC-2848": "<article><h1>ERC-2848: My Own Messages (MOM)</h1>\n\n<p>EIP-2848, titled \"My Own Messages (MOM),\" was proposed by Giuseppe Bertone in August 2020. The proposal aimed to create a standard for a decentralized, public message board system using Ethereum as a certification layer. MOM was designed to allow users to create verifiable, unstoppable, and always-updated message boards without relying on smart contracts, instead using simple self-send transactions with specific payloads.</p>\n\n<p>The motivation behind MOM was to provide developers and pool owners with a decentralized way to communicate with their users, allowing for easy verification of roles within smart contract contexts. It also aimed to give users a simple method to share thoughts, publish content, and receive feedback without dealing with complex systems or relying on centralized social media platforms.</p>\n\n<p>As of now, EIP-2848 is in a \"Stagnant\" status, indicating that it has not seen significant activity or updates recently. While the proposal offered an interesting approach to decentralized messaging, it does not appear to have gained widespread adoption or implementation in the Ethereum ecosystem. Other messaging and social media-related proposals and projects have since emerged, potentially addressing similar needs in different ways.</p>\n</article>",
  "ERC-2876": "<article><h1>ERC-2876: Deposit Contract and Address Standard</h1>\n\n<p>ERC-2876 was proposed in August 2020 by Jonathan Underwood to standardize a deposit contract interface and address format for Ethereum. The goal was to improve efficiency and security for exchanges, merchants, and other systems accepting ETH deposits from multiple users.</p>\n\n<p>The proposal defined a simple contract interface for managing deposits and a new address format encoding extra metadata. This would allow deposit systems to differentiate payments using an 8-byte ID without needing multiple keys or hot wallets. It aimed to reduce gas costs compared to traditional value transactions and enable direct forwarding of deposits to cold storage.</p> \n\n<p>While the proposal addressed real pain points for centralized exchanges and merchants, it appears to have stagnated without widespread adoption. More recent deposit optimization approaches like ERC-4337 account abstraction may have superseded aspects of this proposal. The current status is listed as \"Stagnant\" in the EIP repository, indicating it is no longer actively pursued but could potentially be revived if there is renewed interest from the community.</p>\n</article>",
  "ERC-2917": "<article><h1>ERC-2917: Staking Reward Calculation</h1>\n\n<p>ERC-2917, proposed in August 2020 by Tony Carson, Mehmet Sabir Kiraz, and Süleyman Kardaş, aimed to standardize on-chain calculation of staking rewards in DeFi protocols. The proposal introduced a formula to calculate user rewards based on their individual productivity relative to global productivity over time, ensuring fair distribution regardless of entry or exit timing.</p>\n\n<p>The proposal garnered some initial interest in the Ethereum community, with discussions focusing on its potential to improve fairness and decentralization in DeFi staking mechanisms. However, development and adoption appear to have stagnated since its introduction. The EIP's current status is listed as \"Stagnant,\" indicating a lack of recent progress or updates.</p>\n\n<p>While ERC-2917 presented an interesting approach to staking reward calculations, it has not seen widespread implementation. More recent developments in DeFi, such as liquidity mining schemes and yield farming optimizations, may have overshadowed this proposal. Given its stagnant status, it's unlikely to be implemented in its current form, though its concepts could potentially influence future staking reward mechanisms.</p>\n\n</article>",
  "ERC-2942": "<article><h1>ERC-2942: EthPM URI Specification</h1>\n\n<p>ERC-2942 proposes a custom URI scheme for identifying assets within the Ethereum Package Manager (EthPM) ecosystem. Authored by Nick Gheorghita, Piper Merriam, g. nicholas d'andrea, and Benjamin Hauser in September 2020, this proposal aimed to simplify interactions with EthPM registries, packages, releases, and contract assets.</p>\n\n<p>The specification defines a URI format that includes the scheme (ethpm or erc1319), registry address, optional chain ID, package name, version, and JSON pointer. This standardized format allows for easier installation, publishing, and distribution of EthPM packages. It supports both ENS names and checksummed addresses for registry identification, catering to different security and mutability needs.</p>\n\n<p>Currently, the proposal's status is listed as \"Stagnant,\" indicating a lack of recent progress or adoption. While the idea of a standardized URI scheme for EthPM assets remains valuable, it's unclear if this specific proposal will be implemented or if alternative solutions have emerged in the evolving Ethereum ecosystem.</p></article>",
  "ERC-2980": "<article><h1>ERC-2980: Swiss Compliant Asset Token</h1>\n\n<p>ERC-2980, proposed in September 2020, aimed to create a standard for asset tokens (also known as security tokens) that would be compliant with Swiss financial regulations while remaining compatible with the widely-used ERC-20 token standard. The proposal was authored by a team including Gianluca Perletti, Alan Scarpellini, Roberto Gorini, and Manuel Olivi.</p>\n\n<p>The primary purpose of ERC-2980 was to introduce methods for managing securities ownership during issuance and trading in a way that adheres to Swiss financial laws, including the Stock Exchange Act, Banking Act, Financial Market Infrastructure Act, and Anti-Money Laundering Act. The proposal aimed to meet the requirements of both Swiss and European jurisdictions, potentially paving the way for compliant blockchain-based asset tokenization.</p>\n\n<p>As of now, the status of ERC-2980 is listed as \"Stagnant,\" indicating that it has not seen significant development or adoption since its proposal. While the idea of creating compliant asset tokens remains relevant, it's possible that other standards or approaches have emerged to address similar needs in the evolving landscape of blockchain-based financial instruments.</p>\n</article>",
  "ERC-2981": "<article><h1>ERC-2981: NFT Royalty Standard</h1>\n\n<p>ERC-2981, proposed in September 2020, introduced a standardized method for retrieving royalty payment information for non-fungible tokens (NFTs). The proposal was authored by Zach Burks, James Morgan, Blaine Malone, and James Seibel, aiming to enable universal support for royalty payments across NFT marketplaces and ecosystem participants.</p>\n\n<p>The standard allows NFT contracts to signal a royalty amount to be paid to the creator or rights holder upon each sale or resale. This mechanism was designed to support ongoing funding for artists and creators in the NFT space. Importantly, the proposal emphasizes that royalty payments must be voluntary, as not all token transfers imply a sale.</p>\n\n<p>ERC-2981 has been widely adopted and implemented by various NFT marketplaces and projects since its finalization. It serves as a foundational building block for NFT royalty systems, though subsequent proposals have aimed to address some of its limitations. The proposal's current status is \"Final,\" indicating its acceptance and implementation in the Ethereum ecosystem.</p></article>",
  "ERC-3000": "<article><h1>ERC-3000: Optimistic Enactment Governance Standard</h1>\n\n<p>ERC-3000 was proposed in September 2020 by Jorge Izquierdo and Fabien Marino to create a standard interface for optimistic governance systems in Ethereum. The proposal defines a specification for scheduling, executing, and challenging contract executions based on off-chain approvals. This allows for more efficient governance processes by assuming proposals will be executed unless challenged.</p>\n\n<p>The key innovation of ERC-3000 is providing a flexible standard that can work with different challenge/response mechanisms. While the authors originally envisioned using a subjective oracle to resolve challenges, the proposal was designed to be compatible with other approaches like deterministic resolvers. This flexibility allows the standard to evolve as optimistic governance techniques mature.</p>\n\n<p>Currently, ERC-3000 is in \"Stagnant\" status, meaning development has slowed or stopped. However, it laid important groundwork for optimistic governance that has influenced other proposals and implementations. Projects like Aragon and Snapshot have incorporated ideas from ERC-3000 into their governance systems. While ERC-3000 itself may not be widely implemented, its concepts continue to shape the evolution of decentralized governance on Ethereum.</p></article>",
  "ERC-3005": "<article><h1>ERC-3005: Batched Meta Transactions</h1>\n\n<p>ERC-3005, proposed by Matt (@defifuture) in September 2020, aimed to extend ERC-20 and other fungible token standards with a new function called <code>processMetaBatch()</code>. This function would enable the processing of batched meta transactions from multiple senders in a single on-chain transaction, potentially reducing gas costs for relayers and allowing for gasless transactions by token holders without Ether.</p>\n\n<p>The proposal was motivated by the limitations of existing meta transaction implementations, which typically only allowed relaying one meta transaction at a time or batched transactions from a single sender. ERC-3005 sought to improve efficiency by enabling batched meta transactions from multiple senders simultaneously.</p>\n\n<p>As of now, the proposal's status is listed as \"Stagnant,\" indicating that it has not seen significant development or adoption since its introduction. While the concept of batched meta transactions remains relevant, especially in the context of gas optimization and user experience improvement, other proposals or implementations may have addressed similar concerns in the interim.</p>\n</article>",
  "ERC-3009": "<article><h1>ERC-3009: Transfer With Authorization</h1>\n\n<p>ERC-3009, proposed in September 2020 by Peter Kim, Kevin Britz, and David Knott, introduced a contract interface for enabling meta-transactions and atomic interactions with ERC-20 tokens using EIP-712 compliant signatures. This proposal aimed to enhance the flexibility and usability of token transfers by allowing users to delegate gas payments, pay gas fees in tokens, perform atomic multi-step transactions, and enable recipient-submitted transfers.</p>\n\n<p>The key innovation of ERC-3009 was its use of random 32-byte nonces instead of sequential nonces, which provided better protection against accidental nonce reuse and allowed for more flexible transaction ordering. This approach differentiated it from the similar EIP-2612, which used sequential nonces. ERC-3009 was designed to be complementary to EIP-2612, with implementations encouraged to support both for maximum compatibility.</p>\n\n<p>As of 2023, ERC-3009's status is listed as \"Stagnant\" in the Ethereum Improvement Proposals repository. This suggests that while the proposal introduced valuable concepts, it has not seen widespread adoption or continued development. The crypto community has since explored other approaches to meta-transactions and gas abstraction, but the core ideas presented in ERC-3009 remain relevant",
  "ERC-3135": "<article><h1>ERC-3135: Exclusive Claimable Token</h1>\n\n<p>ERC-3135, proposed by Zhenyu Sun in August 2020, introduces the concept of an \"Exclusive Claimable Token\" to address micropayment challenges in the Ethereum ecosystem. This proposal aims to reduce on-chain interactions and gas costs while enabling efficient micropayment channels between service providers and users.</p>\n\n<p>The core idea of ERC-3135 is to allow token issuers (typically service providers) to claim tokens on behalf of users, using the user's off-chain signature as authorization. This approach differs from traditional micropayment channels by shifting the responsibility of initiating on-chain transactions to the service provider, potentially simplifying the user experience and reducing barriers to adoption for small businesses looking to implement blockchain-based payment systems.</p>\n\n<p>Despite its innovative approach, ERC-3135 has not gained significant traction in the Ethereum community. As of 2023, its status remains \"Stagnant,\" indicating a lack of progress or widespread adoption. While the proposal addresses important issues in micropayments, other solutions like Layer 2 scaling and more established payment channel protocols have emerged as preferred alternatives for many developers and businesses in the Ethereum ecosystem.</p>\n</article>",
  "ERC-3156": "<article><h1>ERC-3156: Flash Loans</h1>\n\n<p>ERC-3156, proposed in November 2020, standardizes interfaces and processes for single-asset flash loans in Ethereum. Flash loans allow smart contracts to borrow assets without collateral, provided they are repaid within the same transaction. This proposal was authored by Alberto Cuesta Cañada, Fiona Kobayashi, fubuloubu, and Austin Williams.</p>\n\n<p>The motivation behind ERC-3156 was to address the growing technical debt caused by diverse flash loan implementations across different protocols. By providing a standard interface, it aims to simplify integration and improve interoperability. The proposal specifies interfaces for lenders to accept flash loan requests and for borrowers to temporarily control the transaction within the lender's execution.</p>\n\n<p>ERC-3156 has been finalized and is now a standard. It has been widely adopted by major DeFi protocols, including Aave and Uniswap, enhancing the ecosystem's efficiency and reducing complexity for developers working with flash loans. The proposal's success has led to further discussions and improvements in the flash loan space, although it remains the primary standard for single-asset flash loans in Ethereum.</p>\n</article>",
  "ERC-3224": "<article><h1>ERC-3224: Described Data</h1>\n\n<p>ERC-3224, titled \"Described Data,\" was proposed by Richard Moore and Nick Johnson in January 2021. The proposal aimed to improve the user experience of Ethereum wallets by providing a method for contracts to generate human-readable descriptions of transactions. This would allow users to better understand the actions they are about to authorize when signing messages or sending transactions.</p>\n\n<p>The proposal was motivated by the limited ability of wallets to provide insight into complex Ethereum transactions. Outside of special-cased support for common transactions like ERC20 transfers, users are often asked to sign opaque blobs of binary data. ERC-3224 proposed a standardized way for dapp developers to provide wallets with the means to generate better descriptions of what a contract claims will happen.</p>\n\n<p>Despite its potential to enhance user experience, ERC-3224 has not gained significant traction. As of 2023, its status remains \"Stagnant,\" indicating that it has not been actively developed or implemented. While the proposal addresses an important issue in the Ethereum ecosystem, it seems that other approaches or priorities have taken precedence in the community's focus.</p></article>",
  "ERC-3234": "<article><h1>ERC-3234: Batch Flash Loans</h1>\n\n<p>ERC-3234 was proposed in January 2021 by Alberto Cuesta Cañada, Fiona Kobayashi, fubuloubu, and Austin Williams to standardize interfaces and processes for multiple-asset flash loans. It builds on the single-asset flash loan standard ERC-3156 to enable borrowing multiple assets simultaneously, which is useful for refinancing several positions across platforms.</p>\n\n<p>The proposal defines interfaces for both lenders and borrowers to implement, using a callback pattern. Lenders must implement functions to check available liquidity, execute batch loans, and handle callbacks. Borrowers implement a function to receive and repay the borrowed assets. This standardization aims to make batch flash loans easier to integrate and use across different protocols.</p>\n\n<p>As of 2023, ERC-3234 remains in \"Stagnant\" status, meaning it has not seen significant activity or updates recently. While batch flash loans are offered by some protocols, a widely adopted standard has not emerged. Developers working with flash loans should consider both ERC-3156 for single-asset loans and evaluate current best practices for multi-asset flash loans, as the landscape continues to evolve.</p>\n\n</article>",
  "ERC-3386": "<article><h1>ERC-3386: Wrapping ERC-721 and ERC-1155 Tokens as ERC-20</h1>\n\n<p>ERC-3386, proposed by Calvin Koder in March 2021, aimed to create a standard interface for wrapping non-fungible tokens (NFTs) and multi-tokens as fungible ERC-20 tokens. This proposal sought to bridge the gap between unique tokens (ERC-721 and ERC-1155) and the more widely used and liquid ERC-20 standard.</p>\n\n<p>The proposal's core idea was to allow the creation of derivative ERC-20 tokens by locking ERC-721 or ERC-1155 tokens in a pool. These derivative tokens could then be traded or used like any other ERC-20 token, without regard to the unique identifiers of the underlying NFTs. This would potentially increase liquidity and usability for NFT-based assets.</p>\n\n<p>As of now, ERC-3386 has a \"Stagnant\" status, indicating that it hasn't seen significant development or adoption since its proposal. While the concept of wrapping NFTs as fungible tokens remains relevant, especially with the growth of NFT markets, other solutions and standards may have emerged to address similar needs in the evolving DeFi and NFT ecosystems.</p>",
  "ERC-3440": "<article><h1>ERC-3440: ERC-721 Editions Standard</h1>\n\n<p>ERC-3440 was proposed in April 2021 by Nathan Ginnever as an extension to the popular ERC-721 NFT standard. Its primary purpose was to enhance NFT functionality for digital artworks by allowing artists to designate original pieces and create signed limited-edition prints, mirroring practices in the traditional art world.</p>\n\n<p>The proposal aimed to improve NFT provenance by introducing artist signatures and edition numbering. It built upon ERC-721's enumeration extension, adding the ability for artists to cryptographically sign specific token IDs and designate limited runs. This would allow collectors to verify the authenticity and rarity of digital art NFTs more reliably.</p>\n\n<p>While ERC-3440 addressed important needs in the NFT art space, its current status is listed as \"Stagnant\". This suggests that development and community interest have slowed since its initial proposal. However, the core ideas around improved provenance and limited editions for NFT artworks remain relevant, with other standards and platforms implementing similar concepts in various ways.</p></article>",
  "ERC-3448": "<article><h1>ERC-3448: MetaProxy Standard</h1>\n\n<p>ERC-3448, proposed by pinkiebell in March 2021, introduces the MetaProxy Standard, a minimal bytecode implementation for creating proxy contracts with immutable metadata attached to the bytecode. This proposal aims to standardize a known minimal bytecode proxy implementation that supports immutable metadata, allowing users and third-party tools to easily discover and interact with redirecting contracts.</p>\n\n<p>The MetaProxy Standard builds upon existing proxy patterns, enhancing them with the ability to attach immutable metadata to the bytecode. This addition enables tools like Etherscan to verify and view the metadata associated with proxy contracts. The implementation forwards all calls via DELEGATECALL to the implementation contract, along with any calldata input and the attached metadata, then relays the return value back to the caller.</p>\n\n<p>Currently, ERC-3448 has reached \"Final\" status, indicating its acceptance and readiness for implementation. This standard is particularly useful in scenarios where developers need to clone exact contract functionality with different parameters at different addresses, providing a more efficient and standardized approach to creating and managing proxy contracts with associated metadata.</p></article>",
  "ERC-3450": "<article><h1>ERC-3450: Standardizing Shamir Secret Sharing for BIP-39 Mnemonics</h1>\n<p>ERC-3450, proposed by Daniel Streit in March 2021, aimed to standardize the application of Shamir's Secret Sharing Scheme to BIP-39 mnemonics. The proposal sought to enhance security for cryptocurrency users by allowing them to split their seed phrases into multiple shares, requiring a threshold number to reconstruct the original mnemonic. This approach addresses the single point of failure inherent in traditional seed phrase storage.</p>\n<p>The proposal garnered interest in the Ethereum community, as evidenced by discussions on Ethereum Magicians. It aimed to provide a standardized implementation, which was crucial for ensuring long-term recoverability and interoperability across different tools and platforms. The motivation behind ERC-3450 was to make secure key storage more accessible to non-technical users, potentially increasing adoption of self-custody solutions.</p>\n<p>Currently, ERC-3450 is in a \"Stagnant\" status, indicating that development and discussion have slowed. While the proposal addressed an important security concern, it's unclear if it will be implemented in its current form. The cryptocurrency community continues to explore various solutions for secure key management, and while Shamir's Secret Sharing remains a valuable concept, standardization efforts may",
  "ERC-3475": "<article><h1>ERC-3475: Abstract Storage Bonds</h1>\n\n<p>ERC-3475 was proposed in April 2021 by a team including Yu Liu, Varun Deshpande, and others to enable the creation of tokenized obligations with more complex on-chain metadata storage than existing token standards allow. The key innovation is enabling each bond class ID to represent a configurable token type, with corresponding bond nonces representing issuing conditions or other metadata. This allows for much more flexible and granular representation of bond-like instruments on the Ethereum blockchain.</p>\n\n<p>The proposal was motivated by limitations in existing standards like ERC-20 for representing more complex financial instruments like liquidity provider (LP) tokens. ERC-3475 enables each bond to have its own metadata, supply, and redemption conditions stored on-chain. It also allows for batching of issuance/redemption for gas efficiency. The bonds can be divided and traded on secondary markets.</p>\n\n<p>ERC-3475 reached Final status, meaning it was accepted as an official Ethereum standard. It builds on earlier token standards like ERC-20, ERC-721, and ERC-1155. The flexible metadata storage and configurable token types enabled by ERC-3475 make it well-suited for representing more complex financial instruments and obligations on-chain compared to simpler token standards. Its",
  "ERC-3525": "<article><h1>ERC-3525: Semi-Fungible Token Standard</h1>\n\n<p>ERC-3525, proposed in 2020 by a team led by Will Wang, introduces the concept of \"semi-fungible tokens\" to the Ethereum ecosystem. This standard combines elements of ERC-20 (fungible tokens) and ERC-721 (non-fungible tokens) to create a new token type that is both unique and divisible. The key innovation is the introduction of an &lt;ID, SLOT, VALUE&gt; triple scalar model, allowing tokens to have both unique identifiers and fungible value within defined \"slots\".</p>\n\n<p>The proposal gained traction in the DeFi and gaming communities, where it enables more complex tokenization scenarios. For example, it can represent partially fungible assets like fractionalized real estate or in-game items with variable attributes. The standard maintains backwards compatibility with ERC-721, ensuring interoperability with existing NFT infrastructure while adding new functionality for value transfer and approval mechanisms.</p>\n\n<p>ERC-3525 reached \"Final\" status in 2022, indicating its maturity and readiness for widespread adoption. While it has not yet seen the same level of adoption as ERC-20 or ERC-721, it continues to gain interest, particularly in projects requiring more nuanced token models. As the token ecosystem evolves",
  "ERC-3561": "<article><h1>ERC-3561: Trust Minimized Upgradeability Proxy</h1>\n\n<p>ERC-3561, proposed by Sam Porter in May 2021, aims to address the trust issues associated with upgradeable smart contracts, particularly for anonymous developers. The proposal introduces a delay mechanism for upgrades, allowing users to review and react to proposed changes before they take effect.</p>\n\n<p>The core idea is to add additional storage slots to the upgradeability proxy, implementing a \"Zero Trust Period\" during which a proposed upgrade is visible but not yet active. This approach seeks to balance the benefits of upgradeable contracts with the need for transparency and user trust, especially crucial for anonymous developers who may struggle to earn community confidence.</p>\n\n<p>As of now, the proposal's status is \"Stagnant,\" indicating it hasn't seen recent activity or updates. While the concept addresses an important issue in the Ethereum ecosystem, it appears that the community has not yet reached a consensus on its implementation or necessity. Other proposals or solutions may have emerged to address similar concerns in the time since its introduction.</p>\n</article>",
  "ERC-3569": "<article><h1>ERC-3569: Sealed NFT Metadata Standard</h1>\n\n<p>EIP-3569, proposed by Sean Papanikolas in May 2021, aimed to address concerns about NFT metadata mutability and efficiency. The proposal introduced a \"sealing\" mechanism to immutably store metadata URIs for multiple NFTs in a single transaction, potentially reducing gas costs and providing verifiable permanence for collectors.</p>\n\n<p>The core idea was to allow creators to call a <code>seal</code> function with a range of token IDs and a URI pointing to a JSON file containing either raw metadata or further URIs for individual tokens. This sealed metadata would be stored in the smart contract and marked as immutable. The proposal aimed to complement existing standards like ERC-721 rather than replace them.</p>\n\n<p>While EIP-3569 addressed important issues in the NFT space, it has not gained widespread adoption. As of 2023, its status remains \"Stagnant\" in the Ethereum Improvement Proposals repository. Other approaches to metadata permanence and efficiency have emerged, such as on-chain metadata storage and various off-chain solutions. However, the core concerns raised by this EIP continue to be relevant in ongoing discussions about NFT best practices.</p>\n</article>",
  "ERC-3589": "<article><h1>ERC-3589: Assemble Assets into NFTs</h1>\n\n<p>ERC-3589, proposed by Zhenyu Sun and Xinqi Yang in May 2021, aimed to create a new type of ERC-721 token called an \"assembly token\" that could represent a combination of different assets. The proposal was motivated by the growing popularity of NFTs and the need for more efficient ways to trade multiple assets simultaneously.</p>\n\n<p>The key innovation of ERC-3589 was the ability to bundle various assets (including ether, ERC-20 tokens, ERC-721 tokens, and ERC-1155 tokens) into a single ERC-721 token. This would allow for easier batch transfers and swaps of multiple assets, addressing inefficiencies in existing trading methods for NFT collectors. The proposal aimed to make complex trades more secure by transforming them into simple one-to-one swaps.</p>\n\n<p>As of now, ERC-3589 has a \"Stagnant\" status, indicating that it has not gained significant traction or been implemented widely. While the idea of bundling assets into a single NFT remains interesting, other standards and solutions have emerged to address similar concerns in the NFT space. Developers and users should consider more recent and actively maintained proposals for current implementations of asset bundling or multi-asset NFTs.</",
  "ERC-3643": "<article><h1>ERC-3643: T-REX - Token for Regulated EXchanges</h1>\n\n<p>ERC-3643, proposed in July 2021 by a team including Joachim Lebrun and Luc Falempin, introduces the T-REX (Token for Regulated EXchanges) standard for security tokens. This proposal aims to create an institutional-grade framework for managing and transferring security tokens in compliance with regulatory requirements. The standard defines interfaces for token management, identity registry, compliance checks, and trusted issuer verification.</p>\n\n<p>The key innovation of T-REX is its automated on-chain validator system that leverages on-chain identities for eligibility checks. This allows for compliant peer-to-peer transfers of security tokens without intermediaries, while still adhering to securities laws. The proposal builds on existing standards like ERC-20 and ERC-173, extending their functionality to meet the specific needs of regulated securities.</p>\n\n<p>As of 2023, ERC-3643 has reached \"Final\" status, indicating it has been accepted by the Ethereum community. While not as widely adopted as some other token standards, T-REX has gained traction in the security token space, particularly for projects requiring robust compliance features. Its comprehensive approach to regulatory compliance makes it a valuable standard for institutional-grade security token implementations.</p></article",
  "ERC-3668": "<article><h1>ERC-3668: CCIP Read for Secure Offchain Data Retrieval</h1>\n\n<p>ERC-3668, also known as \"CCIP Read\", was proposed by Nick Johnson in July 2020 to provide a standardized mechanism for Ethereum smart contracts to securely fetch and validate external data. This proposal addresses the growing need for efficient offchain data storage and retrieval, driven by the high costs of onchain storage and computation.</p>\n\n<p>The core innovation of CCIP Read is its use of a specific revert pattern that smart contracts can employ to signal that offchain data retrieval is required. This pattern includes information about where to fetch the data, how to call back to the contract, and any additional context needed. Client implementations supporting CCIP Read can interpret this revert, fetch the required data, and call back to the contract with the retrieved information. This allows contracts to implement custom validation logic for the fetched data, potentially maintaining the same level of trust as if the data were stored onchain.</p>\n\n<p>As of 2023, ERC-3668 has reached \"Final\" status, indicating its maturity and readiness for implementation. It has seen adoption in various projects, particularly those dealing with large datasets or frequently updated information that would be impractical to store entirely onchain. The proposal continues to be relevant in the Ethereum ecosystem, offering a standar",
  "ERC-3722": "<article><h1>ERC-3722: Poster</h1>\n\n<p>ERC-3722, also known as \"Poster,\" was proposed by Auryn Macmillan in July 2021 as a simple, general-purpose smart contract for social media applications on Ethereum. The proposal aimed to create a base layer for decentralized social media by providing a minimalist contract that emits events containing user-generated content and tags.</p>\n\n<p>The Poster contract's simplicity is its key feature, consisting of just one function, <code>post()</code>, which takes two string parameters (content and tag) and emits them along with the sender's address as an event. This design allows for flexible off-chain indexing and application-specific implementations. The proposal also included a suggested JSON format for Twitter-like applications, enabling multiple posts or operations in a single transaction.</p>\n\n<p>Currently, ERC-3722 is in a \"Stagnant\" status, indicating that development has slowed or stopped. While the proposal's simplicity made it an interesting concept for decentralized social media, it hasn't gained significant traction or been widely implemented. As the blockchain space continues to evolve, more complex and feature-rich solutions for decentralized social media have emerged, potentially superseding the need for such a basic implementation.</p>\n</article>",
  "ERC-3754": "<article><h1>ERC-3754: A Vanilla Non-Fungible Token Standard</h1>\n\n<p>ERC-3754, proposed by Simon Tian in August 2021, introduced a new concept for non-fungible tokens (NFTs) focused on representing abstract ownership and rights. Unlike ERC-721, which primarily deals with ownership of digital or physical assets, ERC-3754 aimed to create a standard for tokenizing more intangible concepts like function call rights, NFT options, and oracle memberships.</p>\n\n<p>The proposal sought to improve the conceptual clarity of NFTs by separating the representation of abstract rights from traditional asset ownership. This would allow for more flexible and liquid implementations of concepts like on-chain subscriptions, prepaid memberships, and other time-dependent or conditional rights. The standard encouraged building layers of abstraction on top of these \"vanilla\" NFTs to create more complex ownership structures.</p>\n\n<p>Despite its innovative approach, ERC-3754 has not gained widespread adoption and is currently in a \"Stagnant\" status. While the ideas presented in the proposal remain relevant, the NFT ecosystem has largely continued to evolve around existing standards like ERC-721 and ERC-1155. However, the concepts introduced in ERC-3754 may still influence future developments in tokenizing abstract rights and ownership within the blockchain space.</p></article>",
  "ERC-3770": "<article><h1>ERC-3770: Chain-specific addresses</h1>\n\n<p>ERC-3770 was proposed in August 2021 to introduce a standard for prepending chain-specific addresses with human-readable chain identifiers. The motivation was to reduce ambiguity and potential errors as more EVM-compatible chains emerged, where the same address could refer to different accounts across chains. The proposal was authored by Lukas Schor, Richard Meissner, Pedro Gomes, and ligi.</p>\n\n<p>The proposal specifies a format like \"eth:0x123...\" for Ethereum mainnet addresses or \"gor:0x456...\" for Goerli testnet addresses. This allows wallets and dApps to clearly indicate which network an address belongs to, reducing the risk of users accidentally sending funds to the wrong chain. It builds on EIP-155 chain IDs but uses more human-friendly short names.</p>\n\n<p>As of 2023, the proposal's status is listed as \"Stagnant\", meaning it has not seen recent activity or updates. While the idea has merit for improving UX and safety, it does not appear to have gained widespread adoption. Other approaches like ENS names have emerged as alternatives for human-readable addresses. Nevertheless, the core problem ERC-3770 aimed to solve remains relevant as the multi-chain ecosystem continues to grow.</p",
  "ERC-3772": "<article><h1>ERC-3772: Compressed Integers</h1>\n\n<p>ERC-3772, proposed by Soham Zemse in August 2021, introduces a method for compressing uint256 values into smaller data structures like uint64, uint96, or uint128. The goal is to optimize storage costs in Ethereum smart contracts, potentially reducing gas fees by up to 4x. The proposal uses lossy compression, dividing the smaller data structure into two parts: significant bits and the number of left shifts needed for decompression.</p>\n\n<p>The motivation behind this proposal stems from the high costs associated with storage in Ethereum. At the time of writing, initializing a storage slot cost approximately $0.8, while updating one cost about $0.2. The proposal argues that most use cases, especially for representing token amounts, only require a range of 10^15 values, making the full uint256 range unnecessary and wasteful.</p>\n\n<p>Despite its potential benefits, ERC-3772 has not gained significant traction in the Ethereum community. As of now, its status is listed as \"Stagnant\" on the Ethereum Improvement Proposals (EIPs) repository. This suggests that while the idea has merit, it may not have received enough support or attention to move forward in the standardization process. Developers looking to optimize storage costs might still find value in",
  "ERC-4337": "<article><h1>ERC-4337: Account Abstraction Using Alt Mempool</h1>\n\n<p>ERC-4337 is a proposal for implementing account abstraction in Ethereum without requiring consensus layer changes. Authored by Vitalik Buterin, Yoav Weiss, and others in September 2021, it introduces the concept of \"UserOperations\" that are processed through a separate mempool and bundled into transactions by specialized actors called bundlers.</p>\n\n<p>The key innovation of ERC-4337 is moving account abstraction logic to the application layer rather than modifying the base protocol. This allows for greater flexibility in wallet designs and transaction types without needing a hard fork. The proposal builds on earlier account abstraction work but takes a novel approach to avoid consensus changes.</p>\n\n<p>As of 2023, ERC-4337 has gained significant traction in the Ethereum community. Several wallet providers and infrastructure projects have begun implementing support for it. While still officially in draft status, it is widely viewed as the leading path forward for account abstraction on Ethereum. Its adoption could enable more user-friendly wallets and novel transaction types in the future.</p>\n</article>",
  "ERC-4341": "<article><h1>ERC-4341: Ordered NFT Batch Standard</h1>\n\n<p>ERC-4341, proposed by Simon Tian in October 2021, introduces a standard for managing ordered batches of non-fungible tokens (NFTs) where the sequence of tokens carries meaning. This proposal is particularly relevant for NFTs with tokenIDs encoded as Unicode characters, enabling them to represent logographic characters or emojis.</p>\n\n<p>The motivation behind ERC-4341 stems from the idea that NFTs can be more than just crypto-assets; they can serve as carriers of abstract meanings. This concept builds upon EIP-3754, which suggested using Unicode-encoded tokenIDs. By preserving the order of multiple NFTs in a batch, ERC-4341 allows for the transmission of phrases or meanings on the blockchain, effectively turning NFT transfers into a form of communication.</p>\n\n<p>As of now, ERC-4341 is in a \"Stagnant\" status, indicating that development has slowed or stopped. While the proposal presents an interesting use case for NFTs beyond digital asset representation, it hasn't gained significant traction in the Ethereum community. The concept of ordered NFT batches remains an intriguing idea, but it hasn't been widely adopted or implemented in major projects to date.</p></article>",
  "ERC-4353": "<article><h1>ERC-4353: Interface for Staked Tokens in NFTs</h1>\n\n<p>ERC-4353 was proposed in October 2021 by Rex Creed and Dane Scarborough to address the lack of a standard way to retrieve information about tokens staked or deposited within NFTs. The proposal aimed to create an interface that would allow wallets, marketplaces, and other applications to easily access and display data about staked tokens associated with an NFT.</p>\n\n<p>The motivation behind this proposal was to provide transparency and verifiability for NFT holders regarding any additional value derived from staking processes. Without such a standard, there was no consistent way to convey or display information about staked tokens across different platforms and applications in the NFT ecosystem.</p>\n\n<p>As of now, ERC-4353 is in a \"Stagnant\" status, indicating that development and discussions around the proposal have not progressed significantly since its introduction. While the idea addresses a potentially useful feature for NFTs with staking capabilities, it has not gained widespread adoption or implementation in major NFT projects or platforms.</p>\n</article>",
  "ERC-4361": "<article><h1>ERC-4361: Sign-In with Ethereum</h1>\n\n<p>ERC-4361, also known as \"Sign-In with Ethereum,\" is a proposal that aims to standardize how Ethereum accounts authenticate with off-chain services. Introduced in October 2021 by Wayne Chang, Gregory Rocco, Brantly Millegan, Nick Johnson, and Oliver Terbu, this proposal addresses the need for a decentralized authentication method as an alternative to centralized identity providers.</p>\n\n<p>The proposal outlines a standard message format for Ethereum-based authentication, incorporating scope, session details, and security mechanisms like nonces. It builds upon several existing Ethereum standards, including EIP-55 (checksummed addresses), EIP-191 (signed data standard), and EIP-1271 (standard signature validation method for contracts). Since its introduction, Sign-In with Ethereum has gained significant traction in the Ethereum ecosystem, with many projects and wallets implementing support for this standard.</p>\n\n<p>As of 2023, ERC-4361 is still in the Review status, indicating ongoing discussions and potential refinements before final acceptance. However, its widespread adoption suggests that it has become a de facto standard for Ethereum-based authentication. The proposal's success lies in its ability to provide users with more control over their digital identities while offering developers a consistent,",
  "ERC-4393": "<article><h1>ERC-4393: Micropayments for NFTs and Multi Tokens</h1>\n\n<p>ERC-4393, proposed by Jules Lai in October 2021, aimed to establish a standard interface for tipping holders of NFTs and multi-tokens. The proposal sought to create a gas-efficient method for sending small rewards, or \"tips,\" to specific ERC-721 NFTs and ERC-1155 multi-tokens. This would enable a more equitable distribution of revenue back to token holders from the user community.</p>\n\n<p>The proposal introduced functions like <code>tipBatch</code> for optimized batch tipping and withdrawal mechanisms for token holders to claim their rewards as ERC-20 tokens. It was designed to be easily implementable in dapps, providing a streamlined way to incorporate tipping services for NFT and multi-token holders.</p>\n\n<p>Currently, the status of ERC-4393 is \"Stagnant,\" indicating that it has not seen significant development or discussion recently. While the concept of micropayments for NFTs remains relevant, the proposal may have been superseded by other developments in the rapidly evolving NFT space or may require further refinement to address potential implementation challenges.</p>\n</article>",
  "ERC-4400": "<article><h1>ERC-4400: EIP-721 Consumable Extension</h1>\n\n<p>ERC-4400 is a proposal to standardize a \"consumer\" role for ERC-721 non-fungible tokens (NFTs). It was authored by Daniel Ivanov and George Spasov and reached Final status in 2021. The proposal extends ERC-721 to allow reading and setting a \"consumer\" address that has permission to utilize or interact with an NFT beyond just ownership.</p>\n\n<p>The motivation behind ERC-4400 was that many NFT projects were implementing custom roles to grant additional permissions on NFTs, like allowing an operator to deploy content to virtual land NFTs. By standardizing a \"consumer\" role, ERC-4400 aims to improve interoperability and enable broader support in user interfaces and smart contracts for NFTs with utility beyond basic ownership.</p>\n\n<p>ERC-4400 defines standard functions for getting and setting the consumer of an NFT, as well as an event for when the consumer changes. While relatively simple, this extension provides a standardized way for NFT contracts to implement consumable or interactive capabilities on top of the core ERC-721 ownership model. The proposal has been finalized and can be implemented by NFT projects looking to support this type of functionality in a standardized way.</p></article>",
  "ERC-4430": "<article><h1>ERC-4430: Described Transactions</h1>\n\n<p>ERC-4430, proposed in November 2021 by Richard Moore and Nick Johnson, aims to improve the user experience of Ethereum transactions by allowing smart contracts to provide human-readable descriptions of their effects. This proposal addresses the challenge of users having to approve complex, opaque transactions in wallets without understanding their full implications.</p>\n\n<p>The core idea is to use virtual functions in smart contracts that can generate both human-readable descriptions and machine-executable bytecode for transactions. This would enable wallets to display clear, contract-provided explanations of transaction effects, helping users make more informed decisions when approving transactions. The proposal is particularly valuable for complex interactions beyond simple token transfers, where current wallets struggle to provide meaningful insights.</p>\n\n<p>As of now, ERC-4430 is in a \"Stagnant\" status, indicating that development and discussions have slowed down. While the proposal offers potential benefits for user experience and transaction transparency, it hasn't gained significant traction for implementation. The crypto community continues to explore various approaches to improve transaction clarity and user understanding, with this proposal remaining one potential solution among others being considered.</p></article>",
  "ERC-4494": "<article><h1>ERC-4494: Permit for ERC-721 NFTs</h1>\n\n<p>EIP-4494 proposes extending the permit approval pattern from ERC-2612 to ERC-721 NFTs. This allows for gasless approvals of NFT transfers using signed messages, improving UX by reducing the typical two-transaction flow (approve, then transfer) to a single transaction. The proposal was authored by Simon Fremaux and William Schwab in November 2021.</p>\n\n<p>The key difference from ERC-2612 is that ERC-4494 uses the NFT's tokenId and a nonce based on transfers rather than owner address. This adapts the permit pattern to the unique structure of non-fungible tokens. The proposal builds on ERC-165, ERC-712, and ERC-721 standards.</p>\n\n<p>As of 2023, EIP-4494 is in \"Stagnant\" status, meaning development has slowed or ceased. While the concept of gasless NFT approvals remains valuable, alternative proposals or implementations may have superseded this specific approach. Further community discussion and development would be needed to revive and potentially standardize this functionality for NFTs.</p></article>",
  "ERC-4519": "<article><h1>ERC-4519: Non-Fungible Tokens Tied to Physical Assets</h1>\n\n<p>ERC-4519 was proposed in December 2021 by a team of researchers led by Javier Arcenegui to standardize an interface for NFTs representing physical assets like IoT devices. The key innovation is allowing these NFTs to include an Ethereum address for the physical asset itself, enabling the asset to sign messages and transactions.</p>\n\n<p>This proposal extends ERC-721 by adding features specifically for managing smart physical assets. It allows tracking both ownership and usage rights, and enables secure communication between the asset, owner, and user. The NFT can define an operating mode for the physical asset and verify the authenticity of its tie to the asset.</p>\n\n<p>ERC-4519 reached Final status, indicating it has been accepted as a standard. It builds on ERC-721 and ERC-165, and aims to enable more sophisticated management of smart physical assets through blockchain. As IoT devices and other smart assets become more prevalent, this standard provides a framework for securely integrating them with Ethereum.</p></article>",
  "ERC-4521": "<article><h1>ERC-4521: 721/20-compatible transfer</h1>\n\n<p>ERC-4521 was proposed in December 2021 by Ross Campbell to address a compatibility issue between ERC-721 non-fungible tokens (NFTs) and ERC-20 fungible token standards. The proposal recommends adding a simple <code>transfer()</code> function to ERC-721 tokens to make them compatible with applications and contracts designed for ERC-20 tokens.</p>\n\n<p>The main motivation was to prevent NFTs from being accidentally locked in contracts that only handle ERC-20 tokens. It also aimed to simplify development by allowing contracts to use a common <code>transfer()</code> function for both NFTs and fungible tokens. The proposal specified that the <code>transfer()</code> function should conform to the ERC-20 interface while still emitting the ERC-721 Transfer event.</p>\n\n<p>As of 2023, the status of ERC-4521 is listed as \"Stagnant\", indicating it has not seen significant development or adoption. While the compatibility issue it addresses is valid, the crypto community may have found other solutions or workarounds in practice. Developers should consider more recent standards or best practices when implementing NFT transfer functionality.</p></article>",
  "ERC-4524": "<article><h1>ERC-4524: Safer ERC-20</h1>\n\n<p>EIP-4524, authored by William Schwab, proposes extending the ERC-20 token standard with EIP-165 support and adding safeTransfer functions similar to those found in ERC-721 and ERC-1155. The proposal aims to improve safety and interoperability for ERC-20 tokens by allowing contracts to signal compatibility and ensuring proper handling of token transfers.</p>\n\n<p>The motivation behind EIP-4524 stems from the benefits of EIP-165 in NFT standards, which enables contracts to verify if a recipient supports specific interfaces. This feature has proven valuable for NFT extensions and could bring similar advantages to ERC-20 tokens. Additionally, the proposal seeks to address the lack of safety checks in standard ERC-20 transfers, which can lead to tokens being lost if sent to incompatible contracts.</p>\n\n<p>As of the last update, EIP-4524 is in a \"Stagnant\" status, indicating that it has not seen recent activity or updates. While the proposal offers potential improvements for ERC-20 tokens, its implementation would require significant changes to existing token contracts and ecosystem support. The crypto community may need to weigh the benefits of increased safety against the costs of adoption and potential fragmentation of the ERC-20 standard.</",
  "ERC-4527": "<article><h1>ERC-4527: QR Code Transmission Protocol for Wallets</h1>\n\n<p>ERC-4527, proposed in December 2021, aims to standardize a QR code-based data transmission protocol between offline signers (like hardware wallets) and watch-only wallets. The proposal was authored by a group of developers including Aaron Chen, Sora Lee, and others from various blockchain projects.</p>\n\n<p>The motivation behind this proposal stems from the increasing popularity of offline signers for managing private keys securely. QR codes offer advantages over other transmission methods like USB or Bluetooth, providing better transparency and security. Users can easily decode QR code data, helping them verify what they're about to sign and reducing the risk of malware attacks.</p>\n\n<p>Currently, the proposal's status is listed as \"Stagnant,\" indicating that it hasn't seen recent activity or updates. While the idea has merit for improving wallet interoperability and security, it's unclear if it will be implemented widely or if alternative solutions have gained more traction in the ecosystem. Further development or community interest may be needed to revive and advance this proposal.</p></article>",
  "ERC-4546": "<article><h1>ERC-4546: Wrapped Deposits</h1>\n\n<p>ERC-4546, proposed by Justice Hudson in December 2021, aimed to streamline the process of depositing assets (Ether, ERC-20, and ERC-721 tokens) into decentralized applications (dApps). The proposal sought to address the inefficiencies and security concerns associated with the traditional deposit methods, particularly for ERC-20 tokens.</p>\n\n<p>The core idea was to introduce a singleton contract that would manage asset deposits on behalf of users. This would allow users to approve a spend limit once, enabling deposits to multiple applications supporting the contract. The proposal aimed to eliminate the need for repeated approval transactions or the security risk of granting infinite spend allowances.</p>\n\n<p>As of now, ERC-4546 is in a \"Stagnant\" status, indicating that it hasn't gained significant traction or been actively developed further. While the proposal addressed important user experience and security concerns, it hasn't been widely adopted or implemented. The cryptocurrency community continues to explore various solutions to improve asset deposit mechanisms, with newer proposals potentially superseding or building upon the concepts introduced in ERC-4546.</p></article>",
  "ERC-4626": "<article><h1>ERC-4626: Tokenized Vaults Standard</h1>\n\n<p>ERC-4626, proposed in December 2021 by Joey Santoro, t11s, Jet Jadeja, Alberto Cuesta Cañada, and Señor Doggo, introduces a standard API for tokenized vaults representing shares of a single underlying ERC-20 token. This proposal aims to address the lack of standardization in tokenized vaults, which had led to diverse implementation details across various DeFi protocols.</p>\n\n<p>The motivation behind ERC-4626 was to simplify integration efforts for yield-bearing vaults and create more consistent implementation patterns. This standardization benefits both developers and users by reducing the need for custom adapters and lowering the risk of errors. The proposal extends the ERC-20 token standard, providing basic functionality for depositing and withdrawing tokens, as well as reading balances.</p>\n\n<p>ERC-4626 has gained significant traction in the DeFi ecosystem since its finalization. Many prominent projects, including Yearn Finance, Aave, and Compound, have adopted or are in the process of implementing this standard. Its widespread adoption has facilitated easier interoperability between different vault-like products and has become a cornerstone for composable DeFi applications. As of 2023, ERC-4",
  "ERC-4671": "<article><h1>ERC-4671: Non-Tradable Tokens Standard</h1>\n\n<p>ERC-4671, proposed in January 2022 by Omar Aflak, Pol-Malo Le Bris, and Marvin Martin, introduces a standard for non-tradable tokens (NTTs) on the Ethereum blockchain. These tokens, also known as \"soulbound\" NFTs or badges, are designed to represent personal achievements or possessions that should not be transferable, such as diplomas, certificates, or government-issued documents.</p>\n\n<p>The proposal aims to standardize the implementation of non-tradable tokens, which have been used in various projects for purposes like issuing university diplomas or tracking event attendance. By creating a common interface, ERC-4671 seeks to provide a unified approach to these use cases, emphasizing the blockchain's utility beyond speculation.</p>\n\n<p>As of now, ERC-4671 is in a \"Stagnant\" status, indicating that it hasn't seen recent activity or updates. While the concept of soulbound tokens has gained traction, particularly with Vitalik Buterin's advocacy, alternative proposals like ERC-5114 (Soulbound Token) have emerged. The crypto community continues to explore and refine the idea of non-transferable tokens, recognizing their potential for representing personal achievements and ident",
  "ERC-4675": "<article><h1>ERC-4675: Multi-Fractional Non-Fungible Tokens</h1>\n\n<p>ERC-4675 was proposed in January 2022 by David Kim to enable fractionalizing multiple NFTs using a single smart contract. It aimed to improve efficiency over existing approaches that required deploying separate ERC-20 contracts for each fractionalized NFT. The proposal allowed each token ID to represent fractionalized ownership of a distinct NFT within one contract.</p>\n\n<p>The proposal was motivated by the growing popularity of NFT fractionalization, which enables partial ownership of high-value NFTs. By combining multiple fractionalized NFTs in one contract, ERC-4675 sought to reduce bytecode usage and enable new functionality not possible with siloed ERC-20 contracts. It built on concepts from ERC-1155 multi-token standard but focused specifically on representing fractionalized NFTs.</p>\n\n<p>Currently, ERC-4675 is in \"Stagnant\" status, indicating a lack of recent progress or adoption. While the idea of efficient multi-NFT fractionalization remains relevant, other approaches like ERC-721 wrapper contracts have gained more traction in practice. The proposal may still offer insights for future standards around fractionalized NFT ownership, but does not appear to be actively moving toward implementation in its current form.</p></article>",
  "ERC-4799": "<article><h1>ERC-4799: Non-Fungible Token Ownership Designation Standard</h1>\n\n<p>ERC-4799, proposed by David and Isaac Buckman in February 2022, aims to create a standardized interface for designating ownership of NFTs while they are held in escrow by smart contracts. This proposal addresses the limitations of current NFT ownership models, allowing for more flexible utility distribution and composability of NFTs.</p>\n\n<p>The core idea behind ERC-4799 is to enable the creation of a directed acyclic graph of NFTs, where the designated owner of each NFT in a chain is the terminal address. This approach would allow for the addition of new functionalities to existing NFTs without compromising their authenticity. As a result, NFTs could become more versatile, supporting features like renting, collateralization, and fractionalization.</p>\n\n<p>Currently, the proposal's status is listed as \"Stagnant,\" indicating that it has not seen significant development or discussion recently. While the concept addresses important issues in NFT utility and ownership, it appears that the broader Ethereum community has not yet fully embraced or implemented this standard. As the NFT ecosystem continues to evolve, proposals like ERC-4799 may gain renewed interest or be superseded by alternative solutions to similar problems.</p></article>",
  "ERC-4804": "<article><h1>ERC-4804: Web3 URL to EVM Call Message Translation</h1>\n\n<p>ERC-4804, proposed by Qi Zhou, Chao Pi, and Sam Wilson in February 2022, defines a standard for translating HTTP-style Web3 URLs into EVM call messages. This proposal aims to enable direct user access to on-chain Web content without relying on Web2 proxies, enhancing decentralization and user control in the Web3 ecosystem.</p>\n\n<p>The proposal specifies a format for Web3 URLs (e.g., <code>web3://uniswap.eth/</code>) and outlines how these should be translated into EVM messages. This translation allows for read-only interactions with smart contracts, potentially opening up new possibilities for decentralized applications and services. The standard is particularly useful for accessing on-chain SVG/HTML content and improving interoperability with existing URI-compatible standards.</p>\n\n<p>ERC-4804 has reached \"Final\" status, indicating its acceptance by the Ethereum community. While it currently only defines read-only semantics, future extensions could potentially include state-modifying functions. This proposal represents a significant step towards a more accessible and user-friendly Web3, bridging the gap between traditional web technologies and blockchain-based systems.</p></article>",
  "ERC-4824": "<article><h1>ERC-4824: Common Interfaces for DAOs</h1>\n\n<p>ERC-4824, titled \"Common Interfaces for DAOs,\" is a significant proposal aimed at standardizing the API for Decentralized Autonomous Organizations (DAOs) on Ethereum. Authored by Joshua Tan, Isaac Patka, Ido Gershtein, Eyal Eithcowich, Michael Zargham, and Sam Furter, this proposal was created in February 2022 to address the lack of standardization and interoperability among DAO frameworks and tools.</p>\n\n<p>The proposal introduces a standard daoURI, similar to the tokenURI in ERC-721, to enhance DAO discoverability, legibility, proposal simulation, and tool interoperability. It focuses on relating on-chain and off-chain representations of membership and proposals, which is crucial for consistent data across the DAO ecosystem. This standardization is seen as a prerequisite for future DAO standards and aims to support a wide range of use-cases.</p>\n\n<p>As of the last update, ERC-4824 was in the \"Review\" status, indicating it was still under consideration by the Ethereum community. The proposal has generated significant discussion in the Ethereum development community, reflecting its importance in the evolving landscape of DAOs. If implemented, it could significantly impact how DA",
  "ERC-4834": "<article><h1>ERC-4834: Hierarchical Domains</h1>\n\n<p>ERC-4834, titled \"Hierarchical Domains\", was proposed by Gavin John in February 2022 as a standard for generic name resolution with flexible access control. Its purpose was to provide a simpler alternative to the Ethereum Name Service (ENS) with standardized access control and a more straightforward architecture.</p>\n\n<p>The key innovation of ERC-4834 is that all domains, including subdomains, top-level domains, and even the root, are implemented as domains themselves. This allows for a simple iterative name resolution algorithm similar to DNS. The proposal aimed to offer a minimal interface supporting name resolution while adding standardized access control.</p>\n\n<p>As of its last update, ERC-4834 had reached \"Final\" status in the Ethereum Improvement Proposal process, indicating it was accepted by the community. However, its adoption and implementation details in real-world projects are not widely documented. While it offers potential advantages in simplicity and flexibility over ENS, ENS remains the more established and widely used naming system in the Ethereum ecosystem.</p></article>",
  "ERC-4883": "<article><h1>ERC-4883: Composable SVG NFT</h1>\n\n<p>ERC-4883, proposed in March 2022, introduces a standard for composable SVG (Scalable Vector Graphics) NFTs. The proposal was authored by a group of developers including Andrew B Coathup, Alex, Damian Martinelli, blockdev, and Austin Griffith. Its primary purpose is to enable the composition of SVG NFTs by concatenating the SVG of one NFT with the rendered SVG of another NFT for a specific token ID.</p>\n\n<p>The motivation behind this proposal is to enhance the capabilities of onchain SVG NFTs, allowing for greater creativity and interoperability. For example, it enables the addition of accessory NFTs (like glasses or hats) to profile picture NFTs, or the inclusion of a fish NFT within a fish tank NFT. This composability feature opens up new possibilities for dynamic and interactive NFT artwork entirely stored on the blockchain.</p>\n\n<p>As of now, ERC-4883 remains in Draft status. It builds upon existing standards like ERC-165 and ERC-721, introducing a new interface <code>IERC4883</code> with a <code>renderTokenById</code> function. This function is crucial as it returns the SVG body for a specified token ID, allowing for the",
  "ERC-4885": "<article><h1>ERC-4885: Subscription NFTs and Multi Tokens</h1>\n\n<p>ERC-4885, proposed by Jules Lai in March 2022, introduces a standard interface for subscription tokens that allow holders to access NFTs and multi-tokens. The proposal aims to create a flexible, decentralized subscription model for digital assets and services, potentially disrupting centralized subscription services in industries like music and film.</p>\n\n<p>The core idea is to enable users to deposit ERC-20 tokens in exchange for subscription tokens, granting them time-limited or unlimited access to specific NFTs (ERC-721) or multi-tokens (ERC-1155). This approach allows content creators and service providers to implement custom subscription models, potentially opening up new revenue streams and giving them more control over their digital offerings.</p>\n\n<p>As of now, the proposal's status is \"Stagnant,\" indicating that it hasn't seen significant development or adoption since its introduction. While the concept addresses an important use case in the evolving digital economy, it may require further refinement or community support to gain traction. The proposal builds upon existing standards (ERC-165, ERC-721, and ERC-1155), which could facilitate integration if it were to be implemented in the future.</p></article>",
  "ERC-4886": "<article><h1>ERC-4886: Proxy Ownership Register</h1>\n\n<p>ERC-4886, proposed by Omnus Sunmo in September 2022, introduces a proxy ownership register for Ethereum. This proposal aims to enhance security and user experience by allowing users to interact with smart contracts using a low-value proxy address while keeping valuable assets in a separate, secure wallet.</p>\n\n<p>The main features of ERC-4886 include the ability to nominate a proxy address to act on behalf of another wallet, and specify a delivery address for new assets. This approach addresses security concerns related to malicious contract interactions that have led to asset drains in the past. It also simplifies the process of proving asset ownership for various applications, such as Discord communities requiring token verification.</p>\n\n<p>While ERC-4886 presents an interesting solution to some common blockchain security and usability issues, its current status is \"Stagnant\". This suggests that the proposal has not gained significant traction or development activity since its introduction. As of now, it has not been widely implemented or superseded by another proposal, but the concepts it introduces could potentially influence future developments in Ethereum wallet security and asset management.</p>\n</article>",
  "ERC-4906": "<article><h1>ERC-4906: EIP-721 Metadata Update Extension</h1>\n\n<p>ERC-4906 is an extension to the popular ERC-721 non-fungible token standard that adds a MetadataUpdate event. This proposal was created in March 2022 by Anders, Lance Snow, Shrug, and Nathan Gang to address the need for a standardized way to notify third-party platforms about metadata changes for NFTs.</p>\n\n<p>The motivation behind ERC-4906 was to simplify the process for NFT marketplaces and other platforms to stay updated on metadata changes across different NFT collections. Previously, each collection might have its own custom event for metadata updates, requiring individualized solutions. By introducing a standard MetadataUpdate event, ERC-4906 allows for easier and more consistent tracking of these changes.</p>\n\n<p>ERC-4906 reached Final status, meaning it has been accepted as an Ethereum standard. It is an optional extension for ERC-721 contracts, allowing developers to implement it if they want to provide this additional functionality. The proposal has been well-received in the Ethereum community as a simple but useful addition to the NFT ecosystem, enhancing interoperability between NFT projects and third-party platforms.</p>\n</article>",
  "ERC-4907": "<article><h1>ERC-4907: Rental NFT Extension</h1>\n\n<p>ERC-4907 is a final Ethereum Improvement Proposal that extends the popular ERC-721 NFT standard to add support for rentable NFTs. Proposed in March 2022 by Anders, Lance Snow, and Shrug, it introduces a new \"user\" role distinct from the owner, allowing NFT owners to temporarily grant usage rights to others without transferring ownership.</p>\n\n<p>The proposal defines two key additions: a \"user\" address that can utilize the NFT's functionality, and an \"expires\" timestamp when that usage permission is automatically revoked. This enables time-limited rentals of NFTs, particularly useful for assets with in-game utility or virtual land that can be developed. Several projects had already implemented similar rental mechanics, but ERC-4907 aimed to standardize the approach.</p>\n\n<p>As a finalized ERC, ERC-4907 can be freely implemented by developers. Its standardization allows for better interoperability between NFT rental platforms and marketplaces. While not as widely adopted as the core ERC-721 standard, ERC-4907 provides a solid foundation for NFT rental functionality that is likely to see increased usage as the NFT ecosystem matures and more emphasis is placed on utility over pure collectibility.</p></article>",
  "ERC-4910": "<article><h1>ERC-4910: Royalty Bearing NFTs</h1>\n\n<p>ERC-4910, proposed by Andreas Freund in March 2022, aims to address the longstanding issue of royalty management in the digital asset space. This proposal extends the ERC-721 standard to implement on-chain royalty processing for NFTs, allowing for transparent and automated royalty payments without relying on central authorities.</p>\n\n<p>The proposal introduces a smart contract architecture that enables hierarchical royalty structures, or \"royalty trees,\" where NFTs can have parent-child relationships. This allows for complex royalty distributions, such as when derivative works are created from original assets. ERC-4910 also includes features for royalty account management, balance tracking, and simple trading capabilities, as well as mechanisms to trace trading on exchanges.</p>\n\n<p>Currently, ERC-4910 has reached \"Final\" status, indicating that it has been thoroughly reviewed and accepted by the Ethereum community. While not yet widely implemented, this proposal offers a promising solution to the challenges of royalty management in the NFT space, potentially reducing fraud and ensuring fair compensation for creators throughout the lifecycle of digital assets.</p></article>",
  "ERC-4931": "<article><h1>ERC-4931: Generic Token Upgrade Standard</h1>\n\n<p>ERC-4931, proposed in November 2021 by John Peterson, Roberto Bayardo, and David Núñez, aims to standardize the process of upgrading ERC-20 tokens. The proposal introduces a standard API for token upgrades, allowing for a more efficient and secure conversion process from a \"source token\" to a \"destination token\".</p>\n\n<p>The motivation behind this proposal was to streamline token upgrades, which typically require asset holders to use custom interfaces provided by developers. By standardizing the upgrade process, ERC-4931 would enable more efficient upgrades for individual holders and exchanges alike. It would also reduce the security risks associated with verifying upgrade contract functionality and provide clear guidance for asset issuers.</p>\n\n<p>Despite its potential benefits, ERC-4931 is currently in a \"Stagnant\" status, indicating that it has not seen significant development or discussion recently. While the proposal offers a valuable solution to a common problem in the Ethereum ecosystem, it appears that it has not gained the necessary traction for implementation. As of now, there is no widely adopted standard for token upgrades, and projects continue to use custom solutions for this process.</p></article>",
  "ERC-4944": "<article><h1>ERC-4944: Contract with Exactly One Non-fungible Token</h1>\n\n<p>ERC-4944, proposed by Víctor Muñoz, Josep Lluis de la Rosa, and Andres El-Fakdi in March 2022, aims to create an ERC-721 compatible contract that mints only one token. This proposal would allow a single NFT to be uniquely associated with a contract address, simplifying identification and enabling native composability without additional code.</p>\n\n<p>The main motivation behind ERC-4944 is to enhance the capabilities of NFTs by allowing them to act as autonomous agents. By limiting the total supply to one token per contract, each NFT could automatically inherit the ability to own other ERC-721 or ERC-20 tokens, similar to the composable tokens described in ERC-998. This would enable NFTs to manage their own \"budget\" and trade with other owned NFTs, potentially opening up new use cases in value preservation and digital asset management.</p>\n\n<p>Currently, the proposal's status is listed as \"Stagnant,\" indicating that it has not seen significant development or discussion recently. While the idea presents interesting possibilities for NFT functionality and composability, it's unclear whether it will be implemented or if other proposals have addressed similar concerns in different ways. Further community engagement and development would be necessary for this proposal to",
  "ERC-4950": "<article><h1>ERC-4950: Entangled Tokens</h1>\n\n<p>EIP-4950, proposed by Víctor Muñoz, Josep Lluis de la Rosa, and Easy Innova in March 2022, introduces the concept of \"Entangled Tokens\" as an extension to the ERC-721 non-fungible token standard. The proposal aims to create pairs of linked NFTs that can be used to delegate control of a smart contract wallet to two users simultaneously. This innovative approach allows for shared wallet access through NFTs, enabling use cases such as maintaining a connection between artists and buyers of their digital artworks.</p>\n\n<p>The primary motivation behind EIP-4950 is to facilitate easy sharing of wallet access through NFTs. By purchasing an entangled token in a marketplace, a buyer would gain privileged access to a specific wallet, which could contain various tokens or even ownership of other NFTs. This mechanism provides a novel way to establish and maintain relationships between creators and collectors in the digital art space, as well as offering potential applications in other areas where shared or verified access is desirable.</p>\n\n<p>As of now, EIP-4950 is in a \"Stagnant\" status, indicating that it has not seen significant activity or updates recently. While the proposal presents an interesting concept for enhancing NFT functionality and wallet sharing, it appears that it has",
  "ERC-4955": "<article><h1>ERC-4955: Vendor Metadata Extension for NFTs</h1>\n\n<p>ERC-4955 proposes adding a new \"namespaces\" field to NFT metadata to allow projects to include custom vendor-specific data. It was authored by Ignacio Mazzara in March 2022 to address interoperability challenges between different metaverse and NFT platforms that need custom 3D models or attributes for NFTs.</p>\n\n<p>The proposal specifies adding a \"namespaces\" object to the existing ERC-721 and ERC-1155 metadata schemas. This allows projects like Decentraland or The Sandbox to include their own custom 3D model data and other attributes in a standardized way. It aims to improve cross-platform compatibility while maintaining distinct aesthetics across projects.</p>\n\n<p>ERC-4955 reached Final status, indicating it has been accepted as a standard. It is now recommended for NFT projects that need to include custom metadata for specific platforms or use cases. The standardized approach allows wallets, marketplaces and other applications to more easily support vendor-specific NFT attributes in an interoperable way.</p>\n</article>",
  "ERC-4972": "<article><h1>ERC-4972: Name-Owned Account</h1>\n\n<p>ERC-4972 proposes extending name services like ENS by linking each human-readable identity to a smart contract account controlled by the name owner. This proposal was authored by Shu Dong, Qi Zhou, and Zihao Chen in April 2022.</p>\n\n<p>The motivation is to give names more context and functionality by providing an associated smart contract account. This would allow names to hold assets and information, enabling use cases like transferring both a name and its associated account/assets together. It aims to boost adoption of smart contract accounts.</p>\n\n<p>Currently, ERC-4972 remains in Draft status. While it presents an interesting concept for enhancing name services, it has not been widely implemented or accepted as a standard. The proposal builds on ERC-137 (Ethereum Name Service) but introduces additional complexity that would require careful consideration before potential adoption.</p>\n</article>",
  "ERC-4973": "<article><h1>ERC-4973: Account-bound Tokens</h1>\n\n<p>ERC-4973, proposed by Tim Daubenschütz in April 2022, introduces the concept of Account-bound Tokens (ABTs) to the Ethereum ecosystem. These non-transferrable NFTs are designed to be permanently associated with a specific Ethereum account, similar to how legendary items in games like World of Warcraft bind to a character. The proposal aims to create a standard for tokens that represent achievements, credentials, or other non-tradeable assets on the blockchain.</p>\n\n<p>The motivation behind ABTs stems from the need for digital assets that cannot be transferred or sold, maintaining their unique value and association with a particular account. This concept addresses use cases where the token's significance lies in its connection to the owner rather than its market value. Examples include digital badges, certifications, or reputation tokens that lose meaning if separated from the account that earned them.</p>\n\n<p>As of 2023, ERC-4973 remains in the Review status, indicating ongoing discussion and potential refinement before possible adoption. While the proposal has garnered interest for its novel approach to non-transferrable assets, the broader concept of \"soulbound\" tokens has evolved, with other proposals like ERC-5192 also addressing similar ideas. The cryptocurrency community continues to explore the implications and potential applications of account-bound tokens in various domains",
  "ERC-4974": "<article><h1>ERC-4974: Ratings</h1>\n\n<p>ERC-4974, proposed by Daniel Tedesco in April 2022, introduces a standardized interface for assigning and managing numerical ratings on the Ethereum blockchain. This proposal aims to create a new composable primitive for blockchain applications, enabling a wide range of use cases beyond traditional asset-centric models.</p>\n\n<p>The motivation behind ERC-4974 stems from the limitations observed in pay-to-play dynamics prevalent in many EVM-based games and DAOs in 2021. By allowing ratings to be assigned to contracts and wallets, the proposal seeks to introduce more nuanced and community-oriented mechanisms for participation and governance. Potential applications include determining voting weight in DAOs, representing experience points in decentralized games, and implementing reputation systems for decentralized marketplaces.</p>\n\n<p>As of now, ERC-4974 is in a \"Stagnant\" status, indicating that development and discussions around the proposal have slowed down. While the concept introduces interesting possibilities for blockchain applications, it appears that the community has not yet fully embraced or implemented this standard. Further development or alternative proposals addressing similar concerns may emerge in the future, potentially building upon or superseding the ideas presented in ERC-4974.</p>\n</article>",
  "ERC-4987": "<article><h1>ERC-4987: Held Token Interface</h1>\n<p>ERC-4987, proposed by Devin Conley in September 2021, introduces a standardized interface for querying ownership and balance information of tokens held by smart contracts. This proposal aims to bridge the gap between DeFi mechanisms requiring token deposits and systems relying on token ownership for verification.</p>\n\n<p>The motivation behind ERC-4987 stems from the increasing convergence of different crypto sectors, such as DeFi and NFTs. As composability improves, there's often a distinction between the actual owner (typically a contract) and the functional owner (usually a user) of a token. This standard allows users to participate in DeFi mechanisms without sacrificing the utility of their tokens in other systems.</p>\n\n<p>Currently, the proposal's status is \"Stagnant,\" indicating that it hasn't seen recent activity or updates. While the idea has merit in improving interoperability across various blockchain systems, it's unclear whether it will be implemented widely or if alternative solutions have emerged to address similar concerns. As the DeFi and NFT landscapes continue to evolve, developers and projects may need to reassess the relevance and potential implementation of this proposal.</p></article>",
  "ERC-5005": "<article><h1>ERC-5005: Zodiac Modular Accounts</h1>\n\n<p>EIP-5005, titled \"Zodiac Modular Accounts,\" was proposed by Auryn Macmillan and Kei Kreutler in April 2022. This proposal aims to standardize interfaces for composable and interoperable tooling for programmable Ethereum accounts. The core idea is to separate contract accounts (\"avatars\") from their authentication and execution logic (\"guards\" and \"modules\"), allowing for more flexible and modular control of these accounts.</p>\n\n<p>The proposal introduces two main interfaces: IAvatar for contract accounts and IGuard for authentication logic. By decoupling these components, EIP-5005 enables users to easily switch between different tools and frameworks, implement multiple control mechanisms in parallel, and facilitate cross-chain or cross-layer governance. This approach also supports progressive decentralization, allowing organizations to evolve their governance structures over time.</p>\n\n<p>As of now, EIP-5005 is in a \"Stagnant\" status, indicating that it has not seen significant activity or updates recently. While the proposal offers compelling benefits for DAO tooling and programmable accounts, its current status suggests that it may not have gained widespread adoption or consensus within the Ethereum community. However, the concepts introduced in this EIP continue to influence discussions around modular an",
  "ERC-5006": "<article><h1>ERC-5006: Rental NFT, NFT User Extension</h1>\n\n<p>ERC-5006 is a proposed extension to the ERC-1155 token standard that introduces the concept of a \"user\" role for NFTs, separate from the owner. This proposal was authored by Lance, Anders, and Shrug in April 2022 to enable rental or usage rights for NFTs while maintaining ownership.</p>\n\n<p>The key innovation of ERC-5006 is adding a \"user\" role with restricted permissions. This allows NFT owners to temporarily grant usage rights to others without transferring ownership. The proposal defines functions for setting and querying user rights, as well as events for tracking these changes. This enables use cases like renting or lending NFTs while protecting the owner's long-term rights.</p>\n\n<p>As of 2023, ERC-5006 has reached \"Final\" status, indicating it has been accepted as a formal Ethereum standard. While not as widely adopted as the core ERC-721 and ERC-1155 standards it builds on, ERC-5006 provides a standardized approach for implementing NFT rental and usage rights that may see increased usage as the NFT ecosystem matures and more complex ownership models emerge.</p>\n</article>",
  "ERC-5007": "<article><h1>ERC-5007: Time NFT, ERC-721 Time Extension</h1>\n\n<p>ERC-5007 is a proposed extension to the popular ERC-721 non-fungible token standard, introducing time-based functionality to NFTs. Authored by Anders, Lance Snow, and Shrug from EmojiDAO, this proposal aims to add start and end time attributes to ERC-721 tokens, enabling automatic on-chain time management for NFTs with defined usage periods.</p>\n\n<p>The motivation behind ERC-5007 stems from the limitations of traditional NFTs in handling time-sensitive use cases. Without built-in time information, enabling or disabling tokens at specific times requires manual transactions, which can be inefficient and costly. This proposal standardizes time functions, making it easier for third-party platforms to interact with time-based NFTs consistently.</p>\n\n<p>ERC-5007 reached Final status, indicating its acceptance by the Ethereum community. It introduces new functions like <code>startTime</code> and <code>endTime</code> to the ERC-721 interface, allowing for more sophisticated time-based applications of NFTs. This standard is particularly useful for scenarios such as time-limited access tokens, event tickets, or any other NFT use case where temporal validity is crucial.</p></article>",
  "ERC-5008": "<article><h1>ERC-5008: ERC-721 Nonce Extension</h1>\n\n<p>ERC-5008 is a proposal to add a 'nonce' function to the popular ERC-721 NFT standard. It was authored by Anders, Lance, and Shrug in April 2022 to address security vulnerabilities in NFT marketplace orders.</p>\n\n<p>The motivation behind ERC-5008 was to prevent attacks where NFTs could be sold at below-market prices due to reactivated old orders. By adding a nonce that increments on transfers, orders can include the nonce to verify they are still valid. This helps protect users from unintentionally selling NFTs at outdated prices.</p>\n\n<p>As of August 2023, ERC-5008 is in \"Last Call\" status, indicating it has been thoroughly reviewed and is nearing final approval. If implemented, it would provide an important security enhancement for ERC-721 tokens and NFT marketplaces. However, adoption would require updates to existing contracts and marketplace integrations.</p>\n</article>",
  "ERC-5018": "<article><h1>ERC-5018: Filesystem-like Interface for Contracts</h1>\n\n<p>ERC-5018 proposes a standardized API for implementing filesystem-like functionality within smart contracts on Ethereum. Authored by Qi Zhou in April 2022, this proposal aimed to enable reading and writing of binary objects of any size, similar to traditional filesystems.</p>\n\n<p>The motivation was to allow binary objects on EVM blockchains to be easily reused across dApps. It built upon EIP-4804 (HTTP-style URIs for Web3 resources) to simplify mapping between local and on-chain web content. The proposal specified methods like write(), read(), and remove() to manipulate files within a contract-based directory structure.</p>\n\n<p>Currently, ERC-5018 has a status of \"Stagnant\", indicating a lack of recent activity or progress. While the concept of on-chain filesystems remains relevant, this particular proposal has not gained significant traction. Other approaches to storing and accessing data on Ethereum, such as events, mappings, and off-chain storage solutions, are more commonly used in practice.</p></article>",
  "ERC-5023": "<article><h1>ERC-5023: Shareable Non-Fungible Token</h1>\n\n<p>ERC-5023, proposed by Jarno Marttila and Martin Moravek in January 2022, introduces a standard for shareable non-fungible tokens (NFTs) on the Ethereum blockchain. This proposal aims to create value-holding tokens that can be shared among multiple owners, addressing the need for non-scarce digital resources in contrast to traditional NFT standards like ERC-721 and ERC-1155.</p>\n\n<p>The key innovation of ERC-5023 is the concept of \"shareability,\" achieved by minting copies of existing tokens for new recipients. This mechanism allows for the creation of a graph describing the sharing relationships between parties. The proposal is designed to capture positive externalities in ecosystems with new incentive mechanisms that exhibit anti-rival logic, serving as both a unit of accounting and a medium of sharing.</p>\n\n<p>Currently, ERC-5023 has reached \"Final\" status, indicating its acceptance by the Ethereum community. This standard opens up new possibilities for digital assets that gain value through sharing, potentially revolutionizing how we think about ownership and distribution of digital goods in blockchain ecosystems.</p></article>",
  "ERC-5050": "<article><h1>ERC-5050: Interactive NFTs with Modular Environments</h1>\n\n<p>ERC-5050, proposed by Alexi in April 2021, aims to establish a standard for interactive NFTs by defining an action messaging protocol. This proposal addresses the growing demand for interactivity and \"digital physics\" in NFTs, particularly in gaming and decentralized identity contexts. The standard outlines how actions can be initiated and transmitted between tokens and optional shared state environments, enabling a more dynamic and interactive NFT ecosystem.</p>\n\n<p>The proposal introduces the concept of modular statefulness through optional state controller contracts, or \"environments,\" which manage shared state and provide arbitration for the action process. This approach allows for the development of a physics layer for NFTs in an open, Ethereum-native manner, similar to how ERC-721 and ERC-1155 serve as object standards. ERC-5050 also includes a common interface for defining functionality, enabling off-chain services to aggregate and query supported contracts for interoperability.</p>\n\n<p>As of now, ERC-5050's status is listed as \"Stagnant,\" indicating that it has not seen recent development or discussion. While the proposal offers an innovative approach to interactive NFTs, it's unclear whether it will be widely adopted or if other standards might supersede it. The crypto community's evolving needs and the emergence",
  "ERC-5058": "<article><h1>ERC-5058: Lockable Non-Fungible Tokens</h1>\n\n<p>ERC-5058 is a proposed extension to the ERC-721 standard for non-fungible tokens (NFTs) on Ethereum. It introduces a secure locking mechanism that allows NFT owners to temporarily restrict transfers of their tokens while still enabling them to participate in smart contracts. The proposal was authored by Tyler, Alex, and John from the Radio Caca project in April 2022.</p>\n\n<p>The main motivation behind ERC-5058 was to address liquidity challenges in the NFT space without requiring owners to transfer their tokens to third-party contracts. This proposal allows NFTs to be \"locked\" for a specified period, during which they cannot be transferred but can still interact with approved smart contracts. This approach aims to provide more flexibility and security for NFT owners participating in DeFi and other blockchain applications.</p>\n\n<p>As of now, ERC-5058 is in a \"Stagnant\" status, indicating that development and discussions around the proposal have slowed down. While the idea presents an interesting solution to NFT liquidity issues, it's unclear whether it will be widely adopted or if alternative approaches may supersede it. The crypto community continues to explore various methods to enhance NFT functionality and liquidity, and ERC-5058 remains one of several proposed solutions in",
  "ERC-5094": "<article><h1>ERC-5094: URL Format for Ethereum Network Switching</h1>\n\n<p>ERC-5094, proposed in May 2022 by Luc van Kampen, Jakob Helgesson, and Joshua Hendrix, aims to standardize a URL format for adding new Ethereum networks to wallets. This proposal addresses a common issue where users struggle to perform transactions on networks not pre-configured in their wallets, especially on mobile devices.</p>\n\n<p>The proposal builds upon existing standards like EIP-681 (URI Format for Transaction Requests) and EIP-831 (URI Format for Ethereum), extending their functionality to include network configuration parameters. The proposed URL format includes essential information such as <code>chainId</code>, <code>rpc_url</code>, and <code>chain_name</code>, allowing wallets to automatically add and configure new networks.</p>\n\n<p>Currently, the proposal's status is listed as \"Stagnant,\" indicating that it has not seen recent activity or updates. While the idea addresses a real need in the Ethereum ecosystem, it's unclear whether this specific implementation will be widely adopted or if alternative solutions might emerge to solve the network switching challenge.</p>\n\n</article>",
  "ERC-5095": "<article><h1>ERC-5095: Principal Token Standard</h1>\n\n<p>ERC-5095, proposed in May 2022, aims to standardize principal tokens (also known as zero-coupon tokens) in the Ethereum ecosystem. These tokens represent ownership of an underlying ERC-20 token that can be redeemed at a future timestamp. The proposal was authored by Julian Traversa, Robert Robbins, and Alberto Cuesta Cañada, addressing the lack of standardization in principal token implementations.</p>\n\n<p>The motivation behind ERC-5095 stems from the diverse implementation schemes for principal tokens, particularly in yield tokenization platforms and fixed-rate money markets. This diversity has made integration challenging at both the application and wallet layers, hindering growth in the space. By providing a standard interface, ERC-5095 seeks to simplify development and improve interoperability for principal tokens.</p>\n\n<p>As of now, the proposal's status is listed as \"Stagnant,\" indicating that it has not seen recent activity or progress towards implementation. While the standard could potentially streamline principal token development and usage, its current status suggests that it may not have gained widespread adoption or support within the Ethereum community. Developers and projects working with principal tokens should consider the proposal's concepts but also be aware of its current inactive state.</p>\n</article>",
  "ERC-5114": "<article><h1>ERC-5114: Soulbound Badge</h1>\n\n<p>ERC-5114, proposed by Micah Zoltu in May 2022, introduces the concept of a \"Soulbound Badge\" in Ethereum. This proposal defines a new type of non-transferable token that is permanently bound to another Non-Fungible Token (NFT) at the time of minting. The key feature of this token is its immutability once minted, making it ideal for representing permanent achievements, credentials, or affiliations within the Ethereum ecosystem.</p>\n\n<p>The proposal specifies a minimal interface for Soulbound Badges, including a mint event, an ownerOf function to retrieve the associated NFT, and a collectionUri function for metadata. It builds upon the concept of Soulbound Tokens, first proposed by Vitalik Buterin, but with a focus on attaching these tokens to existing NFTs rather than Ethereum addresses. This approach allows for more flexible and composable use cases in decentralized identity and reputation systems.</p>\n\n<p>As of September 2023, ERC-5114 is in \"Last Call\" status, indicating that it has undergone significant discussion and refinement. The proposal has garnered attention for its potential applications in decentralized identity, verifiable credentials, and reputation systems. While it hasn't been fully implemente",
  "ERC-5115": "<article><h1>ERC-5115: SY Token</h1>\n\n<p>ERC-5115 proposes a standard interface for wrapped yield-bearing tokens, extending ERC-20 with additional functionality for depositing, withdrawing, and reading balances. It was authored by Vu Nguyen, Long Vuong, and Anton Buenavista in May 2022 to address the fragmentation in yield-generating mechanisms across DeFi protocols.</p>\n\n<p>The proposal aims to complement ERC-4626, which standardized interfaces for vaults, by covering additional yield-bearing assets like AMM liquidity tokens. These assets have different input tokens for minting versus accounting for pool value, making them incompatible with ERC-4626. ERC-5115 allows for greater composability and interoperability between yield-generating protocols.</p>\n\n<p>Currently, ERC-5115 remains in Draft status. While it offers potential benefits for DeFi integration, its adoption and implementation across the ecosystem are still in progress. Developers and projects working with yield-bearing tokens should consider this proposal for improved standardization, but should also be aware of its draft status and potential for changes before finalization.</p></article>",
  "ERC-5131": "<article><h1>ERC-5131: SAFE Authentication For ENS</h1>\n\n<p>ERC-5131, proposed in June 2022, aims to enhance security and convenience in Ethereum by linking signing wallets to a main wallet through Ethereum Name Service (ENS) text records. This proposal addresses the common practice of users signing payloads to prove asset ownership, which can be risky and inconvenient.</p>\n\n<p>The proposal was authored by a team including Wilkins Chung, Jalil Wahdatehagh, and others from various blockchain projects. It builds upon previous ENS-related EIPs (137, 181, and 634) to create a more secure authentication system. The core idea is to allow users to designate separate signing wallets for different purposes, reducing the exposure of their main wallet.</p>\n\n<p>As of now, ERC-5131's status is \"Stagnant,\" indicating that it hasn't seen recent activity or updates. While the proposal offers potential improvements in wallet security and user experience, its implementation would require significant changes to existing systems and user behaviors. The crypto community continues to explore various solutions for secure authentication, and while ERC-5131 provides valuable insights, other approaches may have gained more traction since its proposal.</p>\n</article>",
  "ERC-5139": "<article><h1>ERC-5139: Remote Procedure Call Provider Lists</h1>\n\n<p>ERC-5139 was proposed by Sam Wilson in June 2022 to standardize a format for lists of RPC providers across Ethereum-like chains. The motivation was to improve security and transparency around RPC providers, given the proliferation of alternate chains and scaling solutions. By having wallets maintain curated provider lists, users could be protected from potentially malicious or misleading RPC endpoints.</p>\n\n<p>The proposal defines a JSON schema for provider lists, including details like chain IDs, endpoints, connection methods, and provider metadata. It builds on existing standards like EIP-155 for chain IDs. While initially active, the proposal is currently marked as \"Stagnant\", indicating a lack of recent progress or updates.</p>\n\n<p>Though the goals of ERC-5139 remain relevant, its stagnant status suggests it has not gained widespread adoption. Other approaches to RPC provider discovery and curation may have emerged since its proposal. However, the core idea of standardizing provider information could still prove valuable if revisited and updated for the current ecosystem.</p></article>",
  "ERC-5143": "<article><h1>ERC-5143: Slippage Protection for Tokenized Vaults</h1>\n\n<p>ERC-5143 was proposed in June 2022 by Hadrien Croubois as an extension to ERC-4626 (Tokenized Vault Standard). Its purpose was to add standardized functions for slippage protection when externally owned accounts (EOAs) interact directly with tokenized vaults.</p>\n\n<p>The proposal aimed to address a security consideration mentioned in ERC-4626, which suggested adding functions to handle slippage and unexpected limits for EOA interactions. By standardizing these functions, ERC-5143 sought to improve interoperability and wallet support for tokenized vaults.</p>\n\n<p>As of now, ERC-5143 is in a \"Stagnant\" status, indicating that development has slowed or stopped. While it addressed an important issue, it's unclear if this specific proposal will be implemented widely. Developers working with tokenized vaults should consider the principles behind ERC-5143 when implementing slippage protection, even if not strictly adhering to its proposed interface.</p>\n</article>",
  "ERC-5164": "<article><h1>ERC-5164: Cross-Chain Execution</h1>\n\n<p>ERC-5164, proposed in June 2022 by Brendan Asselstine, Pierrick Turelier, and Chris Whinfrey, aims to standardize cross-chain execution interfaces for EVM-compatible blockchains. This proposal defines a framework for contracts on one chain to call contracts on another through cross-chain messaging, addressing the growing need for interoperability in the Ethereum ecosystem.</p>\n\n<p>The proposal introduces two key components: the \"Message Dispatcher\" on the calling chain and the \"Message Executor\" on the receiving chain. These components work together to facilitate the transmission and execution of cross-chain messages through a transport layer. By standardizing this process, ERC-5164 seeks to improve code reusability and simplify integration across various blockchain bridges, each with their own security and performance characteristics.</p>\n\n<p>Currently, ERC-5164 is in the Last Call status, with a deadline of November 15, 2023. This indicates that the proposal has undergone significant discussion and refinement, and is now approaching potential acceptance. If implemented, it could significantly streamline cross-chain operations, benefiting numerous Ethereum protocols that require coordination across multiple EVM-based blockchains.</p></article>",
  "ERC-5169": "<article><h1>ERC-5169: Client Script URI for Token Contracts</h1>\n\n<p>ERC-5169, proposed by James and Weiwu Zhang in May 2022, introduces a <code>scriptURI()</code> function for token contracts to provide a link to associated executable client scripts. This proposal aims to enhance token functionality and improve security by allowing users to verify they are using the correct script directly through the contract.</p>\n\n<p>The motivation behind ERC-5169 stems from the growing popularity of function-rich NFTs and the need for token contracts to have associated client-side scripts. By standardizing a method to link these scripts, the proposal ensures users can trust that they are interacting with the intended functionality. The <code>scriptURI()</code> can point to various storage solutions, including IPFS, GitHub gists, or cloud storage providers.</p>\n\n<p>ERC-5169 achieved \"Final\" status, indicating its acceptance by the Ethereum community. It builds upon existing token standards like ERC-20, ERC-721, and ERC-1155, enhancing their capabilities. While the proposal doesn't specify the exact nature of the client scripts, it provides a flexible framework for developers to extend token functionality beyond basic transfers and approvals, potentially enabling more complex interactions and user experiences directly linked to the token contract.</p></article>",
  "ERC-5173": "<article><h1>ERC-5173: NFT Future Rewards (nFR)</h1>\n\n<p>ERC-5173 proposes a novel mechanism for non-fungible tokens (NFTs) called NFT Future Rewards (nFR). Authored by Yale ReiSoleil, dRadiant, and David Wang in May 2022, this draft standard aims to create a more collaborative and sustainable NFT ecosystem. The core idea is to allow previous NFT owners to continue benefiting from future price appreciation even after selling their tokens.</p>\n\n<p>The proposal introduces a Provenance Value Amplification (PVA) framework that aligns the interests of creators, buyers, and sellers. Unlike the current zero-sum trading paradigm, ERC-5173 creates a system where all participants can collectively increase and share value. This is achieved by distributing rewards to both current and previous token owners when the NFT's value increases.</p>\n\n<p>While innovative, ERC-5173 remains in draft status as of 2023. Its implementation would require significant changes to existing NFT marketplaces and smart contracts. The crypto community continues to debate its potential benefits and challenges, including concerns about increased complexity and gas costs. Despite these hurdles, the proposal has sparked important discussions about creating more equitable and sustainable models for NFT trading and ownership.</p></article>",
  "ERC-5185": "<article><h1>ERC-5185: NFT Updatable Metadata Extension</h1>\n\n<p>ERC-5185, proposed by Christophe Le Bars in June 2022, aims to standardize controlled metadata updates for ERC-721 and ERC-1155 tokens. This proposal addresses the challenge of updating NFT metadata without changing the entire tokenURI, which is often impractical for large-scale collections or dynamic NFTs.</p>\n\n<p>The proposal introduces a system of \"recipes\" that define how metadata can be updated. These updates are deterministic and verifiable on-chain, providing transparency and trust in the evolution of NFT attributes. While the proposal offers a solution to a real problem in the NFT space, its current status is \"Stagnant,\" suggesting that it hasn't gained significant traction or development since its introduction.</p>\n\n<p>As of now, there isn't a widely adopted standard for updatable NFT metadata, and many projects implement custom solutions. While ERC-5185 presents an interesting approach, the NFT landscape is rapidly evolving, and newer proposals or alternative solutions may emerge to address this need more comprehensively.</p>\n</article>",
  "ERC-5187": "<article><h1>ERC-5187: Extending ERC-1155 with Rentable Usage Rights</h1>\n\n<p>EIP-5187 was proposed in April 2022 by DerivStudio to extend the popular ERC-1155 multi-token standard with rentable usage rights for NFTs. The key innovation is separating ownership from usage rights, allowing NFT owners to rent out temporary usage to multiple users simultaneously while retaining underlying ownership.</p>\n\n<p>The proposal introduces the concept of NFT-IDs to represent time-limited usage rights that can be transferred between users. It supports subleasing, renewal of rentals, and early returns. This enables new models for NFT utility and monetization beyond simple ownership, particularly relevant for gaming assets, virtual real estate, and other use cases where temporary access is valuable.</p>\n\n<p>While an interesting concept that garnered some discussion, EIP-5187 is currently in \"Stagnant\" status, indicating a lack of recent progress or updates. Other proposals like EIP-4907 have tackled similar rental concepts, potentially superseding aspects of this EIP. However, the multi-user rental model of EIP-5187 remains a novel approach that could see further development if there is renewed interest from the community.</p>\n\n</article>",
  "ERC-5189": "<article><h1>ERC-5189: Account Abstraction via Endorsed Operations</h1>\n\n<p>ERC-5189 proposes an approach to account abstraction (AA) that avoids consensus layer changes while maintaining compatibility with existing smart contract wallets. Introduced by Agustín Aguilar, Philippe Castonguay, and Michael Standen in June 2022, this proposal introduces the concept of \"endorser\" contracts to validate AA transactions.</p>\n\n<p>The key innovation is using endorser contracts to determine the quality of submitted AA transactions, helping bundlers decide which transactions to keep in the mempool. This allows for a flexible AA implementation without strict transaction structure requirements. Wallet developers can create custom endorsers or use existing ones compatible with their wallet design.</p>\n\n<p>Currently in Draft status, ERC-5189 aims to achieve account abstraction's primary goal of enabling smart contract wallet usage without extensive protocol changes. It provides an alternative to more complex AA proposals that require consensus layer modifications. The proposal's future adoption depends on further refinement and community feedback, but it offers a promising path to implementing AA while maintaining backwards compatibility.</p>\n</article>",
  "ERC-5192": "<article><h1>ERC-5192: Minimal Soulbound NFTs</h1>\n\n<p>ERC-5192, proposed by Tim Daubenschütz and Anders in July 2022, introduces a minimal interface for creating \"soulbound\" non-fungible tokens (NFTs) on Ethereum. Soulbound tokens are NFTs that are permanently bound to a single account and cannot be transferred. This proposal extends ERC-721, the standard for NFTs, by adding a simple method to check if a token is soulbound.</p>\n\n<p>The motivation behind ERC-5192 was to address the growing interest in non-transferrable tokens within the Ethereum community. Prior to this standard, developers often implemented soulbound functionality by simply throwing errors when transfer functions were called. ERC-5192 aims to standardize this behavior, improving interoperability and composability across different implementations.</p>\n\n<p>ERC-5192 has been finalized and is now part of the Ethereum Improvement Proposal standards. It provides a straightforward way for wallets and other applications to detect whether an NFT is soulbound using ERC-165's interface detection mechanism. This standard has been well-received by the community and is considered a valuable addition to the ecosystem of NFT standards, particularly for use cases involving identity, credentials, or other non-transferrable digital assets.</p></article",
  "ERC-5202": "<article><h1>ERC-5202: Blueprint Contract Format</h1>\n\n<p>ERC-5202, proposed by Charles Cooper and Edward Amor in June 2022, defines a standard for \"blueprint\" contracts. These are contracts that store initcode (initialization bytecode) on-chain, which can be used to deploy new contract instances more efficiently. The proposal aims to address issues with existing practices of storing initcode on-chain, such as difficulty in distinguishing blueprint contracts from regular contracts and potential security risks.</p>\n\n<p>The key innovation of ERC-5202 is the introduction of a bytecode container format for blueprint contracts. This format includes a magic number and version identifier at the beginning of the contract bytecode, allowing easy identification of blueprint contracts. It also specifies that the actual initcode should be stored as data, not executable code, preventing accidental or malicious execution of the initcode as runtime code.</p>\n\n<p>As of its finalization, ERC-5202 has been widely recognized as a valuable standard for improving the efficiency and security of contract deployment patterns. It has been particularly useful for projects involving large numbers of similar contracts or complex factory patterns. The proposal's status is \"Final,\" indicating its acceptance and readiness for implementation in Ethereum-compatible systems.</p></article>",
  "ERC-5216": "<article><h1>ERC-5216: ERC-1155 Allowance Extension</h1>\n\n<p>ERC-5216, proposed by Iván Mañús and Juan Carlos Cantó in July 2022, aims to enhance the security and granularity of approvals for ERC-1155 tokens. The proposal introduces functions for approving specific amounts of tokens for a given ID, addressing a key limitation in the original ERC-1155 standard.</p>\n\n<p>The primary motivation behind this proposal is to reduce trust requirements and improve safety in token management transactions, particularly in NFT marketplaces. Unlike ERC-1155's <code>setApprovalForAll</code> function, which approves all tokens of a specific ID, ERC-5216 allows for more precise control over token approvals, similar to the allowance mechanism in ERC-20.</p>\n\n<p>As of November 2022, ERC-5216 was in \"Last Call\" status, indicating it was nearing final approval. This proposal represents an important step in improving the functionality and security of ERC-1155 tokens, potentially making it a valuable addition to the Ethereum token standards ecosystem. Its implementation could significantly enhance the trustlessness of transactions involving semi-fungible tokens.</p>\n</article>",
  "ERC-5218": "<article><h1>ERC-5218: NFT Rights Management</h1>\n\n<p>ERC-5218 proposes a standard interface for managing copyright licenses associated with NFTs. Authored by James Grimmelmann, Yan Ji, and Tyler Kell in July 2022, this improvement proposal aims to provide a structured framework for creating, transferring, and revoking licenses tied to NFTs, without defining the specific legal details of those licenses.</p>\n\n<p>The proposal was motivated by the need to establish a legally effective mechanism to connect on-chain NFTs with off-chain creative works and intellectual property rights. It builds on ERC-721, the base NFT standard, by adding functionality to manage associated licenses. This would allow NFT creators to grant copyright licenses to NFT holders, with those licenses transferring along with the NFT and potentially being sublicensed or revoked under certain conditions.</p> \n\n<p>As of 2023, ERC-5218 remains in \"Stagnant\" status, indicating a lack of recent progress or updates. While the proposal addresses an important need in the NFT space around rights management, it has not yet been widely adopted or implemented. Further development may be needed to refine the standard and build consensus around a rights management approach for NFTs.</p></article>",
  "ERC-5219": "<article><h1>ERC-5219: Contract Resource Requests</h1>\n\n<p>ERC-5219, proposed by Gavin John in July 2022, standardizes an interface for making resource requests to smart contracts and receiving HTTP-like responses. This proposal aims to address the issue of centralization in decentralized applications (DApps) by enabling fully on-chain interfaces.</p>\n\n<p>The motivation behind ERC-5219 stems from the fact that most DApps rely on centralized websites to host their front-end code, which introduces risks such as reduced trust minimization, potential censorship, lack of permanence, and limited interoperability. By allowing smart contracts to directly serve interface resources, this proposal seeks to enhance the decentralization and resilience of DApps.</p>\n\n<p>Currently, ERC-5219 has reached \"Final\" status, indicating it has been accepted and is ready for implementation. This standard provides a foundation for developers to create more robust and truly decentralized applications on the Ethereum blockchain, potentially improving the overall ecosystem for DApps.</p></article>",
  "ERC-5247": "<article><h1>ERC-5247: Smart Contract Executable Proposal Interface</h1>\n\n<p>ERC-5247, proposed by Zainan Victor Zhou in July 2022, defines an interface for creating and executing on-chain proposals. This improvement proposal aims to standardize the way smart contract executable proposals are submitted, recorded, and potentially executed on the Ethereum blockchain.</p>\n\n<p>The primary motivation behind ERC-5247 is to separate the code to be executed from its actual execution, which is particularly useful in Decentralized Autonomous Organizations (DAOs) and other collaborative decision-making scenarios. It allows for a structured process where proposals can be created, discussed, voted on, and then executed once consensus is reached.</p>\n\n<p>As of the last update, ERC-5247 was in the Review status, indicating ongoing discussion and potential refinement before possible implementation. The proposal's interface includes functions for creating proposals, querying proposal details, and executing approved proposals. While it addresses a clear need in the Ethereum ecosystem, its adoption and potential impact on DAO governance and smart contract interactions are still being evaluated by the community.</p></article>",
  "ERC-5252": "<article><h1>ERC-5252: Account-bound Finance</h1>\n\n<p>ERC-5252, proposed in June 2022 by Hyungsuk Kang and Viktor Pernjek, aims to improve trust and transparency in decentralized finance (DeFi) by introducing a new smart contract design pattern and account abstraction. The proposal extends ERC-5114 to enable greater self-sovereignty of assets through personal finance contracts for individual investors.</p>\n\n<p>The main purpose of ERC-5252 is to address trust issues in DeFi by clearly separating an investor's funds from operation fees within a personal smart contract. This separation aims to protect investors from arbitrary loss of funds due to actions by the operating team. The proposal also includes provisions for transferring funds between multiple wallets, enhancing asset mobility and management.</p>\n\n<p>As of the latest available information, the status of ERC-5252 is listed as \"Stagnant,\" indicating that it has not seen recent activity or updates. While the proposal presents an interesting approach to improving DeFi transparency and user control, its implementation and wider adoption remain uncertain. The crypto community continues to explore various solutions to enhance trust and security in decentralized financial systems.</p></article>",
  "ERC-5267": "<article><h1>ERC-5267: Retrieval of EIP-712 Domain</h1>\n\n<p>ERC-5267 was proposed in July 2022 by Francisco Giordano to standardize how Ethereum smart contracts can publish their EIP-712 domain information. EIP-712 introduced a structured data signing scheme that includes a \"domain separator\" to prevent replay attacks across different contracts or chains. However, EIP-712 did not specify how contracts should make their domain details available.</p>\n\n<p>This proposal aims to enable applications to securely retrieve domain information and generate appropriate domain separators in a standardized way. It defines an interface with an <code>eip712Domain()</code> function that returns the relevant domain parameters. This allows for more general and scalable integrations of EIP-712 signatures without requiring custom support for each contract.</p>\n\n<p>ERC-5267 has been finalized and is ready for implementation. It builds upon EIP-155 (Simple replay attack protection), EIP-712 (Typed structured data hashing and signing), and EIP-2612 (Permit extension for EIP-20 signed approvals). By standardizing domain retrieval, this proposal addresses a key limitation in EIP-712 adoption and enhances the security and usability of structured data signing in Ethereum smart contracts.</p></article>",
  "ERC-5269": "<article><h1>ERC-5269: ERC Detection and Discovery</h1>\n\n<p>ERC-5269 proposes a standardized interface for detecting and identifying Ethereum Request for Comments (ERC) implementations. Its primary purpose is to provide a more flexible and future-proof alternative to ERC-165, which was previously used for interface detection. The proposal was authored by Zainan Victor Zhou and is currently in Review status.</p>\n\n<p>The key innovations of ERC-5269 include introducing the concepts of \"majorERCIdentifier\" (equivalent to the ERC number) and \"minorERCIdentifier\" for optional sub-interfaces. It also defines an event for contracts to declare supported ERCs. This approach aims to improve upon ERC-165 by allowing for non-numbered future ERCs and providing more granular interface detection capabilities.</p>\n\n<p>While ERC-5269 offers potential advantages over ERC-165, its adoption and implementation status are not widely known. As it is still in the Review phase, it has not yet been finalized or widely adopted. Developers and projects considering interface detection mechanisms should evaluate both ERC-165 and ERC-5269 based on their specific needs and the broader ecosystem support.</p>\n</article>",
  "ERC-5289": "<article><h1>ERC-5289: Ethereum Notary Interface</h1>\n\n<p>ERC-5289, proposed by Gavin John in July 2022, aims to bridge the gap between smart contracts and legal contracts. Its primary purpose is to enable smart contracts to have legally binding off-chain effects by providing links to legal documents stored on IPFS and ensuring users have privity with these documents.</p>\n\n<p>The proposal addresses a significant limitation in the real-world application of smart contracts, particularly in the NFT space. While NFTs are often marketed as a way to hold and prove copyright, they typically lack legal enforceability. ERC-5289 seeks to change this by creating a standard interface for smart contracts to reference legal documents, potentially making them legally binding.</p>\n\n<p>As of now, ERC-5289 is in the Review status, indicating it's still under consideration by the Ethereum community. If implemented, it could significantly expand the utility of smart contracts in areas requiring legal enforceability. However, it's important to note that the authors are not lawyers, and the proposal itself is not legal advice. The effectiveness of this standard in creating legally binding contracts would likely depend on jurisdiction and specific implementation details.</p></article>",
  "ERC-5298": "<article><h1>ERC-5298: ENS Trust for NFT Ownership</h1>\n\n<p>ERC-5298, proposed by Zainan Victor Zhou in July 2022, aims to standardize an interface for smart contracts to hold NFTs on behalf of ENS domains. This proposal seeks to decouple NFT ownership from wallet addresses, allowing users to receive tokens using their ENS names instead.</p>\n\n<p>The proposal specifies a new interface, IERC_ENS_TRUST, which extends ERC721Receiver and ERC1155Receiver. It introduces a claimTo function that verifies ENS ownership before transferring tokens. This approach leverages the established ENS namespace for secure and user-friendly token management.</p>\n\n<p>Currently, the proposal's status is listed as \"Stagnant,\" indicating a lack of recent activity or updates. While the concept offers potential benefits for simplified NFT ownership, it has not gained significant traction in the Ethereum community. As of now, no major implementations or competing proposals have superseded ERC-5298, leaving its future adoption uncertain.</p></article>",
  "ERC-5313": "<article><h1>ERC-5313: Light Contract Ownership</h1>\n\n<p>ERC-5313, proposed by William Entriken in July 2022, is a minimal standard for identifying contract ownership on Ethereum. It defines a simple interface with a single <code>owner()</code> function that returns the address of the contract owner. This proposal aims to provide a lightweight alternative to the more comprehensive ERC-173 ownership standard.</p>\n\n<p>The motivation behind ERC-5313 was to create a slimmed-down ownership interface that could be easily implemented by a wide range of contracts. By focusing on just the core owner identification functionality, it allows for more flexible ownership schemes while maintaining compatibility with existing systems that need to query contract ownership.</p>\n\n<p>As of 2023, ERC-5313 has reached \"Final\" status, indicating its acceptance by the Ethereum community. It has been implemented in various projects and can be used in conjunction with other standards to create more complex ownership structures when needed. The proposal's simplicity and backwards compatibility have contributed to its adoption, making it a useful tool for developers building on Ethereum.</p></article>",
  "ERC-5334": "<article><h1>ERC-5334: User, Expires, and Level Extension for ERC-721</h1>\n\n<p>EIP-5334, proposed by Yan in July 2022, aims to extend the ERC-721 standard by introducing a new \"user\" role with time-limited permissions for NFTs. This proposal addresses the need for a distinction between NFT owners and users, particularly in scenarios where NFT utilities are shared or rented out.</p>\n\n<p>The proposal introduces three key concepts: the \"user\" role, an \"expires\" timestamp, and a \"level\" of permissions. This allows for more granular control over NFT usage rights, enabling use cases like renting or delegating NFT utility without transferring ownership. While similar concepts existed in some projects under different names (e.g., \"operator\" or \"controller\"), EIP-5334 sought to standardize this approach.</p>\n\n<p>As of now, EIP-5334 is in a \"Stagnant\" status, indicating that development has slowed or stopped. While the proposal addresses a real need in the NFT ecosystem, it hasn't gained significant traction. This could be due to the complexity of implementation or the emergence of alternative solutions. Developers considering this functionality might want to explore more recent proposals or established patterns in popular NFT projects for similar capabilities.</p></article>",
  "ERC-5375": "<article><h1>ERC-5375: NFT Author Information and Consent</h1>\n\n<p>ERC-5375, proposed in July 2022 by Samuele Marro and Luca Donno, addresses a crucial gap in NFT metadata standards by introducing a method for storing and verifying NFT authorship information. The proposal aims to solve issues with existing authorship attribution methods, which often fail to accurately represent multiple authors or require consent.</p>\n\n<p>The core of ERC-5375 is a standardized JSON format for off-chain author information, including author names, addresses, and cryptographic proofs of authorship consent. This approach allows for multiple authors, prevents false attributions without consent, and provides a uniform way for NFT platforms to display authorship information. The proposal builds upon existing standards like ERC-721 and ERC-1155, making it compatible with the broader NFT ecosystem.</p>\n\n<p>Currently, ERC-5375 has reached \"Final\" status, indicating its readiness for implementation. While it doesn't replace existing NFT standards, it offers a valuable extension that can enhance transparency and accuracy in NFT authorship attribution. As the NFT space continues to evolve, this proposal could play a significant role in protecting artists' rights and improving the overall integrity of the ecosystem.</p></article>",
  "ERC-5380": "<article><h1>ERC-5380: ERC-721 Entitlement Extension</h1>\n\n<p>ERC-5380 is an Ethereum improvement proposal that extends ERC-721 non-fungible tokens to allow owners to grant limited usage rights to other addresses. It was authored by Gavin John and Tim Daubenschütz and achieved Final status in 2022.</p>\n\n<p>The key innovation of ERC-5380 is enabling token owners to selectively grant \"properties\" or entitlements associated with their tokens to other users, without transferring full ownership. This facilitates use cases like token rentals, where someone could be granted temporary usage rights. The proposal defines interfaces for assigning and revoking these entitlements in both exclusive and non-exclusive ways.</p> \n\n<p>While ERC-5380 provides a flexible framework for token entitlements, other proposals like ERC-4907 have gained more adoption for specific rental use cases. However, ERC-5380 remains a well-designed standard that could see increased usage as more complex token utility models emerge in areas like gaming and digital asset management. Its status as a Final EIP indicates it is a stable specification available for implementation.</p></article>",
  "ERC-5409": "<article><h1>ERC-5409: EIP-1155 Non-Fungible Token Extension</h1>\n\n<p>ERC-5409, proposed by Ronan Sandford in July 2022, aims to extend the functionality of EIP-1155 multi-token standard to better support non-fungible tokens (NFTs). The proposal introduces an additional <code>ownerOf</code> function, similar to that found in EIP-721, allowing EIP-1155 tokens to represent truly unique assets with a single owner.</p>\n\n<p>The motivation behind this proposal stems from the limitations of EIP-1155 in explicitly distinguishing between fungible and non-fungible tokens. While EIP-1155 allows for the creation of both types, it lacks a standardized method to verify a token's uniqueness or retrieve its owner directly on-chain. ERC-5409 addresses this gap, enabling new use cases and improving interoperability with existing NFT ecosystems.</p>\n\n<p>As of now, the proposal's status is listed as \"Stagnant,\" indicating that it hasn't seen significant development or discussion recently. While the idea has merit in bridging the gap between EIP-1155 and EIP-721 functionalities, its adoption and implementation remain uncertain. Developers and projects considering NFT implementations may still find it beneficial to evaluate this proposal alongside existing",
  "ERC-5437": "<article><h1>ERC-5437: Security Contact Interface</h1>\n\n<p>ERC-5437, proposed by Zainan Zhou in August 2022, aimed to establish a standardized interface for security contacts in smart contracts. The proposal's primary goal was to provide a consistent method for security researchers to report vulnerabilities to contract maintainers using asymmetric encryption.</p>\n\n<p>The proposal defined a simple interface with three main functions: <code>getSecurityContact</code>, <code>setSecurityContact</code>, and <code>securityNotify</code>. The core function, <code>getSecurityContact</code>, would return the public key and additional data for secure communication. However, the proposal has not gained significant traction in the Ethereum community, as evidenced by its current \"Stagnant\" status.</p>\n\n<p>While the idea of standardizing security contact information is valuable, the proposal's implementation may have been too specific or complex for widespread adoption. As of now, there isn't a widely accepted standard for this purpose in Ethereum, and projects typically rely on more traditional methods of security disclosure, such as dedicated email addresses or bug bounty platforms.</p>\n</article>",
  "ERC-5453": "<article><h1>ERC-5453: Endorsement - Permit for Any Functions</h1>\n\n<p>ERC-5453 is a proposal that aims to establish a general protocol for approving function calls in the same transaction, building upon ERC-5750. Unlike previous proposals such as ERC-2612 (for ERC-20) and ERC-4494 (for ERC-721) which typically only permit a single behavior and approver across two transactions, ERC-5453 provides a way to permit arbitrary behaviors and aggregate multiple approvals from any number of approvers in a single transaction.</p>\n\n<p>The proposal was authored by Zainan Victor Zhou and introduced in August 2022. It addresses several key motivations, including supporting permits alongside function calls, enabling multi-signature functionality, allowing for off-line signatures, and facilitating accumulated voting. This flexibility makes it particularly useful for complex smart contract interactions and governance scenarios.</p>\n\n<p>As of September 2023, ERC-5453 is in \"Last Call\" status, indicating that it has undergone significant review and is nearing potential acceptance. The proposal builds on several existing standards (ERC-165, ERC-712, ERC-1271, and ERC-5750) and aims to provide a more comprehensive and flexible approach to function call approvals in Ethereum smart contracts.</p>\n</article>",
  "ERC-5484": "<article><h1>ERC-5484: Consensual Soulbound Tokens</h1>\n\n<p>ERC-5484, proposed by Buzz Cai in August 2022, introduced the concept of Consensual Soulbound Tokens (CSTs) as an extension of the ERC-721 NFT standard. CSTs are designed to be non-transferable tokens with immutable ownership and pre-determined burn authorization, making them ideal for representing credentials, memberships, and other identity-related assets on the blockchain.</p>\n\n<p>The key innovation of ERC-5484 is the requirement for both the issuer and receiver to agree on burn authorization before token issuance. This creates a consensual agreement on token lifecycle management, addressing concerns about permanence and revocability that existed with earlier soulbound token concepts. The proposal defines three burn authorization types: IssuerOnly, OwnerOnly, and Both, providing flexibility for different use cases.</p>\n\n<p>ERC-5484 reached Final status, indicating broad acceptance within the Ethereum community. It has been implemented in several projects exploring decentralized identity and credential systems. However, the soulbound token space continues to evolve, with competing proposals like ERC-4973 (Account-bound Tokens) also gaining traction. While ERC-5484 provides a solid foundation for consensual non-transferable tokens",
  "ERC-5485": "<article><h1>ERC-5485: Legitimacy, Jurisdiction and Sovereignty</h1>\n\n<p>ERC-5485, proposed by Zainan Victor Zhou in August 2022, aims to establish a standardized interface for smart contracts to declare their legitimacy, jurisdiction, and sovereignty. This proposal addresses the growing need for clarity in the regulatory and legal status of blockchain-based entities, particularly as the crypto ecosystem intersects more frequently with traditional legal frameworks.</p>\n\n<p>The proposal introduces functions that allow contracts to specify their legitimacy source, jurisdiction, and sovereignty status. This enables regulatory bodies to more easily identify compliant contracts and facilitates interoperability between blockchain systems and existing legal structures. Importantly, it also provides a mechanism for decentralized autonomous organizations (DAOs) to explicitly declare their self-sovereignty, asserting independence from traditional jurisdictions.</p>\n\n<p>As of now, ERC-5485 remains in Draft status. While it offers a potentially valuable tool for navigating the complex landscape of blockchain governance and regulation, its adoption and implementation are still under discussion within the Ethereum community. The proposal's ability to bridge the gap between decentralized systems and traditional legal frameworks could prove significant if widely adopted, but it also raises questions about the nature of sovereignty in decentralized networks.</p>\n</article>",
  "ERC-5489": "<article><h1>ERC-5489: NFT Hyperlink Extension</h1>\n\n<p>ERC-5489, proposed by IronMan_CH (GitHub: @coderfengyun) in August 2022, introduces the concept of NFT Hyperlink Extension (hNFT). This improvement proposal aims to enhance NFTs by embedding hyperlinks, allowing users to attach and manage URLs associated with their tokens. The proposal addresses the growing need for richer content attachment capabilities in the NFT space, potentially transforming NFTs into a more versatile medium for Web3 applications.</p>\n\n<p>The core functionality of ERC-5489 allows hNFT owners to authorize a URL slot to a specific address (either an EOA or a contract) and revoke that authorization at will. The authorized address can then manage the URL associated with that slot. This feature enables dynamic content linking and management, opening up new possibilities for NFT utility and interactivity.</p>\n\n<p>As of now, ERC-5489 has reached \"Final\" status, indicating its acceptance and readiness for implementation. The proposal builds upon existing standards like ERC-165 and ERC-721, ensuring compatibility with the broader Ethereum ecosystem. While adoption rates are not explicitly stated, the proposal's finalization suggests it has gained traction within the Ethereum community and may see increased implementation in NFT projects seeking to offer enhanced functionality",
  "ERC-5496": "<article><h1>ERC-5496: Multi-privilege Management NFT Extension</h1>\n\n<p>EIP-5496 proposes an extension to the ERC-721 NFT standard to enable NFTs with multiple shareable privileges. Authored by Jeremy Z in July 2022, this proposal aims to add more utility and flexibility to NFTs by allowing them to contain multiple on-chain and off-chain privileges that can be individually transferred or shared.</p>\n\n<p>The key innovation is enabling privileges attached to an NFT to be managed dynamically. For example, an NFT could grant voting rights in a DAO, access to exclusive events, and discounts at partner businesses - all as separate privileges that can be individually transferred or shared. This allows NFT creators to bundle multiple forms of utility into a single token while giving holders more granular control.</p>\n\n<p>As of late 2022, EIP-5496 was in Last Call status, indicating it had reached a relatively mature stage in the EIP process. If implemented, it could significantly expand the functionality of NFTs beyond just collectibles or profile pictures, potentially driving more real-world utility and adoption. However, as with many EIPs, its ultimate impact will depend on whether it gains traction among developers and users in practice.</p></article>",
  "ERC-55": "<article><h1>ERC-55: Mixed-case checksum address encoding</h1>\n\n<p>ERC-55, proposed by Vitalik Buterin and Alex Van de Sande in January 2016, introduced a method for encoding Ethereum addresses with a checksum. This improvement aimed to enhance the reliability of address handling by allowing users to detect typos or errors when entering Ethereum addresses.</p>\n\n<p>The proposal specifies a simple algorithm that converts a lowercase hexadecimal address into a mixed-case representation. By capitalizing certain letters based on the hash of the address, it creates a human-readable format that can be easily verified. This checksum encoding quickly gained adoption across wallets and exchanges, becoming a de facto standard for displaying Ethereum addresses.</p>\n\n<p>ERC-55 remains widely implemented and is considered a final standard. While alternatives like ERC-1191 have been proposed to extend similar functionality to other networks, ERC-55 continues to be the primary method for Ethereum address checksums. Its simplicity and effectiveness in preventing errors have contributed to its lasting impact on the Ethereum ecosystem.</p></article>",
  "ERC-5501": "<article><h1>ERC-5501: Rental & Delegation NFT - EIP-721 Extension</h1>\n\n<p>ERC-5501 is an Ethereum Improvement Proposal that extends the popular ERC-721 Non-Fungible Token (NFT) standard. Proposed in August 2022 by a team including Jan Smrža, David Rábel, and others, this standard introduces a new 'user' role to NFTs, separate from the owner. This role allows for time-limited usage rights, enabling NFT rentals and delegations without transferring ownership.</p>\n\n<p>The proposal addresses a key limitation in the original ERC-721 standard, where only the owner could utilize the NFT's benefits. ERC-5501 allows for more flexible use cases, such as renting out digital assets, delegating usage rights to hot wallets, or lending NFTs for specific periods. This functionality is particularly valuable for use cases like metaverse land rentals, temporary access to digital content, or short-term use of gaming assets.</p>\n\n<p>As of the last update, the proposal's status is 'Stagnant', indicating a lack of recent activity or progress. While the idea has merit and addresses real-world use cases, it's unclear whether it will be widely adopted or if alternative solutions might emerge. The proposal builds upon previous standards like E",
  "ERC-5505": "<article><h1>ERC-5505: Asset-Backed NFT Extension for ERC-1155</h1>\n\n<p>ERC-5505, proposed by liszechung in August 2022, aimed to extend the popular ERC-1155 multi-token standard to better support asset-backed, fractionalized NFTs. The primary motivation was to enable total acquisition of fractionalized physical assets, addressing challenges like price manipulation during buyout attempts and permanently locked fractions.</p>\n\n<p>The proposal introduced new interfaces and methods to facilitate smoother acquisition processes for fractionalized assets. Key additions included functions for initiating acquisitions, responding to offers, and finalizing transfers. While innovative, ERC-5505 did not gain significant traction in the broader Ethereum community. As of now, its status remains \"Stagnant\" in the EIP process.</p>\n\n<p>Given the evolving landscape of NFTs and asset tokenization, ERC-5505's concepts may still be relevant. However, newer proposals or alternative approaches may have emerged to address similar concerns in more widely adopted ways. Developers working on asset-backed NFTs should evaluate current best practices and standards before considering direct implementation of ERC-5505.</p>\n</article>",
  "ERC-5507": "<article><h1>ERC-5507: Refundable Tokens</h1>\n\n<p>EIP-5507, proposed by Elie Steinbock and Gavin John in August 2022, introduces a standardized refund mechanism for ERC-20, ERC-721, and ERC-1155 tokens. The proposal aims to enhance accountability in the cryptocurrency ecosystem by allowing users to request refunds for purchased tokens within a predetermined timeframe. This feature is particularly relevant for initial token offerings, providing buyers with greater protection against potential scams or \"rug pulls\".</p>\n\n<p>The proposal gained traction due to its potential to improve compliance with EU regulations, specifically the \"Distance Selling Regulations\" that require a 14-day refund period for online purchases. Additionally, EIP-5507 offers interoperability benefits for NFT-related applications, such as portfolio browsers and marketplaces. For instance, NFT marketplaces could display badges indicating refundable status, while decentralized exchanges could offer refund options for eligible tokens.</p>\n\n<p>EIP-5507 has reached \"Final\" status, indicating its acceptance and readiness for implementation. The proposal extends the functionality of existing token standards (ERC-20, ERC-721, and ERC-1155) by introducing new methods for refund-related operations. While its adoption is not mandatory, projects seeking",
  "ERC-5516": "<article><h1>ERC-5516: Soulbound Multi-owner Tokens</h1>\n\n<p>ERC-5516 is a proposed Ethereum standard for non-transferable, multi-owner NFTs that are bound to Ethereum accounts. Authored by Lucas Martín Grasso Ramos and Matias Arazi in August 2022, this proposal aims to address the issue of users losing access to their Soulbound Tokens (SBTs) due to lost or rotated account keys.</p>\n\n<p>The proposal builds upon the ERC-1155 multi-token standard, incorporating features like batch transfers and double signatures. It introduces the concept of \"semi-fungible\" tokens, allowing for multiple owners and recycling of SBTs. This approach provides a more flexible and robust framework for implementing account-bound tokens compared to previous standards.</p>\n\n<p>As of now, ERC-5516 is in a \"Stagnant\" status, indicating that development or discussions around the proposal have slowed down. While it offers interesting solutions to key problems in the SBT space, it's unclear whether this specific proposal will be implemented or if its ideas will be incorporated into other standards. The crypto community continues to explore various approaches to non-transferable tokens and their applications in digital identity and reputation systems.</p>\n</article>",
  "ERC-5521": "<article><h1>ERC-5521: Referable NFT</h1>\n\n<p>EIP-5521, proposed in August 2022, introduces the concept of \"Referable NFTs\" as an extension to the ERC-721 standard. The proposal aims to establish reference relationships between NFTs, allowing for tracking of NFT lineage and attribution. This addresses a key limitation in existing NFT standards where NFTs exist in isolation without formal connections to derivative or inspired works.</p>\n\n<p>The proposal introduces two key indicators - \"referring\" and \"referred\" - along with a timestamp. These allow NFTs to form a directed acyclic graph (DAG) of relationships. For example, an artist could create a new NFT that references an existing NFT as inspiration, with the relationship between the two tokens now formally established on-chain. This enables scenarios like tracking remixes, derivatives, and evolution of NFT-based creative works.</p>\n\n<p>EIP-5521 reached Final status, indicating broad acceptance. While not as widely implemented as core standards like ERC-721, it provides an important building block for more complex NFT ecosystems and marketplaces that want to track provenance and attribution. The authors include researchers from CSIRO and Monash University, suggesting an academic origin aimed at addressing real-world NFT ecosystem needs around intellectual property and attribution.</p>\n</article>",
  "ERC-5528": "<article><h1>ERC-5528: Refundable Fungible Token</h1>\n\n<p>ERC-5528, proposed by StartfundInc in August 2022, introduces a refundable token standard that extends EIP-20 (the widely-used Ethereum token standard). This proposal aims to address the lack of built-in refund mechanisms in cryptocurrency transactions by implementing an escrow-like service directly within smart contracts.</p>\n\n<p>The core concept of ERC-5528 is to create a trustless escrow system where sellers can issue tokens and lock them in a smart contract, while buyers can purchase these tokens with the assurance of a potential refund. This proposal outlines a process that includes token issuance, escrow contract creation, fund locking, and conditional token exchanges based on predefined success criteria. Importantly, it allows buyers to withdraw their funds if the escrow conditions are not met, providing a safety net for cryptocurrency transactions.</p>\n\n<p>As of now, ERC-5528 has reached \"Final\" status, indicating its completion and readiness for implementation. This proposal addresses a significant pain point in cryptocurrency transactions and could potentially increase trust and adoption in token-based systems. However, its practical implementation and widespread adoption remain to be seen, as it requires changes to existing token systems and may introduce additional complexity to token contracts.</p></article>",
  "ERC-5539": "<article><h1>ERC-5539: Revocation List Registry</h1>\n\n<p>ERC-5539, proposed in August 2022 by Philipp Bolte, Lauritz Leifermann, and Dennis von der Bey, aims to establish a standardized interface for managing revocation lists on the Ethereum blockchain. This proposal addresses the need for a decentralized approach to credential revocation, which is crucial in both traditional and blockchain-based systems.</p>\n\n<p>The proposal stems from the limitations of centralized Certificate Revocation Lists (CRLs) used in traditional Public Key Infrastructure (PKI) systems. These centralized lists are vulnerable to various web-based attacks and can weaken the security of asymmetric key architectures. ERC-5539 proposes a role-based registry for revocation indicators, allowing for a more decentralized and secure approach to managing revocations.</p>\n\n<p>Currently, the proposal is in a \"Stagnant\" state, indicating that it hasn't seen recent activity or updates. While the idea addresses an important issue in decentralized identity and credential systems, it's unclear whether it will be implemented in its current form or if alternative solutions have gained more traction in the Ethereum community.</p></article>",
  "ERC-5553": "<article><h1>ERC-5553: Representing IP and its Royalty Structure</h1>\n\n<p>ERC-5553, proposed by Roy Osherove in August 2022, aims to create a standardized method for representing intellectual property (IP) and its associated royalty structure on the Ethereum blockchain. This proposal addresses the need for a more flexible and comprehensive approach to managing IP rights beyond traditional NFTs, which are primarily designed for collectibles.</p>\n\n<p>The proposal introduces a generic framework that can accommodate various types of IP, including music, videos, books, and images. It allows for the on-chain representation of IP, linking to metadata, and defining royalty structures. This flexibility is intended to foster the development of new ecosystems built around IP management and licensing.</p>\n\n<p>Currently, ERC-5553 is in a \"Stagnant\" status, indicating that it has not seen significant development or discussion since its initial proposal. While the idea addresses an important gap in blockchain-based IP management, it may require further refinement or community engagement to progress. As of now, no specific implementation or adoption of this standard has been widely reported in the Ethereum ecosystem.</p>\n</article>",
  "ERC-5554": "<article><h1>ERC-5554: NFT Legal Use, Repurposing, and Remixing</h1>\n\n<p>ERC-5554, proposed by Isaac Patka and the COALA Licensing Taskforce in July 2022, aims to address the legal uncertainties surrounding NFTs by providing a standardized interface for describing and enforcing the legal use and remixing of NFTs. This proposal extends existing token standards to include explicit rights for token holders related to commercial exploitation, derivative works, and reproduction.</p>\n\n<p>The proposal introduces several key features, including an interface for creating and managing licenses (based on EIP-5218), a standard format for extended license information in token metadata, and on-chain tracking of derivative works and reproductions. It also defines standard events to track off-chain activities and additional smart contract fields to reference the copyright owner.</p>\n\n<p>Currently, the status of ERC-5554 is \"Stagnant,\" indicating that it has not seen significant development or discussion recently. While the proposal addresses important issues in the NFT space, it's unclear whether it will be implemented in its current form or if alternative solutions will emerge to tackle the legal aspects of NFT ownership and usage rights.</p>\n</article>",
  "ERC-5559": "<article><h1>ERC-5559: Cross Chain Write Deferral Protocol</h1>\n\n<p>ERC-5559, proposed by Paul Gauvreau and Nick Johnson in June 2022, introduces a mechanism for smart contracts to defer storage and resolution of mutations to off-chain handlers. This proposal aims to reduce gas fees on Ethereum's mainnet by allowing protocols to offload certain tasks to external systems or networks.</p>\n\n<p>The proposal defines a set of handler types for managing the execution and storage of tasks, each with its own tradeoffs in terms of operational costs, finality guarantees, and decentralization levels. By specifying the handler type, protocols can better define their permissioning and security models. ERC-5559 can be used in conjunction with EIP-3668 (Durin: Off-chain Lookups) to enable protocols to maintain a presence on Ethereum's mainnet while resolving and mutating data stored externally.</p>\n\n<p>Currently, the proposal's status is listed as \"Stagnant,\" indicating that it has not seen significant development or discussion recently. While the concept addresses important scalability concerns, it's unclear whether this specific proposal will be implemented or if alternative solutions have superseded it. As with many EIPs, the crypto community's focus and priorities may have shifted since its initial proposal.</p></article>",
  "ERC-5560": "<article><h1>ERC-5560: Redeemable NFTs</h1>\n\n<p>ERC-5560, proposed by Olivier Fernandez, Frédéric Le Coidic, and Julien Béranger in August 2022, introduces a standard for making NFTs redeemable for physical objects. This proposal extends the ERC-721 standard by adding a <code>redeem</code> function, allowing NFT issuers to offer tangible rewards to token holders.</p>\n\n<p>The proposal addresses a growing trend among artists, galleries, and brands to link digital assets with physical counterparts. It specifies that implementers must decide who can redeem the NFT and restrict access accordingly. The proposal also includes an <code>isRedeemable()</code> function to check an NFT's redemption status.</p>\n\n<p>Currently, the proposal's status is listed as \"Stagnant,\" indicating a lack of recent activity or updates. While the concept of redeemable NFTs remains relevant, especially in the art and collectibles markets, it's unclear if this specific proposal will gain wider adoption or if alternative approaches might emerge to address similar use cases.</p>\n</article>",
  "ERC-5564": "<article><h1>ERC-5564: Stealth Addresses</h1>\n\n<p>ERC-5564, proposed in August 2022 by a team including Vitalik Buterin, introduces a standardized method for implementing stealth addresses in Ethereum. Stealth addresses allow senders to generate private, one-time addresses for recipients, significantly enhancing transaction privacy. This proposal aims to provide a foundation for various stealth address protocols, utilizing a singleton contract at a specific address to emit necessary information.</p>\n\n<p>The core motivation behind ERC-5564 is to improve privacy on Ethereum and other EVM-compatible chains. By enabling non-interactive stealth address generation, it allows recipients to receive assets privately, without revealing their main address. This is achieved through a shared secret known only to the sender and recipient, used to generate a unique stealth address for each transaction.</p>\n\n<p>As of now, ERC-5564 has reached \"Final\" status, indicating its acceptance and readiness for implementation. The proposal includes a base implementation and outlines the first cryptographic scheme using the SECP256k1 curve. While it provides a significant step forward in blockchain privacy, developers and users should be aware that implementing stealth addresses may have implications for wallet compatibility and transaction tracing.</p></article>",
  "ERC-5568": "<article><h1>ERC-5568: Well-Known Format for Required Actions</h1>\n\n<p>ERC-5568, proposed by Gavin John in August 2022, introduces a standardized way for smart contracts to signal to wallets that a user action is required. This proposal aims to simplify frontend development and improve user experience by allowing contracts to directly request actions such as token approvals or HTTP requests.</p>\n\n<p>The proposal defines a minimalistic machine-readable format using a well-known function and revert reason to communicate these action requests. It's designed to be extendable, supporting up to 64 kB of arbitrary parameters. This flexibility allows for a wide range of potential use cases, from token approvals for exchanges to prompting users for key rotation.</p>\n\n<p>As of the last update, ERC-5568 was in the Review status, indicating it was still under consideration by the Ethereum community. If implemented, this standard could significantly streamline interactions between smart contracts and wallets, potentially reducing the complexity of dApp frontends and improving overall user experience in the Ethereum ecosystem.</p></article>",
  "ERC-5570": "<article><h1>ERC-5570: Digital Receipt Non-Fungible Tokens</h1>\n\n<p>ERC-5570, proposed by Sean Darcy in September 2022, introduces a standard for digital receipts as Non-Fungible Tokens (NFTs). This proposal aims to revolutionize the way transaction records are kept and managed in the digital age, addressing the inefficiencies of traditional paper receipts and the challenges of integrating them into modern financial systems.</p>\n\n<p>The proposal extends the widely-adopted ERC-721 standard for NFTs, allowing for the creation of unique tokens that represent digital receipts. These tokens would contain detailed transaction information in a standardized JSON format, making it easy for both vendors and customers to manage and analyze purchase data. This approach eliminates the need for manual data entry or unreliable receipt-scanning applications, streamlining the process of record-keeping for both businesses and consumers.</p>\n\n<p>Currently, ERC-5570 has reached \"Final\" status, indicating its acceptance by the Ethereum community. While its implementation is still in early stages, the proposal has garnered interest for its potential to bridge the gap between physical purchases and digital record-keeping. As more businesses and developers recognize the value of standardized digital receipts, we may see increased adoption and integration of this standard in e-commerce platforms and point-of-sale systems.</p></article>",
  "ERC-5573": "<article><h1>ERC-5573: Sign-In with Ethereum Capabilities (ReCaps)</h1>\n\n<p>ERC-5573, also known as ReCaps, builds on top of ERC-4361 (Sign-In with Ethereum) to provide a mechanism for informed consent and delegated capabilities. It was authored by Oliver Terbu, Jacob Ward, Charles Lehner, Sam Gbafa, Wayne Chang, and Charles Cunningham in July 2021.</p>\n\n<p>The main purpose of ReCaps is to allow Ethereum accounts to authorize relying parties (like dapps or services) to exercise specific scoped capabilities on their behalf. This reduces friction for users, minimizes on-chain state, and improves security through informed consent. It enables better integration of protocols and APIs for developers building on Ethereum.</p>\n\n<p>As of 2023, ERC-5573 remains in Draft status. It has not been finalized or widely implemented yet, but continues to be discussed and refined by the Ethereum community. The proposal aims to standardize capability-based authorization on top of the existing SIWE authentication flow, potentially improving the user experience and security of Ethereum-based applications.</p></article>",
  "ERC-5585": "<article><h1>ERC-5585: ERC-721 NFT Authorization</h1>\n\n<p>EIP-5585 was proposed in August 2022 by a team from Veega Labs to extend the ERC-721 NFT standard. Its primary purpose is to separate an NFT's ownership from its usage rights, allowing for more flexible management and commercialization of NFTs. This proposal addresses limitations in the existing ERC-721 standard, which only allows for sole ownership and doesn't provide mechanisms for granting partial rights like display or derivative work creation.</p>\n\n<p>The proposal introduces new functions to the ERC-721 interface, including methods to authorize and revoke usage rights, check authorization status, and manage authorization expiration. This allows NFT owners to grant specific usage rights to other addresses for defined time periods, opening up new possibilities for NFT licensing and commercialization models. The EIP was motivated by the growing diversity of NFT use cases in areas like digital art, virtual real estate, and the broader metaverse ecosystem.</p>\n\n<p>As of 2023, EIP-5585 has reached \"Final\" status, indicating it has been accepted as a standard. While its adoption is still in early stages, the proposal has potential to significantly impact how NFTs are used and monetized, particularly in commercial and creative contexts. Developers and projects looking to implement more sophisticated rights management for NF",
  "ERC-5604": "<article><h1>ERC-5604: NFT Lien</h1>\n\n<p>ERC-5604, proposed in September 2022 by Zainan Victor Zhou, Allen Zhou, and Alex Qin, introduces the concept of NFT liens to the Ethereum ecosystem. This proposal extends the ERC-721 standard to support placing liens on Non-Fungible Tokens (NFTs), mirroring real-world financial practices like car and property liens.</p>\n\n<p>The proposal specifies an interface for placing and removing liens on NFTs, as well as an event to be emitted when a lien is placed. It requires implementing contracts to be compatible with ERC-721 and ERC-165 standards. The motivation behind this proposal is to enable more complex financial use cases for NFTs, such as using them as collateral or in other lending scenarios.</p>\n\n<p>As of its creation, ERC-5604 remains in Draft status. While it presents an interesting concept for expanding NFT functionality, its implementation and adoption are still under discussion. The proposal's future will likely depend on community feedback and potential real-world applications demonstrating its utility in the evolving DeFi landscape.</p></article>",
  "ERC-5606": "<article><h1>ERC-5606: Multiverse NFTs</h1>\n\n<p>ERC-5606, proposed in September 2022 by Gaurang Torvekar, Khemraj Adhawade, and Nikhil Asrani, aims to create a universal representation of multiple related NFTs as a single digital asset across various platforms. The proposal extends ERC-721 and ERC-1155 standards to enable interoperability between different metaverses, play-to-earn games, and NFT marketplaces.</p>\n\n<p>The main motivation behind this proposal is to address the lack of interoperability between different platforms using NFT standards. ERC-5606 introduces the concept of a \"multiverse NFT\" that can index delegate NFTs across multiple platforms, allowing for the bundling and unbundling of these assets. This enables publishers to create a single digital asset that can exist across various metaverses and games, simplifying asset management and enhancing user experience.</p>\n\n<p>As of now, ERC-5606 has reached \"Final\" status, indicating that it has been thoroughly reviewed and accepted by the Ethereum community. The proposal's implementation could significantly impact the NFT ecosystem by promoting greater interoperability and flexibility in digital asset management across different platforms.</p>\n</article>",
  "ERC-5615": "<article><h1>ERC-5615: ERC-1155 Supply Extension</h1>\n\n<p>ERC-5615, authored by Gavin John (Pandapip1), is a Final status Ethereum Improvement Proposal that extends the functionality of ERC-1155 tokens. This proposal standardizes a mechanism to fetch token supply data from ERC-1155 tokens, addressing a common need in the ecosystem.</p>\n\n<p>The proposal introduces two key functions: <code>totalSupply</code>, which returns the number of tokens with a given ID, and <code>exists</code>, which checks for the existence of a specific token ID. These additions provide developers with essential tools for managing and querying token supplies within the ERC-1155 standard.</p>\n\n<p>ERC-5615 has been well-received by the community and is now in Final status, indicating its readiness for implementation. As it builds upon the widely-adopted ERC-1155 standard, this extension is likely to see significant adoption among projects utilizing multi-token contracts, enhancing their functionality and improving token management capabilities.</p>\n</article>",
  "ERC-5625": "<article><h1>ERC-5625: NFT Metadata JSON Schema dStorage Extension</h1>\n\n<p>ERC-5625 was proposed by Gavin Fu in September 2022 to extend the metadata schema for NFTs, adding a 'dStorage' property to provide information about decentralized storage of NFT assets. This proposal builds on the existing standards ERC-721 and ERC-1155, which define the basic structure for NFT metadata.</p>\n\n<p>The motivation behind ERC-5625 is to promote the use of decentralized storage for NFT assets, ensuring their immutability, reliability, and durability. While NFT ownership is tracked on the blockchain, the actual digital assets often reside elsewhere. This proposal aims to standardize how information about decentralized storage of these assets is included in the metadata.</p>\n\n<p>As of now, ERC-5625 is in the Review stage. If implemented, it would provide a standardized way for NFT creators and platforms to specify decentralized storage information, potentially increasing transparency and trust in the long-term preservation of NFT-associated digital assets. However, adoption would depend on support from major NFT platforms and marketplaces.</p></article>",
  "ERC-5630": "<article><h1>ERC-5630: New Approach for Encryption / Decryption</h1>\n\n<p>EIP-5630, proposed by the Firn Protocol team and contributors in September 2022, aims to standardize a new method for encryption and decryption using Ethereum wallets. The proposal introduces two new RPC methods: <code>eth_getEncryptionPublicKey</code> and <code>eth_performECDH</code>, which enable users to receive encryptions and perform decryptions using only the secp256k1 curve.</p>\n\n<p>This EIP improves upon previous approaches by separating the core ECDH (Elliptic Curve Diffie-Hellman) operation from the ECIES (Elliptic Curve Integrated Encryption Scheme) implementation. This separation allows for greater flexibility and security, as it doesn't hardcode a specific ECIES version. The proposal also addresses the issue of using the same secret key for both signing and encryption on different curves, which was a concern in earlier implementations.</p>\n\n<p>As of now, EIP-5630 is in a \"Stagnant\" status, indicating that development has slowed or stopped. While the proposal offers potential benefits for direct-to-address encryption on Ethereum and other use cases, it appears that further discussion or refinement may be",
  "ERC-5633": "<article><h1>ERC-5633: Composable Soulbound NFT, EIP-1155 Extension</h1>\n\n<p>ERC-5633, proposed by HonorLabs in September 2022, aims to extend ERC-1155 to support composable soulbound NFTs. Soulbound tokens are non-transferable, similar to bound items in games like World of Warcraft. This proposal allows individual token IDs within an ERC-1155 contract to have their own soulbound property, enabling a mix of transferable and non-transferable tokens within the same collection.</p>\n\n<p>The motivation behind ERC-5633 is to provide a standardized way to represent soulbound NFTs that can coexist with regular, transferable tokens. This approach is particularly useful for gaming and other applications where some items should be permanently tied to an account while others can be freely traded. The proposal includes an interface that extends ERC-1155, allowing wallets and developers to easily check the soulbound status of a token using ERC-165.</p>\n\n<p>Currently, the proposal's status is listed as \"Stagnant,\" indicating that it hasn't seen recent activity or updates. While the concept of soulbound tokens has generated interest in the Ethereum community, it's unclear whether this specific implementation will be widely adopted. Developers interested in soul",
  "ERC-5635": "<article><h1>ERC-5635: NFT Licensing Agreements</h1>\n\n<p>ERC-5635, proposed by Timi and 0xTriple7 in August 2022, aims to standardize an oracle for storing and retrieving licensing agreements for NFT derivative works. The proposal introduces the concept of derivative NFTs (dNFTs) created from original NFTs (oNFTs), and establishes a framework for managing licensing terms between licensors (oNFT owners) and licensees (dNFT creators).</p>\n\n<p>The proposal addresses a growing need in the NFT ecosystem for clear licensing structures, especially as derivative works become more common. It defines roles for licensors, licensees, and introduces methods for registering and discovering licensing agreements. This could potentially streamline the process of creating and monetizing NFT derivatives while respecting the rights of original creators.</p>\n\n<p>As of now, ERC-5635 is in a \"Stagnant\" status, indicating that development or discussions around it have slowed. While the proposal presents an interesting solution to NFT licensing, it's unclear if it will be implemented widely. The NFT space continues to evolve rapidly, and other proposals or market practices may emerge to address similar concerns. Developers and NFT creators should monitor this and related proposals to stay informed about best practices for NFT licensing and derivative works.</p",
  "ERC-5639": "<article><h1>ERC-5639: Delegation Registry</h1>\n\n<p>ERC-5639 proposes a Delegation Registry to allow users to link delegate wallets to a main vault wallet, enabling safer and more convenient signing operations. The proposal was authored by several prominent Ethereum developers and submitted in September 2022.</p>\n\n<p>The motivation behind ERC-5639 was to address security and usability issues with the common practice of users directly signing messages with their main wallet to prove asset ownership or authenticate to applications. By allowing delegation, users can grant limited permissions to separate wallets, reducing risk and improving convenience.</p>\n\n<p>As of 2023, ERC-5639 is still in Review status. While the concept has merit, competing delegation proposals like ERC-4337 (account abstraction) have gained more traction in the Ethereum community. However, ERC-5639 remains a thoughtful approach to improving wallet security and usability that could still see adoption or influence future standards.</p></article>",
  "ERC-5643": "<article><h1>ERC-5643: Subscription NFTs</h1>\n\n<p>ERC-5643, proposed by cygaar in September 2022, aims to extend the ERC-721 standard to include subscription-based functionality for NFTs. This proposal addresses the need for time-limited, renewable NFTs in decentralized applications, particularly for membership passes, accounts, and other use cases requiring recurring payments.</p>\n\n<p>The proposal introduces functions for renewing and canceling subscriptions, drawing inspiration from the Ethereum Name Service (ENS) model. ENS domains, which require periodic renewal, served as a primary use case and motivation for this standard. By establishing a common interface for subscription NFTs, ERC-5643 seeks to simplify the development of projects requiring time-bound tokens and improve user management of multiple subscriptions.</p>\n\n<p>As of now, ERC-5643 is in a stagnant state, indicating that development and discussions around the proposal have slowed. While the idea of subscription-based NFTs remains relevant, the crypto community may be exploring alternative approaches or focusing on other priorities. Developers considering implementing subscription functionality in NFTs should review this proposal but also investigate more recent standards or practices that may have emerged since its creation.</p></article>",
  "ERC-5646": "<article><h1>ERC-5646: Token State Fingerprint</h1>\n\n<p>ERC-5646, proposed by Naim Ashhab, introduces a standardized method for identifying the state of mutable tokens on Ethereum. The proposal aims to solve the challenge of unambiguously tracking token states without requiring knowledge of specific implementation details. This improvement is particularly valuable for protocols that need to interact with various token types, as it eliminates the need for custom support for each new token standard.</p>\n\n<p>The core of ERC-5646 is the <code>getStateFingerprint</code> function, which returns a unique bytes32 value representing the current state of a token. This function is designed to return different values when a token's state changes, and consistent values when the state remains the same. By implementing this standard, tokens can provide a universal interface for state identification, simplifying integration with other protocols and reducing development overhead.</p>\n\n<p>ERC-5646 has been finalized and is now part of the Ethereum standards. Its adoption can significantly streamline the development of protocols that interact with various token types, as it provides a uniform method for state identification across different token implementations. This proposal represents an important step towards greater interoperability and efficiency in the Ethereum ecosystem, particularly for projects dealing with mutable tokens.</p>\n</article>",
  "ERC-5679": "<article><h1>ERC-5679: Token Minting and Burning</h1>\n\n<p>ERC-5679, proposed by Zainan Victor Zhou in September 2022, introduces a consistent way to extend token standards for minting and burning. The proposal aims to standardize the process of creating and destroying tokens across ERC-20, ERC-721, and ERC-1155 token standards.</p>\n\n<p>The motivation behind this proposal was to establish clear, separate methods for minting and burning tokens, distinct from transfer methods. This separation simplifies implementations and reduces security risks, as minting and burning often have different access controls compared to transfers. The proposal defines specific interfaces for each token standard (ERC-20, ERC-721, and ERC-1155) to implement minting and burning functions.</p>\n\n<p>ERC-5679 has been finalized and provides a standardized approach to token lifecycle management. By implementing these interfaces, token contracts can offer more consistent and secure methods for creating and destroying tokens, benefiting both developers and users in the Ethereum ecosystem.</p>\n</article>",
  "ERC-5700": "<article><h1>ERC-5700: Bindable Token Interface</h1>\n\n<p>ERC-5700, proposed by Leeren in September 2022, introduces the concept of \"bindable\" tokens that can be attached to NFTs. This proposal aims to create a standardized way for ERC-721 or ERC-1155 tokens to be bound to ERC-721 NFTs, allowing for more efficient bundling and transfer of multiple tokens with a single NFT.</p>\n\n<p>The main innovation of ERC-5700 is the ability to \"bind\" tokens to an NFT, transferring ownership to the NFT while allowing the NFT owner to \"unbind\" and claim ownership of the bound tokens at any time. This mechanism enables the creation of complex token bundles that can be transferred as a single unit, reducing gas costs and simplifying asset management in various use cases, from digital collectibles to tokenized physical assets.</p>\n\n<p>As of now, ERC-5700 remains in draft status. While it shows promise for enhancing NFT functionality and enabling new use cases in the blockchain space, it has not yet been widely adopted or implemented. The proposal is still open for discussion and potential refinement within the Ethereum community, with ongoing conversations about its potential impact and implementation details.</p></article>",
  "ERC-5719": "<article><h1>ERC-5719: Signature Replacement Interface</h1>\n\n<p>ERC-5719, proposed by Agustin Aguilar in September 2022, addresses a critical issue in the realm of smart contract wallets: the potential for signatures to become stale or invalid over time. This proposal introduces a standard interface for non-interactive replacement of signatures that have lost their validity due to configuration changes in smart contract wallets.</p>\n\n<p>The motivation behind this ERC stems from the fundamental difference between Externally Owned Account (EOA) signatures and those generated by smart contract wallets following EIP-1271. While EOA signatures remain valid indefinitely, smart contract wallet signatures can become invalid due to various factors such as changes in the set of signers, implementation of signature expiration, or updates to the contract itself. This volatility poses challenges for protocols that depend on long-term signature validity.</p>\n\n<p>Currently, the proposal's status is listed as \"Stagnant,\" indicating that it has not seen recent activity or updates. Despite this, the problem it addresses remains relevant in the evolving landscape of smart contract wallets. The proposal suggests implementing a URI that clients can use to replace stale signatures with valid ones, potentially offering a standardized solution to this issue across different smart contract wallet implementations.</p></article>",
  "ERC-5725": "<article><h1>ERC-5725: Transferable Vesting NFT</h1>\n\n<p>ERC-5725 is a proposal for a standardized interface for transferable vesting NFTs that release underlying tokens over time. It was authored by a group including Apeguru, Marco De Vries, and others, and reached Final status in 2022. The proposal extends ERC-721 to create NFTs representing vested and locked properties of underlying tokens (typically ERC-20), with functionality for claiming tokens and reading vesting curve details.</p>\n\n<p>The motivation behind ERC-5725 was to address the lack of standardization in vesting and timelock contracts. By providing a unified interface, it aimed to enable an ecosystem of tools and improve upon traditional vesting agreements. The standard allows for liquid vesting in the form of transferable NFTs, potentially offering more flexibility than non-transferable vesting contracts.</p>\n\n<p>As a finalized ERC, ERC-5725 can be implemented by developers creating vesting mechanisms for token projects. Its standardized approach may help improve interoperability and user experience around vesting tokens in the Ethereum ecosystem. However, adoption and real-world usage data for this relatively recent standard are still limited compared to more established token standards.</p>\n</article>",
  "ERC-5727": "<article><h1>ERC-5727: Semi-Fungible Soulbound Token</h1>\n\n<p>ERC-5727, proposed by Austin Zhu and Terry Chen in September 2022, introduces a standard interface for soulbound tokens (SBTs) that can be both fungible and non-fungible. SBTs are non-transferable tokens representing an individual's identity, credentials, affiliations, and reputation in the Web3 ecosystem. This proposal aims to provide a flexible and extensible framework for developing soulbound token systems, addressing the growing need for non-transferable tokens to represent unique personal attributes and rights.</p>\n\n<p>The proposal builds upon several existing Ethereum standards, including ERC-721 (Non-Fungible Tokens) and ERC-3525 (Semi-Fungible Tokens), while incorporating elements from other relevant proposals such as ERC-5192 (Minimal Soulbound NFTs) and ERC-5484 (Consensus-Bound Tokens). ERC-5727 offers a set of core methods for managing the lifecycle of soulbound tokens and includes extensions for DAO governance, delegation, token expiration, and account recovery.</p>\n\n<p>As of now, ERC-5727 remains in Draft status, indicating ongoing discussions and potential refinements. While the proposal addresses important aspects of soulbound tokens,",
  "ERC-5732": "<article><h1>ERC-5732: Commit Interface</h1>\n\n<p>ERC-5732 proposes a simple commit interface to support commit-reveal schemes in Ethereum smart contracts. It was authored by Zainan Victor Zhou and Matt Stam, and reached final status as an ERC standard. The proposal aims to enhance privacy for applications like voting and mitigate front-running and sandwich attacks.</p>\n\n<p>The core of ERC-5732 is a minimal <code>commit()</code> function that allows implementations to integrate with arbitrary reveal methods. This flexibility enables developers to use the commit interface with various reveal mechanisms like voting or token transfers. The proposal intentionally omits a standardized reveal method to maintain generalizability.</p>\n\n<p>ERC-5732 builds on earlier standards like ERC-165 and ERC-1271 for interface detection and signature validation. While relatively simple, it provides an important building block for more complex commit-reveal schemes in decentralized applications. The proposal's final status indicates it has been accepted as a standard, though actual usage and adoption data is not readily available.</p>\n</article>",
  "ERC-5744": "<article><h1>ERC-5744: Latent Fungible Token</h1>\n\n<p>ERC-5744 was proposed in September 2022 by the Cozy Finance team to create a standard for tokens that start as non-fungible but become fungible after a maturity period. The key motivation was to enable use cases like enforcing minimum deposit durations in lending protocols or creating vesting tokens that can't be transferred until fully vested.</p>\n\n<p>The proposal extends the ERC-20 standard by adding a new <code>balanceOfMatured</code> function to track matured (fungible) tokens separately from immature tokens. It also specifies how transfers and approvals should work differently for matured vs immature tokens. This allows protocols to issue tokens that are initially restricted but automatically become transferable after a set time or condition is met.</p>\n\n<p>As of 2023, ERC-5744 is in \"Stagnant\" status, meaning development has slowed or ceased. While the concept is interesting, it has not seen widespread adoption or implementation. Other vesting and time-lock mechanisms are more commonly used currently. However, the proposal provides a useful framework for thinking about tokens with time-based fungibility that could inspire future standards.</p>\n</article>",
  "ERC-5750": "<article><h1>ERC-5750: General Extensibility for Method Behaviors</h1>\n\n<p>ERC-5750, proposed by Zainan Victor Zhou in October 2022, aims to standardize a method for passing unstructured call data to functions, enabling future extensibility of smart contract methods. The proposal suggests designating the last parameter of dynamically sized bytes to be used for behavior extensions.</p>\n\n<p>The motivation behind this ERC is to allow for the extension of existing method interfaces without requiring significant changes to the contract or breaking compatibility. This approach provides flexibility for developers to add new functionalities or behaviors to methods without altering their core structure. Some potential use cases include adding string reasons to transfer and vote functions, proving endorsement, using the extra data as a salt or nonce, or implementing commit-reveal schemes.</p>\n\n<p>As of now, ERC-5750 has reached \"Final\" status, indicating it has been accepted and implemented. This standardization offers a simple yet powerful way to future-proof smart contract methods, allowing for easier upgrades and extensions without compromising existing functionality or compatibility.</p></article>",
  "ERC-5753": "<article><h1>ERC-5753: Lockable Extension for EIP-721</h1>\n\n<p>ERC-5753, proposed by Filipp Makarov in October 2022, introduces a lockable extension for ERC-721 non-fungible tokens (NFTs). This proposal aims to improve the user experience for NFTs by allowing them to be locked while remaining in the owner's wallet, which is particularly useful for DeFi applications like using NFTs as collateral.</p>\n\n<p>The core idea of ERC-5753 is to enable NFTs to be locked, preventing transfers while still allowing other uses. When locked, a designated \"unlocker\" address (either an externally owned account or a contract) is set, which has the exclusive ability to unlock the token. This mechanism provides a more flexible approach to utilizing NFTs in various applications without the need to transfer ownership to a separate contract.</p>\n\n<p>As of now, the proposal's status is \"Stagnant,\" indicating that it has not seen recent activity or updates. While the concept addresses a genuine need in the NFT ecosystem, particularly for DeFi integrations, it's unclear whether this specific proposal will be implemented or if alternative solutions might emerge. The crypto community continues to explore ways to enhance NFT functionality and interoperability with other blockchain systems.</p></article>",
  "ERC-5773": "<article><h1>ERC-5773: Context-Dependent Multi-Asset Tokens</h1>\n\n<p>ERC-5773, proposed in October 2022, introduces a standard for multi-asset NFTs with context-dependent output. This proposal, authored by Bruno Škvorc, Cicada, Steven Pineda, Stevan Bogosavljevic, and Jan Turk, aims to create a new primitive that allows a single NFT to display different assets based on the context in which it's accessed.</p>\n\n<p>The key innovation of ERC-5773 is its ability to serve different file types or representations of an NFT depending on the platform or application accessing it. For example, the same token could display as an image on a marketplace, a 3D model in a game, or provide specific data to an IoT device. This flexibility enhances the utility and interoperability of NFTs across various digital ecosystems.</p>\n\n<p>As of its last update, ERC-5773 has reached \"Final\" status, indicating it has been accepted and implemented. This standard builds upon ERC-721 and ERC-165, extending the capabilities of NFTs while maintaining compatibility with existing systems. Its adoption could significantly impact how NFTs are used and perceived, potentially opening up new use cases in areas such as digital rights management, multi-platform gaming assets, and IoT device interactions.</",
  "ERC-5791": "<article><h1>ERC-5791: Physical Backed Tokens</h1>\n<p>ERC-5791, proposed in October 2022, aims to create a standard for linking ownership of ERC-721 NFTs to physical items via embedded chips. The proposal was authored by a team including 2pmflow, locationtba, Cameron Robertson, cygaar, and Brian Weick. It addresses the challenge of authenticating and proving ownership of physical assets in the NFT space without relying on trusted third parties.</p>\n<p>The proposal specifies requirements for the physical chip, including the ability to generate and sign messages using ECDSA with the secp256k1 curve. It also defines new functions for the smart contract, such as chipAddress() to return the chip's public key, and linkPhysicalChip() to associate a chip with an NFT. The standard aims to provide a seamless connection between digital and physical ownership, enhancing the utility and verifiability of NFTs representing real-world items.</p>\n<p>As of now, ERC-5791 remains in Draft status. While it presents an innovative solution to a real problem in the NFT space, its implementation would require significant infrastructure development, including the manufacturing and integration of compatible chips. The proposal continues to be discussed in the Ethereum community, and its potential adoption could significantly impact the future of physical asset tokenization.</p>",
  "ERC-5805": "<article><h1>ERC-5805: Voting with Delegation</h1>\n\n<p>ERC-5805, proposed by Hadrien Croubois and Francisco Giordano in July 2022, aims to standardize voting weight tracking and delegation in decentralized autonomous organizations (DAOs). This proposal addresses the lack of standardization in existing token-based voting implementations, particularly for mechanisms like checkpoints and delegation.</p>\n\n<p>The proposal introduces a standardized interface for delegating votes between accounts and querying current and historical voting power. It's designed to be compatible with various token standards, including ERC-20 and ERC-721, and allows for flexible time tracking using block numbers, timestamps, or other non-decreasing functions. This flexibility is crucial for accommodating different DAO governance models and voting mechanisms.</p>\n\n<p>As of now, ERC-5805 is in a \"Stagnant\" status, indicating that development has slowed or stopped. While the proposal offers valuable standardization for DAO voting systems, its current status suggests that it may not have gained sufficient traction or consensus within the Ethereum community. Despite this, the concepts introduced in ERC-5805 remain relevant to ongoing discussions about improving DAO governance and voting mechanisms in the blockchain space.</p></article>",
  "ERC-5827": "<article><h1>ERC-5827: Auto-Renewable Allowance Extension</h1>\n\n<p>ERC-5827 is a proposed improvement to the Ethereum ERC-20 token standard that introduces an auto-renewable allowance mechanism. Authored by zlace, zhongfu, and edison0xyz, this proposal aims to enhance the functionality of token allowances by adding a \"recovery rate\" that automatically replenishes spent allowances over time.</p>\n\n<p>The primary motivation behind ERC-5827 is to address the limitations of static allowances in scenarios involving recurring payments, such as subscriptions or salaries. By implementing a renewable allowance, the proposal seeks to improve security by reducing the need for large or unlimited allowances, which can pose risks if exploited by malicious actors.</p>\n\n<p>Currently, the proposal's status is stagnant, indicating a lack of recent activity or updates. While the concept offers potential benefits for managing token allowances more dynamically, it has not yet gained widespread adoption or implementation. As the cryptocurrency ecosystem continues to evolve, similar ideas may be incorporated into future token standards or DeFi protocols to enhance user experience and security in token-based transactions.</p></article>",
  "ERC-5850": "<article><h1>ERC-5850: Complex Numbers in bytes32</h1>\n\n<p>EIP-5850, proposed by Paul Edge in October 2022, introduces a standardized method for storing complex numbers within Ethereum's <code>bytes32</code> data type. The proposal suggests splitting the 32-byte space equally, with the least significant 16 bytes representing the real part and the most significant 16 bytes representing the imaginary part. This approach aims to facilitate the use of complex numbers in smart contracts, particularly for mathematical and scientific calculations.</p>\n\n<p>The motivation behind EIP-5850 stems from the importance of complex numbers in various fields, including Fourier Transforms, AC Circuits, and Navier-Stokes equations. By providing a standard representation, the proposal seeks to enable more sophisticated mathematical operations within Ethereum smart contracts. The EIP accommodates cartesian, polar, and exponential formats, with example code provided for the cartesian representation.</p>\n\n<p>Currently, the status of EIP-5850 is \"Stagnant,\" indicating that it has not seen significant development or discussion recently. While the proposal offers a potentially useful standard for handling complex numbers in Ethereum, its implementation and adoption remain uncertain. Developers interested in working with complex numbers in smart contracts may still find value in the proposed approach, but should be aware of its current status and potential limitations.</p>",
  "ERC-5851": "<article><h1>ERC-5851: On-Chain Verifiable Credentials</h1>\n\n<p>ERC-5851, proposed by Yu Liu and Junyi Zhong in October 2022, introduces a standard for managing verifiable claims and identifiers as Soulbound Tokens (SBTs) on the Ethereum blockchain. The proposal aims to establish a method for certifying that a particular address meets specific claims and verifying those certifications using on-chain metadata.</p>\n\n<p>The motivation behind ERC-5851 is to enable on-chain issuance of verifiable attestations for use cases such as preventing Sybil attacks in voting systems, managing participation in credential-based events, and ensuring compliance with financial regulations. The proposal introduces a standardized claims structure for Decentralized Identity (DID) issuers and verifier entities to create smart contracts that provide on-chain commitment of off-chain verification processes.</p>\n\n<p>Currently, the status of ERC-5851 is listed as \"Stagnant,\" indicating that it has not seen significant development or discussion recently. While the proposal addresses important aspects of on-chain identity verification, it's unclear whether it will be implemented in its current form or if other proposals have since emerged to address similar concerns in the evolving landscape of blockchain-based identity solutions.</p></article>",
  "ERC-5883": "<article><h1>ERC-5883: Token Transfer by Social Recovery</h1>\n\n<p>EIP-5883 proposes a standard for social recovery of lost cryptocurrency tokens using a reputation-based system of \"Souls\" (trusted identities). It was authored by Erhard Dinhobl and Kevin Riedl in July 2022. The proposal aims to address the problem of permanently lost tokens due to inaccessible private keys by allowing trusted parties to approve transfers to new accounts.</p>\n\n<p>The core mechanism involves gathering approval from a threshold number of trusted \"Souls\" to authorize transferring tokens from a lost account to a new one. This human-intervention approach builds on the concept of Soulbound Tokens, using reputation and social trust rather than purely technical means for recovery. The proposal includes a Solidity interface specification for implementing the approval and transfer functions.</p>\n\n<p>As of 2023, EIP-5883 is in \"Stagnant\" status, indicating a lack of recent activity or progress. While the concept of social recovery remains relevant for improving cryptocurrency usability and reducing permanent loss of assets, this specific proposal has not gained significant traction for standardization. Other approaches to account recovery and key management continue to be explored in the Ethereum ecosystem.</p></article>",
  "ERC-5902": "<article><h1>ERC-5902: Smart Contract Event Hooks</h1>\n\n<p>ERC-5902, proposed by Simon Brown in November 2022, introduces a standard for creating \"hooks\" that enable smart contracts to respond semi-autonomously to events emitted by other contracts. This proposal aims to establish a decentralized and permissionless system for inter-contract communication using a public relayer network as a messaging bus.</p>\n\n<p>The proposal defines two key interfaces: one for publisher contracts and another for subscriber contracts. Publisher contracts emit events that are monitored by independent relayers. These relayers then call specified functions on subscriber contracts when hook events are fired. The system includes a central registry smart contract for hook discovery and a fee mechanism to incentivize relayers.</p>\n\n<p>As of now, ERC-5902 is in a \"Stagnant\" status, indicating that it hasn't seen significant development or discussion recently. While the concept addresses a need for improved inter-contract communication, it's unclear if this specific proposal will gain traction or if alternative solutions might emerge. The crypto community continues to explore various approaches to enhance smart contract interoperability and event-driven interactions on the Ethereum network.</p>\n</article>",
  "ERC-5982": "<article><h1>ERC-5982: Role-based Access Control</h1>\n\n<p>ERC-5982 proposes a standardized interface for implementing role-based access control (RBAC) in smart contracts. The proposal was authored by Zainan Victor Zhou and introduced in November 2022. It aims to provide a more flexible and secure alternative to simple ownership-based access control by allowing multiple users to be assigned different roles with specific permissions.</p>\n\n<p>The proposal defines roles as 32-byte values and specifies methods for reading, granting, creating, and revoking roles. It also introduces the concept of \"role power\" to determine if a role can call a specific contract method. Additionally, it outlines how role metadata should be represented. ERC-5982 builds upon and requires ERC-165 (interface detection) and ERC-5750 (general-purpose access control list).</p>\n\n<p>As of now, ERC-5982 is in the Review status, indicating it is being actively discussed and refined by the Ethereum community. While role-based access control is already implemented in various forms by many projects, this proposal aims to standardize the approach, potentially improving interoperability and security across the Ethereum ecosystem. However, it's important to note that the proposal is still under review and may undergo further changes before potential adoption.</p></article>",
  "ERC-600": "<article><h1>ERC-600: Ethereum Purpose Allocation for Deterministic Wallets</h1>\n\n<p>ERC-600, proposed by Nick Johnson and Micah Zoltu in 2017, aimed to standardize derivation path strategies for deterministic wallets in Ethereum. It defined a logical hierarchy based on BIP32, BIP43, and a proposed change to BIP43. The proposal addressed the incompatibility between Ethereum's account-based system and Bitcoin's UTXO-based approach, which made BIP44 poorly suited for Ethereum.</p>\n\n<p>The EIP specified a three-level BIP32 path: m / purpose' / subpurpose' / EIP', where the purpose is set to 43. This structure allowed for better organization of Ethereum-specific wallet derivations, promoting interoperability between different wallet implementations. The proposal aimed to reduce fragmentation in derivation path strategies that had emerged due to Ethereum's unique requirements.</p>\n\n<p>ERC-600 has been finalized and is considered a standard. However, its adoption and implementation across the Ethereum ecosystem have been limited. While it provides a solid foundation for standardizing deterministic wallet derivations in Ethereum, other proposals and implementations have also emerged to address similar concerns. Developers and wallet providers should consider ERC-600 when implementing deterministic wallets, but should also",
  "ERC-601": "<article><h1>ERC-601: Ethereum Hierarchy for Deterministic Wallets</h1>\n\n<p>ERC-601 was proposed in 2017 by Nick Johnson and Micah Zoltu to define a standardized logical hierarchy for deterministic wallets in Ethereum. It aimed to address inconsistencies between different Ethereum wallets in how they derived keys, which was causing compatibility and usability issues. The proposal built upon Bitcoin's BIP32 and BIP43 standards, but tailored the approach specifically for Ethereum's account-based model rather than Bitcoin's UTXO model.</p>\n\n<p>The core of ERC-601 was defining a new purpose scheme and derivation path structure for Ethereum wallets. This would allow wallets to deterministically generate keys in a consistent way, improving interoperability. It also aimed to provide better support for features like multiple accounts and contract wallets that are common in Ethereum but not well-served by Bitcoin-style derivation paths.</p>\n\n<p>While ERC-601 made it to \"Final\" status, it does not appear to have seen widespread adoption in practice. Most Ethereum wallets today still use variations on the BIP44 scheme or other custom derivation paths. However, the underlying motivations of ERC-601 around improving wallet standardization remain relevant. More recent proposals like EIP-2645 have",
  "ERC-6047": "<article><h1>ERC-6047: ERC-721 Balance indexing via Transfer event</h1>\n\n<p>ERC-6047 is a proposed improvement to the ERC-721 standard for non-fungible tokens (NFTs) on Ethereum. Authored by Zainan Victor Zhou, this proposal aims to enhance the tracking and indexing capabilities of NFTs by mandating the emission of a Transfer event during contract creation.</p>\n\n<p>The key motivation behind ERC-6047 is to address a limitation in the original ERC-721 standard. While ERC-721 requires Transfer events for mints, burns, and transfers occurring after contract creation, it doesn't mandate such events during the contract creation process itself. This can lead to inconsistencies in token tracking, especially for NFTs minted at contract deployment. By contrast, the ERC-1155 standard already requires event emission regardless of when minting occurs, allowing for more reliable token accounting.</p>\n\n<p>Currently, ERC-6047 is in a \"Stagnant\" status, indicating that development or discussions have slowed down. Despite its potential benefits for improving NFT indexing and tracking, the proposal hasn't gained significant traction in the Ethereum community. It's unclear whether this proposal will be implemented or if alternative solutions will be developed to address the indexing issue in ERC-721 tokens.</p>",
  "ERC-6059": "<article><h1>ERC-6059: Parent-Governed Nestable Non-Fungible Tokens</h1>\n\n<p>ERC-6059, proposed by Bruno Škvorc, Cicada, Steven Pineda, Stevan Bogosavljevic, and Jan Turk, introduces a novel concept of nestable NFTs. This proposal extends the ERC-721 standard by allowing NFTs to own other NFTs, creating a parent-child relationship between tokens. The core idea is that an NFT's owner can be another NFT, not just an externally owned account (EOA) or smart contract.</p>\n\n<p>The proposal outlines a framework for managing these nested relationships. Nesting an NFT into another is similar to transferring ownership, while transferring a nested NFT requires action from the owner of the parent token. This structure allows for complex hierarchies of NFTs, with tokens potentially being both parents and children simultaneously. The parent token has full control over its child tokens, enabling new possibilities for token management and interactions.</p>\n\n<p>As of its creation in November 2022, ERC-6059 has reached \"Final\" status, indicating it has been accepted and is ready for implementation. This proposal opens up new avenues for NFT utility and complexity, potentially revolutionizing how NFTs can be structured and managed within the Ethereum ecosystem. Its implementation could lead to",
  "ERC-6065": "<article><h1>ERC-6065: Real Estate Token</h1>\n\n<p>ERC-6065, proposed in November 2022, is a standard for tokenizing real estate on the Ethereum blockchain. It extends the ERC-721 non-fungible token standard to include features specific to real estate assets. The proposal aims to facilitate the representation of physical property rights on-chain, enabling more efficient and accessible real estate transactions.</p>\n\n<p>The standard was authored by Alex Klasma, Ben Fusek, and Daniel Fallon-Cyr, who recognized the need for a specialized token structure to handle the complexities of real estate ownership. Key features include a hash of the legal operating agreement, unique property identifiers, debt and foreclosure status tracking, and a designated manager address. These additions are designed to ensure that the token accurately represents the associated property rights and can be seamlessly transferred while maintaining legal validity.</p>\n\n<p>As of the latest update, ERC-6065 is in the Review status, indicating that it is still under consideration by the Ethereum community. The proposal has generated significant interest due to its potential to revolutionize real estate transactions by lowering barriers to entry, reducing costs, and increasing transparency. If implemented, it could pave the way for more widespread tokenization of real-world assets on the Ethereum blockchain, potentially transforming the real estate market and opening up new opportunities for blockchain-base",
  "ERC-6066": "<article><h1>ERC-6066: Signature Validation Method for NFTs</h1>\n\n<p>ERC-6066, proposed by Jack Boyuan Xu in November 2022, introduces a standard method for validating signatures made by NFTs (Non-Fungible Tokens). This proposal extends the functionality of NFTs beyond their typical use as digital art or collectibles, enabling them to act as signers in various blockchain interactions.</p>\n\n<p>The proposal builds upon existing standards like ERC-721, ERC-1155, and ERC-1271, introducing a new function <code>isValidSignature(tokenId, hash, data)</code> that allows for signature validation specific to NFTs. This addition bridges a gap in the Ethereum ecosystem, where externally owned accounts and smart contracts already had established signature validation methods, but NFTs lacked a standardized approach.</p>\n\n<p>As of its final status, ERC-6066 has been accepted and implemented, opening up new possibilities for NFT utility in areas such as governance, authentication, and complex on-chain interactions. This standard enhances the versatility of NFTs, potentially leading to more sophisticated use cases in decentralized applications and blockchain-based systems.</p>\n</article>",
  "ERC-6093": "<article><h1>ERC-6093: Custom Errors for Commonly-Used Tokens</h1>\n\n<p>ERC-6093, proposed in December 2022, aims to standardize custom error messages for popular token standards like ERC-20, ERC-721, and ERC-1155. This proposal addresses the need for more efficient and expressive error handling in smart contracts, leveraging Solidity's custom error feature introduced in version 0.8.4.</p>\n\n<p>The primary motivation behind ERC-6093 is to improve upon the traditional method of using revert reason strings for error handling. Custom errors offer several advantages, including reduced gas costs, more precise error information, and easier client-side decoding. By defining a standard set of errors for common token implementations, this proposal seeks to enhance interoperability and user experience across Ethereum applications and wallets.</p>\n\n<p>As of August 2023, ERC-6093 is in the Last Call status, indicating that it has undergone significant review and is nearing potential acceptance. The proposal was authored by Ernesto García, Francisco Giordano, and Hadrien Croubois, who are well-known contributors in the Ethereum development community. If implemented, this standard would provide a more structured and efficient approach to error handling in token contracts, benefiting both developers and end-users of Ethereum-based applications.</p",
  "ERC-6105": "<article><h1>ERC-6105: No Intermediary NFT Trading Protocol</h1>\n\n<p>ERC-6105, titled \"No Intermediary NFT Trading Protocol,\" was proposed to address security and efficiency concerns in NFT trading. The proposal aims to add marketplace functionality directly to ERC-721 tokens, eliminating the need for intermediary trading platforms and enabling more diverse royalty schemes.</p>\n\n<p>The motivation behind this proposal stems from issues with existing NFT trading methods, including security risks associated with broad approvals granted to trading platforms and high fees charged by intermediaries. By implementing trading functionality at the token contract level, ERC-6105 seeks to enhance security, reduce costs, and give creators more control over royalty structures.</p>\n\n<p>The proposal was authored by several contributors including 5660-eth, Silvere Heraudeau, Martin McConnell, Abu, and Wizard Wang. It was finalized after discussions within the Ethereum community. As a finalized ERC, it is now available for implementation by developers seeking to create more secure and efficient NFT marketplaces directly within their token contracts.</p></article>",
  "ERC-6120": "<article><h1>ERC-6120: Universal Token Router</h1>\n\n<p>ERC-6120, proposed in December 2022, aims to address limitations in the ERC-20 token standard by introducing a Universal Token Router (UTR). This proposal seeks to enable a transfer-and-call pattern for tokens, similar to how ETH transactions work, instead of the current approve-then-call pattern used by most token-based applications.</p>\n\n<p>The proposal was authored by a team from Derivable Labs, including Zergity, Ngo Quang Anh, BerlinP, Khanh Pham, and Hal Blackburn. It's currently in the Review status, indicating it's being actively discussed and considered by the Ethereum community. The UTR concept aims to improve user experience, reduce gas costs, and enhance security by eliminating the need for multiple approve transactions across different contracts and tokens.</p>\n\n<p>If implemented, ERC-6120 could significantly streamline token interactions on Ethereum, potentially becoming a new standard for token transfers in smart contract interactions. However, as of now, it remains a proposal and has not been widely adopted or implemented. The community continues to discuss its merits and potential implications for existing and future token-based applications.</p></article>",
  "ERC-6123": "<article><h1>ERC-6123: Smart Derivative Contract</h1>\n\n<p>ERC-6123 proposes a standardized protocol for implementing financial derivatives and other contracts as smart contracts on Ethereum. It was authored by Christian Fries, Peter Kohl-Landgraf, and Alexandros Korpis in December 2022. The proposal aims to automate and secure the full lifecycle of financial products by leveraging blockchain technology.</p>\n\n<p>The key innovation of ERC-6123 is using smart contracts to remove counterparty risk and friction in derivative trading. It specifies methods for automated settlement using pre-agreed valuation oracles and models. This eliminates ambiguity in settlement amounts and enables fully automated, transactional settlements. The standard is designed to work with ERC-20 tokens for settlement.</p>\n\n<p>While still in draft status, ERC-6123 has seen real-world testing through two legally binding digital interest rate swaps conducted in 2021-2022. If implemented, it could significantly streamline OTC derivatives trading by reducing operational overhead and risk. However, as a relatively new proposal, it may need further refinement and testing before wide adoption. The authors are actively seeking feedback and discussion through Ethereum Magicians.</p></article>",
  "ERC-6147": "<article><h1>ERC-6147: Guard of NFT/SBT, an Extension of ERC-721</h1>\n\n<p>ERC-6147, proposed by 5660-eth and Wizard Wang, is a significant improvement to the ERC-721 standard for non-fungible tokens (NFTs). This proposal introduces the concept of a \"guard\" role with an expiration date, effectively separating the holding rights from transfer rights for NFTs and Soulbound Tokens (SBTs). The primary motivation behind this proposal was to address security concerns, enable more flexible NFT lending and leasing models, and enhance the functionality of SBTs.</p>\n\n<p>The proposal was created in December 2022 and quickly gained traction in the Ethereum community. It addresses several key issues in the NFT space, including theft prevention, improved utility during lending periods, and enhanced flexibility for SBTs. By allowing NFT owners to assign a temporary \"guard\" with transfer rights, the proposal enables scenarios such as secure cold storage while maintaining usability, collateralized lending without losing access to the NFT, and transferable SBTs in case of compromised private keys.</p>\n\n<p>As of now, ERC-6147 has reached \"Final\" status, indicating its acceptance by the Ethereum community. While it's a relatively recent proposal, its potential impact on NFT security and utility is",
  "ERC-6150": "<article><h1>ERC-6150: Hierarchical NFTs</h1>\n\n<p>ERC-6150, proposed in December 2022 by Keegan Lee and others, introduces the concept of Hierarchical NFTs as an extension to the popular ERC-721 standard. This proposal aims to bring a filesystem-like hierarchical structure to NFTs, allowing for parent-child relationships between tokens. The motivation behind this standard was to replicate common hierarchical structures found in file systems and websites, enabling more complex and organized NFT ecosystems.</p>\n\n<p>The proposal defines new interfaces for querying parent and child NFTs, as well as determining if a token is a root or leaf node in the hierarchy. This structure opens up possibilities for representing nested categories, directories, or other hierarchical data models within the NFT space. While the proposal reached \"Final\" status, indicating its completion of the EIP process, its practical implementation and adoption in the wider Ethereum ecosystem remain to be seen.</p>\n\n<p>As of now, ERC-6150 stands as a completed standard, ready for developers to implement in their projects. However, it's worth noting that the NFT space is rapidly evolving, and while this proposal offers interesting possibilities for structured NFT collections, its long-term impact and usage will depend on how well it addresses real-world use cases and developer needs in the blockchain ecosystem.</p></article>",
  "ERC-6170": "<article><h1>ERC-6170: Cross-Chain Messaging Interface</h1>\n\n<p>ERC-6170, proposed by Sujith Somraaj in December 2022, aims to standardize the interface for cross-chain arbitrary message bridges (AMBs). This proposal addresses the lack of standardization in cross-chain messaging protocols, which has led to complex and competing implementations such as Layerzero, Hyperlane, Axelar, and Wormhole.</p>\n\n<p>The primary motivation behind ERC-6170 is to simplify cross-chain application development, improve scalability, enhance security, and increase robustness. By providing a common interface, developers can more easily build scalable cross-chain applications and efficiently utilize multiple message bridges. The proposal also aims to improve security by standardizing certain parameters, such as nonce or Merkle root hash, which are currently implemented differently across various protocols.</p>\n\n<p>As of now, ERC-6170 remains in Draft status. Its implementation could significantly impact the cross-chain messaging ecosystem, potentially leading to more interoperable and efficient cross-chain applications. However, adoption would require buy-in from existing AMB protocols and the broader Ethereum community. Given the rapidly evolving nature of cross-chain technologies, it's possible that this proposal may be superseded or modified as the field continues to develop.</p>\n</article",
  "ERC-6220": "<article><h1>ERC-6220: Composable NFTs utilizing Equippable Parts</h1>\n\n<p>ERC-6220 is an Ethereum improvement proposal that extends the ERC-721 non-fungible token standard to enable composable NFTs with equippable parts. Authored by Bruno Škvorc, Cicada, Steven Pineda, Stevan Bogosavljevic, and Jan Turk, this proposal introduces a new level of flexibility and interoperability for NFTs.</p>\n\n<p>The key innovation of ERC-6220 is the concept of \"Catalogs\" which contain parts that can be used to compose NFTs. These parts come in two types: fixed parts (full components with their own metadata) and slot parts (which allow other NFT collections to be equipped). This allows for dynamic composition of NFTs without creating new tokens, instead adding renderablecomponents to existing tokens.</p>\n\n<p>ERC-6220 reached Final status, indicating it has been thoroughly reviewed and is considered ready for implementation. It builds upon several other standards including ERC-165, ERC-721, ERC-5773, and ERC-6059. This proposal significantly enhances the utility and versatility of NFTs, opening up new possibilities for gaming, digital art, and other applications where composable digital assets are valuable.</p>\n</article>",
  "ERC-6224": "<article><h1>ERC-6224: Contracts Dependencies Registry</h1>\n\n<p>ERC-6224, proposed by Artem Chystiakov in December 2022, introduces an on-chain registry system for managing smart contracts and their dependencies within decentralized protocols. The proposal aims to address the challenges of complexity, upgradability, and dependency management in modern Ethereum projects.</p>\n\n<p>The core of ERC-6224 consists of two components: ContractsRegistry and Dependant. The ContractsRegistry serves as a central hub for storing references to all smart contracts within a protocol, with the option to make them upgradeable through self-managed proxies. Dependant contracts can query this registry to fetch their required dependencies, promoting a more organized and maintainable architecture.</p>\n\n<p>As of now, ERC-6224 is in the Review status, indicating that it is still under consideration by the Ethereum community. The proposal builds upon previous standards, specifically requiring ERC-1967 (Proxy Storage Slots) and ERC-5750 (General Extensible Proxy Standard). If implemented, this standard could significantly improve the manageability and upgradability of complex decentralized applications, though its adoption and potential impact remain to be seen.</p></article>",
  "ERC-6229": "<article><h1>ERC-6229: Tokenized Vaults with Lock-in Period</h1>\n\n<p>ERC-6229, proposed by Anderson Chen, Martinet Lee, and Anton Cheng in December 2022, extends ERC-4626 to support lock-in periods for tokenized vaults. This proposal addresses the need for vaults to temporarily lock underlying tokens for strategic purposes, preventing withdrawals and deposits during specified periods.</p>\n\n<p>The main motivation behind ERC-6229 is to enable vaults to execute certain strategies that require locking tokens for a set duration. This extension to ERC-4626 allows for more flexible vault designs, particularly useful in DeFi applications where temporary illiquidity might be necessary for optimal asset management.</p>\n\n<p>As of now, ERC-6229 remains in Draft status. It requires implementation of both ERC-4626 and ERC-20 standards. The proposal introduces new functions to handle scheduled deposits and withdrawals during lock-in periods, providing a standardized approach for managing temporally-restricted tokenized vaults in the Ethereum ecosystem.</p>\n</article>",
  "ERC-6239": "<article><h1>ERC-6239: Semantic Soulbound Tokens</h1>\n<p>ERC-6239, proposed by Jessica Chang in December 2022, extends ERC-721 and ERC-5192 to incorporate Resource Description Framework (RDF) triples into Soulbound Token (SBT) metadata. This proposal aims to enhance the representational capabilities of SBTs by allowing them to capture and store social metadata in a structured, semantic format.</p>\n\n<p>The key innovation of ERC-6239 is the use of RDF, a W3C standard for representing information, to create a more robust and queryable network of accounts and attributes. This approach enables the creation of a united social graph on-chain, supporting applications like trusted contact assignment for social recovery and fair governance mechanisms.</p>\n\n<p>As of now, ERC-6239 has reached \"Final\" status, indicating its acceptance by the Ethereum community. The proposal builds upon existing standards and provides a foundation for more advanced social and identity-based applications in the Ethereum ecosystem. Its implementation could significantly enhance the utility and expressiveness of Soulbound Tokens in representing real-world relationships and credentials on the blockchain.</p>\n</article>",
  "ERC-6268": "<article><h1>ERC-6268: Untransferability Indicator for EIP-1155</h1>\n\n<p>ERC-6268, proposed by Yuki Aoki in January 2022, aims to standardize an interface for indicating non-transferability of ERC-1155 tokens using EIP-165 feature detection. This proposal addresses the need for a standard way to implement Soulbound Tokens (SBTs) for semi-fungible or fungible tokens, complementing ERC-5192 which covers non-fungible SBTs.</p>\n\n<p>The proposal introduces a simple interface that allows contracts to declare whether specific token IDs are transferable or not. This enables the creation of ERC-1155 compatible tokens that can be marked as non-transferable, effectively implementing the concept of Soulbound Tokens for a wider range of token types. The standard requires conformance to ERC-1155 and ERC-165, ensuring compatibility with existing systems.</p>\n\n<p>As of now, ERC-6268 is in a \"Stagnant\" status, indicating that it has not seen significant activity or updates recently. While the proposal addresses an important use case in the evolving landscape of digital assets, its current status suggests that it may need further community engagement or potential revisions to progress towards adoption. Developers interested in implementing Soulboun",
  "ERC-6315": "<article><h1>ERC-6315: Namespaced Account Abstraction for ERC-2771</h1>\n\n<p>ERC-6315, proposed by Gavin John in January 2023, introduces a namespacing mechanism to ERC-2771, a widely adopted standard for meta-transactions using trusted forwarders. The proposal aims to facilitate trustless account abstraction through per-forwarder namespaced addresses, extending the capabilities of ERC-2771.</p>\n\n<p>The key feature of ERC-6315 is the introduction of a new interface, INamespacedForwarder, which includes an isNamespacedTransaction() function. This function allows recipients to determine whether a transaction is namespaced, enabling a more flexible and secure approach to meta-transactions. The proposal outlines specific rules for determining the sender and forwarder, enhancing the trustless nature of the system.</p>\n\n<p>As of the latest update, ERC-6315 is in the Review status, indicating that it is still under consideration by the Ethereum community. While it builds upon the established ERC-2771 standard, its implementation would require careful consideration of its impact on existing systems and potential security implications. The proposal's success will depend on further discussion and consensus within the Ethereum development community.</p>\n</article>",
  "ERC-6327": "<article><h1>ERC-6327: Elastic Signature</h1>\n\n<p>ERC-6327, proposed by George (@JXRow) in January 2023, introduces the concept of Elastic Signature (ES) for Ethereum. This improvement proposal aims to create a more user-friendly way of signing data using a password-like secret instead of a traditional private key. The proposal leverages zero-knowledge technology to allow users to generate proofs of knowing the secret, which can then be verified by smart contracts on-chain.</p>\n\n<p>The primary motivation behind ERC-6327 is to lower the barrier to entry for non-technical users in the cryptocurrency space. By replacing the complex concept of private keys with more familiar password-based authentication, the proposal seeks to improve user experience and increase adoption. Additionally, the elastic nature of the signature allows users to change their secret as often as needed, enhancing security and flexibility.</p>\n\n<p>As of now, ERC-6327 remains in Draft status. While the proposal presents an innovative approach to authentication in blockchain systems, it has not yet been widely implemented or adopted. The crypto community continues to discuss and evaluate the potential benefits and challenges of integrating Elastic Signatures into existing Ethereum infrastructure. If implemented, ERC-6327 could serve as a complementary signing mechanism alongside traditional private key signatures, particularly in DeFi applications and user-centric platforms.</p",
  "ERC-634": "<article><h1>ERC-634: Storage of text records in ENS</h1>\n\n<p>ERC-634, proposed by Richard Moore in May 2017, defines a resolver profile for the Ethereum Name Service (ENS) that allows for the storage and retrieval of arbitrary key-value text data associated with ENS names. This proposal enables ENS name holders to link additional information like email addresses, URLs, and other metadata to their ENS names.</p>\n\n<p>The proposal specifies a simple interface with a single method, `text(bytes32 node, string key)`, which returns the text data associated with a given key for an ENS name. This allows for flexible and extensible metadata storage, enhancing the utility of ENS beyond simple name resolution. The EIP also defines guidelines for global keys to ensure consistency across implementations.</p>\n\n<p>While ERC-634 laid important groundwork for ENS text record storage, its current status is \"Stagnant\". This suggests that while the proposal may still be relevant, it has not seen significant recent development or adoption. ENS has continued to evolve, and newer proposals may have expanded upon or superseded aspects of ERC-634. Developers working with ENS should consult the latest ENS documentation and standards to ensure they are using the most up-to-date and widely supported features for text record storage.</p></article>",
  "ERC-6353": "<article><h1>ERC-6353: Charity Token</h1>\n\n<p>ERC-6353, also known as the \"Charity Token\" proposal, was introduced in May 2022 by a team from Aubay as an extension to the widely-used ERC-20 token standard. The proposal aims to create a standardized method for automatically donating a percentage of each token transfer to a designated charity address.</p>\n\n<p>The main motivation behind this proposal was to enable automated charitable giving within the Ethereum ecosystem. By implementing ERC-6353, token projects could allow their users to effortlessly contribute to charitable causes with every transfer, potentially increasing overall donations and user engagement. The proposal also aimed to simplify the process of identifying and comparing charity-enabled tokens for users and interface developers.</p>\n\n<p>As of now, ERC-6353 remains in a \"Stagnant\" status, indicating that it has not gained significant traction or been widely adopted. While the concept of automated charitable giving in cryptocurrencies remains relevant, it's possible that alternative implementation methods or more comprehensive solutions have been explored since this proposal was introduced. Developers interested in implementing similar functionality may want to consider this proposal as a starting point, but should also investigate more recent developments in the space.</p></article>",
  "ERC-6357": "<article><h1>ERC-6357: Single-contract Multi-delegatecall</h1>\n\n<p>ERC-6357, proposed by Gavin John in January 2023, aims to standardize a multicall interface for Ethereum smart contracts. This proposal addresses the inefficiency of executing multiple transactions for related operations, such as transferring multiple NFTs, by allowing users to batch multiple function calls into a single transaction.</p>\n\n<p>The ERC introduces a single function called `multicall`, which accepts an array of ABI-encoded call data. This function performs delegatecalls to itself for each provided call data, effectively executing multiple contract functions in one transaction. If any of the delegatecalls reverts, the entire transaction is reverted, ensuring atomicity.</p>\n\n<p>Currently, ERC-6357 is in the Last Call status, with a deadline of November 10, 2023. This indicates that the proposal has undergone significant discussion and refinement, and is nearing potential acceptance. If implemented, this standard would significantly reduce gas costs and improve user experience for applications requiring multiple contract interactions, particularly in the NFT space.</p>\n</article>",
  "ERC-6358": "<article><h1>ERC-6358: Cross-Chain Token States Synchronization</h1>\n\n<p>ERC-6358, proposed in January 2023 by Shawn Zheng, Jason Cheng, George Huang, and Kay Lin, aims to standardize an interface for contract-layer consensus-agnostic verifiable cross-chain bridging. This proposal introduces a new paradigm for synchronizing token states across multiple existing public chains, allowing for the creation of global tokens that inherit from ERC-20 or ERC-721 standards.</p>\n\n<p>The motivation behind ERC-6358 is to address two significant issues in the current token bridge ecosystem: asset fragmentation and potential asset loss due to chain failures. By focusing on synchronization rather than traditional token transfers, this proposal aims to ensure that users' assets remain secure as long as at least one chain (e.g., Ethereum) continues to operate. This approach could potentially solve the fragmentation problem and enhance the overall security of multi-chain assets.</p>\n\n<p>As of its proposal, ERC-6358 is in the Review status, indicating that it is still under consideration and discussion within the Ethereum community. The proposal's implementation could significantly impact cross-chain interoperability and asset management in the blockchain ecosystem, but it would require widespread adoption and further development to realize its full potential.</p>\n</article>",
  "ERC-6366": "<article><h1>ERC-6366: Permission Token</h1>\n\n<p>ERC-6366, proposed in January 2022 by Chiro and Victor Dusart, introduces the concept of a \"Permission Token\" as an alternative to traditional Access Control Lists (ACLs) for managing authorization in Ethereum smart contracts. The proposal aims to enhance security and efficiency by representing permissions as individual bits within a uint256 value, allowing for more flexible and gas-efficient permission checks using bitwise operations.</p>\n\n<p>The key innovation of ERC-6366 is its use of a single uint256 to store multiple permissions for an address within an ecosystem. This approach, building on ERC-6617's permission bit mapping, enables more granular and composable access control compared to conventional role-based systems. By leveraging bitwise operators and bitmasks, permission checks can be performed more efficiently than string comparisons or keccak256 hashes.</p>\n\n<p>As of its last known status, ERC-6366 was under review. If implemented, it could significantly streamline permission management across smart contract ecosystems, potentially improving interoperability and reducing gas costs for permission-related operations. However, adoption would require careful consideration of existing permission systems and potential migration strategies for established projects.</p>\n</article>",
  "ERC-6372": "<article><h1>ERC-6372: Contract Clock</h1>\n\n<p>ERC-6372, proposed by Hadrien Croubois and Francisco Giordano in January 2023, aims to standardize an interface for smart contracts to expose their internal clock mechanism. This proposal addresses the lack of a unified way to determine how contracts track time, which can vary between using block numbers, timestamps, or other custom methods.</p>\n\n<p>The primary motivation behind ERC-6372 is to enhance interoperability and composability among smart contracts. By providing a standard interface for contracts to reveal their time-tracking function, developers can more easily integrate with and build upon existing contracts without making potentially dangerous assumptions about their internal clock implementations.</p>\n\n<p>As of its last known status, ERC-6372 was in the Review stage. If implemented, this standard would significantly improve the ability of external observers and other contracts to interact with time-dependent functionalities, such as timelocks, voting periods, and historical data storage in various DeFi and DAO applications.</p>\n</article>",
  "ERC-6381": "<article><h1>ERC-6381: Public Non-Fungible Token Emote Repository</h1>\n\n<p>ERC-6381, proposed in January 2023 by Bruno Škvorc, Steven Pineda, Stevan Bogosavljevic, and Jan Turk, introduces a standard for adding emoji reactions to NFTs. This proposal aims to enhance the interactive utility of ERC-721 and ERC-1155 tokens by allowing users to react to NFTs using Unicode emojis in a public, non-gated repository smart contract accessible across multiple networks.</p>\n\n<p>The motivation behind ERC-6381 is to standardize additional utility for NFTs, which have become widespread in the Ethereum ecosystem. By enabling anyone to interact with an NFT through emotes, the proposal introduces new possibilities for interactivity, feedback-based evolution, and valuation of NFTs. This could potentially change how users engage with digital assets and provide new mechanisms for gauging public sentiment towards specific tokens.</p>\n\n<p>As of now, ERC-6381 has reached \"Final\" status, indicating it has been accepted and is ready for implementation. This proposal builds upon existing standards like ERC-165 and could significantly impact how NFTs are perceived and utilized in the future, opening up new avenues for social interaction within the blockchain space.</p>\n</article>",
  "ERC-6384": "<article><h1>ERC-6384: Human-readable offline signatures</h1>\n\n<p>ERC-6384, proposed by Tal Be'ery and RoiV in January 2023, addresses a critical security issue in the Ethereum ecosystem. The proposal introduces the <code>evalEIP712Buffer</code> function, which aims to make EIP-712 typed and structured data human-readable. This improvement is crucial for enhancing user security when interacting with off-chain signatures, particularly in scenarios involving NFT sales or other high-value transactions.</p>\n\n<p>The motivation behind ERC-6384 stems from the increasing prevalence of attacks exploiting users' inability to understand the content of off-chain signatures. While EIP-712 originally aimed to make these signatures human-readable, it fell short of this goal in practice. ERC-6384 builds upon EIP-712 to fulfill its original promise of readability, potentially mitigating phishing attacks and other security risks associated with blind signing.</p>\n\n<p>As of now, ERC-6384 is in a \"Stagnant\" status, indicating that development or discussions have slowed down. Despite this, the proposal remains relevant given the ongoing security concerns in the Web3 space. Its implementation could significantly improve user experience and safety, particularly for popular platforms like OpenSea that heavily rely on off-chain signatures.",
  "ERC-6454": "<article><h1>ERC-6454: Minimal Transferable NFT detection interface</h1>\n\n<p>ERC-6454 is a Final Ethereum Improvement Proposal that extends ERC-721 to allow identifying whether an NFT can be transferred or not. It was authored by Bruno Škvorc, Francesco Sullo, Steven Pineda, Stevan Bogosavljevic, and Jan Turk in January 2023.</p>\n\n<p>The proposal introduces a simple interface to mark NFTs as non-transferable, binding them to their current owner (whether an EOA, smart contract, or other token). This allows for new use cases like verifiable attribution, revocable assets, and permanent records. The minimalist design aims for maximum compatibility.</p>\n\n<p>ERC-6454 is currently in Final status, meaning it has been accepted as a standard. Its simplicity and utility make it likely to see widespread adoption for NFT projects wanting to implement transfer restrictions. However, more complex transfer logic may require additional standards built on top of this minimal interface.</p>\n</article>",
  "ERC-6464": "<article><h1>ERC-6464: Multi-operator, per-token ERC-721 approvals</h1>\n\n<p>EIP-6464 was proposed in February 2023 by Cristian Espinoza, Simon Fremaux, David Huber, and Arran Schlosberg to address a security limitation in the original ERC-721 NFT standard. The proposal extends ERC-721 to allow token owners to approve multiple operators to control specific tokens, rather than granting blanket approval for all tokens.</p>\n\n<p>The motivation behind EIP-6464 was to reduce security risks associated with the broad permissions granted by ERC-721's setApprovalForAll() function. This function has been exploited in numerous phishing attacks. By enabling more granular, per-token approvals for multiple operators, EIP-6464 aims to minimize the attack surface and improve overall NFT security.</p>\n\n<p>As of 2023, EIP-6464 is in a \"Stagnant\" status, indicating that development and discussion around the proposal has slowed or stopped. While the proposal offers valuable security improvements, its implementation across the ecosystem would require significant changes to existing NFT contracts and marketplaces. The crypto community continues to explore various approaches to enhance NFT security and functionality.</p>\n</article>",
  "ERC-6492": "<article><h1>ERC-6492: Signature Validation for Predeploy Contracts</h1>\n\n<p>ERC-6492, proposed by Ivo Georgiev and Agustin Aguilar in February 2023, addresses a crucial gap in Ethereum's signature verification process for smart contracts. It extends ERC-1271 to enable signature validation for counterfactual contracts (smart contracts that have not yet been deployed). This proposal is particularly significant for improving the user experience of contract wallets and supporting account abstraction.</p>\n\n<p>The primary motivation behind ERC-6492 was to allow contract wallets to sign messages before their actual deployment, which typically occurs during the first user transaction. This capability is essential for dApps that require signatures for interactions or even just for logging in. By implementing ERC-6492, developers can create a smoother onboarding process for users of contract wallets, eliminating the need for an additional deployment step before the wallet can be used.</p>\n\n<p>As of now, ERC-6492 has reached the \"Final\" status, indicating its acceptance and readiness for implementation. This proposal has been well-received by the Ethereum community, particularly those working on account abstraction and smart contract wallets. Its implementation allows for a more seamless integration of contract wallets with existing dApps and services, potentially accelerating the adoption of more advance",
  "ERC-6506": "<article><h1>ERC-6506: P2P Escrowed Governance Incentives</h1>\n\n<p>ERC-6506 proposes a standardized interface for smart contracts that escrow funds to incentivize specific voting actions in DAOs. Authored by Josh Weintraub in February 2023, this proposal aims to address inefficiencies in existing bribe schemes for governance votes.</p>\n\n<p>The proposal introduces a peer-to-peer model where incentives are locked in escrow until a voter's actions can be verified on-chain. This approach solves issues with pro-rata distribution systems, where large voters can dilute rewards for smaller participants. It also enables private negotiations between incentive providers and voters, potentially leading to more efficient outcomes.</p>\n\n<p>While the proposal generated some discussion, it has not gained significant traction in the Ethereum community. As of 2023, its status remains \"Stagnant\" in the EIP process. Although the concept addresses real issues in DAO governance, alternative solutions or lack of broader interest may have contributed to its current inactive state. Implementation would require careful consideration of potential impacts on governance dynamics and voter behavior.</p></article>",
  "ERC-6538": "<article><h1>ERC-6538: Stealth Meta-Address Registry</h1>\n\n<p>ERC-6538, proposed in January 2023, aims to establish a standardized method for storing and retrieving stealth meta-addresses on Ethereum. This proposal extends ERC-5564, which introduced stealth addresses, by creating a central registry contract. The primary authors include Matt Solomon, Toni Wahrstätter, Ben DiFrancesco, Vitalik Buterin, and Gary Ghayrat.</p>\n\n<p>The proposal allows entities to register their stealth meta-addresses directly or through a third party using EIP-712 or EIP-1271 signatures. Once registered, these meta-addresses can be retrieved by any smart contract or user, enabling the generation of stealth addresses for private asset transfers. This centralized approach simplifies the process of finding and using stealth addresses, potentially increasing their adoption and enhancing privacy on the Ethereum network.</p>\n\n<p>As of its creation, ERC-6538 was in \"Final\" status, indicating it had been thoroughly reviewed and accepted by the community. The proposal builds upon existing standards and addresses a critical need for improved privacy mechanisms in Ethereum transactions. Its implementation could significantly enhance the ecosystem's privacy capabilities, making it an important development for users and developers alike.</p>\n</article>",
  "ERC-6551": "<article><h1>ERC-6551: Non-fungible Token Bound Accounts</h1>\n\n<p>ERC-6551, proposed in February 2023, aims to enable NFTs to own assets and interact with applications by assigning Ethereum accounts to all non-fungible tokens. This proposal was authored by a large group of contributors, including Jayden Windle, Benny Giang, and several others from various blockchain projects.</p>\n\n<p>The motivation behind ERC-6551 is to address the limitation of existing NFT standards, particularly ERC-721, which don't allow NFTs to act as agents or associate with other on-chain assets. By introducing token bound accounts, this proposal seeks to expand the functionality of NFTs without requiring changes to existing smart contracts or infrastructure.</p>\n\n<p>As of the last update, ERC-6551 is in the Review status, indicating it's still under consideration by the Ethereum community. The proposal builds upon several existing standards, including ERC-165, ERC-721, ERC-1167, and ERC-1271. If implemented, it could significantly enhance the utility and interoperability of NFTs within the Ethereum ecosystem.</p>\n</article>",
  "ERC-6596": "<article><h1>ERC-6596: Cultural and Historical Asset Token</h1>\n\n<p>ERC-6596, proposed in February 2023 by a team from Artifact Labs, introduces a metadata extension for NFTs representing cultural and historical assets. The proposal aims to enhance the discoverability, connectivity, and collectability of these significant digital artifacts by providing a comprehensive metadata standard that captures crucial context and provenance.</p>\n\n<p>The need for this standard arose from the limitations of existing NFT metadata in adequately representing the cultural and historical importance of certain assets. This is particularly relevant for institutions like museums that require more detailed and standardized information about digital artifacts. ERC-6596 builds upon ERC-721 and ERC-1155, adding specific fields to capture historical significance, provenance, and other relevant details.</p>\n\n<p>As of now, ERC-6596 is in the Review status, indicating that it is still under consideration by the Ethereum community. If implemented, this standard could significantly improve the representation and management of cultural and historical assets in the blockchain space, potentially facilitating wider adoption by cultural institutions and collectors. However, its final approval and implementation will depend on the outcome of ongoing discussions and potential revisions.</p></article>",
  "ERC-6604": "<article><h1>ERC-6604: Abstract Token Standard</h1>\n\n<p>ERC-6604, proposed by Chris Walker in March 2023, introduces the concept of \"Abstract Tokens\" to the Ethereum ecosystem. This proposal aims to bridge the gap between off-chain and on-chain token operations, enabling zero-cost minting while preserving on-chain composability. The standard allows tokens to exist as off-chain messages that can be \"reified\" (brought on-chain) or \"dereified\" (moved off-chain) as needed.</p>\n\n<p>The primary motivation behind ERC-6604 is to facilitate high-volume token applications by eliminating the initial minting costs. This makes it particularly useful for airdrops, POAPs (Proof of Attendance Protocols), and identity/access credentials. The proposal improves upon existing methods like Merkle tree distributions by offering a more generic and user-friendly approach to token claiming.</p>\n\n<p>Currently, ERC-6604 is in Draft status, indicating that it is still under discussion and development. The proposal builds upon existing token standards like ERC-20, ERC-721, and ERC-1155, ensuring compatibility with these widely-used formats. While the concept shows promise for reducing costs and improving scalability in token-based applications, its adoption and implementation remain to be seen as the Ethereum community continues to evaluate",
  "ERC-6617": "<article><h1>ERC-6617: Bit-Based Permission System</h1>\n\n<p>ERC-6617, proposed by Chiro and Victor Dusart in February 2023, introduces a standard for implementing a bit-based permission and role system in Ethereum smart contracts. The proposal aims to provide a more efficient and flexible way to manage permissions and roles by representing each permission as a single bit within a 256-bit integer (uint256).</p>\n\n<p>The key innovation of this proposal is its use of bitwise operations to define and manage permissions. By utilizing a uint256, the system can support up to 256 distinct permissions and 2^256 possible roles. This approach allows for fine-grained control over permissions and roles while minimizing storage costs and gas usage. The proposal also includes the ability to define the relative importance of permissions based on their bit order.</p>\n\n<p>As of the latest update, ERC-6617 is in the Review stage of the EIP process. The proposal includes a specification for an interface (IEIP6617) that defines events and functions for granting, revoking, and checking permissions. While the proposal offers potential benefits in terms of efficiency and flexibility, its adoption and implementation in real-world projects remain to be seen. Developers interested in permission systems should consider this proposal alongside other established standards when designing their smart contracts.</p>\n</article>",
  "ERC-6662": "<article><h1>ERC-6662: AA Account Metadata For Authentication</h1>\n\n<p>ERC-6662 is a proposed extension to ERC-4337 (Account Abstraction) that aims to improve the user authentication experience for decentralized applications (dApps). Authored by Shu Dong, Zihao Chen, and Peter Chen, this proposal introduces a new <code>IAccountMetadata</code> interface to store authentication data on-chain, enabling a more user-friendly login process.</p>\n\n<p>The motivation behind ERC-6662 is to address the current limitations of wallet-based authentication, where users need to connect their wallet and log in every time they interact with a dApp. By allowing users to store authentication data on-chain through a one-time publishing process, dApps can proactively fetch this information, leading to a more seamless and flexible authentication model.</p>\n\n<p>As of now, ERC-6662 is in Draft status, indicating it is still under discussion and development. The proposal builds upon ERC-4337 and ERC-4804, suggesting a close relationship with existing account abstraction and name resolution standards. While the proposal shows promise in improving user experience, its adoption and implementation will depend on further community review and potential refinements to the specification.</p>\n</article>",
  "ERC-6672": "<article><h1>ERC-6672: Multi-redeemable NFTs</h1>\n\n<p>ERC-6672 is a proposal to extend the ERC-721 Non-Fungible Token (NFT) standard, enabling NFTs to be redeemed multiple times for physical or digital items. Developed by the RE:DREAMER Lab team, this proposal aims to enhance the utility and flexibility of NFTs by allowing them to be used across various campaigns or events.</p>\n\n<p>The proposal introduces new functions to manage redemption scenarios and track redemption status on-chain. This allows NFT holders to demonstrate ownership and eligibility for different rewards or experiences, potentially opening up new avenues for commerce and engagement in the NFT space. The ability to redeem an NFT multiple times adds significant value to the token, as it can be used across different contexts or time periods.</p>\n\n<p>As of now, ERC-6672 has reached \"Final\" status, indicating it has been accepted and is ready for implementation. This proposal builds upon the widely-adopted ERC-721 standard and requires compliance with ERC-165 for interface detection. While it's a relatively recent addition to the Ethereum ecosystem, its potential to expand NFT functionality makes it an interesting development for creators, collectors, and platforms in the blockchain space.</p>\n</article>",
  "ERC-6682": "<article><h1>ERC-6682: NFT Flashloans</h1>\n\n<p>ERC-6682 is a proposed extension to the existing ERC-3156 flashloan standard, specifically designed to support NFT (ERC-721) flashloans. Authored by out.eth, this proposal aims to enable flashloan providers to lend NFTs to contracts, with the condition that the loan is repaid within the same transaction along with a fee.</p>\n\n<p>The motivation behind this proposal stems from the growing importance of NFTs in the Ethereum ecosystem. While ERC-3156 supports flashloans for ERC-20 tokens, the unique properties of NFTs necessitate a separate standard. NFT flashloans could prove useful in scenarios where NFT ownership verification is required, such as claiming airdrops, staking rewards, or performing in-game actions.</p>\n\n<p>Currently in Draft status, ERC-6682 builds upon existing standards (ERC-20, ERC-721, and ERC-3156) to create a minimal interface for NFT flashloans. If implemented, this proposal would significantly expand the utility of NFTs in DeFi applications, potentially opening up new use cases and opportunities in the NFT space.</p></article>",
  "ERC-67": "<article><h1>ERC-67: URI Scheme with Metadata, Value and Bytecode</h1>\n\n<p>ERC-67 was proposed in 2016 by Alex Van de Sande as a way to encode Ethereum transaction data into a URI format. The goal was to enable easy sharing of transaction details via QR codes, links, etc. It was inspired by Bitcoin's BIP-21 URI scheme. The proposal aimed to standardize including recipient addresses, ether amounts, and optional bytecode data in a single URI string.</p>\n\n<p>While ERC-67 saw some initial interest and implementations, it was ultimately superseded by ERC-681 in 2017. ERC-681 expanded on the concepts in ERC-67 to provide a more comprehensive URI format for Ethereum interactions. As a result, ERC-67 was officially withdrawn in favor of ERC-681.</p>\n\n<p>Today, ERC-681 is the recommended standard for Ethereum payment URIs. It offers improved functionality over ERC-67, including support for contract function calls and better alignment with existing web standards. While ERC-67 was an important early proposal, ERC-681 is now the preferred approach for encoding Ethereum transactions in URI format.</p></article>",
  "ERC-6734": "<article><h1>ERC-6734: L2 Token List</h1>\n\n<p>ERC-6734, proposed by Kelvin Fichter, Andreas Freund, and Pavel Sinelnikov in March 2023, aims to standardize token identification across different blockchain layers and sidechains. This proposal addresses the challenge of maintaining consistent token representations when bridging assets between networks, a critical issue for interoperability in the expanding multi-chain ecosystem.</p>\n\n<p>The proposal introduces a JSON-based token list format that enables accurate identification of tokens across Layer 1, Layer 2, and sidechain networks. This standard is particularly important for bridging operations, where tokens from one chain need to be represented correctly on another. By providing a unified approach to token listing, ERC-6734 seeks to reduce confusion and potential errors in cross-chain token transfers and interactions.</p>\n\n<p>Currently, ERC-6734 is in Draft status, indicating ongoing development and discussion within the Ethereum community. The proposal builds upon previous standards like EIP-155 (Chain ID) and ERC-3220 (Token Hierarchy), demonstrating the evolving nature of Ethereum's token ecosystem. As cross-chain interoperability becomes increasingly important, standards like ERC-6734 will likely play a crucial role in shaping the future of multi-chain token management and transactions.</p>\n</article>",
  "ERC-6735": "<article><h1>ERC-6735: L2 Aliasing of EVM-based Addresses</h1>\n\n<p>ERC-6735, proposed by Kelvin Fichter and Andreas Freund in March 2022, aims to standardize address aliasing between different EVM-compatible chains. The proposal outlines requirements for translating addresses across Layer 1, Layer 2, and sidechain networks to improve interoperability.</p>\n\n<p>The motivation behind this ERC stems from the need to simplify cross-chain interactions by allowing deterministic derivation of addresses across networks. This would enable unambiguous addressing of assets and accounts when sending messages between chains, as well as easier verification of cross-chain ownership.</p>\n\n<p>As of now, ERC-6735 remains in Draft status. It was developed through the L2 Working Group of the EEA Community Projects managed by OASIS, indicating significant industry input. While not yet finalized, this proposal represents an important step towards standardizing critical cross-chain functionality as the multi-chain ecosystem continues to evolve.</p>\n</article>",
  "ERC-6785": "<article><h1>ERC-6785: ERC-721 Utilities Information Extension</h1>\n\n<p>ERC-6785 is a proposed extension to the ERC-721 non-fungible token standard that aims to standardize how utility information for NFTs is represented and accessed. It was authored by Otniel Nicola and Bogdan Popa in March 2023 and is currently in Draft status.</p>\n\n<p>The proposal defines new functions and metadata fields to specify an NFT's utility, including the type, description, frequency, duration, and expiration of the utility. This would allow NFT owners to access verified utility information directly from the smart contract or metadata, rather than relying on potentially untrustworthy third-party sources.</p>\n\n<p>While still in the draft stage, ERC-6785 addresses an important gap in NFT standards by formalizing utility information. If implemented, it could improve transparency and accountability around NFT utility claims. However, as a relatively new proposal, it may undergo further refinement before potential adoption.</p>\n</article>",
  "ERC-6786": "<article><h1>ERC-6786: Registry for Royalties Payment for NFTs</h1>\n\n<p>ERC-6786, proposed by Otniel Nicola and Bogdan Popa in March 2023, aims to establish a standardized registry for tracking and facilitating royalty payments for NFTs. The proposal addresses the issue of inconsistent royalty enforcement across different NFT marketplaces, providing a universal method for paying and recording royalties.</p>\n\n<p>The proposal introduces a system that allows anyone to pay royalties for a specific NFT, while also maintaining a public record of the cumulative royalties paid. This approach seeks to incentivize creators by ensuring they can receive royalties regardless of the marketplace where their NFTs are traded. Additionally, the standard provides a mechanism for calculating the total royalties paid to a creator for a particular NFT, which could be useful for categorizing NFTs based on their royalty history.</p>\n\n<p>As of now, ERC-6786 remains in draft status. While it addresses an important issue in the NFT ecosystem, its adoption and implementation across various platforms are yet to be seen. The proposal builds upon existing standards like ERC-165 and ERC-2981, potentially offering a comprehensive solution for royalty management in the NFT space.</p></article>",
  "ERC-6787": "<article><h1>ERC-6787: Order Book DEX with Two Phase Withdrawal</h1>\n\n<p>ERC-6787, proposed in March 2023 by Jessica, Roy, and Jun, outlines a standard interface for order book-based decentralized exchanges (DEXs) on Ethereum. The proposal's key innovation is a two-phase withdrawal system designed to enhance asset security for both users and exchanges. This addresses a critical trust issue in the DEX ecosystem.</p>\n\n<p>The proposal defines functions for depositing, withdrawing, and trading assets on a DEX. It aims to improve upon existing DEX protocols that often struggle with liquidity and price discovery issues. By standardizing the interface for order book-based DEXs, ERC-6787 seeks to foster interoperability and efficiency in the decentralized trading landscape.</p>\n\n<p>As of now, ERC-6787 remains in Draft status. Its implementation could significantly impact the development of Layer 2 DEX solutions. However, given its recent proposal and draft status, it has not yet seen widespread adoption or integration into major DEX platforms. The crypto community continues to discuss and refine the proposal, particularly focusing on its potential to enhance trust and security in decentralized trading environments.</p>\n</article>",
  "ERC-6806": "<article><h1>ERC-6806: ERC-721 Holding Time Tracking</h1>\n\n<p>ERC-6806 is a proposed extension to the ERC-721 Non-Fungible Token (NFT) standard, introducing functionality to track and report the holding time of NFTs. Authored by Saitama, Combo, and Luigi, this proposal aims to address use cases where knowing the duration an NFT has been held by an account is valuable, such as rewarding long-term holders or determining access to exclusive content.</p>\n\n<p>The proposal specifies an interface that adds methods to retrieve holding information for NFTs, including the current holder's address, the time they acquired the token, and the total holding time. This extension would enable more sophisticated tokenomics and loyalty programs within NFT ecosystems. As of its creation in March 2023, the proposal remains in Draft status, indicating it is still under discussion and development within the Ethereum community.</p>\n\n<p>While ERC-6806 offers potential benefits for certain NFT applications, it's important to note that it's not yet widely adopted or implemented. The Ethereum community will need to evaluate its utility and potential impact before considering it for broader implementation. As with many EIPs in the draft stage, it may undergo further refinements or possibly be superseded by alternative proposals addressing similar needs in the future.</p>\n</article>",
  "ERC-6808": "<article><h1>ERC-6808: Fungible Key Bound Token</h1>\n\n<p>ERC-6808 proposes a standard interface for Fungible Key Bound Tokens (FKBTs), a subset of Key Bound Tokens (KBTs). This proposal, authored by Mihai Onila, Nick Zeman, and Narcis Cotaie, aims to enhance the security of fungible tokens by introducing optional security features built directly into the asset.</p>\n\n<p>The core concept of FKBTs is the separation of token ownership and transfer authority. The proposal introduces the idea of \"Key Wallets\" which are responsible for conducting \"Safe Transfers\" and approving token spending. This is achieved through new functions like <code>addBindings</code>, <code>allowTransfer</code>, and <code>allowApproval</code>. These functions allow Key Wallets to grant permission to the \"Holding Wallet\" (which contains the asset) to perform transfers or approvals.</p>\n\n<p>As of the proposal's creation in March 2023, ERC-6808 has reached \"Final\" status, indicating its acceptance by the Ethereum community. This standard builds upon ERC-20, requiring its implementation while adding new security layers. The proposal's adoption could significantly enhance the security of fungible tokens in the Ethereum ecosystem, providing users",
  "ERC-6809": "<article><h1>ERC-6809: Non-Fungible Key Bound Token (NFKBT)</h1>\n\n<p>ERC-6809, proposed by Mihai Onila, Nick Zeman, and Narcis Cotaie in March 2023, introduces the concept of Non-Fungible Key Bound Tokens (NFKBTs). This proposal aims to enhance the security of non-fungible tokens (NFTs) by implementing optional security features directly into the asset.</p>\n\n<p>The core innovation of ERC-6809 is the introduction of \"Key Wallets\" that are responsible for authorizing transfers and approvals of NFKBTs. This creates a separation of responsibilities: the \"Holding Wallet\" contains the asset, while the Key Wallets control its transferability. The proposal introduces new functions such as <code>addBindings</code>, <code>allowTransfer</code>, and <code>allowApproval</code> to facilitate this enhanced security model.</p>\n\n<p>As of its creation, ERC-6809 has been finalized as a Standards Track ERC in the \"Final\" status. It builds upon the widely-adopted ERC-721 standard, potentially offering a more secure alternative for NFT implementations. However, its adoption and real-world usage remain to be seen, as it is a relatively new proposal in",
  "ERC-681": "<article><h1>ERC-681: URL Format for Transaction Requests</h1>\n\n<p>ERC-681, proposed by Daniel A. Nagy in August 2017, standardizes a URL format for representing Ethereum transactions, particularly payment requests in ether and ERC-20 tokens. This proposal aimed to enhance interoperability between Ethereum applications and wallets, similar to how Bitcoin's URI scheme facilitated widespread adoption.</p>\n\n<p>The proposal defines a structure for URLs that can encode transaction details, allowing for seamless interaction between applications and wallets. This standardization enables users to easily initiate transactions by clicking links or scanning QR codes, with their preferred wallet automatically populating transaction parameters. The format supports various transaction types, including simple ether transfers and token transactions.</p>\n\n<p>ERC-681 has been widely adopted and is considered a final standard. It has proven valuable for improving user experience in the Ethereum ecosystem, particularly for mobile and web applications. While the core concept remains relevant, newer proposals like EIP-3085 (Wallet Add Ethereum Chain RPC Method) and EIP-3326 (Wallet Switch Ethereum Chain RPC Method) have built upon it to provide more comprehensive wallet integration capabilities.</p>\n</article>",
  "ERC-6821": "<article><h1>ERC-6821: Support ENS Name for Web3 URL</h1>\n\n<p>ERC-6821 is a proposal to enhance the Web3 URL standard (ERC-4804) by allowing Ethereum Name Service (ENS) names to be used in place of contract addresses. The proposal was authored by Qi Zhou and Qiang Zhu, and is currently in Draft status.</p>\n\n<p>The main purpose of this ERC is to provide a standardized method for resolving ENS names to contract addresses within the context of Web3 URLs. It specifies a process for looking up the appropriate contract address using either a dedicated 'contentcontract' text record or falling back to the standard ENS resolution process.</p>\n\n<p>While this proposal builds upon existing standards like ERC-137 (ENS) and ERC-4804 (Web3 URL), it introduces a new layer of abstraction that could potentially improve user experience by allowing more human-readable identifiers in Web3 interactions. As of now, the proposal is still under discussion and has not been finalized or widely implemented.</p>\n</article>",
  "ERC-6823": "<article><h1>ERC-6823: Token Mapping Slot Retrieval Extension</h1>\n\n<p>EIP-6823, proposed by qdqd in March 2023, aims to enhance off-chain transaction simulations for ERC-20, ERC-721, and ERC-1155 tokens. The proposal introduces a standardized method to retrieve the storage slot of token ownership mappings, allowing for more precise state change tracking without requiring deep knowledge of specific contract implementations.</p>\n\n<p>The motivation behind this proposal stems from the challenges in accurately simulating token transactions off-chain due to variations in storage layouts across different smart contracts. By providing a uniform way to access the critical mapping slots, EIP-6823 would enable more accurate and efficient transaction simulations, benefiting various tools and services in the Ethereum ecosystem.</p>\n\n<p>As of now, EIP-6823 remains in Draft status. While it addresses an important issue in off-chain simulations, its adoption and potential implementation are still under discussion. The proposal's success will likely depend on feedback from the community and its ability to demonstrate significant improvements in simulation accuracy without introducing undue complexity or security risks.</p></article>",
  "ERC-6860": "<article><h1>ERC-6860: Web3 URL to EVM Call Message Translation</h1>\n\n<p>ERC-6860 is a proposed standard for translating HTTP-style Web3 URLs into EVM call messages. It builds upon and updates ERC-4804, which introduced the initial concept. The proposal aims to provide a simple way for Web2 users to directly access Web3 content, particularly on-chain web content like SVG and HTML, without relying on intermediary proxies.</p>\n\n<p>The proposal was authored by Qi Zhou, Chao Pi, Sam Wilson, and Nicolas Deschildre. It specifies how to convert a URI like \"web3://uniswap.eth/\" into an EVM message with the appropriate \"To\" address and calldata. This translation allows for more direct interaction with blockchain data and smart contracts using familiar URL-like syntax.</p>\n\n<p>As of its creation in September 2023, ERC-6860 is in Draft status. It refines the earlier ERC-4804 with minor corrections, clarifications, and modifications. The proposal focuses on read-only (view) functions, leaving potential state-modifying functions for future extensions. If implemented, this standard could significantly enhance the accessibility and interoperability of Web3 content for a broader user base.</p></article>",
  "ERC-6864": "<article><h1>ERC-6864: Upgradable Fungible Token</h1>\n\n<p>ERC-6864, proposed by Jeff Huang in April 2023, aims to create a standardized interface for upgrading or downgrading existing ERC-20 tokens while preserving user balances. This proposal extends the ERC-20 standard to allow smart contracts to interact with upgraded tokens without requiring changes beyond updating the contract address.</p>\n\n<p>The motivation behind ERC-6864 is to address practical needs for token upgrades, such as fixing bugs, adding new features, or adapting to regulatory changes. While proxy patterns using <code>delegatecall</code> offer a solution for upgradability, they have limitations, including the requirement to be implemented from the start and the lack of transparency for users during upgrades.</p>\n\n<p>As of now, ERC-6864 remains in Draft status. Its implementation could provide a more flexible approach to token upgrades compared to existing methods. However, given its recent proposal and draft status, it has not yet seen widespread adoption or integration into major projects. The crypto community continues to discuss and evaluate the proposal's merits and potential implications for token upgradability.</p></article>",
  "ERC-6865": "<article><h1>ERC-6865: On-Chain EIP-712 Visualization</h1>\n\n<p>ERC-6865, proposed by Abderrahmen Hanafi in April 2023, aims to standardize the visualization of EIP-712 structured data across different protocols. The proposal introduces an on-chain view function called <code>visualizeEIP712Message</code> that takes an EIP-712 payload and returns a standardized format emphasizing potential impacts on users' assets. This approach seeks to improve user experience and security by providing consistent, clear information about transactions across various dApps and protocols.</p>\n\n<p>The proposal is motivated by the growing complexity of the web3 ecosystem and the increased risk of phishing scams. While off-chain solutions have been attempted, they proved challenging to maintain due to the rapid evolution of protocols. ERC-6865 addresses this by moving the visualization logic on-chain, allowing for a more sustainable and universally accessible solution. The proposal is currently in Draft status and requires EIP-712 for implementation.</p>\n\n<p>If implemented, ERC-6865 could significantly enhance user safety and understanding in the Ethereum ecosystem. It would provide a standardized way for wallets to display transaction details, reducing the risk of users unknowingly signing malicious transactions. However, as the proposal is still in its early stages, it may undergo further refin",
  "ERC-6900": "<article><h1>ERC-6900: Modular Smart Contract Accounts and Plugins</h1>\n\n<p>ERC-6900 is a significant proposal in the Ethereum ecosystem that aims to standardize smart contract accounts and account plugins. Authored by a team of developers including Adam Egyed, Fangting Liu, and Jay Paik, this proposal builds upon the foundation laid by ERC-4337 (Account Abstraction) and draws inspiration from ERC-2535 (Diamond Standard).</p>\n\n<p>The core idea behind ERC-6900 is to create a modular approach to smart contract account functionality. It divides account features into three categories and implements them in external contracts, defining a standardized execution flow. This modularity allows for greater flexibility and composability in smart contract account design, enabling developers to create more sophisticated and customizable account structures.</p>\n\n<p>As of its creation in April 2023, ERC-6900 remains in Draft status. Its implementation could significantly enhance the capabilities of smart contract accounts, potentially enabling advanced features like session keys and subscriptions. However, as with many proposals in the draft stage, it may undergo further refinement and discussion within the Ethereum community before potential adoption.</p>\n</article>",
  "ERC-6909": "<article><h1>ERC-6909: Minimal Multi-Token Interface</h1>\n\n<p>ERC-6909, proposed in April 2023, aims to provide a simplified alternative to the ERC-1155 Multi-Token Standard. The proposal was authored by a team including JT Riley, Dillon, Sara, Vectorized, and Neodaoist. It seeks to streamline the multi-token interface by removing unnecessary features like callbacks and batching, while implementing a hybrid operator-approval scheme for more granular permissions.</p>\n\n<p>The key motivations behind ERC-6909 are to reduce complexity and improve efficiency. By eliminating the requirement for recipient accounts to implement specific callbacks and removing batch-call functionality from the core specification, the proposal aims to create a more minimalist and focused standard. The hybrid permission system addresses limitations in ERC-1155's single operator scheme, which granted unlimited allowance for all token IDs in a contract.</p>\n\n<p>As of its creation, ERC-6909 is in Draft status. While it aims to maintain backwards compatibility where possible, it intentionally removes certain features to achieve its goal of a minimal interface. The proposal deliberately omits additional features like batch calls and allowance adjustment methods, focusing solely on the core functionalities required for managing multiple tokens under a single contract. This approach allows for a leaner, more efficient implementation while still providing the essential functionality for",
  "ERC-6932": "<article><h1>ERC-6932: Subscription-Based Token</h1>\n\n<p>ERC-6932, proposed in April 2023 by 360 Core and Robin Rajput, introduces a subscription-based extension to the ERC-20 token standard. This proposal aims to streamline recurring payments on the Ethereum blockchain, addressing the growing need for subscription-based business models in the cryptocurrency ecosystem. The proposal adds 'subscribe', 'unsubscribe', and 'renewSubscription' functions to the standard ERC-20 interface, allowing for automatic periodic deductions from user balances.</p>\n\n<p>The motivation behind ERC-6932 stems from the current inefficiencies in managing subscription-based services on Ethereum. Users often have to manually initiate subscription payments, which can be cumbersome and prone to errors. By standardizing the subscription process, this proposal aims to enhance convenience and efficiency for both users and merchants, potentially opening up new possibilities for blockchain-based subscription services.</p>\n\n<p>As of now, ERC-6932 remains in draft status, indicating that it is still under discussion and development. The proposal has generated interest in the Ethereum community, with ongoing discussions on the Ethereum Magicians forum. While it addresses a clear need in the ecosystem, it's important to note that as a draft, it may undergo further changes before potential implementation. Developers and stakeholders",
  "ERC-6944": "<article><h1>ERC-6944: ERC-5219 Resolve Mode</h1>\n\n<p>ERC-6944 is a proposal to enhance the functionality of ERC-4804 by adding support for ERC-5219 contract resource requests. Authored by Gavin John and Qi Zhou, this proposal aims to improve the interoperability between different Ethereum standards for decentralized applications.</p>\n\n<p>The proposal introduces a new <code>resolveMode</code> for ERC-4804, specifically designed to handle ERC-5219 requests. This addition allows contracts implementing ERC-5219 to be seamlessly integrated into the ERC-4804 framework, providing a standardized way to resolve decentralized application resources.</p>\n\n<p>As of its creation in April 2023, ERC-6944 remains in Draft status. While it offers a clear specification for implementation, including a Solidity interface for the <code>IERC5219Resolver</code>, its adoption and potential impact on the Ethereum ecosystem are yet to be fully realized. The proposal's simplicity and focus on improving interoperability between existing standards make it a promising candidate for future implementation.</p></article>",
  "ERC-6956": "<article><h1>ERC-6956: Asset-bound Non-Fungible Tokens</h1>\n\n<p>ERC-6956, proposed by Thomas Bergmueller and Lukas Meyer in April 2023, introduces the concept of Asset-bound Non-Fungible Tokens (NFTs). This proposal aims to bridge the gap between physical or digital assets without signing capabilities and blockchain-based applications by extending the popular ERC-721 standard.</p>\n\n<p>The core idea of ERC-6956 is to create a one-to-one relationship between a uniquely identifiable \"anchor\" on a physical or digital asset and an NFT on the blockchain. This binding is maintained throughout the asset's lifecycle. Operations on these Asset-bound NFTs, such as minting, transferring, or burning, are authorized through attestations provided by trusted oracles. These attestations verify that the user has control over the physical asset, ensuring that the controller of the asset is also the controller of the corresponding NFT.</p>\n\n<p>As of the proposal's creation, ERC-6956 was in the Review status. It introduces new functions like <code>transferAnchor(attestation)</code> that rely on oracle attestations for authorization, differing from traditional NFT operations that typically require cryptographic signatures. This approach could potentially open up new use cases for NFTs, particularly in industries dealing with physical assets or",
  "ERC-6960": "<article><h1>ERC-6960: Dual Layer Token</h1>\n\n<p>ERC-6960, proposed in April 2023, introduces the concept of a Dual Layer Token (DLT) that combines features from ERC-20, ERC-721, and ERC-1155 standards. The proposal was authored by a team including Adam Boudjemaa, Mohamad Hammoud, and others. Its primary innovation is a two-level classification system using 'mainId' for the main asset type and 'subId' for unique attributes or variations.</p>\n\n<p>The DLT standard aims to enhance token management granularity, particularly for representing fractional ownership of Real World Assets (RWAs) such as invoices, stocks, digital collectibles, and real estate. It addresses limitations in existing standards by offering a more organized token ecosystem and simplified tracking within a single contract.</p>\n\n<p>As of now, ERC-6960 remains in Draft status. While it shows promise for complex asset tokenization scenarios, its adoption and implementation are still in early stages. The crypto community continues to discuss its potential benefits and use cases through the Ethereum Magicians forum.</p>\n</article>",
  "ERC-6981": "<article><h1>ERC-6981: Reserved Ownership Accounts</h1>\n\n<p>ERC-6981, proposed by Paul Sullivan, Wilkins Chung, and Kartik Patel of Manifold, introduces a novel system for linking users of external services to claimable Ethereum addresses. This proposal aims to address the security concerns and limitations associated with traditional custodial wallet solutions used by web services.</p>\n\n<p>The core idea of ERC-6981 is to utilize a registry contract that employs the `create2` opcode to generate deterministic addresses for future-deployed smart contract wallets. Users receive a signed message and unique salt from the service, which can later be used to deploy their wallet to the pre-determined address. This approach allows users to receive assets at their designated address without requiring an initial on-chain transaction, effectively solving the \"cold start\" problem for new users.</p>\n\n<p>Currently in Draft status, ERC-6981 builds upon previous standards such as ERC-1167 (Minimal Proxy Contract), ERC-1271 (Standard Signature Validation Method for Contracts), and ERC-6492 (Signature Validation for Predeployed Smart Contracts). If implemented, this proposal could significantly enhance user onboarding experiences in web3 applications while maintaining a high level of security and user autonomy over their assets.</p",
  "ERC-6982": "<article><h1>ERC-6982: Efficient Default Lockable Tokens</h1>\n\n<p>ERC-6982, proposed by Francesco Sullo and Alexe Spataru in May 2023, introduces a gas-efficient approach to implementing lockable ERC-721 tokens. The proposal aims to optimize gas usage by eliminating unnecessary events typically associated with token minting in existing lockable token implementations.</p>\n\n<p>The key innovation of ERC-6982 is the introduction of a <code>DefaultLocked(bool locked)</code> event emitted upon contract deployment, which sets the initial lock status for all tokens. This approach significantly reduces gas costs, especially for use cases where tokens are intended to be permanently locked (e.g., soulbound tokens or non-transferable badges). Individual token lock status changes are handled by <code>Locked(uint256 indexed tokenId, bool locked)</code> events, providing flexibility while maintaining efficiency.</p>\n\n<p>As of the proposal's creation, ERC-6982 has reached \"Final\" status, indicating its acceptance and readiness for implementation. The proposal builds upon the widely adopted ERC-721 standard and addresses a specific need for gas optimization in lockable token scenarios, making it a valuable addition to the Ethereum token ecosystem.</p>\n</article>",
  "ERC-6997": "<article><h1>ERC-6997: ERC-721 with Transaction Validation Step</h1>\n\n<p>ERC-6997, proposed by Eduard López i Fina, introduces a new security layer to the widely-adopted ERC-721 non-fungible token standard. This improvement proposal aims to mitigate the risk of NFT theft by implementing a validation step for transfer and approve calls. The proposal is currently in the Review stage, indicating that it's under active discussion and consideration by the Ethereum community.</p>\n\n<p>The core innovation of ERC-6997 is the introduction of a validation mechanism that locks every transfer or approve operation until it receives explicit validation. This approach addresses a significant vulnerability in the existing NFT ecosystem, where stolen wallet credentials can lead to immediate and irreversible asset loss. By requiring a separate validation step, potentially through a designated validator address, the proposal creates an additional security barrier against unauthorized transfers.</p>\n\n<p>While ERC-6997 offers enhanced security, it also introduces new complexities in terms of user experience and implementation. The proposal's current status suggests that the community is actively evaluating its potential benefits and drawbacks. If implemented, it could significantly reshape NFT security practices, potentially influencing future standards and dApp designs in the Ethereum ecosystem.</p>\n</article>",
  "ERC-7007": "<article><h1>ERC-7007: Verifiable AI-Generated Content Token</h1>\n\n<p>ERC-7007 is a proposed extension to the ERC-721 non-fungible token standard, specifically designed for AI-generated content (AIGC) NFTs. Introduced in May 2023 by a team including Cathie So, Xiaohang Yu, and others, this proposal aims to create a framework for verifiable AIGC tokens using Zero-Knowledge and Optimistic Machine Learning techniques.</p>\n\n<p>The primary motivation behind ERC-7007 is to address the unique requirements of AI-generated content in the NFT space. It introduces new functionalities such as `mint` and `verify` interfaces, a `Mint` event, and optional `Enumerable` and `Updatable` extensions. A key feature is the incorporation of Zero-Knowledge Machine Learning (zkML) and Optimistic Machine Learning (opML) capabilities, enabling on-chain verification of AIGC data correctness.</p>\n\n<p>As of its proposal, ERC-7007 is in the Review status. While it offers innovative solutions for AIGC NFTs, its implementation would depend on further community discussion and potential refinements. The proposal's focus on verifiability and integration with machine learning techniques positions it as a significant potential advancement in the intersection of AI and blockchain technology.</p>",
  "ERC-7015": "<article><h1>ERC-7015: NFT Creator Attribution</h1>\n\n<p>ERC-7015, proposed by indreams (@strollinghome), addresses a critical issue in the NFT space: accurately attributing creators of Non-Fungible Tokens. The proposal, currently in Review status, extends ERC-721 and ERC-1155 standards with a cryptographic mechanism to securely link NFTs to their true creators.</p>\n\n<p>The core innovation of ERC-7015 is a signing process where the NFT creator signs the required parameters for NFT creation, including metadata and other relevant information. This signature is then validated and emitted during the deployment transaction. This approach solves the problem of misattribution that often occurs when a different wallet (such as a smart wallet or the first collector) deploys the NFT contract instead of the creator's wallet.</p>\n\n<p>As of now, ERC-7015 is still under review and has not been widely implemented. However, if adopted, it could significantly improve the accuracy of creator attribution in the NFT ecosystem, benefiting both artists and collectors. The proposal builds upon several existing standards (EIPs 55, 155, 712, 721, and 1155), demonstrating its integration with the broader Ethereum ecosystem.</p>\n</article>",
  "ERC-7053": "<article><h1>ERC-7053: Interoperable Digital Media Indexing</h1>\n\n<p>ERC-7053, proposed by Bofu Chen and Tammy Yang in May 2023, aims to create a universal indexing method for digital media on EVM-compatible blockchains. The proposal addresses the need for better organization and retrieval of media information across multiple smart contracts and chains, enhancing traceability and verification of cross-contract and cross-chain data.</p>\n\n<p>The proposal was motivated by the challenges in existing systems due to the lack of a universal, interoperable identifier for digital media content. This fragmentation leads to difficulties in retrieving metadata, storage information, and provenance of media assets. ERC-7053 seeks to establish a standardized approach to indexing immutable information, facilitating an integrated digital media environment on the blockchain.</p>\n\n<p>As of now, ERC-7053 has reached \"Final\" status, indicating it has been accepted and is ready for implementation. This proposal represents an important step towards improving the management and discoverability of digital media in the blockchain ecosystem, potentially streamlining processes for developers and users alike in the rapidly growing field of blockchain-based digital media.</p></article>",
  "ERC-7066": "<article><h1>ERC-7066: Lockable Extension for ERC-721</h1>\n\n<p>ERC-7066, proposed by Piyush Chittara, StreamNFT, and Srinivas Joshi in May 2023, introduces a locking mechanism for ERC-721 tokens. This extension allows NFT owners to lock their tokens while retaining ownership, addressing liquidity issues in the secondary NFT market without sacrificing utility or incurring transfer risks.</p>\n\n<p>The proposal introduces new functions like <code>lock()</code>, <code>unlock()</code>, and <code>isLocked()</code>, enabling owners or approved addresses to lock tokens and assign a locker address with exclusive unlocking rights. This feature allows NFTs to be used in various applications (e.g., collateral, staking) while preventing unauthorized transfers.</p>\n\n<p>As of now, ERC-7066 has reached \"Final\" status, indicating its readiness for implementation. This proposal addresses a significant gap in the ERC-721 standard, potentially enhancing the functionality and liquidity of NFTs without compromising their core benefits. Its adoption could lead to new use cases and increased flexibility in the NFT ecosystem.</p>\n</article>",
  "ERC-7085": "<article><h1>ERC-7085: NFT Relationship Enhancement</h1>\n\n<p>ERC-7085, proposed by Guang in May 2023, aims to establish a standard for creating relationships and quantifiable attributes between non-fungible tokens (NFTs). This proposal builds upon ERC-721 and ERC-1155 standards, addressing a significant limitation in the current NFT ecosystem.</p>\n\n<p>The primary motivation behind ERC-7085 is to enable more complex NFT ecosystems by allowing users to build a graph of NFTs with defined relationships and attributes. This functionality is particularly useful for creating derivative NFTs or establishing hierarchical structures within token collections. While a similar proposal exists for ERC-721 tokens, ERC-7085 goes further by introducing quantifiable relationships and object attributes.</p>\n\n<p>As of now, ERC-7085 remains in draft status, indicating that it is still under discussion and development. The proposal has generated interest within the Ethereum community, with ongoing discussions taking place on the Ethereum Magicians forum. If implemented, this standard could significantly enhance the versatility and utility of NFTs, opening up new possibilities for creators and developers in the blockchain space.</p></article>",
  "ERC-7087": "<article><h1>ERC-7087: MIME Type for Web3 URL in Auto Mode</h1>\n\n<p>ERC-7087, authored by Qi Zhou and Nicolas Deschildre, is a draft proposal that extends the ERC-6860 web3:// standard. It addresses the need for MIME type indication in smart contracts not specifically designed for web3:// URLs, operating in \"auto mode\". The proposal introduces additional query parameters to enable MIME type return when fetching web3:// URLs in these scenarios.</p>\n\n<p>The motivation behind this proposal stems from the importance of the Content-Type header in web browsers for correct data interpretation and display. While the manual mode of web3:// protocol allows explicit MIME type signaling, the auto mode lacks this capability for contracts not specifically designed for it. ERC-7087 aims to bridge this gap, enhancing the functionality and compatibility of web3:// URLs in various smart contract contexts.</p>\n\n<p>As of its creation on May 28, 2023, ERC-7087 remains in Draft status. It builds upon ERC-6860 and seeks to improve the web3:// standard's versatility, particularly in scenarios where smart contracts may not have been explicitly designed with web3:// compatibility in mind. The proposal's implementation would significantly enhance the interoperability and user experience of decentralized applications leveraging web3:",
  "ERC-7092": "<article><h1>ERC-7092: Financial Bonds</h1>\n\n<p>ERC-7092 is a proposal for standardizing tokenized fixed-income financial bonds on Ethereum. Authored by Samuel Gwlanold Edoumou, it aims to facilitate bond issuance in primary markets and enable trading in secondary markets. The proposal addresses limitations of previous standards like ERC-3475 by introducing familiar bond concepts and named variables to improve developer experience.</p>\n\n<p>Key features of ERC-7092 include representing core bond characteristics like coupon rate, maturity date, and principal amount. It also provides cross-chain functionality to support bond operations across multiple blockchains. The standard builds on ERC-165 for interface detection and introduces new events and functions specific to bond lifecycle management.</p>\n\n<p>As of its creation in May 2023, ERC-7092 has reached \"Final\" status, indicating it has been accepted as an official Ethereum standard. This makes it a viable option for projects looking to issue tokenized bonds on Ethereum and other EVM-compatible chains. The proposal's acceptance reflects the growing interest in bringing traditional financial instruments onto blockchain platforms in a standardized way.</p>\n\n</article>",
  "ERC-7093": "<article><h1>ERC-7093: Social Recovery Interface</h1>\n\n<p>ERC-7093, proposed in May 2023, introduces a standard interface for social recovery of smart contract accounts on Ethereum. This proposal, authored by John Zhang, Davis Xiang, Kyle Xu, and George Zhang, aims to enhance user protection by providing a flexible and customizable recovery mechanism.</p>\n\n<p>The proposal builds upon Vitalik Buterin's advocacy for social recovery as a crucial tool in crypto security. It separates identity and policy verification from the recovery process, allowing for diverse authentication methods beyond just on-chain accounts. This flexibility enables users to customize their recovery policies without altering their account's smart contract, potentially increasing adoption and improving user experience.</p>\n\n<p>As of its creation, ERC-7093 remains in draft status. It requires ERC-1271 (Standard Signature Validation Method for Contracts) and is being discussed within the Ethereum community. The proposal's implementation could significantly impact account security and recovery processes in the Ethereum ecosystem, aligning with the broader goal of making cryptocurrency more accessible and secure for less technical users.</p>\n</article>",
  "ERC-7144": "<article><h1>ERC-7144: ERC-20 with Transaction Validation Step</h1>\n\n<p>ERC-7144, proposed by Eduard López i Fina, introduces a new security layer to the widely-used ERC-20 token standard. This improvement proposal aims to mitigate the risk of token theft by implementing a validation step for transfer and approve functions. The proposal is currently in the Review stage, indicating it's under active consideration by the Ethereum community.</p>\n\n<p>The core innovation of ERC-7144 is the introduction of a validation mechanism that locks transfer and approve operations until they are explicitly validated. This addresses a significant vulnerability in the current ERC-20 standard, where stolen private keys can lead to immediate and irreversible token theft. By requiring an additional validation step, ERC-7144 provides smart contract developers with the tools to implement more robust anti-theft measures, such as a separate validator address or a time-delay system.</p>\n\n<p>While ERC-7144 offers enhanced security, it's important to note that it's still in the review phase and hasn't been widely adopted or implemented. The proposal's success will depend on community feedback, potential refinements, and ultimately, its ability to balance increased security with user convenience. As of now, it represents a promising direction for improving token security, but further discussion and development are needed before it could be considered for widespread implementation.</",
  "ERC-7160": "<article><h1>ERC-7160: ERC-721 Multi-Metadata Extension</h1>\n\n<p>ERC-7160, proposed by 0xG and Marco Peyfuss in June 2023, extends the ERC-721 standard to support multiple metadata URIs per token. This improvement addresses limitations of the original ERC-721 standard, which only allows for a single metadata URI per token. The proposal introduces a new interface, IERC721MultiMetadata, providing methods to access multiple metadata URIs associated with a token, including a pinned URI index.</p>\n\n<p>The motivation behind this proposal stems from various use cases where multiple metadata URIs are beneficial, such as representing collections of cycling assets, maintaining an on-chain history of metadata revisions, and supporting dynamic or collaborative tokens. By enabling multi-metadata support, ERC-7160 opens up new possibilities for NFT creators and developers to create more versatile and feature-rich token implementations.</p>\n\n<p>As of now, ERC-7160 has reached \"Final\" status, indicating it has been thoroughly reviewed and accepted by the Ethereum community. The proposal is designed to be backward compatible with existing ERC721Metadata implementations, ensuring seamless integration with current NFT ecosystems. This extension significantly enhances the flexibility and functionality of ERC-721 tokens, potentially leading to more innovative and diverse NFT applications in the future",
  "ERC-7196": "<article><h1>ERC-7196: Simple Token, Simplified ERC-20</h1>\n\n<p>ERC-7196, proposed by Xiang, Ben77, and Mingshi S., aims to simplify the ERC-20 token standard by removing the <code>transferFrom</code>, <code>approve</code>, and <code>allowance</code> functions. This proposal is designed with smart contract wallets and account abstraction in mind, focusing on streamlining token functionality.</p>\n\n<p>The motivation behind ERC-7196 is to create a simpler token asset that aligns with the capabilities of smart contract wallets. Unlike externally-owned accounts (EOAs), smart contract wallets can store state and execute code, potentially handling complex operations internally. By removing certain functions from the token contract itself, ERC-7196 aims to reduce complexity and improve efficiency.</p>\n\n<p>Currently, ERC-7196 is in Draft status, indicating it is still under discussion and development. The proposal's forward compatibility with ERC-20 suggests that existing infrastructure could potentially support these simplified tokens with minimal adjustments. However, its adoption and implementation would depend on further community feedback and consensus within the Ethereum ecosystem.</p></article>",
  "ERC-7201": "<article><h1>ERC-7201: Namespaced Storage Layout</h1>\n\n<p>ERC-7201, proposed by Francisco Giordano, Hadrien Croubois, Ernesto García, and Eric Lau, introduces a standardized approach to namespaced storage layout in Ethereum smart contracts. This proposal addresses challenges in modular contract design and upgradeable contracts by defining a convention for storage namespaces and their locations.</p>\n\n<p>The core of ERC-7201 is the introduction of the `@custom:storage-location` NatSpec annotation, which allows developers to document storage namespaces in Solidity or Vyper code. Additionally, it provides a formula to derive storage locations from arbitrary identifiers, ensuring collision-free storage layouts when used alongside standard Solidity and Vyper storage patterns.</p>\n\n<p>As of its creation in June 2023, ERC-7201 has reached \"Final\" status, indicating its readiness for implementation. This proposal is particularly valuable for complex smart contract architectures, especially those involving delegate calls or upgradeable contracts, as it offers a structured way to manage shared storage space and facilitate easier contract upgrades.</p></article>",
  "ERC-7204": "<article><h1>ERC-7204: Contract Wallet Management Token</h1>\n\n<p>ERC-7204, proposed by Xiang, Ben77, and Mingshi S. in June 2023, introduces a novel approach to token management within smart contract wallets. This proposal aims to leverage the programmable features of smart contract wallets to enhance asset management and transaction flexibility. By introducing functions like <code>tokenTransfer</code>, <code>tokenApprove</code>, and <code>tokenAllowance</code>, ERC-7204 seeks to provide users with greater control and security over their token transactions.</p>\n\n<p>The motivation behind this proposal stems from the limitations of externally-owned account (EOA) wallets, which lack state and code storage capabilities. In contrast, smart contract wallets offer these features, aligning with the direction of account abstraction (AA) as explored in ERC-4337. ERC-7204 can be seen as an extension or plugin for wallets, potentially building upon the foundations laid by ERC-4337.</p>\n\n<p>As of now, ERC-7204 remains in Draft status, indicating that it is still under discussion and development. The Ethereum community continues to evaluate its potential benefits and implications through the Ethereum Magicians forum. If implemented, this proposal could significantly enhance the functionality and security of token management within smart contract wal",
  "ERC-7208": "<article><h1>ERC-7208: On-Chain Data Container</h1>\n\n<p>ERC-7208, proposed in June 2023, introduces the concept of \"On-chain Data Containers\" (ODCs) to improve efficiency and modularity in Ethereum smart contracts. This proposal, authored by Rachid Ajaja, Alexandros Athanasopulos, Pavel Rubin, and Sebastian Galimberti Romano, aims to separate data storage from logic implementation in smart contracts.</p>\n\n<p>The key innovation of ERC-7208 is the introduction of three main components: Data Objects (DOs) for storing data, Data Managers (DMs) for accessing and modifying data, and compatibility Registries for enabling data portability between different implementations. This separation of concerns allows for more flexible and upgradeable smart contract systems, potentially addressing the growing complexity of on-chain functionalities.</p>\n\n<p>As of now, ERC-7208 remains in Draft status, indicating it is still under discussion and development. The proposal's motivation stems from the increasing demand for more efficient and complex on-chain systems as the Ethereum ecosystem expands. While it shows promise in improving smart contract architecture, its adoption and implementation across the ecosystem are yet to be seen.</p>\n</article>",
  "ERC-721": "<article><h1>ERC-721: Non-Fungible Token Standard</h1>\n\n<p>ERC-721, proposed in January 2018 by William Entriken, Dieter Shirley, Jacob Evans, and Nastassia Sachs, introduced a standard interface for non-fungible tokens (NFTs) on the Ethereum blockchain. This proposal defined a set of functions allowing for the implementation, tracking, and transfer of unique digital assets, addressing the need for a standardized approach to represent ownership of distinct items.</p>\n\n<p>The proposal gained rapid adoption within the Ethereum ecosystem, becoming the foundation for numerous NFT projects, including the popular CryptoKitties game. ERC-721 enabled the creation of diverse digital assets, from virtual collectibles to representations of physical property, and even \"negative value\" assets like loans. Its flexibility and ease of implementation contributed to the explosive growth of the NFT market in subsequent years.</p>\n\n<p>Currently, ERC-721 maintains its \"Final\" status and remains widely used. However, newer standards like ERC-1155 have emerged to address some limitations, offering multi-token support and improved efficiency. While ERC-721 continues to be relevant for many use cases, developers often consider these newer standards for more complex NFT implementations.</p></article>",
  "ERC-7231": "<article><h1>ERC-7231: Identity-aggregated NFT</h1>\n\n<p>ERC-7231 is a proposal to extend the ERC-721 NFT standard by allowing Web2 and Web3 identities to be bound to NFTs and soulbound tokens. It was authored by Chloe Gu, Navid X., Victor Yu, and Archer H. and reached Final status in 2023.</p>\n\n<p>The key innovation is adding a custom schema in the NFT metadata to aggregate identity information from multiple sources. This allows for composable, verifiable identity data to be associated with NFTs. Use cases include self-authentication, analyzing social overlaps, and targeted commercial offerings.</p> \n\n<p>While services like ENS provide decentralized identity, ERC-7231 aims to offer more flexible and comprehensive identity aggregation for NFTs. The proposal is considered final, suggesting it is ready for implementation. However, its recency means widespread adoption is still to be determined. Overall, it represents an interesting approach to enhancing NFT utility through richer identity data.</p></article>",
  "ERC-7246": "<article><h1>ERC-7246: Encumber - Splitting Ownership & Guarantees</h1>\n\n<p>ERC-7246, proposed in June 2023 by Coburn Berry, Mykel Pereira, and Scott Silver, introduces the concept of \"Encumber\" as an extension to the ERC-20 token standard. This proposal aims to allow token holders to pledge their tokens without transferring ownership, providing a more flexible approach to token locking and guarantees.</p>\n\n<p>The primary motivation behind ERC-7246 is to address scenarios where token locking is required, but maintaining actual ownership is preferable. It offers a stronger version of ERC-20 allowances, granting another account exclusive rights to move a portion of the token balance while ensuring the tokens remain available when needed. This approach can be particularly useful in DeFi applications, collateralization, and other use cases where temporary token pledges are common.</p>\n\n<p>As of now, ERC-7246 remains in Draft status, indicating it is still under discussion and development. The proposal has generated interest in the Ethereum community, with ongoing discussions on Ethereum Magicians forum. If implemented, this standard could significantly enhance the functionality of ERC-20 tokens and potentially be adapted for other token standards like ERC-721, offering more flexibility in token management across various blockchain applications.</p>\n</",
  "ERC-725": "<article><h1>ERC-725: A Key Standard for Smart Contract Accounts</h1>\n\n<p>ERC-725, proposed by Fabian Vogelsteller and Tyler Yasaka in 2017, is a significant Ethereum Improvement Proposal that aims to standardize smart contract accounts. It consists of two sub-standards: ERC-725X for generic execution and ERC-725Y for key-value data storage. This proposal addresses the need for a flexible yet standardized account system in the Ethereum ecosystem.</p>\n\n<p>The standard has seen considerable development and adoption since its inception. It has been implemented in various projects, including the Lukso network, and has influenced other account abstraction proposals. ERC-725 has evolved to become a crucial building block for creating upgradable and extensible smart contract accounts, with potential applications beyond just account management.</p>\n\n<p>As of now, ERC-725 remains in Draft status, indicating ongoing development and discussions. While it has not been fully standardized, its concepts have been widely adopted and continue to shape the development of smart contract accounts in Ethereum and other blockchain platforms. The proposal's flexibility and extensibility make it a relevant and valuable standard for current and future blockchain applications.</p></article>",
  "ERC-7254": "<article><h1>ERC-7254: Token Revenue Sharing</h1>\n\n<p>ERC-7254 proposes a standard for revenue sharing tokens on Ethereum. Authored by Quy Phan in June 2023, it aims to allow ERC-20 tokens to automatically distribute rewards to holders without requiring staking or farming. The proposal is currently in Draft status.</p>\n\n<p>The key innovation is enabling projects to easily share profits or dividends with token holders. It extends ERC-20 with methods for updating and withdrawing rewards. Potential use cases include company dividend distribution and revenue sharing from business activities like marketplaces and games.</p>\n\n<p>While still early in development, ERC-7254 presents an interesting model for value accrual to token holders. However, its draft status means further refinement and community discussion is likely needed before potential implementation. The proposal demonstrates ongoing efforts to expand token utility and align incentives between projects and token holders in the Ethereum ecosystem.</p>\n\n</article>",
  "ERC-7272": "<article><h1>ERC-7272: Ethereum Access Token</h1>\n\n<p>ERC-7272, proposed by Chris Chung and Raphael Roullet in July 2023, introduces the concept of Ethereum Access Tokens (EATs). These tokens are designed to provide a standardized method for authorizing function calls from off-chain services to on-chain resources. EATs are EIP-712 conformant signed messages, similar in purpose to JSON Web Tokens (JWTs) but specifically tailored for on-chain verification and smart contract function authorization.</p>\n\n<p>The proposal aims to address the need for a flexible and lightweight authorization mechanism in the Ethereum ecosystem. It allows developers to implement access control for smart contract functions with minimal modifications, making it particularly useful for scenarios where users need authorization from an off-chain service before interacting with on-chain resources. Examples include verifying eligibility for token minting or ensuring compliance status for contract interactions.</p>\n\n<p>As of the latest update, ERC-7272 remains in Draft status. While it shows promise in enhancing authorization mechanisms for Ethereum-based applications, its full implementation and adoption are still pending. The proposal builds upon the foundation laid by EIP-712 for structured data hashing and signing, extending its utility to access control scenarios. Developers and the Ethereum community continue to discuss and refine the proposal through the",
  "ERC-7291": "<article><h1>ERC-7291: Purpose Bound Money</h1>\n\n<p>ERC-7291, proposed in June 2023, introduces the concept of Purpose Bound Money (PBM) as an extension of the ERC-1155 standard. Authored by a team including Orchid-Dev, Victor Liew, and others, this proposal aims to create a hybrid form of programmable payment and money. PBM combines a wrapper contract with a digital money token (e.g., stablecoins or CBDCs) to create a bearer instrument with self-contained programming logic.</p>\n\n<p>The key innovation of PBM is its ability to embed usage rules directly into the medium of exchange, allowing for automatic execution of payments when predefined conditions are met. This approach bridges the gap between programmable payments and programmable money, potentially enabling more efficient and targeted financial transactions. The proposal is currently in Draft status, indicating ongoing development and discussion within the Ethereum community.</p>\n\n<p>While ERC-7291 presents an interesting concept for enhancing the functionality of digital currencies, its implementation and adoption remain to be seen. As of now, it's too early to determine if this proposal should be widely implemented or if it will be superseded by other developments in the rapidly evolving field of cryptocurrency and decentralized finance.</p>\n</article>",
  "ERC-7303": "<article><h1>ERC-7303: Token-Controlled Token Circulation</h1>\n\n<p>ERC-7303, proposed by Ko Fujimura in July 2023, introduces Token-Controlled Token Circulation (TCTC) as an access control scheme for Ethereum smart contracts. This proposal aims to represent role privileges as ERC-721 or ERC-1155 tokens, enabling role management through minting and burning of these \"control tokens\". The primary motivation is to simplify role-based access control and improve user understanding of their privileges through wallet interfaces.</p>\n\n<p>This ERC builds upon existing standards like ERC-721 (Non-Fungible Tokens), ERC-1155 (Multi Token Standard), and ERC-5679 (Token Minting and Burning). It addresses limitations in current role-based access control methods, such as those outlined in ERC-5982, which often require off-chain management tools and lack clear privilege visibility in user wallets. ERC-7303 proposes a more intuitive and on-chain approach to managing access rights.</p>\n\n<p>As of its proposal, ERC-7303 remains in Draft status. Its potential applications span various scenarios where role-based access control is utilized, including managing mint/burn permissions for token circulation and controlling access to privileged functions in decentralized applications. The proposal is still",
  "ERC-7390": "<article><h1>ERC-7390: Vanilla Options for ERC-20 Tokens</h1>\n\n<p>ERC-7390 is a proposed standard for implementing vanilla options for ERC-20 tokens on the Ethereum blockchain. Authored by Ewan Humbert and Lassi Maksimainen, this proposal aims to create a standardized interface for creating, managing, and executing simple time-limited call/put options. The proposal is currently in Draft status and was created on September 2, 2022.</p>\n\n<p>The standard introduces a comprehensive set of functions and events to facilitate seamless interactions with vanilla options. These options grant the right, but not the obligation, to buy or sell an asset at a predetermined price within a specified timeframe. Unlike simple options that become useless after expiration, ERC-7390 allows for multiple issuances, each identified by a unique ID and managed independently. The proposal requires options to be fully collateralized, ensuring that the writer provides the necessary collateral before a buyer can purchase the option.</p>\n\n<p>ERC-7390 builds upon existing standards like ERC-20 and ERC-1155, leveraging their functionality for token representation and management. The proposal is still under discussion in the Ethereum community, with ongoing debates about its implementation and potential impact on the DeFi ecosystem. As of now, it remains in Draft status",
  "ERC-7399": "<article><h1>ERC-7399: Flash Loans</h1>\n\n<p>ERC-7399 is a proposed Ethereum standard that aims to standardize flash loans, a powerful DeFi primitive. Introduced in July 2023 by a team of developers including Alberto Cuesta Cañada and Michael Amadi, this proposal seeks to address the fragmentation in the flash loan ecosystem by providing a common interface for lenders and borrowers.</p>\n\n<p>Flash loans, which allow users to borrow assets without collateral as long as they are repaid within the same transaction, have been a key feature in DeFi since their introduction by Aave in 2020. However, the lack of standardization has led to inconsistencies in implementation across different platforms. ERC-7399 proposes a unified approach to flash loans, specifying interfaces for lenders to accept loan requests and for borrowers to temporarily control transaction execution.</p>\n\n<p>As of early 2024, ERC-7399 remains in draft status. If implemented, it could significantly simplify the integration of flash loans across various DeFi protocols, potentially leading to increased interoperability and innovation in the space. However, the proposal is still under discussion in the Ethereum community, and its final form and adoption remain to be seen.</p></article>",
  "ERC-7401": "<article><h1>ERC-7401: Parent-Governed Non-Fungible Tokens Nesting</h1>\n\n<p>ERC-7401, introduced in July 2023, is a significant improvement proposal for Ethereum that extends the ERC-721 standard to enable NFT nesting. This proposal, authored by a team including Bruno Škvorc and Cicada, allows NFTs to own other NFTs, creating a parent-child relationship between tokens. It supersedes the earlier ERC-6059, refining the concept of nested NFTs with a focus on parent token control.</p>\n\n<p>The core innovation of ERC-7401 is the ability for an NFT to be owned by another NFT, rather than just by an Externally Owned Account (EOA) or smart contract. This creates a hierarchical structure where a parent NFT can own multiple child NFTs, while each child can only have one parent. The nesting process is designed to be functionally similar to transferring an NFT to another user, maintaining familiarity for developers and users alike.</p>\n\n<p>As of its creation, ERC-7401 has been finalized, indicating broad acceptance within the Ethereum community. This standard opens up new possibilities for complex NFT ecosystems, potentially revolutionizing how digital assets are structured and managed in areas such as gaming, digital art, and decentralized finance",
  "ERC-7405": "<article><h1>ERC-7405: Portable Smart Contract Accounts</h1>\n\n<p>ERC-7405, proposed by Aaron Yee in July 2023, addresses a critical issue in the Ethereum ecosystem: the lack of portability for Smart Contract Accounts (SCAs) across different wallet providers. This proposal builds upon the foundation laid by ERC-1967 (Proxy Storage Slots) and aims to create a system for Portable Smart Contract Accounts (PSCA).</p>\n\n<p>The main motivation behind ERC-7405 is to enhance interoperability within the Account Abstraction (AA) ecosystem. With the widespread adoption of ERC-4337 (Account Abstraction) standard, SCAs have become increasingly popular. However, unlike Externally Owned Accounts (EOAs), SCAs lack a standardized method for migration between wallets. ERC-7405 proposes a solution that allows users to migrate their SCAs between different wallet providers using randomly generated migration keys, similar to exporting an EOA with a private key or mnemonic.</p>\n\n<p>As of its proposal, ERC-7405 is in Draft status. It introduces a non-intrusive and cost-effective approach to SCA portability, incorporating security measures such as signatures and time locks to prevent potential malicious actions during migration. If implemented, this standard could significantly improve the user",
  "ERC-7406": "<article><h1>ERC-7406: Multi-Namespace Onchain Registry</h1>\n\n<p>ERC-7406, proposed by Mengshi Zhang and Zihao Chen in July 2023, introduces a multi-namespace onchain registry for Ethereum. This proposal aims to create a more flexible and powerful alternative to existing registry systems like ENS, supporting complex mapping structures and multiple namespaces.</p>\n\n<p>The key innovation of ERC-7406 is its ability to store collections of key-value mappings directly on the blockchain, providing a definitive source of information with a traceable history. This approach allows for more versatile use cases by enabling the storage of extensive details associated with onchain assets. The proposal builds upon ERC-137 (ENS) but expands its capabilities significantly.</p>\n\n<p>Currently, ERC-7406 is in Draft status, indicating it's still under discussion and development. The Ethereum community is evaluating its potential impact and implementation details through the Ethereum Magicians forum. If adopted, this proposal could significantly enhance the functionality of onchain registries, potentially becoming a cornerstone for more complex decentralized applications in the future.</p>\n</article>",
  "ERC-7409": "<article><h1>ERC-7409: Public Non-Fungible Tokens Emote Repository</h1>\n\n<p>ERC-7409, proposed in July 2023, introduces a standardized way for users to react to NFTs using Unicode emojis. This proposal builds upon and supersedes ERC-6381, aiming to enhance the interactivity of ERC-721 and ERC-1155 tokens. The authors, including Bruno Škvorc and Steven Pineda, designed this standard to create a public, non-gated repository smart contract accessible across all networks.</p>\n\n<p>The primary motivation behind ERC-7409 is to add an interactive layer to NFT ownership, enabling feedback-based NFT mechanics. This standard opens up new possibilities for NFT interactivity, potential evolution based on user reactions, and even valuation metrics. By allowing anyone to emote at NFTs, it introduces a novel dimension of engagement within the NFT ecosystem.</p>\n\n<p>As of its proposal, ERC-7409 has been marked with a \"Final\" status, indicating it has been accepted and is ready for implementation. This standard represents a significant step towards more dynamic and interactive NFTs, potentially reshaping how users engage with digital assets on the Ethereum blockchain.</p>\n</article>",
  "ERC-7410": "<article><h1>ERC-7410: ERC-20 Update Allowance By Spender</h1>\n\n<p>ERC-7410, proposed in July 2023, introduces a crucial security enhancement for ERC-20 tokens by allowing spenders to decrease or revoke their own allowances. This proposal addresses a significant limitation in the current ERC-20 standard, where only token owners can modify allowances, potentially causing issues for treasury or multi-signature wallets that have granted excessive permissions.</p>\n\n<p>The key feature of ERC-7410 is the introduction of a <code>decreaseAllowanceBySpender</code> function, which enables spenders to reduce their own allowances without requiring action from the token owner. This improvement offers an additional layer of security against potential hacks and simplifies allowance management for complex wallet structures.</p>\n\n<p>As of its proposal, ERC-7410 is in Draft status. It was authored by Mohammad Zakeri Rad, Adam Boudjemaa, and Mohamad Hammoud, with ongoing discussions in the Ethereum community. While not yet implemented, this proposal represents a significant step towards enhancing the flexibility and security of ERC-20 token interactions, particularly for decentralized finance (DeFi) applications and large-scale token management systems.</p>\n</article>",
  "ERC-7412": "<article><h1>ERC-7412: On-Demand Off-Chain Data Retrieval</h1>\n\n<p>ERC-7412, proposed by Noah Litvin and db in July 2023, aims to address the challenge of efficiently retrieving off-chain data for smart contracts, particularly in the context of Ethereum's multi-layer scaling ecosystem. The proposal introduces a standardized method for contracts to request off-chain data during execution, allowing for more flexible and cost-effective oracle data integration.</p>\n\n<p>The primary motivation behind this proposal is the growing need for cross-chain data access as Ethereum scales through various Layer 2 and Layer 3 solutions. Traditional methods of continuously pushing oracle data to multiple networks have become increasingly impractical and expensive. ERC-7412 proposes an on-demand approach, where contracts can request specific off-chain data only when needed, potentially reducing costs and improving efficiency.</p>\n\n<p>As of now, ERC-7412 is still in Draft status, indicating that it is under active discussion and development within the Ethereum community. The proposal has garnered significant interest due to its potential to streamline oracle data retrieval across multiple execution contexts. However, it's important to note that as a draft, the specifics of the implementation may evolve based on community feedback and further refinement before potential adoption.</p>\n</article>",
  "ERC-7417": "<article><h1>ERC-7417: Token Converter</h1>\n\n<p>ERC-7417, proposed by Dexaran (@Dexaran) in July 2023, introduces a smart contract service to convert tokens between different ERC standards, specifically ERC-20 and ERC-223. The proposal aims to enhance cross-standard interoperability and provide a seamless upgrade path for tokens while maintaining backward compatibility.</p>\n\n<p>The motivation behind this proposal stems from the risks associated with upgrading ERC-20 contracts, where finding the new address can be problematic. ERC-7417 seeks to mitigate these risks by creating a standardized conversion service. Users can send tokens of one standard to the Converter contract and automatically receive tokens of another standard in return.</p>\n\n<p>As of now, ERC-7417 is in Draft status and requires further discussion and development. The proposal builds upon existing standards ERC-20, ERC-165, and ERC-223, highlighting the evolving nature of token standards in the Ethereum ecosystem. While it addresses an important issue in token upgrades and interoperability, its implementation and adoption would depend on further community review and potential refinements to the specification.</p></article>",
  "ERC-7425": "<article><h1>ERC-7425: Tokenized Reserve</h1>\n\n<p>ERC-7425, titled \"Tokenized Reserve,\" is a draft proposal authored by Jimmy Debe. It aims to create a standard for a transparent on-chain reserve fund with stakeholder participation. The proposal builds upon existing standards ERC-20 and ERC-4626 to provide a mechanism for stakeholders to audit and show support for actions within a smart contract.</p>\n\n<p>The main motivation behind ERC-7425 is to enhance transparency and stakeholder involvement in tokenized vaults. As tokenization gains popularity, this standard would allow applications to implement on-chain reserves where all parties can track performance and participate in governance. The proposal extends the functionality of ERC-4626 tokenized vaults, enabling stakeholders to deposit and withdraw from the vault to represent their involvement.</p>\n\n<p>Currently, ERC-7425 is in draft status and undergoing discussions in the Ethereum community. While it shows promise in improving transparency and stakeholder engagement in tokenized reserves, it's too early to determine if it should be implemented as-is or if modifications will be required. The proposal's fate will depend on community feedback and potential revisions during the standardization process.</p></article>",
  "ERC-7432": "<article><h1>ERC-7432: Non-Fungible Token Roles</h1>\n\n<p>ERC-7432, proposed by Ernani São Thiago and Daniel Lima in July 2023, introduces a standard for role management in Non-Fungible Tokens (NFTs). This proposal aims to enable NFT owners to share the utility of their tokens with other accounts through expirable role assignments, without transferring ownership.</p>\n\n<p>The key feature of ERC-7432 is the ability to assign roles to specific NFTs, with each role having an expiration timestamp and a customizable data field. This allows for flexible and granular access control, enabling use cases such as temporary property management rights in digital real estate or time-limited access to exclusive content.</p>\n\n<p>As of now, ERC-7432 is in the Review stage, indicating that it has gained some traction in the Ethereum community but has not yet been finalized or widely implemented. The proposal builds upon existing standards ERC-165 and ERC-721, ensuring compatibility with the broader NFT ecosystem while introducing new functionality for role-based utility sharing.</p></article>",
  "ERC-7439": "<article><h1>ERC-7439: Prevent Ticket Touting</h1>\n\n<p>ERC-7439, proposed by the LeadBest Consulting Group, aims to address the persistent issue of ticket scalping in the event industry. This Ethereum Improvement Proposal (EIP) extends the ERC-721 non-fungible token standard to create a framework for preventing unauthorized ticket resales and enabling secure, authorized reselling through designated channels.</p>\n\n<p>The proposal introduces new functions that allow event organizers and ticketing agents to implement anti-scalping measures directly within the smart contract. These include mechanisms for setting price caps on resales, designating authorized resellers, and enabling ticket transfers only through approved methods. By leveraging blockchain technology, ERC-7439 seeks to provide a transparent and enforceable solution to a problem that has long plagued the entertainment industry.</p>\n\n<p>As of its finalization, ERC-7439 has been well-received by the Ethereum community for its potential to protect consumers and artists alike. While it's a significant step towards curbing ticket touting, its effectiveness will ultimately depend on widespread adoption by event organizers and ticketing platforms. The proposal's authors, including Sandy Sung and Mars Peng, have actively engaged with the community through Ethereum Magicians to refine and clarify the standard's implementation details.</p></article>",
  "ERC-7444": "<article><h1>ERC-7444: Time Locks Maturity</h1>\n\n<p>ERC-7444 is a proposed Ethereum Improvement Proposal (EIP) that aims to standardize how time-locked systems communicate their unlock dates. Authored by Thanh Trinh, Joshua Weintraub, and Rob Montgomery from Revest Finance, this proposal addresses the lack of a uniform method for determining when time-locked assets become available.</p>\n\n<p>The primary motivation behind ERC-7444 is to improve the valuation of time-locked assets, which experience theta-decay as they approach their maturity date. By providing a standard interface for conveying unlock dates, the proposal would enable more accurate on-chain valuations of illiquid assets, particularly when ownership rights are transferred through semi-liquid tokens like ERC-721 or ERC-1155.</p>\n\n<p>As of its creation in June 2023, ERC-7444 remains in draft status. The proposal is still under discussion in the Ethereum community, with ongoing conversations about its potential implementation and impact on the ecosystem. If adopted, this standard could significantly enhance the interoperability and valuation of time-locked assets across various DeFi protocols and applications.</p>\n</article>",
  "ERC-7484": "<article><h1>ERC-7484: Registry Extension for ERC-7579</h1>\n\n<p>ERC-7484, proposed by Konrad Kopp and zeroknots in August 2023, aims to enhance the security of modular smart accounts by standardizing Module Registries and Registry Adapters. This proposal builds upon ERC-7579, which standardizes modular implementation of contract accounts, and addresses potential security vulnerabilities introduced by third-party modules.</p>\n\n<p>The proposal introduces two key components: Module Registries, which store security attestations for modules, and Registry Adapters, which allow smart accounts to query these attestations before using a module. By standardizing these components, ERC-7484 seeks to create a more secure ecosystem for modular smart accounts, enabling developers to build and integrate modules with greater confidence.</p>\n\n<p>As of its creation, ERC-7484 is in Draft status. It represents an important step in the evolution of smart account security, particularly in the context of ERC-4337 and ERC-7579. While it's too early to determine if this proposal will be widely adopted, it addresses a critical need in the growing field of modular smart accounts and could potentially become an essential standard for ensuring the safety of these systems.</p></article>",
  "ERC-7496": "<article><h1>ERC-7496: NFT Dynamic Traits</h1>\n\n<p>ERC-7496, titled \"NFT Dynamic Traits,\" is a proposed Ethereum Improvement Proposal that aims to extend the functionality of ERC-721 and ERC-1155 non-fungible token standards. Authored by a team including Adam Montgomery, Ryan Ghods, and others, this proposal introduces methods for setting and getting dynamic onchain traits associated with NFTs. The primary purpose is to enable the representation of changeable properties, characteristics, or attributes directly on the blockchain, allowing for more complex and interactive NFT use cases.</p>\n\n<p>The motivation behind ERC-7496 stems from the limitations of storing NFT trait values offchain. By bringing these traits onchain, the proposal opens up new possibilities for smart contract interactions, such as redeeming onchain entitlements or conducting transactions based on a token's current traits. This enhancement could significantly impact areas like gaming, digital collectibles, and decentralized finance, where dynamic NFT properties could be crucial.</p>\n\n<p>As of its creation in July 2023, ERC-7496 remains in Draft status. The proposal is still under discussion in the Ethereum community, with ongoing debates about its implementation and potential impact. If adopted, this standard could revolutionize how NFTs are utilized in blockchain ecosystems, enabling more sophisticated and dynamic token interactions",
  "ERC-7498": "<article><h1>ERC-7498: NFT Redeemables</h1>\n\n<p>ERC-7498 is a proposed Ethereum Improvement Proposal (EIP) that aims to standardize the process of redeeming digital and physical goods associated with Non-Fungible Tokens (NFTs). Authored by Ryan Ghods, 0age, Adam Montgomery, and Stephan Min, this proposal extends the functionality of ERC-721 and ERC-1155 standards to enable better discovery and interaction with redeemable items tied to NFTs.</p>\n\n<p>The proposal introduces new interfaces for both on-chain and off-chain redeemables. For on-chain redeemables, it provides getters and events to facilitate the discovery of redemption campaigns and their requirements. It also includes a new minting interface that provides context to the minting contract about what was redeemed. For off-chain redeemables (physical products), the proposal introduces a <code>redemptionHash</code> and <code>signer</code> system to link on-chain redemptions with off-chain order identifiers containing product and shipping information.</p>\n\n<p>As of its creation on July 28, 2023, ERC-7498 is in Draft status. It aims to address the current challenges in discovering and interacting with redeemable NFTs",
  "ERC-7506": "<article><h1>ERC-7506: Trusted Hint Registry</h1>\n\n<p>ERC-7506, titled \"Trusted Hint Registry,\" is a proposal for a standardized system to manage on-chain metadata (hints) in Ethereum. Authored by Philipp Bolte, Dennis von der Bey, and Lauritz Leifermann, this proposal aims to enhance the verification and reliability of ecosystem claims through structured metadata management.</p>\n\n<p>The proposal introduces a framework for organizing hints within defined namespaces and lists, allowing for permissioned write access and delegation of hint management tasks. It incorporates EIP-712 signatures for secure meta transactions and offers optional ENS integration. The system is designed to emit specific events for hint modifications, facilitating easy traceability of changes.</p>\n\n<p>Currently in Draft status, ERC-7506 addresses the critical need for trust formation in decentralized ecosystems. By providing a standardized approach to metadata management, it aims to improve the integrity and trustworthiness of claims in the Ethereum ecosystem. The proposal's discussion is ongoing in the Ethereum Magicians forum, indicating active community engagement in its development.</p>\n</article>",
  "ERC-7507": "<article><h1>ERC-7507: Multi-User NFT Extension</h1>\n\n<p>EIP-7507 is a draft proposal to extend the ERC-721 NFT standard to support multiple users per token with time-limited permissions. It was authored by Ming Jiang, Zheng Han, and Fan Yang in August 2023. The proposal introduces a new \"user\" role in addition to the standard \"owner\", allowing tokens to be subscribed to by multiple users simultaneously with individual expiration times.</p>\n\n<p>The key motivation is to enable subscription-based models for NFTs representing intellectual property assets that can be licensed to multiple parties without transferring ownership. This differs from the single-user rental model of ERC-4907, making it more suitable for shareable digital assets. The proposal defines new functions for adding/removing users and checking user status and expiration.</p>\n\n<p>As a draft proposal, ERC-7507 is still under discussion and development in the Ethereum community. Its future adoption will depend on further refinement and consensus building among developers and stakeholders in the NFT ecosystem. If implemented, it could enable new use cases around fractional and time-limited NFT usage rights.</p>\n</article>",
  "ERC-7508": "<article><h1>ERC-7508: Dynamic On-Chain Token Attributes Repository</h1>\n\n<p>ERC-7508 proposes a standard for storing NFT attributes on-chain in a public repository accessible across different networks. Authored by Steven Pineda and Jan Turk, this proposal aims to enhance the utility of ERC-721 and ERC-1155 tokens by providing a standardized way to associate dynamic attributes with NFTs.</p>\n\n<p>The motivation behind ERC-7508 is to enable greater interoperability between NFT collections and provide a persistent storage solution for token attributes. By storing attributes on-chain in a common repository, this standard would allow any external smart contract to interact with and utilize these attributes, opening up new possibilities for cross-collection functionality and long-term attribute preservation.</p>\n\n<p>Currently, ERC-7508 is in Draft status as a Standards Track ERC. While it offers potential benefits for NFT ecosystems, its adoption and implementation are still being discussed within the Ethereum community. The proposal builds upon existing NFT standards and aims to address limitations in how token metadata and attributes are typically managed off-chain.</p>\n</article>",
  "ERC-7509": "<article><h1>ERC-7509: Entity Component System</h1>\n\n<p>ERC-7509, proposed by Rickey in September 2023, aims to standardize an Entity Component System (ECS) for Ethereum smart contracts. The ECS pattern, popular in game development, separates data (components) from logic (systems) to improve code reusability. This proposal defines a minimal ECS with entities as unique identifiers, components as data containers, systems as operational logic, and a world container.</p>\n\n<p>The motivation behind ERC-7509 is to provide smart contract developers with an easy-to-use framework for building modular and extensible applications. By adopting ECS, developers can more easily combine and manage multi-contract applications, eliminating unnecessary complexity while improving functional consistency with contract interaction behaviors.</p>\n\n<p>As of early 2024, ERC-7509 remains in Draft status. While it offers potential benefits for smart contract modularity and reusability, it has not yet been widely adopted or implemented. Developers interested in ECS patterns for Ethereum may want to monitor this proposal's progress, but should also consider alternative design patterns that have seen more widespread use in the ecosystem.</p></article>",
  "ERC-7510": "<article><h1>ERC-7510: Cross-Contract Hierarchical NFT</h1>\n\n<p>ERC-7510, proposed by Ming Jiang, Zheng Han, and Fan Yang in August 2023, is a draft standard that extends ERC-721 to enable hierarchical relationships between NFTs across different contracts. This proposal addresses the growing need for managing derivative NFTs, such as 3D models derived from 2D images or movie NFTs featuring multiple character NFTs.</p>\n\n<p>The proposal builds upon the concepts introduced in ERC-6150, which allows for hierarchical relationships within a single contract. However, ERC-7510 expands this functionality to cross-contract scenarios, enabling the creation of separate collections for derivative tokens. It also supports multiple parent relationships, which is particularly useful for IP licensing use cases.</p>\n\n<p>As of now, ERC-7510 remains in draft status. Its implementation would provide a standardized way to query parent tokens of an NFT and verify parent-child relationships between NFTs, potentially streamlining the management of complex NFT ecosystems. However, given its recent proposal and draft status, it has not yet been widely adopted or implemented in the Ethereum ecosystem.</p></article>",
  "ERC-7511": "<article><h1>ERC-7511: Minimal Proxy Contract with PUSH0</h1>\n\n<p>ERC-7511 proposes an optimization to the widely-used ERC-1167 Minimal Proxy Contract standard, leveraging the PUSH0 opcode introduced in Ethereum's Shanghai upgrade. Authored by 0xAA, vectorized, and 0age, this proposal aims to reduce gas costs and improve readability while maintaining the same functionality as ERC-1167.</p>\n\n<p>The key improvements include reducing the contract bytecode size by 1 byte, decreasing runtime gas costs by replacing two DUP opcodes with two PUSH0 opcodes, and enhancing code readability. These optimizations result in a 200 gas saving at deployment and a 5 gas saving at runtime compared to the original ERC-1167 implementation.</p>\n\n<p>Currently in Draft status, ERC-7511 builds upon several previous proposals including EIP-7 (DELEGATECALL), EIP-211 (New opcodes: RETURNDATASIZE and RETURNDATACOPY), ERC-1167 (Minimal Proxy Contract), and EIP-3855 (PUSH0 instruction). If implemented, this proposal would offer a more efficient standard for deploying proxy contracts in Ethereum, potentially benefiting numerous projects that rely",
  "ERC-7512": "<article><h1>ERC-7512: Onchain Representation for Audits</h1>\n\n<p>ERC-7512 is a proposal to standardize an on-chain representation of smart contract audit reports. The proposal was authored by a group of prominent security researchers and developers from organizations like Safe, OtterSec, ChainSecurity, and OpenZeppelin. It aims to make audit information more accessible and machine-readable on the blockchain.</p>\n\n<p>The key motivation behind this proposal is to improve smart contract security by making audit data available on-chain in a standardized format. This would allow other contracts to easily verify and utilize audit information, potentially enabling automated compliance checks or risk assessments. Given the critical role of audits in securing important blockchain infrastructure like bridges and DeFi protocols, having a standard on-chain representation could significantly enhance overall ecosystem security.</p>\n\n<p>As of now, ERC-7512 is still in Draft status and being actively discussed in the Ethereum community. If implemented, it could become an important building block for more robust on-chain security and compliance systems. However, the proposal is still evolving and may see further refinements before potentially being adopted as a standard. Its progress will likely depend on continued input from security experts and smart contract developers across the Ethereum ecosystem.</p></article>",
  "ERC-7513": "<article><h1>ERC-7513: Smart NFT - A Component for Intent-Centric</h1>\n\n<p>ERC-7513, proposed in September 2023, introduces the concept of \"Smart NFTs\" - a fusion of smart contracts and non-fungible tokens (NFTs). This proposal aims to enhance NFT functionality by embedding executable logic directly into the token, allowing for on-chain interactions and expanding the potential use cases for NFTs beyond their traditional roles in art, gaming, and asset representation.</p>\n\n<p>The proposal was authored by a team including MJ Tseng, Clay, Jeffery.c, and Johnny.c, addressing the limitations of both standard smart contracts and traditional NFTs. While smart contracts have revolutionized blockchain functionality, they remain complex for average users. Similarly, NFTs have seen limited exploration beyond specific domains. ERC-7513 seeks to bridge this gap by creating NFTs with built-in smart contract capabilities, potentially lowering the barrier to entry for blockchain interactions and expanding NFT utility.</p>\n\n<p>As of its creation, ERC-7513 remains in Draft status, indicating it is still under discussion and development. The proposal builds upon existing standards like ERC-165 and ERC-1155, suggesting a degree of compatibility with current Ethereum infrastructure. However, as a draft, it has not yet been implemented or widely adopted. The community discussion around this",
  "ERC-7517": "<article><h1>ERC-7517: Content Consent for AI/ML Data Mining</h1>\n\n<p>ERC-7517, proposed by Bofu Chen and Tammy Yang in September 2023, addresses the growing concern of digital content being used for AI and machine learning without creator consent. This proposal extends existing NFT metadata standards like ERC-721 and ERC-1155 to include a \"dataMiningPreference\" field, allowing creators to specify how their assets can be used in AI training and data mining workflows.</p>\n\n<p>The proposal is motivated by the increasing use of digital assets in AI development, and the need for creators to have more control over their work's usage. It draws parallels to the concept of robots.txt for websites, providing a standardized way for content owners to declare their preferences for AI/ML utilization. This approach aims to respect creators' rights while also facilitating easier and safer data collection for AI developers.</p>\n\n<p>Currently, ERC-7517 is in Draft status, indicating it is still under discussion and development. The proposal has garnered attention in the Ethereum community, with ongoing discussions on the Ethereum Magicians forum. As AI and blockchain technologies continue to evolve, proposals like ERC-7517 play a crucial role in addressing the ethical and legal challenges at the intersection of these fields.</p></article>",
  "ERC-7518": "<article><h1>ERC-7518: Dynamic Compliant Interop Security Token</h1>\n\n<p>ERC-7518 proposes a security token standard extending ERC-1155 to provide a flexible framework for managing compliant real-asset security tokens. Authored by Abhinav, Prithvish Baidya, Rajat Kumar, and Prasanth Kalangi from Zoniqx, this draft EIP introduces the concept of partitions, where each tokenId represents a distinct partition with its own rights and privileges. This makes it suitable for semi-fungible asset management use cases.</p>\n\n<p>The proposal addresses the growing demand for tokenized real-world assets by including features like token locking, forced transfers for recovery, address freezing, payouts, and dynamic compliance management using off-chain vouchers. These capabilities aim to accommodate the unique requirements of security tokens that existing standards do not fully address.</p>\n\n<p>As of now, ERC-7518 remains in Draft status. Its implementation would provide a comprehensive solution for managing compliant security tokens with cross-chain interoperability. However, being a recent proposal from September 2023, it may undergo further refinement and discussion within the Ethereum community before potential adoption or implementation.</p>\n</article>",
  "ERC-7521": "<article><h1>ERC-7521: General Intents for Smart Contract Wallets</h1>\n\n<p>ERC-7521, proposed by Stephen Monn and Bikem Bengisu in September 2023, aims to create a standardized way for smart contract wallets to handle various intent structures. The proposal introduces a generalized intent specification entry point contract that can support multiple intent standards as they evolve, eliminating the need for constant wallet upgrades.</p>\n\n<p>The core concept revolves around a <code>UserIntent</code> object, which contains signed messages that can be processed by MEV searchers. These searchers combine multiple intents into an <code>IntentSolution</code>, which is then packaged into a transaction and sent through MEV channels for inclusion in a block. This approach allows for greater flexibility and future-proofing of smart contract wallets.</p>\n\n<p>As of now, ERC-7521 is in Draft status and under discussion in the Ethereum community. It builds upon the concepts introduced in ERC-4337 (Account Abstraction) and aims to further improve the user experience and functionality of smart contract wallets. If implemented, this proposal could significantly enhance the interoperability and adaptability of wallet systems in the Ethereum ecosystem.</p></article>",
  "ERC-7522": "<article><h1>ERC-7522: OIDC ZK Verifier for AA Account</h1>\n\n<p>EIP-7522 proposes an OpenID Connect (OIDC) zero-knowledge verifier compatible with ERC-4337 for Ethereum account abstraction. Authored by Shu Dong, Yudao Yan, Song Z, and Kai Chen in September 2023, this draft EIP aims to bridge smart accounts with OIDC, the widely adopted authentication protocol.</p>\n\n<p>The proposal allows users to link their ERC-4337 accounts to OIDC identities, enabling on-chain verification of user operations through an OIDC verifier. This addresses the challenge of connecting OIDC identities to smart accounts, potentially enabling more convenient authentication methods like social login for blockchain interactions.</p>\n\n<p>While still in draft status, EIP-7522 represents an important step towards improving user experience and identity management in Ethereum's account abstraction framework. Its implementation could significantly lower barriers to entry for mainstream users by leveraging familiar authentication systems. However, as a draft, further discussion and refinement may be needed before potential adoption.</p>\n\n</article>",
  "ERC-7524": "<article><h1>ERC-7524: PLUME Signature in Wallets</h1>\n\n<p>ERC-7524, titled \"PLUME Signature in Wallets,\" proposes a new signature scheme for Ethereum keypairs that enables unique anonymity and zero-knowledge voting through the use of \"nullifiers.\" This draft proposal was authored by a team including Yush G, Kobi Gurkan, Richard Liu, Vivek Bhupatiraju, and Barry Whitehat, and is currently under discussion in the Ethereum community.</p>\n\n<p>The proposal addresses a limitation in the current Ethereum ecosystem, which is based on ECDSA signatures. While deterministic ECDSA signatures exist, there is no way to verify their deterministic nature without exposing the private key, which is not feasible or secure, especially for hardware wallets. ERC-7524 aims to introduce a new algorithm that allows for verifiably deterministic signatures without compromising security or requiring significant changes to existing wallet infrastructure.</p>\n\n<p>As of now, ERC-7524 is in draft status and undergoing community review. Its implementation could potentially enable new identity applications and voting systems that require anonymous uniqueness. However, the proposal is still in its early stages, and further discussion and development are needed before it can be considered for adoption. The Ethereum community will need to carefully evaluate the technical",
  "ERC-7527": "<article><h1>ERC-7527: Token Bound Function Oracle AMM</h1>\n\n<p>ERC-7527 proposes interfaces for wrapping ERC-20 tokens or ETH into ERC-721 NFTs and unwrapping them back, using a function oracle to determine mint/burn prices based on an embedded Function Oracle Automated Market Maker (FOAMM) equation. The proposal aims to provide automated pricing and enhance liquidity for NFTs through a transparent smart contract mechanism.</p>\n\n<p>The proposal was authored by Elaine Zhang, Jerry, Amandafanny, Shouhao Wong, and 0xPoet in September 2023. It is currently in Draft status as a Standards Track ERC. The motivation behind FOAMM is to address liquidity challenges in decentralized systems, particularly for unique or less commonly traded tokens like NFTs.</p>\n\n<p>Key aspects of ERC-7527 include automated price discovery without the need for matching counterparties and liquidity enhancement through the FOAMM mechanism. As the proposal is still in Draft status, further discussion and development are likely needed before potential implementation. The current state suggests it is an active area of research in improving NFT trading mechanics on Ethereum.</p>\n\n</article>",
  "ERC-7528": "<article><h1>ERC-7528: ETH (Native Asset) Address Convention</h1>\n\n<p>ERC-7528, proposed by Joey Santoro in October 2023, aims to standardize the use of the address <code>0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee</code> as a placeholder for ETH in contexts where it's treated similarly to ERC-20 tokens. This proposal addresses the need for a consistent way to represent the native asset (ETH) alongside ERC-20 tokens in smart contracts, events, and other blockchain interactions.</p>\n\n<p>The motivation behind this ERC stems from the fact that ETH, while not an ERC-20 token itself, often needs to be handled similarly in various protocols and applications. Previously, developers had to use workarounds like Wrapped ETH (WETH) or implement separate logic for ETH and ERC-20 tokens. ERC-7528 simplifies this process by providing a standard convention for representing ETH with a specific address.</p>\n\n<p>As of now, ERC-7528 has been finalized and adopted by the Ethereum community. Its implementation allows for more consistent and interoperable handling of ETH alongside ERC-20 tokens in smart contracts, particularly in contexts like ERC-4626 vaults or multi-asset protocols",
  "ERC-7529": "<article><h1>ERC-7529: Contract Discovery and eTLD+1 Association</h1>\n\n<p>ERC-7529 is a proposed standard for associating smart contracts with domain names using DNS TXT records. It was authored by Todd Chapman, Charlie Sibbach, and Sean Sing in September 2023. The proposal aims to improve smart contract discoverability and authentication by leveraging existing DNS infrastructure.</p>\n\n<p>The key innovation is using DNS-over-HTTPS (DoH) to securely query TXT records containing contract addresses and verification data. This allows web applications to discover and verify contract ownership without relying on centralized registries. It helps mitigate contract spoofing and enables search engines to index contracts associated with domains.</p>\n\n<p>As of February 2024, ERC-7529 remains in Draft status. While it shows promise for enhancing contract discoverability and authentication, it has not yet been widely implemented or adopted. The proposal builds on ERC-1191 (Ethereum Address Representation) and may see further refinement before potential finalization. Its ultimate adoption will likely depend on uptake by major Ethereum wallets, dapps, and infrastructure providers.</p>\n\n</article>",
  "ERC-7531": "<article><h1>ERC-7531: Staked ERC-721 Ownership Recognition</h1>\n\n<p>EIP-7531, proposed by Francesco Sullo in October 2023, addresses a significant issue in the NFT ecosystem: recognizing ownership of staked ERC-721 tokens. This proposal is particularly relevant for early, non-lockable NFTs like CryptoPunks or Bored Ape Yacht Club (BAYC) tokens, which lose their associated benefits when staked in pools.</p>\n\n<p>The proposal introduces an interface that allows staked NFTs to be recognized by their original owners, even after transfer to a staking contract. This solves the problem of owners losing access to privileges and benefits tied to their NFTs when staked, such as exclusive events, airdrops, or social status. The EIP is designed to work alongside existing standards like ERC-165 and ERC-721.</p>\n\n<p>As of the latest update, EIP-7531 is in the Review status, indicating it is being actively discussed and refined by the Ethereum community. Its implementation could significantly enhance the utility and flexibility of NFT staking, especially for holders of valuable early NFTs that weren't designed with staking in mind.</p>\n</article>",
  "ERC-7533": "<article><h1>ERC-7533: Public Cross Port</h1>\n\n<p>ERC-7533, titled \"Public Cross Port\" (PCP), is a proposed Ethereum Improvement Proposal aimed at enhancing interoperability between EVM-compatible chains. Authored by George (@JXRow) and Zisu (@lazy1523), this draft proposal was introduced on October 11, 2023, to address the growing need for efficient cross-chain communication.</p>\n\n<p>The core innovation of ERC-7533 lies in its \"pull\" mechanism for cross-chain messaging, as opposed to the traditional \"push\" method. This approach significantly reduces the number of required cross-chain bridges and associated gas costs. For instance, in a network of 10 L2 chains, the proposal could reduce the number of necessary bridges from 90 to just 10, marking a substantial improvement in efficiency and scalability.</p>\n\n<p>Currently, ERC-7533 remains in draft status, undergoing discussion and refinement within the Ethereum community. If implemented, it could revolutionize cross-chain interactions, potentially becoming a cornerstone for future interoperability solutions in the Ethereum ecosystem. However, as with all proposals in draft stage, it may undergo further changes or face competition from alternative solutions before reaching final implementation.</p></article>",
  "ERC-7535": "<article><h1>ERC-7535: Native Asset ERC-4626 Tokenized Vault</h1>\n\n<p>ERC-7535 extends the ERC-4626 tokenized vault standard to support Ether (ETH) as the underlying asset. Proposed by Joey Santoro in October 2023, it aims to bring the benefits of standardized vaults to ETH-based assets, particularly for liquid staking tokens.</p>\n\n<p>The key innovation is maintaining the exact same interface as ERC-4626 while overriding the behavior of certain methods to handle ETH instead of ERC-20 tokens. This allows maximum compatibility with existing ERC-4626 tooling and protocols. The main changes include using wei for asset quantities, replacing ERC-20 transfers with ETH transfers, and making deposit/mint functions payable.</p>\n\n<p>As of early 2024, ERC-7535 has reached \"Final\" status, indicating it has been thoroughly reviewed and is ready for implementation. It builds on ERC-20, ERC-4626 and ERC-7528 standards. This proposal is particularly relevant for projects working on ETH staking derivatives or other ETH-based vault tokens, offering a standardized approach that can improve interoperability and integration across the Ethereum ecosystem.</p></article>",
  "ERC-7538": "<article><h1>ERC-7538: Multiplicative Tokens</h1>\n\n<p>ERC-7538, titled \"Multiplicative Tokens,\" is a proposal aimed at extending ERC-20 and ERC-1155 token standards to support fractional token values. Authored by Gavin John, this proposal introduces a 'multiplier' field to the metadata schema of these token types, allowing for more flexible representation of token balances.</p>\n\n<p>The primary motivation behind this proposal is to enable projects to create tokens with support for fractional values, built-in inflation or deflation mechanisms, and transfers in unconventional increments (e.g., 0.5 tokens). This addresses limitations in existing standards that lack native support for such functionalities.</p>\n\n<p>Currently in Draft status, ERC-7538 specifies the implementation of a 'MultiplierMetadata' interface in the ERC-1046 tokenURI of compatible tokens. This interface includes a 'multiplier' property that affects how user-facing balances are displayed. While the proposal is still under discussion, it represents a potential evolution in token standards to accommodate more diverse use cases in the cryptocurrency ecosystem.</p>\n</article>",
  "ERC-7540": "<article><h1>ERC-7540: Asynchronous ERC-4626 Tokenized Vaults</h1>\n\n<p>ERC-7540 is an extension of the ERC-4626 Tokenized Vaults standard, introducing support for asynchronous deposit and redemption flows. Proposed in October 2023 by a team including Jeroen Offerijns and Alina Sinelnikova, this improvement aims to address limitations in the original ERC-4626 standard, which was optimized for atomic transactions up to a certain limit.</p>\n\n<p>The primary motivation behind ERC-7540 is to accommodate smart contract systems that require asynchronous actions or delays when interfacing with a vault, such as real-world asset protocols or cross-chain bridges. By adding new methods for asynchronously requesting deposits or redemptions and checking their status, the proposal enables more flexible and scalable tokenized vault implementations.</p>\n\n<p>As of its creation, ERC-7540 has reached \"Final\" status, indicating it has been thoroughly reviewed and is considered ready for implementation. The proposal builds upon ERC-20, ERC-165, ERC-4626, and ERC-7575, demonstrating its integration with existing Ethereum standards. While it extends ERC-4626, implementations can choose to add asynchronous flows for deposits, redemptions",
  "ERC-7546": "<article><h1>ERC-7546: Upgradeable Clone for Scalable Contracts</h1>\n\n<p>EIP-7546, proposed by Shogo Ochiai and Kai Hiroi in October 2023, introduces a novel proxy pattern for Ethereum smart contracts that combines upgradeability, cloneability, and horizontal extensibility. This proposal aims to address longstanding challenges in creating flexible and scalable contract architectures on the Ethereum Virtual Machine (EVM).</p>\n\n<p>The proposal builds upon existing standards like ERC-2535 (Diamond Standard) and ERC-1967 (Proxy Storage Slots), introducing two key features: function-level upgradeability and factory/clone-friendly simultaneous upgradeability. These innovations allow for more granular control over contract upgrades and easier management of large-scale contract deployments.</p>\n\n<p>As of its creation, EIP-7546 remains in Draft status, indicating it is still under active discussion and development within the Ethereum community. While it shows promise in addressing important scalability and flexibility issues, its potential implementation and adoption are yet to be determined. The proposal's integration of established concepts with new ideas positions it as a significant contribution to the ongoing evolution of smart contract design patterns.</p>\n</article>",
  "ERC-7548": "<article><h1>ERC-7548: Open IP Protocol built on NFTs</h1>\n\n<p>ERC-7548, proposed in October 2023, aims to establish a protocol for creating new intellectual properties (IPs) by remixing existing IPs in a decentralized manner using NFTs. The proposal extends the ERC-721 standard, allowing users to generate new NFTs by combining multiple existing ones while recording the relationships on-chain for transparency and traceability.</p>\n\n<p>The motivation behind this proposal stems from the challenges creators face with traditional IP infrastructure, particularly in registration and licensing. By leveraging blockchain technology and NFTs, ERC-7548 seeks to streamline the process of IP creation and management in the digital age, potentially revolutionizing how content creators collaborate and monetize their work.</p>\n\n<p>As of now, ERC-7548 remains in Draft status. It was authored by a team including Combo, Saitama, CT29, and Luigi, with ongoing discussions in the Ethereum community. While the proposal shows promise in addressing IP-related issues in the digital realm, its implementation and adoption are still subject to further review and consensus within the Ethereum ecosystem.</p></article>",
  "ERC-7555": "<article><h1>ERC-7555: Single Sign-On for Account Discovery</h1>\n\n<p>ERC-7555, proposed in November 2023, aims to standardize account discovery for Ethereum, particularly for accounts that don't use the traditional secp256k1 curve. This proposal, authored by a team including Alexander Müller and Gregory Markou, addresses the growing complexity in account management resulting from advancements in account abstraction.</p>\n\n<p>The proposal's primary goal is to create a uniform method for applications to discover user accounts, including both normal and smart accounts, that may have been deployed or configured using non-standard signing keys. This standardization is crucial as it tackles the issue of account fragmentation, which has become more prevalent with the increased flexibility offered by account abstraction.</p>\n\n<p>Currently, ERC-7555 is in Draft status, indicating it's still under discussion and development. It builds upon ERC-4337 (Account Abstraction) and is being debated in the Ethereum community. If implemented, this proposal could significantly improve user experience by simplifying account management across various applications and domains, potentially streamlining the adoption of more advanced account features in the Ethereum ecosystem.</p></article>",
  "ERC-7561": "<article><h1>ERC-7561: Simple NFT, Simplified ERC-721</h1>\n\n<p>ERC-7561, proposed by Xiang, Ben77, and Mingshi S. in October 2023, aims to simplify the ERC-721 standard for non-fungible tokens (NFTs) by removing several functions, particularly those related to approvals. This proposal is designed with contract wallets and account abstraction in mind, diverging from the original ERC-721's focus on externally-owned accounts (EOAs).</p>\n\n<p>The key innovation of ERC-7561 is its minimalist approach. It removes the <code>approve</code>, <code>setApprovalForAll</code>, <code>getApproved</code>, <code>isApprovedForAll</code>, and <code>safeTransferFrom</code> functions from the ERC-721 standard. The authors argue that these functions can be handled more efficiently by smart contract wallets, allowing the NFT contract itself to remain simpler and focused solely on the <code>transferFrom</code> function.</p>\n\n<p>As of its creation, ERC-7561 is in Draft status, indicating it is still under discussion and development. The proposal has sparked debate in the Ethereum community about the trade-offs between simplicity and functionality in NFT",
  "ERC-7562": "<article><h1>ERC-7562: Account Abstraction Validation Scope Rules</h1>\n\n<p>ERC-7562, proposed in September 2023, aims to establish a set of rules for validating Account Abstraction (AA) transactions to protect nodes from potential denial-of-service attacks through unpaid computation. This proposal is crucial for the implementation of Account Abstraction, a concept that allows for more flexible and programmable user accounts on Ethereum.</p>\n\n<p>The proposal was authored by Yoav Weiss, Dror Tirosh, Alex Forshtat, and Shahaf Nacson, who are known for their work on ERC-4337 (Account Abstraction via Entry Point Contract). ERC-7562 builds upon the foundations laid by ERC-4337 and aims to complement RIP-7560 (Native Account Abstraction). It introduces specific limitations on validation EVM code to ensure that AA transactions can be processed securely and efficiently by block builders or standalone bundlers.</p>\n\n<p>As of its creation, ERC-7562 is in Draft status, indicating it is still under discussion and development. The proposal's rules are designed to strike a balance between the flexibility offered by Account Abstraction and the need to maintain network security and efficiency. If implemented, these rules would play a crucial role in enabling widespread adoption of Account Abstraction",
  "ERC-7564": "<article><h1>ERC-7564: Contract Wallet Management NFT</h1>\n\n<p>ERC-7564 was proposed in November 2023 by Xiang, Ben77, and Mingshi S. to enhance NFT management within smart contract wallets. This proposal aims to leverage the programmable features of smart contract wallets to provide more flexible and secure NFT asset management compared to traditional externally-owned accounts (EOAs).</p>\n\n<p>The proposal introduces several new functions like nftApprove, nftSetApprovalForOneAll, and nftTransfer to give users finer-grained control over NFT transactions. It builds on the growing trend of account abstraction in Ethereum, positioning itself as a potential extension or plugin for ERC-4337 compliant wallets.</p>\n\n<p>As of early 2024, ERC-7564 remains in Draft status. While it offers promising improvements for NFT management in smart contract wallets, it has not yet been widely implemented or adopted. The crypto community continues to discuss and refine the proposal through the Ethereum Magicians forum. Given the ongoing evolution of account abstraction and smart contract wallet standards, ERC-7564 may need further development or integration with other proposals before seeing widespread adoption.</p></article>",
  "ERC-7565": "<article><h1>ERC-7565: Perpetual Contract NFTs as Collateral</h1>\n\n<p>ERC-7565 proposes a novel mechanism for using NFTs representing locked financial assets as collateral in DeFi lending. Authored by researchers from the Korea Electronics Technology Institute in late 2023, this draft proposal aims to increase liquidity and composability in decentralized finance.</p>\n\n<p>The core idea is to tokenize locked deposits or assets as NFTs, which can then be used as collateral to borrow funds. These NFTs represent a claim on the underlying assets plus any accrued benefits after a maturity period. This enables asset owners to access liquidity from their locked positions while maintaining exposure to potential upside.</p>\n\n<p>As a draft proposal, ERC-7565 is still under discussion in the Ethereum community. While it builds on established standards like ERC-721 for NFTs, the concept of using tokenized locked assets as collateral is relatively new in DeFi. Further development and security analysis would likely be needed before wide adoption. However, it represents an interesting direction for expanding DeFi's capabilities around locked assets and collateralization.</p>\n\n</article>",
  "ERC-7566": "<article><h1>ERC-7566: Multiplayer Game Communication</h1>\n\n<p>ERC-7566 proposes a standard interface for on-chain multiplayer game communication. Authored by Rickey in November 2023, this draft ERC aims to enable fair and transparent multiplayer gaming experiences on Ethereum by moving game logic and player interactions fully on-chain.</p>\n\n<p>The proposal introduces concepts like \"rooms\" for matchmaking and grouping players, and \"messages\" for processing actions between players within a smart contract. This approach aims to prevent centralized servers from unfairly influencing gameplay, ensuring verifiable fairness through on-chain transactions.</p>\n\n<p>Currently in draft status, ERC-7566 is still under discussion in the Ethereum community. If implemented, it could enable developers to create decentralized multiplayer games with increased transparency and reduced potential for cheating or manipulation compared to traditional centralized gaming architectures. However, as a recent proposal, it may need further refinement and community consensus before potential adoption.</p>\n</article>",
  "ERC-7572": "<article><h1>ERC-7572: Contract-level Metadata via contractURI()</h1>\n\n<p>ERC-7572 is a draft Ethereum Improvement Proposal that standardizes the use of a <code>contractURI()</code> function to provide contract-level metadata. This proposal was authored by Devin Finzer, Alex Atallah, and Ryan Ghods, key figures in the NFT space, particularly associated with OpenSea. The proposal aims to formalize a practice that has been widely adopted by dapps for years without an official standard.</p>\n\n<p>The primary purpose of ERC-7572 is to enable smart contracts to expose rich metadata about themselves, including name, description, and image, without requiring manual specification for each dapp or off-chain indexer. This standardization allows for a more consistent and efficient way to retrieve contract-level information across different platforms and applications in the Ethereum ecosystem.</p>\n\n<p>As of its creation on December 6, 2023, ERC-7572 is in Draft status. The proposal introduces a simple interface that includes the <code>contractURI()</code> function and a <code>ContractURIUpdated()</code> event. This event is particularly useful for signaling when the metadata has been updated, allowing dapps and indexers to refresh their cached information. The proposal's current",
  "ERC-7573": "<article><h1>ERC-7573: Conditional-upon-Transfer-Decryption for DvP</h1>\n\n<p>ERC-7573, proposed by Christian Fries and Peter Kohl-Landgraf in December 2023, introduces a protocol for secure Delivery-versus-Payment (DvP) across two blockchains. The proposal aims to facilitate trustless asset exchanges without intermediaries, leveraging a \"decryption oracle\" on one chain to enable secure interactions.</p>\n\n<p>The core of ERC-7573 involves two smart contracts: an <code>ILockingContract</code> on the asset chain and an <code>IDecryptionContract</code> on the payment chain. The locking contract secures an asset until a specific key is presented, while the decryption contract manages the payment and key revelation process. This mechanism ensures that asset transfer and payment occur atomically, mitigating counterparty risk in cross-chain transactions.</p>\n\n<p>Currently in Draft status, ERC-7573 represents an innovative approach to cross-chain DvP. Its implementation could significantly enhance the security and efficiency of inter-blockchain asset exchanges, potentially revolutionizing decentralized finance operations. However, as a recent proposal, it requires further discussion and refinement within the Ethereum community before potential adoption.</p></article>",
  "ERC-7575": "<article><h1>ERC-7575: Multi-Asset ERC-4626 Vaults</h1>\n\n<p>ERC-7575 is a proposed extension to ERC-4626, the tokenized vault standard. It was created in December 2023 by a team including Jeroen Offerijns, Alina Sinelnikova, and others to enable multi-asset vaults and address limitations of the original ERC-4626 standard.</p>\n\n<p>The key innovation of ERC-7575 is allowing vaults to support multiple assets or entry points for the same share token. This enables use cases like liquidity provider (LP) tokens that were difficult to implement under ERC-4626. It also externalizes the ERC-20 share token functionality and adds vault-to-share lookups.</p>\n\n<p>As of early 2024, ERC-7575 has reached \"Final\" status, meaning it has been thoroughly reviewed and is considered ready for implementation. However, as a relatively new proposal, it has not yet seen widespread adoption. Developers working on multi-asset vaults or extending ERC-4626 functionality should consider implementing ERC-7575, though they should also evaluate if simpler alternatives like wrapper contracts could meet their needs.</p></article>",
  "ERC-7578": "<article><h1>ERC-7578: Physical Asset Redemption</h1>\n\n<p>ERC-7578, proposed in August 2023 by Lee Vidor, David Tan, Lee Smith, and Gabriel Stoica, aims to extend ERC-721 to provide crucial information about physical assets backing NFTs. This proposal addresses the growing trend of tokenizing real-world assets by standardizing how information about the underlying physical asset, its authenticity, and redemption process is made available to NFT holders.</p>\n\n<p>The proposal introduces new functions to ERC-721 tokens, including methods to retrieve details about the physical asset, the custodian, and the legal framework governing the relationship between the NFT holder and the asset. By doing so, it aims to increase transparency and accountability in the realm of asset-backed NFTs, potentially opening up new use cases for blockchain technology in traditional asset markets.</p>\n\n<p>As of its proposal, ERC-7578 is in the Review status, indicating it is still under consideration by the Ethereum community. If implemented, this standard could significantly impact the way physical assets are represented and traded on the Ethereum blockchain, potentially bridging the gap between digital tokens and real-world assets in a more standardized and transparent manner.</p>\n</article>",
  "ERC-7579": "<article><h1>ERC-7579: Minimal Modular Smart Accounts</h1>\n\n<p>ERC-7579 is a draft proposal aimed at standardizing modular smart account interfaces and behaviors for Ethereum. Authored by a team including zeroknots, Konrad Kopp, and others, it was introduced in December 2023 to address the growing adoption of contract accounts and the need for interoperability among different implementations.</p>\n\n<p>The proposal defines minimal requirements for both smart accounts and modules. For accounts, it specifies execution, config, and fallback interfaces, as well as compliance with ERC-165 and ERC-1271. For modules, it outlines a core interface and type-specific interfaces. This standardization aims to reduce module fragmentation and vendor lock-in, which have been challenges in the evolving landscape of smart contract wallets.</p>\n\n<p>As of now, ERC-7579 remains in draft status. Its implementation could significantly impact the development and adoption of modular smart accounts, potentially fostering innovation and customizability while ensuring cross-platform compatibility. However, being a recent proposal, it's still under discussion and may undergo further refinements before potential adoption.</p>\n</article>",
  "ERC-7580": "<article><h1>ERC-7580: Advertisement Tracking Interface</h1>\n\n<p>ERC-7580, proposed by wart (@wartstone) on December 13, 2023, introduces a standard interface for advertisement tracking in Ethereum smart contracts. This proposal aims to facilitate on-chain advertising by enabling dApps to track user actions and verify proportional rewards from advertisement protocols.</p>\n\n<p>The core of ERC-7580 lies in its use of events to define regions of interest within transactions, allowing dApps to implement the interface and participate in advertisement protocols. This standard could potentially create new economic cycles on-chain, benefiting both users (through project funds) and dApps (through proportional rewards).</p>\n\n<p>Currently in Draft status, ERC-7580 is still under discussion in the Ethereum community. Its implementation could significantly impact the Web3 advertising landscape, leveraging blockchain's advantages over traditional Web2 advertising methods. However, as with all draft proposals, it may undergo further refinement or face potential challenges before reaching a final status.</p></article>",
  "ERC-7582": "<article><h1>ERC-7582: Modular Accounts with Delegated Validation</h1>\n\n<p>ERC-7582 is a proposal that aims to extend the functionality of ERC-4337 smart contract accounts by introducing a standardized method for adding plugins and composable logic. Authored by Shivanshi Tyagi and Ross Campbell, this proposal was created in December 2023 and is currently in Draft status.</p>\n\n<p>The core motivation behind ERC-7582 is to enhance the flexibility and capabilities of smart contract accounts while maintaining compatibility with existing standards like ERC-4337. It leverages the ERC-4337 Entry Point NonceManager and UserOperationEvent to enable plugin interactions and delegated validation. This approach allows for more advanced operations and greater customization of account behavior without requiring significant changes to the existing IAccount interface.</p>\n\n<p>While still in the draft stage, ERC-7582 shows promise in providing a developer-friendly and minimalist plugin system for smart contract accounts. Its focus on compatibility and extensibility makes it a potentially valuable addition to the ecosystem of account abstraction standards. However, as with all draft proposals, it will need to undergo further review and discussion before potential implementation.</p></article>",
  "ERC-7585": "<article><h1>ERC-7585: MixHash and Public Data Storage Proofs</h1>\n\n<p>ERC-7585, authored by Liu Zhicong, William Entriken, Wei Qiushi, and Si Changjun, proposes a novel approach to storage proofs on Merkle trees using a \"minimum value selection\" method. The proposal introduces MixHash, a new hashing algorithm designed to replace Keccak256 and SHA256, and outlines a system for public data storage proofs. This ERC aims to enhance the capabilities of NFT standards like ERC-721 and ERC-1155 by providing a mechanism to verify the existence of public data.</p>\n\n<p>The motivation behind ERC-7585 stems from the limitations of current NFT standards in verifying public data existence, which hinders the development of decentralized data markets, storage, and oracles. By implementing MixHash and public data storage proofs, the proposal seeks to address these limitations and open up new possibilities for blockchain-based applications.</p>\n\n<p>As of its creation on December 27, 2023, ERC-7585 is in Draft status. It requires compatibility with ERC-165, ERC-721, and ERC-1155. The proposal is currently under discussion in the Ethereum community, with ongoing debates about its potential implementation and impact on",
  "ERC-7586": "<article><h1>ERC-7586: Interest Rate Swaps</h1>\n\n<p>ERC-7586, authored by Samuel Gwlanold Edoumou, proposes a standardized framework for on-chain interest rate swaps in Ethereum. This proposal aims to bridge the gap between traditional finance and decentralized finance (DeFi) by enabling the representation and execution of interest rate swap contracts on the blockchain.</p>\n\n<p>The proposal addresses a crucial need in the DeFi ecosystem. While interest rate swaps are widely used in traditional finance for hedging against interest rate fluctuations, there has been no standardized way to implement these contracts on-chain. ERC-7586 seeks to change this by providing a consistent methodology for representing and executing these complex financial instruments within smart contracts.</p>\n\n<p>As of its creation on December 31, 2023, ERC-7586 is in the Review status, indicating that it is currently under community scrutiny and discussion. The proposal builds upon existing standards ERC-20 and ERC-165, suggesting a level of compatibility with widely adopted token standards. If implemented, this standard could significantly expand the capabilities of DeFi platforms, potentially attracting more institutional players to the Ethereum ecosystem.</p>\n</article>",
  "ERC-7588": "<article><h1>ERC-7588: Blob Transactions Metadata JSON Schema</h1>\n\n<p>ERC-7588, proposed on January 1, 2024, by Gavin Fu, Leo Wang, Bova Chen, and Aiden X, introduces a standard for attaching metadata to blobs carried by blob transactions, as defined in EIP-4844. This proposal aims to enhance the visibility and auditability of blob data by allowing the inclusion of structured metadata in JSON format within the data field of blob transactions.</p>\n\n<p>The motivation behind ERC-7588 stems from the need to provide additional context for blob transactions, which are primarily used by rollups to post Layer 2 transaction data to Ethereum's Layer 1. By standardizing metadata attachment, the proposal facilitates easier indexing and querying of blobs by third-party services, such as Portal Network and blobscan. This added functionality could significantly improve the transparency and traceability of blob data across the Ethereum ecosystem.</p>\n\n<p>As of the latest update, ERC-7588 is in the Review status, indicating that it is still under consideration by the Ethereum community. The proposal builds upon EIP-4844, which introduced blob transactions, and represents a natural evolution in the handling and organization of blob data. If implemented, ERC-7588 could become an essential tool for developers and services working",
  "ERC-7589": "<article><h1>ERC-7589: Semi-Fungible Token Roles</h1>\n\n<p>ERC-7589 is a proposed Ethereum Improvement Proposal that introduces role management for Semi-Fungible Tokens (SFTs). Authored by Ernani São Thiago and Daniel Lima, this proposal aims to extend the functionality of ERC-1155 tokens by enabling more nuanced access control and utility delegation.</p>\n\n<p>The key innovation of ERC-7589 is the ability to assign expirable roles to specific accounts, allowing them to share the utility of SFTs without transferring ownership. This addresses a limitation in ERC-1155, which focuses solely on token balances and ownership. The proposal defines roles as <code>bytes32</code> values and includes a customizable <code>_data</code> field for flexibility in implementation.</p>\n\n<p>Currently in Draft status, ERC-7589 is still under discussion in the Ethereum community. If implemented, it could significantly enhance the capabilities of SFTs in various applications, particularly in gaming and other scenarios where temporary access or permission delegation is beneficial. However, as with all draft proposals, it may undergo further refinement or potentially be superseded by alternative approaches as the discussion evolves.</p></article>",
  "ERC-7590": "<article><h1>ERC-7590: ERC-20 Holder Extension for NFTs</h1>\n\n<p>ERC-7590, proposed by Steven Pineda and Jan Turk, aims to extend ERC-721 NFT functionality to allow NFTs to receive, hold, and transfer ERC-20 tokens. This proposal addresses the growing need for interoperability between different token standards in the blockchain ecosystem. By enabling NFTs to manage fungible tokens, it opens up new possibilities for complex transactions and expanded use cases.</p>\n\n<p>The proposal introduces methods for pulling ERC-20 tokens into an NFT contract and associating them with specific NFTs, as well as allowing NFT owners to transfer these tokens out. To prevent front-running issues, a transfer out nonce is included. This enhancement could significantly impact areas such as expanded use cases for NFTs, facilitation of composite transactions, and increased market liquidity and value creation.</p>\n\n<p>As of the proposal's creation on January 5, 2024, ERC-7590 is in the Review status. This indicates that the proposal is still under consideration by the Ethereum community and has not yet been finalized or implemented. The discussion around this proposal can be found on the Ethereum Magicians forum, where further refinements and community input are being gathered before potential advancement to the next stages of the EIP process.</p>\n</",
  "ERC-7597": "<article><h1>ERC-7597: Signature Validation Extension for Permit</h1>\n\n<p>ERC-7597 is a proposed extension to ERC-2612 (Permit) to support signature validation for smart contract wallets using ERC-1271. It was authored by Yvonne Zhang and Aloysius Chan from Circle in January 2024. The proposal aims to enable gasless ERC-20 approval operations for smart contract wallets, which are currently restricted to EOA wallets under ERC-2612.</p>\n\n<p>The key change is allowing an unstructured signature bytes parameter instead of V, R, S components. This enables custom signature validation logic to be implemented by smart contract wallets. It builds on the growing popularity of smart contract wallets and increased adoption of the ERC-1271 signature validation standard.</p>\n\n<p>As of early 2024, the proposal is in Draft status and under discussion. If implemented, it would increase flexibility for signature schemes and wallet types that can use the gasless approval functionality of Permit. However, it is still early in the standardization process and not yet ready for widespread adoption.</p></article>",
  "ERC-7598": "<article><h1>ERC-7598: Contract Signature for Signed Transfer</h1>\n\n<p>ERC-7598 is a proposed improvement to extend ERC-3009 (Transfer with Authorization) to support ERC-1271 signature validation for smart contract wallets. Authored by Yvonne Zhang and Aloysius Chan from Circle, this proposal aims to enhance the flexibility and composability of authorized token transfers as smart contract wallets become more prevalent.</p>\n\n<p>The key motivation is to allow smart contract wallets to participate in the signed transfer flow enabled by ERC-3009. Currently, ERC-3009 only supports ECDSA signatures, which limits its usability for contract-based wallets. By incorporating ERC-1271 signature validation, ERC-7598 would enable a more inclusive ecosystem for different wallet types.</p>\n\n<p>As of January 2024, ERC-7598 is still in Draft status. Its implementation would provide significant benefits for smart contract wallet users and increase interoperability in the Ethereum ecosystem. However, as a draft proposal, it may still undergo revisions before potential adoption. Projects dealing with token transfers and smart contract wallets should monitor this EIP for future developments.</p></article>",
  "ERC-7604": "<article><h1>ERC-7604: ERC-1155 Permit Approvals</h1>\n\n<p>ERC-7604 proposes extending the \"permit\" approval pattern to ERC-1155 tokens, building on the successful implementations for ERC-20 and ERC-721 tokens. This improvement aims to enhance the user experience for ERC-1155 tokens by allowing approvals via signed messages rather than separate transactions.</p>\n\n<p>The proposal was authored by calvbore and emiliolanzalaco, drawing inspiration from ERC-4494 and ERC-2612. It addresses the unique structure of ERC-1155 tokens, which use both token IDs and balances, necessitating a new approach compared to single-asset token standards. The EIP requires ERC-5216 and adds three new functions to the ERC-1155 standard.</p>\n\n<p>Currently in Draft status, ERC-7604 is undergoing discussion in the Ethereum community. If implemented, it would significantly improve the approval process for ERC-1155 tokens, potentially reducing gas costs and simplifying user interactions with multi-asset token contracts. However, as with all draft proposals, it may undergo further refinement before potential adoption.</p></article>",
  "ERC-7615": "<article><h1>ERC-7615: Atomic Push-based Data Feed Among Contracts</h1>\n\n<p>ERC-7615, proposed in February 2024, aims to establish an atomic push-based mechanism for data transmission between smart contracts on the Ethereum blockchain. This proposal addresses the current reliance on off-chain data and separate data collection processes for on-chain event monitoring. The primary authors include Elaine Zhang, Jerry, Amandafanny, Shouhao Wong, Doris Che, and Henry Yuan.</p>\n\n<p>The proposal introduces two key interfaces: one for publisher contracts to push data, and another for subscriber contracts to receive data. This system allows for direct on-chain interaction between publishers and subscribers, potentially improving efficiency and reducing reliance on external data sources. When a publisher contract is called, it checks if the function corresponds to subscriber addresses and, if so, automatically pushes relevant data to the subscriber contracts.</p>\n\n<p>As of its creation, ERC-7615 is in Draft status and undergoing discussion within the Ethereum community. While it offers a novel approach to on-chain data feeds, its implementation and potential impact on the Ethereum ecosystem are still being evaluated. The proposal's success will likely depend on further refinement and community consensus regarding its utility and feasibility within the existing smart contract infrastructure.</p></article>",
  "ERC-7617": "<article><h1>ERC-7617: Chunk Support for ERC-5219 Mode in Web3 URL</h1>\n\n<p>ERC-7617 is a proposed improvement to the Ethereum ecosystem, specifically extending the functionality of the Web3 URL standard (ERC-6860) and the resolve mode introduced in ERC-6944. Authored by Qi Zhou and Nicolas Deschildre, this proposal aims to address limitations in serving large content through Ethereum RPC endpoints by introducing a chunking mechanism.</p>\n\n<p>The core of ERC-7617 is the introduction of a new HTTP header, \"web3-next-chunk\", which allows for the streaming of large resources in manageable chunks. This solves the problem of gas limits being reached when serving substantial content, enabling the delivery of arbitrarily sized data. The proposal specifies that the \"web3-next-chunk\" header should contain a Web3 URL pointing to the next data chunk, with the client looping through chunks until this header is no longer present.</p>\n\n<p>As of its creation on February 8, 2024, ERC-7617 remains in Draft status. It builds upon and requires previous standards ERC-5219 and ERC-6944, demonstrating the iterative nature of Ethereum's improvement process. While the proposal offers a valuable solution to content size limitations, its implementation would depen",
  "ERC-7618": "<article><h1>ERC-7618: Content Encoding in ERC-5219 Mode Web3 URL</h1>\n\n<p>ERC-7618, proposed by Qi Zhou and Nicolas Deschildre, aims to enhance the ERC-5219 resolve mode for the web3:// standard by introducing content encoding capabilities. This proposal addresses the need for efficient storage and retrieval of compressed assets on the blockchain, a crucial consideration given the high costs associated with on-chain storage.</p>\n\n<p>The proposal builds upon ERC-6944's resolve mode, specifying that if a Content-Encoding header is returned by the request() call, the returned data should be decoded according to the specified algorithm before being served to the client. This approach allows for compressed storage on-chain while ensuring compatibility with HTTP clients that may not support certain compression algorithms.</p>\n\n<p>Currently in Draft status, ERC-7618 represents an important step towards optimizing blockchain storage and data transfer in the context of web3 URLs. By enabling efficient compression without compromising client compatibility, this proposal could significantly improve the performance and cost-effectiveness of decentralized applications that rely on on-chain resource storage and retrieval.</p>\n</article>",
  "ERC-7621": "<article><h1>ERC-7621: Basket Token Standard</h1>\n\n<p>ERC-7621, also known as the Basket Token Standard (BTS), is a proposed Ethereum improvement that aims to standardize the implementation of multi-asset tokenized funds. Introduced in February 2024 by a team from Alvara Protocol, including Dominic Ryder, Callum Mitchell-Clark, Joey van Etten, and Michael Ryder, this standard is currently in draft status.</p>\n\n<p>The BTS allows for the creation of non-fungible tokens representing baskets of ERC-20 tokens with adjustable weights and reserves. It introduces a system where fund deployers receive both a BTS token (representing ownership) and liquidity provider (LP) tokens (representing their share of the fund). As contributors add or withdraw funds, LP tokens are minted or burned accordingly, maintaining an accurate representation of each participant's stake in the basket.</p>\n\n<p>While still in its early stages, ERC-7621 has the potential to significantly impact the DeFi ecosystem by providing a standardized approach to creating and managing tokenized funds. Its implementation could streamline the process of creating diversified token portfolios and enable more sophisticated fund management strategies on the Ethereum blockchain. However, as a draft proposal, it will need to undergo further review and potential modifications before being considered for implementation.</p>",
  "ERC-7627": "<article><h1>ERC-7627: Secure Messaging Protocol</h1>\n\n<p>ERC-7627, authored by Chen Liaoyuan, proposes a standardized interface for implementing secure, end-to-end encrypted messaging systems on Ethereum and compatible blockchains. This draft proposal, created in February 2024, aims to leverage the capabilities of Layer 2 chains and account abstraction to enable real-time, decentralized communication protocols.</p>\n\n<p>The proposal specifies methods for user registration, including public key and encryption algorithm selection, as well as message sending functionality. It introduces enumerations for public key algorithms and a structure for user information management, allowing for flexibility in encryption methods. This approach is designed to support the development of interoperable messaging dApps with strong privacy guarantees.</p>\n\n<p>As of its creation, ERC-7627 remains in draft status, indicating ongoing discussions and potential refinements. The proposal's implementation could significantly impact the development of on-chain communication systems, potentially fostering a new ecosystem of decentralized messaging applications. However, its adoption and potential standardization will depend on community feedback and further development.</p>\n</article>",
  "ERC-7628": "<article><h1>ERC-7628: ERC-721 Ownership Shares Extension</h1>\n\n<p>ERC-7628 is a proposed extension to the ERC-721 non-fungible token standard, introduced by Chen Liaoyuan in February 2024. The proposal aims to add ownership and profit share quantities as attributes to ERC-721 tokens, enabling fractional ownership capabilities while maintaining the unique nature of each NFT.</p>\n\n<p>The motivation behind this proposal stems from the limitations of existing standards. While ERC-1155 allows for ownership stakes, it sacrifices token uniqueness. ERC-721 preserves uniqueness but lacks built-in fractional ownership attributes. ERC-7628 seeks to bridge this gap by introducing queryable, transferable, and approvable ownership shares for ERC-721 tokens.</p>\n\n<p>As of its creation, ERC-7628 remains in Draft status. The proposal is undergoing discussion within the Ethereum community, particularly on the Ethereum Magicians forum. If implemented, this extension could significantly expand the use cases for ERC-721 tokens, especially in scenarios involving dividend distribution or rights assignment based on ownership shares.</p>\n</article>",
  "ERC-7629": "<article><h1>ERC-7629: ERC-20/ERC-721 Unified Token Interface</h1>\n\n<p>ERC-7629, proposed by 0xZeus1111 and Nvuwa, aims to create a unified interface for both ERC-20 fungible tokens and ERC-721 non-fungible tokens (NFTs). This proposal addresses the growing need for assets that combine the liquidity of ERC-20 tokens with the uniqueness of ERC-721 tokens, which has been a challenge in the existing fragmented token ecosystem.</p>\n\n<p>The proposal introduces a common set of functions applicable to both token types, allowing developers to interact seamlessly with ERC-20 and ERC-721 tokens through a single interface. This unification simplifies integration efforts for decentralized applications (DApps) and enhances overall interoperability within the Ethereum ecosystem. By enabling smooth transitions between ERC-20 and ERC-721 characteristics, the proposal aims to accommodate a wider range of blockchain applications.</p>\n\n<p>As of its creation on February 18, 2024, ERC-7629 remains in Draft status. The proposal is still under discussion in the Ethereum community, and its potential implementation depends on further review and consensus. If adopted, this unified token interface could significantly streamline token management and interaction across various Ethereum-based projects",
  "ERC-7631": "<article><h1>ERC-7631: Dual Nature Token Pair</h1>\n\n<p>ERC-7631, titled \"Dual Nature Token Pair,\" is a proposed Ethereum Improvement Proposal that aims to create a specification for interlinked ERC-20 (fungible) and ERC-721 (non-fungible) token contracts. Authored by a team including vectorized, Thomas, Quit, Michael Amadi, cygaar, and Harrison, this proposal is currently in Draft status and was created on February 21, 2024.</p>\n\n<p>The core idea behind ERC-7631 is to enable actions performed on one token contract to be automatically reflected on the other, creating a \"dual nature\" token pair. This proposal defines methods for querying the relationship between the two contracts and allows accounts to configure whether ERC-721 mints and transfers should be skipped during synchronization. One potential application of this standard is native ERC-721 fractionalization, where acquiring ERC-20 tokens could automatically trigger the issuance of proportional ERC-721 tokens.</p>\n\n<p>As of now, ERC-7631 is still in the Draft stage and undergoing discussion in the Ethereum community. Its implementation could potentially enhance the functionality and interoperability of token systems on the Ethereum blockchain, while maintaining full compliance with both ERC-20",
  "ERC-7632": "<article><h1>ERC-7632: Interfaces for Named Token</h1>\n\n<p>ERC-7632 is a draft Ethereum Improvement Proposal (EIP) that aims to extend tokens using <code>uint256 tokenId</code> to support a <code>tokenName</code> in <code>string</code> format and enable conversion between names and IDs. Proposed by Zainan Victor Zhou, this EIP is designed to enhance the display and operation of NFTs with associated names across various platforms like marketplaces, explorers, wallets, and DeFi applications.</p>\n\n<p>The proposal introduces a new interface, <code>IERC_NamedTokenCore</code>, which includes two key functions: <code>idToName</code> and <code>nameToId</code>. These functions allow for bidirectional mapping between token IDs and names. The EIP also recommends emitting a <code>newName</code> event when a new name is introduced, enhancing transparency and traceability in named token operations.</p>\n\n<p>As of its creation on February 8, 2024, ERC-7632 remains in Draft status. It builds upon the ERC-165 standard and is categorized as a Standards Track ERC. The proposal is still under discussion in the Ethereum community, and its implementation details may",
  "ERC-7634": "<article><h1>ERC-7634: Limited Transfer Count NFT</h1>\n\n<p>ERC-7634, proposed by Qin Wang, Saber Yu, and Shiping Chen in February 2024, introduces a mechanism to limit the transferability of NFTs based on a customizable \"TransferCount\" parameter. This extension to the ERC-721 standard allows NFT creators to set specific transfer limits, enabling more granular control over ownership rights and transfer restrictions.</p>\n\n<p>The proposal aims to address scenarios where limiting NFT transfers is desirable, such as maintaining the value of rare NFTs, enforcing time-based restrictions, or implementing loyalty programs. By allowing minters to programmatically set transfer limits, ERC-7634 opens up new possibilities for NFT utility and governance.</p>\n\n<p>Currently in Draft status, ERC-7634 is still under discussion within the Ethereum community. The proposal's authors argue that this standard could enhance the functionality and value proposition of NFTs across various use cases. However, as with many draft proposals, its ultimate adoption and implementation will depend on community feedback and consensus.</p></article>",
  "ERC-7638": "<article><h1>ERC-7638: Batch Calls Encoding in SCA</h1>\n\n<p>ERC-7638, titled \"Batch Calls Encoding in SCA,\" was proposed by George (@JXRow) and Zisu (@lazy1523) in February 2024. This proposal aims to optimize smart contract account (SCA) wallets by allowing multiple calls to be consolidated into a single transaction, thereby reducing gas costs and enabling atomic operations.</p>\n\n<p>The main motivation behind this proposal is to address the inefficiencies and potential security risks associated with sequential operations in Ethereum transactions. For example, in a typical 'approve' followed by 'transferFrom' scenario, an EOA wallet would require separate confirmations for each step. ERC-7638 proposes a method to encode multiple parameters into a single byte string, allowing SCA wallets to execute these operations atomically and with reduced gas costs.</p>\n\n<p>As of now, ERC-7638 is in Draft status, indicating it's still under discussion and development. The proposal has sparked interest in the Ethereum community, particularly among those focused on improving smart contract wallet functionality and efficiency. While it shows promise for gas optimization and enhanced security through atomic operations, its implementation would require careful consideration of potential impacts on existing systems and wallets.</p></article>",
  "ERC-7641": "<article><h1>ERC-7641: Intrinsic RevShare Token</h1>\n\n<p>ERC-7641 proposes an extension to the ERC-20 token standard that incorporates a revenue-sharing mechanism directly into the token's functionality. Authored by Conway, Cathie So, Xiaohang Yu, Suning Yao, and Kartin from HyperOracle, this draft proposal aims to create tokens that intrinsically represent shares in a communal revenue pool.</p>\n\n<p>The key innovation of ERC-7641 is the integration of a revenue pool and burning mechanism. Token holders can burn their tokens to redeem a proportionate share of the revenue pool, ensuring the token's value is at least equal to its share of the pool. Additionally, periodic claiming of rewards provides ongoing engagement and value for token holders. This approach aims to align token economics more closely with project success and provide tangible benefits to token holders beyond speculative value.</p>\n\n<p>As of early 2024, ERC-7641 remains in draft status. While it builds on the widely adopted ERC-20 standard, its implementation would represent a significant evolution in token design. The proposal's focus on intrinsic value and revenue sharing aligns with broader trends in the crypto space towards more sustainable and value-driven token models. However, its adoption and potential impact on the ecosystem are yet to be determine",
  "ERC-7644": "<article><h1>ERC-7644: ERC-721 Name Registry Extension</h1>\n\n<p>ERC-7644, proposed by Chen Liaoyuan in March 2024, aims to extend ERC-721 tokens with a unique naming mechanism. This proposal introduces a time-limited name registry for NFTs, allowing each token to have a distinct name with an expiration date. The extension provides functions for assigning, updating, and querying names associated with tokens, ensuring uniqueness within the NFT contract until expiration.</p>\n\n<p>The motivation behind ERC-7644 is to enhance the usability and intuitiveness of NFTs by associating human-readable names with token IDs. This extension explores the concept of a username economy within decentralized ecosystems, potentially opening new avenues for digital identity management and social interactions in blockchain-based applications.</p>\n\n<p>As of its creation, ERC-7644 is in Draft status and undergoing community discussion. While it presents an interesting approach to NFT naming, its implementation and adoption will depend on further development and consensus within the Ethereum community. The proposal builds upon the widely-adopted ERC-721 standard, potentially offering a valuable addition to the NFT ecosystem if accepted and implemented.</p></article>",
  "ERC-7649": "<article><h1>ERC-7649: Bonding Curve-embedded Liquidity for NFTs</h1>\n\n<p>ERC-7649, proposed in February 2024, introduces a novel approach to embedding liquidity into Non-Fungible Tokens (NFTs) using bonding curves. Authored by Arif Khan and Ahmad Matyana from Alethea AI, along with Basil Gorin and Vijay Bhayani, this proposal aims to enhance the functionality of ERC-721 tokens without modifying the existing standard.</p>\n\n<p>The core innovation of ERC-7649 is the concept of \"Tradable Shares\" - an embedded liquidity contract that can be attached to an ERC-721 NFT. This mechanism leverages a bonding curve approach to attract liquidity, allowing for the trading of shares based on a predetermined price formula. By introducing this standard, the authors seek to expand the creative possibilities for NFT-based projects and address the limitations of the current ERC-721 standard in terms of built-in liquidity options.</p>\n\n<p>As of its proposal, ERC-7649 remains in Draft status. Its implementation could potentially open up new avenues for NFT liquidity and trading mechanisms, but it will require further discussion and potential refinement before reaching a final decision on adoption. The proposal's success will likely depend on community",
  "ERC-7651": "<article><h1>ERC-7651: Fractionally Represented Non-Fungible Token</h1>\n\n<p>ERC-7651, proposed by Acme and Calder in March 2024, introduces a standard for fractionally represented non-fungible tokens (NFTs). This proposal aims to address the limitations of existing fractional NFT solutions by allowing NFTs to be managed and owned fractionally within a single contract, without dividing the NFT itself or requiring explicit conversion steps.</p>\n\n<p>The proposal combines elements from both ERC-721 (non-fungible tokens) and ERC-20 (fungible tokens) standards, creating a hybrid approach that enhances liquidity and accessibility of NFTs. It includes mechanisms for fractional and whole token transfers, approvals, and event emissions, providing a more seamless integration of fractional ownership in the NFT ecosystem.</p>\n\n<p>Currently in Draft status, ERC-7651 is still under discussion and development. If implemented, it could potentially revolutionize how fractional NFT ownership is managed, offering improved liquidity and flexibility compared to existing solutions. However, as it's not fully compatible with either ERC-721 or ERC-20, adoption may require significant changes to existing NFT platforms and marketplaces.</p>\n</article>",
  "ERC-7654": "<article><h1>ERC-7654: Request Method Types</h1>\n<p>ERC-7654, proposed by Rickey in March 2024, aims to standardize communication between clients and smart contracts using familiar HTTP-like request methods (POST, GET, PUT). This proposal seeks to simplify and unify contract interactions across different contracts, making it easier for developers and users to understand and implement contract functions.</p>\n\n<p>The proposal is currently in Draft status and is undergoing discussion in the Ethereum community. It introduces a flexible framework where contracts can define custom request method names, parameters, and response values, while mapping these to specific contract operations. This approach could potentially streamline contract development and improve interoperability between different smart contract systems.</p>\n\n<p>While ERC-7654 is still in its early stages, it addresses a real need in the Ethereum ecosystem for more standardized and intuitive contract interaction patterns. If adopted, it could significantly impact how developers design and users interact with smart contracts. However, as with any draft proposal, it may undergo changes or be superseded by alternative solutions as the community provides feedback and refines the concept.</p>\n</article>",
  "ERC-7656": "<article><h1>ERC-7656: Generalized Token-Linked Services</h1>\n\n<p>ERC-7656 is a proposed Ethereum Improvement Proposal (EIP) that aims to extend the functionality of ERC-6551, which introduced token-bound accounts. Authored by Francesco Sullo, this proposal seeks to create a more flexible framework for linking various types of services to non-fungible tokens (NFTs), not just smart accounts.</p>\n\n<p>The primary motivation behind ERC-7656 is to address limitations in ERC-6551, which mandates that contracts deployed through its registry must implement specific interfaces (IERC6551Account and IERC6551Execute). This restriction limits the types of services that can be linked to NFTs. ERC-7656 proposes a more generalized approach, allowing for a wider range of token-linked services while maintaining compatibility with existing standards.</p>\n\n<p>Currently, ERC-7656 is in Draft status, indicating it is still under discussion and development. The proposal builds upon several existing standards, including ERC-165, ERC-1167, ERC-5313, and ERC-6551. As of now, the Ethereum community is actively debating the merits and potential implementations of this proposal through the Ethereum Magicians forum. If adopted, ERC-7656 could significantly expand the utility",
  "ERC-7673": "<article><h1>ERC-7673: Distinguishable base256emoji Addresses</h1>\n<p>ERC-7673, proposed by William Morriss on April 1, 2024, aims to introduce base256emoji as the primary method for displaying and inputting Ethereum account addresses in user interfaces. The proposal is motivated by the difficulty users face in distinguishing between long hexadecimal strings, which has led to address spoofing attacks resulting in significant losses.</p>\n<p>The proposal suggests using a string of emojis to represent addresses, which would be more visually distinct and easier for humans to differentiate. This approach could potentially reduce the effectiveness of address spoofing attacks and improve overall user experience in cryptocurrency transactions.</p>\n<p>Currently, ERC-7673 is in Draft status, indicating it is still under discussion and development. The proposal's timing (April 1) and unconventional nature suggest it may be an April Fools' joke, but it does highlight real concerns about address readability and security in the Ethereum ecosystem.</p></article>",
  "ERC-7677": "<article><h1>ERC-7677: Paymaster Web Service Capability</h1>\n\n<p>ERC-7677 is a recent proposal (created April 2024) that aims to standardize how applications can request Ethereum wallets to interact with paymaster web services for transaction sponsorship. It builds upon ERC-4337 (account abstraction) and ERC-5792 (wallet capabilities).</p>\n\n<p>The proposal was authored by a group including Lukas Rosario, Dror Tirosh, and others from various blockchain companies. It's currently in Draft status, indicating it's still under discussion and development in the Ethereum community.</p>\n\n<p>ERC-7677 defines a new wallet capability that allows apps to specify a paymaster web service for ERC-4337 compatible wallets to communicate with. It also outlines a standardized API for these paymaster services, addressing the current lack of a unified approach for wallet-paymaster interactions. This proposal, if implemented, would significantly streamline the process of transaction sponsorship in Ethereum dapps.</p>\n</article>",
  "ERC-7679": "<article><h1>ERC-7679: UserOperation Builder for ERC-4337 Smart Accounts</h1>\n\n<p>ERC-7679 is a proposal aimed at standardizing how UserOperations are constructed for different ERC-4337 smart account implementations. Authored by a team including Derek Chiang, Garvit Khatri, and others, this proposal addresses the challenge of integrating various smart account types without relying on account-specific SDKs.</p>\n\n<p>The proposal suggests implementing on-chain methods that can format raw signature, nonce, and calldata inputs into the specific encoding required by each smart account implementation. This approach would allow DApps, wallets, and other tools to interact with smart accounts in a more uniform way, reducing vendor lock-in and potentially boosting smart account adoption.</p>\n\n<p>As of its creation in April 2024, ERC-7679 is in Draft status. It builds upon the foundation laid by ERC-4337 for account abstraction and aims to solve integration challenges that have arisen as different smart account implementations have proliferated. The proposal is still under discussion in the Ethereum community, with ongoing debate about its potential impact and implementation details.</p>\n</article>",
  "ERC-7681": "<article><h1>ERC-7681: Dual Nature Multi Token Protocol</h1>\n\n<p>ERC-7681, proposed by Sennett Lau, aims to combine the functionalities of ERC-20 fungible tokens and ERC-1155 multi-tokens into a single, unified protocol. This proposal addresses the challenge of integrating different token standards while maintaining full compliance with both ERC-20 and ERC-1155 specifications.</p>\n\n<p>The key innovation of ERC-7681 is its ability to synchronize operations between ERC-20 and ERC-1155 tokens, allowing for automatic issuance of ERC-1155 tokens proportional to ERC-20 holdings. This feature enables native fractionalization of non-fungible tokens (NFTs) within a single contract framework. Additionally, the proposal includes an opt-out mechanism for users who prefer not to receive ERC-1155 tokens during the synchronization process.</p>\n\n<p>Currently in Draft status, ERC-7681 builds upon the concepts introduced in ERC-7631 (Dual Nature Token Pair) while addressing compatibility issues related to duplicated Transfer events. As discussions continue in the Ethereum community, this proposal may evolve to better serve the needs of developers and users in the growing ecosystem of multi-token applications.</p>\n</article>",
  "ERC-7682": "<article><h1>ERC-7682: Auxiliary Funds Capability</h1>\n\n<p>ERC-7682 proposes a standardized way for cryptocurrency wallets to indicate to decentralized applications (dApps) that they have access to additional funds beyond what's visible on-chain. This proposal was authored by Lukas Rosario and Wilson Cusack in April 2023 to address limitations in how dApps interact with more advanced wallet features.</p>\n\n<p>The proposal builds upon EIP-5792, which defines a general framework for wallet capabilities. ERC-7682 specifically introduces an \"auxiliaryFunds\" capability that wallets can advertise to dApps. This allows wallets with features like Layer 2 integrations, credit lines, or cross-chain functionality to properly communicate their full financial capacity to applications.</p>\n\n<p>As of early 2023, ERC-7682 remains in draft status. Its adoption could significantly improve user experiences by preventing false negatives during balance checks, especially for users of more sophisticated wallet solutions. However, widespread implementation would require buy-in from both wallet developers and dApp creators to fully realize its benefits.</p></article>",
  "ERC-7683": "<article><h1>ERC-7683: Cross Chain Intents</h1>\n\n<p>ERC-7683, titled \"Cross Chain Intents,\" is a proposed Ethereum Improvement Proposal (EIP) that aims to standardize the interface for cross-chain trade execution systems. Authored by Mark Toda, Matt Rice, and Nick Pai, this proposal was created on April 11, 2024, and is currently in Draft status.</p>\n\n<p>The motivation behind ERC-7683 is to address the challenges faced by cross-chain intent systems in accessing sufficient liquidity and maintaining active filler networks across multiple chains. By implementing a standard API, the proposal seeks to enable interoperability between different cross-chain intents systems, allowing them to share infrastructure such as order dissemination services and filler networks. This standardization is expected to improve the end-user experience by increasing competition for fulfilling user intents, potentially leading to lower costs, shorter wait times, and reduced failure rates.</p>\n\n<p>The proposal specifies a generic <code>CrossChainOrder</code> struct and a standard <code>ISettlementContract</code> smart contract interface. As of the creation date, ERC-7683 is still in the discussion phase, with ongoing debates and refinements taking place in the Ethereum Magicians forum. The current status of \"Draft\" indicates that the proposal is still",
  "ERC-7700": "<article><h1>ERC-7700: Cross-chain Storage Router Protocol</h1>\n\n<p>ERC-7700, also known as CCIP-Store, is a proposed Ethereum standard that aims to provide a mechanism for routing storage operations from Layer 1 (L1) to external providers, such as Layer 2 (L2) networks or databases. The proposal was authored by Avneet Singh, 0xc0de4c0ffee, Nick Johnson, and Makoto Inoue, and is currently in Draft status.</p>\n\n<p>The primary motivation behind ERC-7700 is to reduce gas fees associated with storing data on Ethereum mainnet. It builds upon the success of EIP-3668 (CCIP-Read), which has been instrumental in retrieving cross-chain data for various Ethereum contracts. ERC-7700 complements EIP-3668 by providing a standardized way to write data across chains, thus completing the cross-chain data lifecycle.</p>\n\n<p>As of now, ERC-7700 is still in the discussion phase and has not been implemented. Its adoption could potentially lead to more cost-effective and scalable storage solutions for Ethereum-based applications. However, the proposal needs to undergo further review and testing before it can be considered for implementation. The Ethereum community will need to evaluate its security implications and potential impact",
  "ERC-7720": "<article><h1>ERC-7720: Deferred Token Transfer</h1>\n\n<p>ERC-7720, authored by Chen Liaoyuan, proposes a standard for deferred ERC-20 token transfers on Ethereum. This improvement proposal allows users to schedule token transfers for withdrawal at a specified future time, enabling use cases like vesting schedules, escrow services, and timed rewards. The proposal was created on June 9, 2024, and is currently in Draft status.</p>\n\n<p>The core functionality of ERC-7720 involves assigning a unique ID to each deposit transaction, which includes details such as the token address, sender, recipient, amount, unlock time, and withdrawal status. This mechanism ensures that tokens can only be transferred after the specified timestamp is reached, adding an extra layer of security and predictability to token transfers.</p>\n\n<p>As of now, ERC-7720 is still under discussion in the Ethereum community. Its implementation could significantly enhance the flexibility of token transfers, particularly for scenarios where payments are contingent upon the passage of time. However, being a relatively new proposal, it has not yet been widely adopted or superseded by other standards. The Ethereum community will need to further evaluate its potential benefits and implications before considering implementation.</p></article>",
  "ERC-7721": "<article><h1>ERC-7721: Lockable Extension for ERC-1155</h1>\n\n<p>ERC-7721, proposed by Piyush Chittara, introduces a locking mechanism for ERC-1155 tokens. This extension allows token owners to lock specific NFTs, preventing their sale or transfer while enabling various use cases. The proposal was created on May 25, 2023, and is currently in Draft status.</p>\n\n<p>The key feature of ERC-7721 is the ability for token owners to designate a \"locker\" address (either an EOA or a contract) that has exclusive rights to unlock the token. Additionally, it introduces token ID-based approvals, allowing tokens to be locked while maintaining certain approval rights. This enhancement provides greater flexibility and security for ERC-1155 token management, particularly in scenarios where temporary restriction of token transfers is desirable.</p>\n\n<p>As of now, ERC-7721 is still under discussion in the Ethereum community. Its implementation could significantly impact how ERC-1155 tokens are used in various applications, especially those requiring temporary asset locking or enhanced control over token transfers. However, being a draft proposal, it may undergo further refinement before potential adoption.</p>\n\n</article>",
  "ERC-777": "<article><h1>ERC-777: Token Standard</h1>\n\n<p>ERC-777 is an Ethereum Improvement Proposal that aims to enhance the widely-used ERC-20 token standard. Proposed in November 2017 by Jacques Dafflon, Jordi Baylina, and Thomas Shababi, ERC-777 introduces advanced features for token interactions while maintaining backward compatibility with ERC-20.</p>\n\n<p>The key innovations of ERC-777 include the use of \"operators\" to send tokens on behalf of other addresses, and \"send/receive hooks\" that give token holders more control over their assets. It leverages ERC-1820 for improved interoperability and compatibility with existing contracts. The standard also aligns token transactions more closely with Ether transfers, using a <code>send(dest, value, data)</code> function.</p>\n\n<p>Currently, ERC-777 has a \"Final\" status, indicating its completion and readiness for implementation. However, its adoption has been limited compared to ERC-20, partly due to the complexity of its features and potential security considerations. While ERC-777 offers valuable improvements, developers should carefully consider their specific use case and the broader ecosystem support before choosing to implement this standard over the more ubiquitous ERC-20.</p></article>",
  "ERC-801": "<article><h1>ERC-801: Canary Standard</h1>\n\n<p>ERC-801, proposed by ligi in December 2017, aimed to establish a standard interface for \"canary contracts\" on Ethereum. These contracts were designed to implement a digital version of warrant canaries, which are used to indirectly inform users of secret government requests for information. The proposal specified methods for checking if a canary is alive, determining when it \"died,\" and identifying the type of canary implemented.</p>\n\n<p>The motivation behind ERC-801 was to create a standardized way for applications to interact with canaries on Ethereum, enabling easier visualization, automated alarms, and integration with other contracts. The proposal outlined several types of canaries, from simple implementations to more complex versions with multiple feeders or IoT integration.</p>\n\n<p>Currently, ERC-801 is in a \"Stagnant\" status, indicating that it has not seen significant development or adoption since its proposal. While the concept of blockchain-based warrant canaries remains interesting, the cryptocurrency community has generally focused on other privacy and security solutions. As such, ERC-801 has not been widely implemented, and no notable successors or related proposals have gained traction in this specific area.</p>\n</article>",
  "ERC-820": "<article><h1>ERC-820: Pseudo-introspection Registry Contract</h1>\n\n<p>ERC-820 was proposed in January 2018 by Jordi Baylina and Jacques Dafflon as a standard for a universal registry contract where addresses could register which interfaces they support and which contracts implement those interfaces. It aimed to provide a way for contracts and accounts to declare their capabilities in a standardized way, improving interoperability.</p>\n\n<p>The proposal defined a registry contract that could be deployed at the same address on any chain, allowing for cross-chain consistency. It maintained backwards compatibility with ERC-165 while expanding functionality. ERC-820 allowed both contracts and regular accounts to register interfaces, unlike ERC-165 which was limited to contracts.</p>\n\n<p>However, ERC-820 was superseded by ERC-1820 in 2019 due to an incompatibility with Solidity 0.5 that affected the ERC-165 logic. ERC-1820 fixed this issue while remaining functionally equivalent to ERC-820 in other aspects. The Ethereum community now recommends using ERC-1820 instead of ERC-820 for interface detection and pseudo-introspection capabilities.</p>\n</article>",
  "ERC-823": "<article><h1>ERC-823: Token Exchange Standard</h1>\n\n<p>ERC-823, proposed by Kashish Khullar in January 2018, aimed to establish a standard for token contracts to provide exchange services, enabling cross-token payments within the Ethereum ecosystem. The proposal sought to allow ERC-20 token holders to exchange their tokens with other ERC-20 tokens and use the exchanged tokens for payments, while preserving the original tokens within the target contract.</p>\n\n<p>The motivation behind ERC-823 was to address the lack of built-in token exchange functionality in existing standards. It aimed to solve issues with token converters that reduced the total supply of tokens, effectively destroying the currency. Instead, ERC-823 proposed preserving exchanged tokens within the target contract, potentially increasing the market value of the latter.</p>\n\n<p>Despite its innovative approach, ERC-823 has not gained widespread adoption and is currently listed as \"Stagnant\" in the Ethereum Improvement Proposals repository. While the idea of facilitating cross-token payments remains relevant, other solutions and protocols have emerged to address similar needs in the evolving DeFi landscape.</p>\n</article>",
  "ERC-831": "<article><h1>ERC-831: URI Format for Ethereum</h1>\n\n<p>ERC-831 was proposed in January 2018 by ligi to standardize Ethereum URIs for various use cases. The goal was to enable robust cross-application signaling and allow instant invocation of the user's preferred wallet application when encountering Ethereum URIs in QR codes, web links, emails, etc.</p>\n\n<p>The proposal specifies a URI format starting with \"ethereum:\" or \"eth:\" followed by an optional prefix and payload. It builds on and aims to be backwards compatible with EIP-67 (the original Ethereum URI proposal) and EIP-681 (for payment requests). ERC-831 provides a flexible framework for different Ethereum URI use cases beyond just payments.</p>\n\n<p>While ERC-831 offered an important step towards standardizing Ethereum URIs, its current status is \"Stagnant\". This suggests adoption and further development have been limited. More recent proposals like EIP-4804 (Web3 URL to EVM Call Message Translation) have emerged to address similar goals of standardized Ethereum resource identification and interaction. Given its stagnant status, implementing ERC-831 today is likely not recommended without careful consideration of more recent alternatives and standards.</p></article>",
  "ERC-838": "<article><h1>ERC-838: ABI Specification for REVERT Reason String</h1>\n\n<p>EIP-838 was proposed in 2020 by Federico Bond and Renan Rodrigues de Souza to standardize how error conditions are encoded in smart contract ABIs. The goal was to allow high-level languages to provide syntax for declaring and throwing typed errors that could be easily reconstructed by client libraries.</p>\n\n<p>The proposal aimed to improve upon the existing REVERT opcode by allowing more structured error reporting beyond just string messages. This would provide clearer feedback to users and developers about transaction failures. It built on Solidity's implementation of string reason messages for REVERT, extending it to support typed errors.</p> \n\n<p>As of 2023, EIP-838 remains in Draft status and has not been implemented. More recent proposals like EIP-6093 for \"Custom errors\" have since addressed similar goals around improving error handling in Ethereum smart contracts. While EIP-838 helped drive discussion on this topic, newer standards have likely superseded it for implementation.</p>\n</article>",
  "ERC-875": "<article><h1>ERC-875: Simpler NFT Standard with Batching and Atomic Swaps</h1>\n\n<p>ERC-875 was proposed in February 2018 by Weiwu Zhang and James Sangalli as an improvement over existing non-fungible token (NFT) standards. The key innovations were allowing batched transfers of multiple NFTs in a single transaction and enabling native atomic swaps between users. This was intended to reduce gas costs and network congestion compared to transferring NFTs individually.</p>\n\n<p>The proposal aimed to provide a simpler alternative to standards like ERC-721, with a focus on efficiency and atomic swaps. It defined functions for basic NFT operations like checking balances and transferring tokens, as well as more advanced features like batched transfers and atomic swaps. An example implementation was deployed on the Rinkeby testnet to demonstrate the concept.</p>\n\n<p>While ERC-875 introduced some interesting ideas around batching and atomic swaps for NFTs, it did not gain widespread adoption. The proposal was ultimately withdrawn and superseded by other standards like ERC-721 and ERC-1155 which became the dominant NFT standards. However, some of the concepts around batching and efficient transfers influenced later NFT developments in the ecosystem.</p>\n\n</article>",
  "ERC-884": "<article><h1>ERC-884: DGCL Token</h1>\n\n<p>EIP-884 was proposed in February 2018 by Dave Sag to create an ERC-20 compatible token standard for representing shares of Delaware corporations on the Ethereum blockchain. This proposal aimed to take advantage of amendments to Delaware corporate law that explicitly allowed using blockchains for corporate share registries.</p>\n\n<p>The key requirements of EIP-884 were identity verification for token holders and functions to maintain a compliant stock ledger, including shareholder reporting and recording share transfers. It also required tokens to be redeemable by the issuer. This allowed for legally-compliant tokenized shares that could leverage the benefits of blockchain technology while meeting regulatory requirements.</p>\n\n<p>While EIP-884 was an innovative proposal to bridge traditional corporate shares and cryptocurrency tokens, its status is currently listed as \"Stagnant\". This likely indicates limited adoption or further development. More recent security token standards like ERC-1400 have since emerged to address regulatory compliance for tokenized securities more comprehensively. However, EIP-884 remains an important early effort to create compliant blockchain-based corporate shares.</p></article>",
  "ERC-897": "<article><h1>ERC-897: DelegateProxy</h1>\n\n<p>ERC-897, proposed by Jorge Izquierdo and Manuel Araoz in February 2018, aimed to standardize interfaces for proxy contracts used in upgradeability mechanisms and gas-saving deployments. The proposal sought to establish a common way to interact with proxy contracts, regardless of their specific implementation.</p>\n\n<p>The proposal was motivated by the increasing use of proxy patterns in Ethereum development, particularly for contract upgradeability and creating cheap clone contracts. While the authors didn't see value in standardizing a specific proxy implementation, they recognized the importance of a unified interface for interacting with proxies.</p>\n\n<p>Despite initial interest and implementations in projects like aragonOS and zeppelinOS, ERC-897 has remained in a \"Stagnant\" status. It has been largely superseded by more comprehensive proxy standards, such as ERC-1967 (Proxy Storage Slots) and ERC-1822 (Universal Upgradeable Proxy Standard), which address additional aspects of proxy patterns and have gained wider adoption in the Ethereum ecosystem.</p>\n</article>",
  "ERC-900": "<article><h1>ERC-900: Simple Staking Interface</h1>\n\n<p>ERC-900, proposed by Dean Eigenmann and Jorge Izquierdo in February 2018, aimed to establish a standard interface for staking systems in Ethereum. The proposal sought to create a common, user-friendly staking interface that could be implemented across various use cases, particularly beneficial for token-curated registries which were gaining popularity at the time.</p>\n\n<p>The proposal defined a simple Solidity interface with key functions like stake(), unstake(), and totalStaked(), along with events for Staked and Unstaked actions. It also included methods to support staking on behalf of other addresses and querying historical staking data. This standardization aimed to improve interoperability and user experience across different staking implementations.</p>\n\n<p>Despite its potential utility, ERC-900 has remained in a \"Stagnant\" status. While it provided a solid foundation for staking interfaces, the rapid evolution of DeFi and staking mechanisms in the Ethereum ecosystem may have outpaced this proposal. Today, more complex staking protocols and standards have emerged, potentially superseding the need for this simpler interface in many applications.</p></article>",
  "ERC-902": "<article><h1>ERC-902: Token Validation</h1>\n\n<p>ERC-902, proposed in February 2018 by Brooklyn Zelenka, Tom Carchrae, and Gleb Naumenko, aimed to establish a standard protocol for validating token ownership and transfers. This proposal was motivated by the need for compliance with legal constraints on tokenized assets, particularly in the realm of securities and security tokens. It sought to provide a way for regulators and compliance agencies to link off-chain compliance information to on-chain services.</p>\n\n<p>The proposal introduced a registry contract method for authorizing token transfers, covering initial token issuance, transfers between users, and token spends. This approach was designed to be more efficient than having each token maintain its own whitelist, allowing for centralized management of compliance rules across multiple token contracts. ERC-902 was built upon ERC-1066, which standardized application-level status codes for Ethereum smart contracts.</p>\n\n<p>Currently, ERC-902 is in a \"Stagnant\" status, indicating that it has not seen significant development or adoption since its proposal. While the concept of token validation remains relevant, especially in the context of regulatory compliance, the cryptocurrency ecosystem has evolved, and other standards or approaches may have emerged to address similar concerns. As such, while the proposal offered valuable insights, it may not be the most current solution for implementing",
  "ERC-918": "<article><h1>ERC-918: Mineable Token Standard</h1>\n\n<p>ERC-918, proposed in March 2018 by Jay Logelin, Infernal_toast, Michael Seiler, and Brandon Grill, introduces a standard for mineable tokens on the Ethereum blockchain. The proposal aims to create a more decentralized and fair token distribution model by implementing a Proof of Work (PoW) algorithm for token minting, similar to Bitcoin's mining process.</p>\n\n<p>The key feature of ERC-918 is the <code>mint()</code> function, which acts as a faucet for distributing tokens. Miners compete to solve PoW puzzles, and upon success, they can call the <code>mint()</code> function to receive newly minted tokens. This approach aims to reduce gas fees and control the token distribution rate while promoting decentralization by removing the need for a central authority to manage initial token allocation.</p>\n\n<p>Despite its innovative approach, ERC-918 has not gained widespread adoption and is currently in a \"Stagnant\" status. While the proposal addresses some concerns with traditional ICO models, the cryptocurrency community has largely moved towards other token distribution methods, such as liquidity mining and yield farming. However, the concepts introduced in ERC-918 continue to influence discussions around fair token launch mechanisms and decentralized distribution",
  "ERC-926": "<article><h1>ERC-926: Address Metadata Registry</h1>\n\n<p>ERC-926, proposed by Nick Johnson in March 2018, aimed to establish a standardized registry for address metadata on Ethereum. The proposal sought to create a single, extendable architecture for storing metadata associated with Ethereum addresses, addressing the proliferation of special-purpose registry contracts for various use cases.</p>\n\n<p>The proposal introduced a simple interface for setting and retrieving metadata providers for addresses. This design allowed both contracts and external accounts to supply metadata about themselves, enabling use cases such as generalized authorizations, token acceptance settings, and claims registries. ERC-926 was intended to complement other standards like ERC-777 (advanced token standard) and ERC-780 (claims registry).</p>\n\n<p>Despite its potential utility, ERC-926 has not gained widespread adoption and is currently in a \"Stagnant\" status. While the concept of a standardized metadata registry remains relevant, the Ethereum ecosystem has evolved to address metadata needs through alternative approaches, such as ERC-1056 (Lightweight Identity) and other more specialized solutions. As such, while ERC-926 is not actively implemented today, its core idea continues to influence discussions around on-chain identity and metadata management.</p></article>",
  "ERC-927": "<article><h1>ERC-927: Generalised Authorizations</h1>\n\n<p>ERC-927, proposed by Nick Johnson in March 2018, aimed to establish a generic authorization mechanism for smart contracts. This proposal sought to replace the various authorization patterns used in different standards like ERC-20 (approvals) and ERC-777 (operators) with a unified approach. The motivation was to eliminate the need for each standard to reinvent authorization systems, leading to greater interoperability across the Ethereum ecosystem.</p>\n\n<p>The proposal introduced a metadata provider interface with a single function, <code>canCall</code>, which would determine if a caller was authorized to perform a specific action on behalf of a resource owner. This design was inspired by the ds-auth library and OAuth principles, aiming to provide a flexible and extensible authorization system applicable to various use cases beyond just token transfers.</p>\n\n<p>Despite its potential benefits, ERC-927 has not gained significant traction and is currently in a \"Stagnant\" status. While the idea of a standardized authorization mechanism remains relevant, the Ethereum community has continued to develop more specific authorization patterns tailored to individual use cases. As such, while ERC-927 is not widely implemented, its core concept of generalizing authorizations continues to influence discussions around smart contract security and usability.</p></article>",
  "ERC-998": "<article><h1>ERC-998: Composable Non-Fungible Tokens</h1>\n\n<p>ERC-998, proposed by Matt Lockyer, Nick Mudge, Jordan Schalm, and others in July 2018, is a significant extension to the ERC-721 non-fungible token standard. It enables NFTs to own other NFTs and ERC-20 tokens, creating a hierarchical structure of digital assets. This proposal addresses the need for more complex token relationships and interactions within the Ethereum ecosystem.</p>\n\n<p>The ERC-998 standard introduces four types of composable tokens: top-down and bottom-up versions for both ERC-721 and ERC-20 tokens. Top-down composables can hold and transfer child tokens, while bottom-up composables can attach themselves to parent tokens. This flexibility allows for the creation of more sophisticated and interconnected digital asset systems, such as game inventories, bundled collectibles, or tokenized real-world asset portfolios.</p>\n\n<p>As of 2023, ERC-998 remains in Draft status, indicating ongoing development and discussion within the Ethereum community. While the proposal has garnered interest for its potential to enable more complex token ecosystems, it has not yet achieved widespread adoption or implementation. Developers and projects exploring hierarchical token structures may still find value in ERC-998's concepts,",
  "RIP-7212": "<article><h1>RIP-7212: Precompile for secp256r1 Curve Support</h1>\n\n<p>RIP-7212, proposed by Ulaş Erdoğan and Doğan Alpaslan, aims to introduce a precompiled contract for signature verification using the secp256r1 elliptic curve. This proposal is significant as it would enable Ethereum and other EVM-compatible chains to natively support a widely used cryptographic standard, potentially bridging the gap between blockchain technology and existing secure hardware implementations.</p>\n\n<p>The secp256r1 curve, also known as NIST P-256, is extensively used in various secure systems, including Apple's Secure Enclave, WebAuthn, and Android Keychain. By adding native support for this curve, RIP-7212 could facilitate easier integration of blockchain technology with these existing secure systems, potentially expanding the use cases for Ethereum-based applications in areas like mobile security and web authentication.</p>\n\n<p>As of the latest update, RIP-7212 has reached \"Final\" status, indicating it has been accepted and is ready for implementation. This proposal represents an important step in expanding Ethereum's cryptographic capabilities, potentially opening up new avenues for secure, blockchain-based applications that can interact seamlessly with widely deployed hardware security modules and standardized cryptographic protocols.</p>",
  "RIP-7560": "<article><h1>RIP-7560: Native Account Abstraction</h1>\n\n<p>RIP-7560 proposes a comprehensive approach to native account abstraction in Ethereum, combining elements from previous proposals EIP-2938 and ERC-4337. Authored by Vitalik Buterin, Yoav Weiss, and others, this draft proposal aims to implement account abstraction at the consensus layer, rather than relying on higher-level infrastructure.</p>\n\n<p>The proposal suggests splitting Ethereum transactions into multiple steps: validations, execution, and post-transaction logic. It separates transaction validation for authorization and gas fee payment, allowing for more flexible transaction structures. This approach would enable one contract to pay gas fees for a transaction executed by another account contract, enhancing composability and user experience.</p>\n\n<p>While ERC-4337 has made significant progress as a voluntary standard, RIP-7560 seeks to address its limitations by implementing account abstraction natively. This would provide stronger guarantees, improved efficiency, and better integration with the Ethereum protocol. The proposal is currently in draft status and under discussion in the Ethereum community, with potential for significant impact on the future of smart contract wallets and transaction processing in Ethereum.</p>\n</article>",
  "RIP-7696": "<article><h1>RIP-7696: Precompile for Generic DSM (Double Scalar Multiplication)</h1>\n\n<p>RIP-7696, proposed by Renaud Dubois, aims to introduce two precompiled contracts for performing double scalar multiplication (DSM) over any elliptic curve. This improvement proposal is currently in draft status and is part of Ethereum's core development efforts.</p>\n\n<p>The primary purpose of RIP-7696 is to enable efficient computation of uP+vQ on any given Weierstrass curve, where u and v are scalars, and P and Q are points on the curve. This functionality is crucial for various cryptographic operations, including signature verification and advanced cryptographic protocols. The proposal includes two variants: a basic precompile and an optimized version that utilizes additional precomputed data for improved performance.</p>\n\n<p>While still in the discussion phase, RIP-7696 has the potential to significantly enhance Ethereum's cryptographic capabilities. It builds upon the groundwork laid by proposals like RIP-7212 (which focused on P256 curve operations) and aims to provide a more flexible solution for supporting diverse elliptic curves. This proposal could be particularly valuable for implementing account abstraction, supporting alternative signature schemes like Schnorr signatures, and facilitating cross-chain interactions. However, as it is still in draft status, further community",
  "RIP-7711": "<article><h1>RIP-7711: An RIP-7560 transactions bundle transaction type</h1>\n\n<p>RIP-7711 proposes a new transaction type to bundle multiple Account Abstraction (AA) transactions defined in RIP-7560. The primary purpose is to improve block building efficiency and mitigate potential denial-of-service attacks on public blockchain networks that use a mempool.</p>\n\n<p>Authored by Vitalik Buterin, Yoav Weiss, and others, this proposal builds upon RIP-7560's account abstraction framework. It aims to isolate transaction validation from execution for a set of AA transactions, allowing block builders to more easily fill block space with these transactions while preventing potential attacks.</p>\n\n<p>Currently in Draft status, RIP-7711 is particularly relevant for public blockchain networks with traditional mempools. It offers no significant benefits for \"single sequencer\" Layer 2 chains without public mempools. The proposal's implementation would enhance the security and efficiency of networks adopting account abstraction, though its final acceptance and integration timeline remain to be determined.</p></article>",
  "RIP-7712": "<article><h1>RIP-7712: Two-Dimensional Nonce for Smart Contract Accounts</h1>\n\n<p>RIP-7712 proposes a modification to the RIP-7560 transaction format, introducing a two-dimensional nonce system for Smart Contract Accounts. Authored by Vitalik Buterin, Yoav Weiss, Alex Forshtat, Dror Tirosh, and Shahaf Nacson, this proposal aims to provide greater flexibility in transaction sequencing for smart contracts.</p>\n\n<p>The motivation behind RIP-7712 is to address limitations of the traditional nonce-based system, which restricts smart contracts' ability to express complex transaction ordering intentions. By replacing the existing mechanism with an on-chain pre-deployed contract, the proposal enables use cases such as allowing multiple participants to operate a single Smart Contract Account simultaneously without coordination overhead.</p>\n\n<p>Currently in Draft status, RIP-7712 builds upon RIP-7560 (Account Abstraction) and represents an important step towards more flexible and powerful smart contract capabilities in Ethereum. If implemented, it would significantly enhance the functionality of Smart Contract Accounts, potentially enabling new patterns of decentralized application design and user interaction.</p>\n</article>"
}
